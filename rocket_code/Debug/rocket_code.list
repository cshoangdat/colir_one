
rocket_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eca0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  0800ee30  0800ee30  0001ee30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f954  0800f954  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f954  0800f954  0001f954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f95c  0800f95c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f95c  0800f95c  0001f95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f960  0800f960  0001f960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00002684  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20002874  20002874  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014116  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000356b  00000000  00000000  00034379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a8  00000000  00000000  000378e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f07  00000000  00000000  00038c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025120  00000000  00000000  00039b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019f85  00000000  00000000  0005ecb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfd98  00000000  00000000  00078c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006418  00000000  00000000  001489d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0014edec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ee18 	.word	0x0800ee18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800ee18 	.word	0x0800ee18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_7


void CS_Select (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CS_Select+0x14>)
 8000f8e:	f002 febd 	bl	8003d0c <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020400 	.word	0x40020400

08000f9c <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <CS_UnSelect+0x14>)
 8000fa6:	f002 feb1 	bl	8003d0c <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <CE_Enable>:


void CE_Enable (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <CE_Enable+0x14>)
 8000fbe:	f002 fea5 	bl	8003d0c <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400

08000fcc <CE_Disable>:

void CE_Disable (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <CE_Disable+0x14>)
 8000fd6:	f002 fe99 	bl	8003d0c <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001002:	f7ff ffbf 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	2202      	movs	r2, #2
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <nrf24_WriteReg+0x40>)
 8001012:	f006 f990 	bl	8007336 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001016:	f7ff ffc1 	bl	8000f9c <CS_UnSelect>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200003a8 	.word	0x200003a8

08001028 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	b2db      	uxtb	r3, r3
 800103e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001040:	f7ff ffa0 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001044:	f107 0114 	add.w	r1, r7, #20
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	2201      	movs	r2, #1
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <nrf24_WriteRegMulti+0x48>)
 800104e:	f006 f972 	bl	8007336 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	b29a      	uxth	r2, r3
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <nrf24_WriteRegMulti+0x48>)
 800105e:	f006 f96a 	bl	8007336 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001062:	f7ff ff9b 	bl	8000f9c <CS_UnSelect>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200003a8 	.word	0x200003a8

08001074 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001082:	f7ff ff7f 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001086:	1df9      	adds	r1, r7, #7
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	2201      	movs	r2, #1
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <nrf24_ReadReg+0x3c>)
 800108e:	f006 f952 	bl	8007336 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001092:	f107 010f 	add.w	r1, r7, #15
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	2201      	movs	r2, #1
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <nrf24_ReadReg+0x3c>)
 800109c:	f006 fa8e 	bl	80075bc <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010a0:	f7ff ff7c 	bl	8000f9c <CS_UnSelect>

	return data;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200003a8 	.word	0x200003a8

080010b4 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010be:	f7ff ff61 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80010c2:	1df9      	adds	r1, r7, #7
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <nrfsendCmd+0x28>)
 80010ca:	f006 f934 	bl	8007336 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010ce:	f7ff ff65 	bl	8000f9c <CS_UnSelect>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200003a8 	.word	0x200003a8

080010e0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	d104      	bne.n	80010fa <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2007      	movs	r0, #7
 80010f4:	f7ff ff76 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80010f8:	e090      	b.n	800121c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b17      	cmp	r3, #23
 80010fe:	d104      	bne.n	800110a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001100:	2111      	movs	r1, #17
 8001102:	2017      	movs	r0, #23
 8001104:	f7ff ff6e 	bl	8000fe4 <nrf24_WriteReg>
}
 8001108:	e088      	b.n	800121c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800110a:	2108      	movs	r1, #8
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ff69 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001112:	213f      	movs	r1, #63	; 0x3f
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ff65 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800111a:	2103      	movs	r1, #3
 800111c:	2002      	movs	r0, #2
 800111e:	f7ff ff61 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001122:	2103      	movs	r1, #3
 8001124:	2003      	movs	r0, #3
 8001126:	f7ff ff5d 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x00);
 800112a:	2100      	movs	r1, #0
 800112c:	2004      	movs	r0, #4
 800112e:	f7ff ff59 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001132:	2102      	movs	r1, #2
 8001134:	2005      	movs	r0, #5
 8001136:	f7ff ff55 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800113a:	210e      	movs	r1, #14
 800113c:	2006      	movs	r0, #6
 800113e:	f7ff ff51 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001142:	2100      	movs	r1, #0
 8001144:	2007      	movs	r0, #7
 8001146:	f7ff ff4d 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800114a:	2100      	movs	r1, #0
 800114c:	2008      	movs	r0, #8
 800114e:	f7ff ff49 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001152:	2100      	movs	r1, #0
 8001154:	2009      	movs	r0, #9
 8001156:	f7ff ff45 	bl	8000fe4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <nrf24_reset+0x144>)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001164:	6018      	str	r0, [r3, #0]
 8001166:	3304      	adds	r3, #4
 8001168:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2205      	movs	r2, #5
 8001170:	4619      	mov	r1, r3
 8001172:	200a      	movs	r0, #10
 8001174:	f7ff ff58 	bl	8001028 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001178:	4a2b      	ldr	r2, [pc, #172]	; (8001228 <nrf24_reset+0x148>)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001182:	6018      	str	r0, [r3, #0]
 8001184:	3304      	adds	r3, #4
 8001186:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2205      	movs	r2, #5
 800118e:	4619      	mov	r1, r3
 8001190:	200b      	movs	r0, #11
 8001192:	f7ff ff49 	bl	8001028 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001196:	21c3      	movs	r1, #195	; 0xc3
 8001198:	200c      	movs	r0, #12
 800119a:	f7ff ff23 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800119e:	21c4      	movs	r1, #196	; 0xc4
 80011a0:	200d      	movs	r0, #13
 80011a2:	f7ff ff1f 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80011a6:	21c5      	movs	r1, #197	; 0xc5
 80011a8:	200e      	movs	r0, #14
 80011aa:	f7ff ff1b 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80011ae:	21c6      	movs	r1, #198	; 0xc6
 80011b0:	200f      	movs	r0, #15
 80011b2:	f7ff ff17 	bl	8000fe4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <nrf24_reset+0x144>)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c0:	6018      	str	r0, [r3, #0]
 80011c2:	3304      	adds	r3, #4
 80011c4:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2205      	movs	r2, #5
 80011cc:	4619      	mov	r1, r3
 80011ce:	2010      	movs	r0, #16
 80011d0:	f7ff ff2a 	bl	8001028 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2011      	movs	r0, #17
 80011d8:	f7ff ff04 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2012      	movs	r0, #18
 80011e0:	f7ff ff00 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2013      	movs	r0, #19
 80011e8:	f7ff fefc 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2014      	movs	r0, #20
 80011f0:	f7ff fef8 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2015      	movs	r0, #21
 80011f8:	f7ff fef4 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2016      	movs	r0, #22
 8001200:	f7ff fef0 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff feec 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800120c:	2100      	movs	r1, #0
 800120e:	201c      	movs	r0, #28
 8001210:	f7ff fee8 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001214:	2100      	movs	r1, #0
 8001216:	201d      	movs	r0, #29
 8001218:	f7ff fee4 	bl	8000fe4 <nrf24_WriteReg>
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	0800ee30 	.word	0x0800ee30
 8001228:	0800ee38 	.word	0x0800ee38

0800122c <NRF24_Init>:




void NRF24_Init (void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001230:	f7ff fecc 	bl	8000fcc <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ff53 	bl	80010e0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800123a:	2100      	movs	r1, #0
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fed1 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001242:	2100      	movs	r1, #0
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff fecd 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800124a:	2100      	movs	r1, #0
 800124c:	2002      	movs	r0, #2
 800124e:	f7ff fec9 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001252:	2103      	movs	r1, #3
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff fec5 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800125a:	2100      	movs	r1, #0
 800125c:	2004      	movs	r0, #4
 800125e:	f7ff fec1 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001262:	2100      	movs	r1, #0
 8001264:	2005      	movs	r0, #5
 8001266:	f7ff febd 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0C);   // Power= 0db, data rate = 2Mbps
 800126a:	210c      	movs	r1, #12
 800126c:	2006      	movs	r0, #6
 800126e:	f7ff feb9 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001272:	f7ff fe9f 	bl	8000fb4 <CE_Enable>

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <NRF24_TxRxMode>:
	// Enable the chip after configuring the device
	CE_Enable();
}

void NRF24_TxRxMode (uint8_t *TxAddress, uint8_t *RxAddress, uint8_t channel)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	4613      	mov	r3, r2
 8001286:	71fb      	strb	r3, [r7, #7]
	// disable the chip before configuring the device
	CE_Disable();
 8001288:	f7ff fea0 	bl	8000fcc <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4619      	mov	r1, r3
 8001290:	2005      	movs	r0, #5
 8001292:	f7ff fea7 	bl	8000fe4 <nrf24_WriteReg>

	//TX Setup
	nrf24_WriteRegMulti(TX_ADDR, TxAddress, 5);  // Write the TX address
 8001296:	2205      	movs	r2, #5
 8001298:	68f9      	ldr	r1, [r7, #12]
 800129a:	2010      	movs	r0, #16
 800129c:	f7ff fec4 	bl	8001028 <nrf24_WriteRegMulti>

	nrf24_WriteReg (SETUP_RETR, 0x33);
 80012a0:	2133      	movs	r1, #51	; 0x33
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff fe9e 	bl	8000fe4 <nrf24_WriteReg>

	//RX Setup
	uint8_t en_rxaddr = 0x3F;
 80012a8:	233f      	movs	r3, #63	; 0x3f
 80012aa:	75fb      	strb	r3, [r7, #23]
		//en_rxaddr = en_rxaddr | (1<<1);
		nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	4619      	mov	r1, r3
 80012b0:	2002      	movs	r0, #2
 80012b2:	f7ff fe97 	bl	8000fe4 <nrf24_WriteReg>
		 * Pipe 1 ADDR = 0xAABBCCDD11
		 * Pipe 2 ADDR = 0xAABBCCDD22
		 * Pipe 3 ADDR = 0xAABBCCDD33
		 *
		 */
		nrf24_WriteRegMulti(RX_ADDR_P1, RxAddress, 5);  // Write the Pipe1 address
 80012b6:	2205      	movs	r2, #5
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	200b      	movs	r0, #11
 80012bc:	f7ff feb4 	bl	8001028 <nrf24_WriteRegMulti>
		//nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address

		nrf24_WriteReg (RX_PW_P0, 32);   // 32 bit payload size for pipe 2
 80012c0:	2120      	movs	r1, #32
 80012c2:	2011      	movs	r0, #17
 80012c4:	f7ff fe8e 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P1, 32);
 80012c8:	2120      	movs	r1, #32
 80012ca:	2012      	movs	r0, #18
 80012cc:	f7ff fe8a 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P2, 32);
 80012d0:	2120      	movs	r1, #32
 80012d2:	2013      	movs	r0, #19
 80012d4:	f7ff fe86 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P3, 32);
 80012d8:	2120      	movs	r1, #32
 80012da:	2014      	movs	r0, #20
 80012dc:	f7ff fe82 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P4, 32);
 80012e0:	2120      	movs	r1, #32
 80012e2:	2015      	movs	r0, #21
 80012e4:	f7ff fe7e 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P5, 32);
 80012e8:	2120      	movs	r1, #32
 80012ea:	2016      	movs	r0, #22
 80012ec:	f7ff fe7a 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80012f0:	f7ff fe60 	bl	8000fb4 <CE_Enable>
	flush_tx_fifo();
 80012f4:	f000 f890 	bl	8001418 <flush_tx_fifo>
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <NRF24_TxMode>:

void NRF24_TxMode (void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001306:	f7ff fe61 	bl	8000fcc <CE_Disable>

	// power up the device
	uint8_t config = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<3);   // write 1 in EN_CRC to enable CRC
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<2);   // write 1 in CRCO to set encoding scheme CRC to 2 bytes
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	71fb      	strb	r3, [r7, #7]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4619      	mov	r1, r3
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fe5a 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001330:	f7ff fe40 	bl	8000fb4 <CE_Enable>
	flush_tx_fifo();
 8001334:	f000 f870 	bl	8001418 <flush_tx_fifo>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <NRF24_RxMode>:

void NRF24_RxMode (void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001346:	f7ff fe41 	bl	8000fcc <CE_Disable>

	// power up the device in Rx mode
	uint8_t config = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<1) | (1<<0);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f043 0303 	orr.w	r3, r3, #3
 8001354:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<3);   // write 1 in EN_CRC to enable CRC
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<2);   // write 1 in CRCO to set encoding scheme CRC to 2 bytes
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	71fb      	strb	r3, [r7, #7]
	nrf24_WriteReg (CONFIG, config);
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4619      	mov	r1, r3
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fe3a 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001370:	f7ff fe20 	bl	8000fb4 <CE_Enable>
	flush_rx_fifo();
 8001374:	f000 f860 	bl	8001438 <flush_rx_fifo>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <NRF24_Transmit>:

// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	737b      	strb	r3, [r7, #13]
	// select the device
	CS_Select();
 800138c:	f7ff fdfa 	bl	8000f84 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8001390:	23a0      	movs	r3, #160	; 0xa0
 8001392:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001394:	f107 010d 	add.w	r1, r7, #13
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	2201      	movs	r2, #1
 800139c:	481d      	ldr	r0, [pc, #116]	; (8001414 <NRF24_Transmit+0x94>)
 800139e:	f005 ffca 	bl	8007336 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	2220      	movs	r2, #32
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	481a      	ldr	r0, [pc, #104]	; (8001414 <NRF24_Transmit+0x94>)
 80013ac:	f005 ffc3 	bl	8007336 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80013b0:	f7ff fdf4 	bl	8000f9c <CS_UnSelect>

	HAL_Delay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f001 fe21 	bl	8002ffc <HAL_Delay>

	uint8_t status = nrf24_ReadReg(STATUS);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f7ff fe5a 	bl	8001074 <nrf24_ReadReg>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
		if (status & (1 << 4)) {
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <NRF24_Transmit+0x64>
			status = (status | (1 << 4)); // Actually not needed because this bit is already set, but reset is done by writing 1
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	73fb      	strb	r3, [r7, #15]
			nrf24_WriteReg(STATUS, status);
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4619      	mov	r1, r3
 80013da:	2007      	movs	r0, #7
 80013dc:	f7ff fe02 	bl	8000fe4 <nrf24_WriteReg>
			flush_tx_fifo();
 80013e0:	f000 f81a 	bl	8001418 <flush_tx_fifo>
		}

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80013e4:	2017      	movs	r0, #23
 80013e6:	f7ff fe45 	bl	8001074 <nrf24_ReadReg>
 80013ea:	4603      	mov	r3, r0
 80013ec:	73bb      	strb	r3, [r7, #14]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d008      	beq.n	800140a <NRF24_Transmit+0x8a>
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d103      	bne.n	800140a <NRF24_Transmit+0x8a>
	{
		flush_tx_fifo();
 8001402:	f000 f809 	bl	8001418 <flush_tx_fifo>
		return 1;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <NRF24_Transmit+0x8c>
	}

	return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200003a8 	.word	0x200003a8

08001418 <flush_tx_fifo>:

void flush_tx_fifo() {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	uint8_t cmdtosend = FLUSH_TX;
 800141e:	23e1      	movs	r3, #225	; 0xe1
 8001420:	71fb      	strb	r3, [r7, #7]
	nrfsendCmd(cmdtosend);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe45 	bl	80010b4 <nrfsendCmd>
	// reset FIFO_STATUS
	nrf24_reset (FIFO_STATUS);
 800142a:	2017      	movs	r0, #23
 800142c:	f7ff fe58 	bl	80010e0 <nrf24_reset>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <flush_rx_fifo>:

void flush_rx_fifo() {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
	uint8_t cmdtosend = FLUSH_RX;
 800143e:	23e2      	movs	r3, #226	; 0xe2
 8001440:	71fb      	strb	r3, [r7, #7]
	nrfsendCmd(cmdtosend);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe35 	bl	80010b4 <nrfsendCmd>
	// reset FIFO_STATUS
	nrf24_reset (FIFO_STATUS);
 800144a:	2017      	movs	r0, #23
 800144c:	f7ff fe48 	bl	80010e0 <nrf24_reset>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <isDataAvailable>:
	nrfsendCmd(cmdtosend);
}


uint8_t isDataAvailable ()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	uint8_t fifo = nrf24_ReadReg(FIFO_STATUS);
 800145e:	2017      	movs	r0, #23
 8001460:	f7ff fe08 	bl	8001074 <nrf24_ReadReg>
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001468:	2007      	movs	r0, #7
 800146a:	f7ff fe03 	bl	8001074 <nrf24_ReadReg>
 800146e:	4603      	mov	r3, r0
 8001470:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fdfe 	bl	8001074 <nrf24_ReadReg>
 8001478:	4603      	mov	r3, r0
 800147a:	717b      	strb	r3, [r7, #5]

	if ((status&(1<<6)))
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <isDataAvailable+0x3a>
	{
		nrf24_WriteReg(STATUS, (1<<6)); // Clear receive fifo bit
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	2007      	movs	r0, #7
 800148a:	f7ff fdab 	bl	8000fe4 <nrf24_WriteReg>
		return 1;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <isDataAvailable+0x3c>
	}

	return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <NRF24_Receive>:

void NRF24_Receive (uint8_t *data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80014a8:	f7ff fd6c 	bl	8000f84 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80014ac:	2361      	movs	r3, #97	; 0x61
 80014ae:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80014b0:	f107 010f 	add.w	r1, r7, #15
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	2201      	movs	r2, #1
 80014b8:	480c      	ldr	r0, [pc, #48]	; (80014ec <NRF24_Receive+0x50>)
 80014ba:	f005 ff3c 	bl	8007336 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	2220      	movs	r2, #32
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4809      	ldr	r0, [pc, #36]	; (80014ec <NRF24_Receive+0x50>)
 80014c8:	f006 f878 	bl	80075bc <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 80014cc:	f7ff fd66 	bl	8000f9c <CS_UnSelect>

	HAL_Delay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 fd93 	bl	8002ffc <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80014d6:	23e2      	movs	r3, #226	; 0xe2
 80014d8:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fde9 	bl	80010b4 <nrfsendCmd>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200003a8 	.word	0x200003a8

080014f0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4619      	mov	r1, r3
 80014fe:	2007      	movs	r0, #7
 8001500:	f000 faca 	bl	8001a98 <bno055_writeData>
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4619      	mov	r1, r3
 800151a:	203d      	movs	r0, #61	; 0x3d
 800151c:	f000 fabc 	bl	8001a98 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d103      	bne.n	800152e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001526:	2013      	movs	r0, #19
 8001528:	f000 faaa 	bl	8001a80 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 800152c:	e002      	b.n	8001534 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800152e:	2007      	movs	r0, #7
 8001530:	f000 faa6 	bl	8001a80 <bno055_delay>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ffe3 	bl	800150c <bno055_setOperationMode>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800154e:	200c      	movs	r0, #12
 8001550:	f7ff ffdc 	bl	800150c <bno055_setOperationMode>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800155c:	2120      	movs	r1, #32
 800155e:	203f      	movs	r0, #63	; 0x3f
 8001560:	f000 fa9a 	bl	8001a98 <bno055_writeData>
  bno055_delay(700);
 8001564:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001568:	f000 fa8a 	bl	8001a80 <bno055_delay>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  bno055_reset();
 8001576:	f7ff ffef 	bl	8001558 <bno055_reset>

  uint8_t id = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	2201      	movs	r2, #1
 8001582:	4619      	mov	r1, r3
 8001584:	2000      	movs	r0, #0
 8001586:	f000 fb73 	bl	8001c70 <bno055_readData>
  if (id != BNO055_ID) {
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2ba0      	cmp	r3, #160	; 0xa0
 800158e:	d004      	beq.n	800159a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4619      	mov	r1, r3
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <bno055_setup+0x4c>)
 8001596:	f00b f9f3 	bl	800c980 <iprintf>
  }
  bno055_setPage(0);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff ffa8 	bl	80014f0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	203f      	movs	r0, #63	; 0x3f
 80015a4:	f000 fa78 	bl	8001a98 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80015a8:	f7ff ffc8 	bl	800153c <bno055_setOperationModeConfig>
  bno055_delay(10);
 80015ac:	200a      	movs	r0, #10
 80015ae:	f000 fa67 	bl	8001a80 <bno055_delay>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800ee40 	.word	0x0800ee40

080015c0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80015c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015c4:	b09e      	sub	sp, #120	; 0x78
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ff8e 	bl	80014f0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d108      	bne.n	80015ee <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80015dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80015e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e4:	2208      	movs	r2, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fb42 	bl	8001c70 <bno055_readData>
 80015ec:	e007      	b.n	80015fe <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80015ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80015f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f6:	2206      	movs	r2, #6
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fb39 	bl	8001c70 <bno055_readData>

  double scale = 1;
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <bno055_getVector+0x270>)
 8001604:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160c:	2b0e      	cmp	r3, #14
 800160e:	d109      	bne.n	8001624 <bno055_getVector+0x64>
    scale = magScale;
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <bno055_getVector+0x274>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff75 	bl	8000504 <__aeabi_ui2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001622:	e03e      	b.n	80016a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001628:	2b08      	cmp	r3, #8
 800162a:	d007      	beq.n	800163c <bno055_getVector+0x7c>
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001630:	2b28      	cmp	r3, #40	; 0x28
 8001632:	d003      	beq.n	800163c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001638:	2b2e      	cmp	r3, #46	; 0x2e
 800163a:	d109      	bne.n	8001650 <bno055_getVector+0x90>
    scale = accelScale;
 800163c:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <bno055_getVector+0x278>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff5f 	bl	8000504 <__aeabi_ui2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800164e:	e028      	b.n	80016a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001654:	2b14      	cmp	r3, #20
 8001656:	d109      	bne.n	800166c <bno055_getVector+0xac>
    scale = angularRateScale;
 8001658:	4b78      	ldr	r3, [pc, #480]	; (800183c <bno055_getVector+0x27c>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff51 	bl	8000504 <__aeabi_ui2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800166a:	e01a      	b.n	80016a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 800166c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001670:	2b1a      	cmp	r3, #26
 8001672:	d109      	bne.n	8001688 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001674:	4b72      	ldr	r3, [pc, #456]	; (8001840 <bno055_getVector+0x280>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff43 	bl	8000504 <__aeabi_ui2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001686:	e00c      	b.n	80016a2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168c:	2b20      	cmp	r3, #32
 800168e:	d108      	bne.n	80016a2 <bno055_getVector+0xe2>
    scale = quaScale;
 8001690:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <bno055_getVector+0x284>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff35 	bl	8000504 <__aeabi_ui2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	2220      	movs	r2, #32
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00b face 	bl	800cc4c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80016b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d150      	bne.n	800175a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80016b8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff2a 	bl	8000524 <__aeabi_i2d>
 80016d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016d4:	f7ff f8ba 	bl	800084c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80016e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff16 	bl	8000524 <__aeabi_i2d>
 80016f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016fc:	f7ff f8a6 	bl	800084c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001708:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	b21a      	sxth	r2, r3
 8001710:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001714:	b21b      	sxth	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	b21b      	sxth	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff02 	bl	8000524 <__aeabi_i2d>
 8001720:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001724:	f7ff f892 	bl	800084c <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001730:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800173c:	b21b      	sxth	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	b21b      	sxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feee 	bl	8000524 <__aeabi_i2d>
 8001748:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800174c:	f7ff f87e 	bl	800084c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001758:	e03b      	b.n	80017d2 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800175a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fed9 	bl	8000524 <__aeabi_i2d>
 8001772:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001776:	f7ff f869 	bl	800084c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001782:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fec5 	bl	8000524 <__aeabi_i2d>
 800179a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800179e:	f7ff f855 	bl	800084c <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80017aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe feb1 	bl	8000524 <__aeabi_i2d>
 80017c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017c6:	f7ff f841 	bl	800084c <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 80017d2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80017d6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80017da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017ea:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80017ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017f6:	ec49 8b14 	vmov	d4, r8, r9
 80017fa:	ec45 4b15 	vmov	d5, r4, r5
 80017fe:	ec41 0b16 	vmov	d6, r0, r1
 8001802:	ec43 2b17 	vmov	d7, r2, r3
}
 8001806:	eeb0 0a44 	vmov.f32	s0, s8
 800180a:	eef0 0a64 	vmov.f32	s1, s9
 800180e:	eeb0 1a45 	vmov.f32	s2, s10
 8001812:	eef0 1a65 	vmov.f32	s3, s11
 8001816:	eeb0 2a46 	vmov.f32	s4, s12
 800181a:	eef0 2a66 	vmov.f32	s5, s13
 800181e:	eeb0 3a47 	vmov.f32	s6, s14
 8001822:	eef0 3a67 	vmov.f32	s7, s15
 8001826:	3778      	adds	r7, #120	; 0x78
 8001828:	46bd      	mov	sp, r7
 800182a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800182e:	bf00      	nop
 8001830:	3ff00000 	.word	0x3ff00000
 8001834:	20000006 	.word	0x20000006
 8001838:	20000000 	.word	0x20000000
 800183c:	20000002 	.word	0x20000002
 8001840:	20000004 	.word	0x20000004
 8001844:	20000008 	.word	0x20000008

08001848 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800184c:	b090      	sub	sp, #64	; 0x40
 800184e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001850:	2014      	movs	r0, #20
 8001852:	f7ff feb5 	bl	80015c0 <bno055_getVector>
 8001856:	eeb0 4a40 	vmov.f32	s8, s0
 800185a:	eef0 4a60 	vmov.f32	s9, s1
 800185e:	eeb0 5a41 	vmov.f32	s10, s2
 8001862:	eef0 5a61 	vmov.f32	s11, s3
 8001866:	eeb0 6a42 	vmov.f32	s12, s4
 800186a:	eef0 6a62 	vmov.f32	s13, s5
 800186e:	eeb0 7a43 	vmov.f32	s14, s6
 8001872:	eef0 7a63 	vmov.f32	s15, s7
 8001876:	ed87 4b08 	vstr	d4, [r7, #32]
 800187a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800187e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001882:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001886:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800188a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800188e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001892:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001896:	ec49 8b14 	vmov	d4, r8, r9
 800189a:	ec45 4b15 	vmov	d5, r4, r5
 800189e:	ec41 0b16 	vmov	d6, r0, r1
 80018a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80018a6:	eeb0 0a44 	vmov.f32	s0, s8
 80018aa:	eef0 0a64 	vmov.f32	s1, s9
 80018ae:	eeb0 1a45 	vmov.f32	s2, s10
 80018b2:	eef0 1a65 	vmov.f32	s3, s11
 80018b6:	eeb0 2a46 	vmov.f32	s4, s12
 80018ba:	eef0 2a66 	vmov.f32	s5, s13
 80018be:	eeb0 3a47 	vmov.f32	s6, s14
 80018c2:	eef0 3a67 	vmov.f32	s7, s15
 80018c6:	3740      	adds	r7, #64	; 0x40
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018ce <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80018ce:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80018d6:	201a      	movs	r0, #26
 80018d8:	f7ff fe72 	bl	80015c0 <bno055_getVector>
 80018dc:	eeb0 4a40 	vmov.f32	s8, s0
 80018e0:	eef0 4a60 	vmov.f32	s9, s1
 80018e4:	eeb0 5a41 	vmov.f32	s10, s2
 80018e8:	eef0 5a61 	vmov.f32	s11, s3
 80018ec:	eeb0 6a42 	vmov.f32	s12, s4
 80018f0:	eef0 6a62 	vmov.f32	s13, s5
 80018f4:	eeb0 7a43 	vmov.f32	s14, s6
 80018f8:	eef0 7a63 	vmov.f32	s15, s7
 80018fc:	ed87 4b08 	vstr	d4, [r7, #32]
 8001900:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001904:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001908:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800190c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001910:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001914:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800191c:	ec49 8b14 	vmov	d4, r8, r9
 8001920:	ec45 4b15 	vmov	d5, r4, r5
 8001924:	ec41 0b16 	vmov	d6, r0, r1
 8001928:	ec43 2b17 	vmov	d7, r2, r3
}
 800192c:	eeb0 0a44 	vmov.f32	s0, s8
 8001930:	eef0 0a64 	vmov.f32	s1, s9
 8001934:	eeb0 1a45 	vmov.f32	s2, s10
 8001938:	eef0 1a65 	vmov.f32	s3, s11
 800193c:	eeb0 2a46 	vmov.f32	s4, s12
 8001940:	eef0 2a66 	vmov.f32	s5, s13
 8001944:	eeb0 3a47 	vmov.f32	s6, s14
 8001948:	eef0 3a67 	vmov.f32	s7, s15
 800194c:	3740      	adds	r7, #64	; 0x40
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001954 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001954:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001958:	b090      	sub	sp, #64	; 0x40
 800195a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 800195c:	2028      	movs	r0, #40	; 0x28
 800195e:	f7ff fe2f 	bl	80015c0 <bno055_getVector>
 8001962:	eeb0 4a40 	vmov.f32	s8, s0
 8001966:	eef0 4a60 	vmov.f32	s9, s1
 800196a:	eeb0 5a41 	vmov.f32	s10, s2
 800196e:	eef0 5a61 	vmov.f32	s11, s3
 8001972:	eeb0 6a42 	vmov.f32	s12, s4
 8001976:	eef0 6a62 	vmov.f32	s13, s5
 800197a:	eeb0 7a43 	vmov.f32	s14, s6
 800197e:	eef0 7a63 	vmov.f32	s15, s7
 8001982:	ed87 4b08 	vstr	d4, [r7, #32]
 8001986:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800198a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800198e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001992:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001996:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800199a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800199e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019a2:	ec49 8b14 	vmov	d4, r8, r9
 80019a6:	ec45 4b15 	vmov	d5, r4, r5
 80019aa:	ec41 0b16 	vmov	d6, r0, r1
 80019ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80019b2:	eeb0 0a44 	vmov.f32	s0, s8
 80019b6:	eef0 0a64 	vmov.f32	s1, s9
 80019ba:	eeb0 1a45 	vmov.f32	s2, s10
 80019be:	eef0 1a65 	vmov.f32	s3, s11
 80019c2:	eeb0 2a46 	vmov.f32	s4, s12
 80019c6:	eef0 2a66 	vmov.f32	s5, s13
 80019ca:	eeb0 3a47 	vmov.f32	s6, s14
 80019ce:	eef0 3a67 	vmov.f32	s7, s15
 80019d2:	3740      	adds	r7, #64	; 0x40
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080019da <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 80019da:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019de:	b090      	sub	sp, #64	; 0x40
 80019e0:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80019e2:	2020      	movs	r0, #32
 80019e4:	f7ff fdec 	bl	80015c0 <bno055_getVector>
 80019e8:	eeb0 4a40 	vmov.f32	s8, s0
 80019ec:	eef0 4a60 	vmov.f32	s9, s1
 80019f0:	eeb0 5a41 	vmov.f32	s10, s2
 80019f4:	eef0 5a61 	vmov.f32	s11, s3
 80019f8:	eeb0 6a42 	vmov.f32	s12, s4
 80019fc:	eef0 6a62 	vmov.f32	s13, s5
 8001a00:	eeb0 7a43 	vmov.f32	s14, s6
 8001a04:	eef0 7a63 	vmov.f32	s15, s7
 8001a08:	ed87 4b08 	vstr	d4, [r7, #32]
 8001a0c:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001a10:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001a14:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001a18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a1c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001a20:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a28:	ec49 8b14 	vmov	d4, r8, r9
 8001a2c:	ec45 4b15 	vmov	d5, r4, r5
 8001a30:	ec41 0b16 	vmov	d6, r0, r1
 8001a34:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a38:	eeb0 0a44 	vmov.f32	s0, s8
 8001a3c:	eef0 0a64 	vmov.f32	s1, s9
 8001a40:	eeb0 1a45 	vmov.f32	s2, s10
 8001a44:	eef0 1a65 	vmov.f32	s3, s11
 8001a48:	eeb0 2a46 	vmov.f32	s4, s12
 8001a4c:	eef0 2a66 	vmov.f32	s5, s13
 8001a50:	eeb0 3a47 	vmov.f32	s6, s14
 8001a54:	eef0 3a67 	vmov.f32	s7, s15
 8001a58:	3740      	adds	r7, #64	; 0x40
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001a60 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <bno055_assignI2C+0x1c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000020c 	.word	0x2000020c

08001a80 <bno055_delay>:

void bno055_delay(int time) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fab6 	bl	8002ffc <HAL_Delay>
#endif
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	733b      	strb	r3, [r7, #12]
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <bno055_writeData+0x184>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	f107 020c 	add.w	r2, r7, #12
 8001ab8:	230a      	movs	r3, #10
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2302      	movs	r3, #2
 8001abe:	2150      	movs	r1, #80	; 0x50
 8001ac0:	f002 fa82 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80a0 	beq.w	8001c10 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d103      	bne.n	8001ade <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001ad6:	4852      	ldr	r0, [pc, #328]	; (8001c20 <bno055_writeData+0x188>)
 8001ad8:	f00a ffb8 	bl	800ca4c <puts>
 8001adc:	e012      	b.n	8001b04 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d103      	bne.n	8001aec <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001ae4:	484f      	ldr	r0, [pc, #316]	; (8001c24 <bno055_writeData+0x18c>)
 8001ae6:	f00a ffb1 	bl	800ca4c <puts>
 8001aea:	e00b      	b.n	8001b04 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d103      	bne.n	8001afa <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001af2:	484d      	ldr	r0, [pc, #308]	; (8001c28 <bno055_writeData+0x190>)
 8001af4:	f00a ffaa 	bl	800ca4c <puts>
 8001af8:	e004      	b.n	8001b04 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	4619      	mov	r1, r3
 8001afe:	484b      	ldr	r0, [pc, #300]	; (8001c2c <bno055_writeData+0x194>)
 8001b00:	f00a ff3e 	bl	800c980 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001b04:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <bno055_writeData+0x184>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 f8c7 	bl	8004c9c <HAL_I2C_GetError>
 8001b0e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d07e      	beq.n	8001c14 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d103      	bne.n	8001b24 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001b1c:	4844      	ldr	r0, [pc, #272]	; (8001c30 <bno055_writeData+0x198>)
 8001b1e:	f00a ff95 	bl	800ca4c <puts>
 8001b22:	e021      	b.n	8001b68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d103      	bne.n	8001b32 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001b2a:	4842      	ldr	r0, [pc, #264]	; (8001c34 <bno055_writeData+0x19c>)
 8001b2c:	f00a ff8e 	bl	800ca4c <puts>
 8001b30:	e01a      	b.n	8001b68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d103      	bne.n	8001b40 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001b38:	483f      	ldr	r0, [pc, #252]	; (8001c38 <bno055_writeData+0x1a0>)
 8001b3a:	f00a ff87 	bl	800ca4c <puts>
 8001b3e:	e013      	b.n	8001b68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d103      	bne.n	8001b4e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001b46:	483d      	ldr	r0, [pc, #244]	; (8001c3c <bno055_writeData+0x1a4>)
 8001b48:	f00a ff80 	bl	800ca4c <puts>
 8001b4c:	e00c      	b.n	8001b68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d103      	bne.n	8001b5c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001b54:	483a      	ldr	r0, [pc, #232]	; (8001c40 <bno055_writeData+0x1a8>)
 8001b56:	f00a ff79 	bl	800ca4c <puts>
 8001b5a:	e005      	b.n	8001b68 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	d102      	bne.n	8001b68 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001b62:	4838      	ldr	r0, [pc, #224]	; (8001c44 <bno055_writeData+0x1ac>)
 8001b64:	f00a ff72 	bl	800ca4c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <bno055_writeData+0x184>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f887 	bl	8004c80 <HAL_I2C_GetState>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001b7c:	4832      	ldr	r0, [pc, #200]	; (8001c48 <bno055_writeData+0x1b0>)
 8001b7e:	f00a ff65 	bl	800ca4c <puts>
 8001b82:	e048      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d103      	bne.n	8001b92 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001b8a:	482f      	ldr	r0, [pc, #188]	; (8001c48 <bno055_writeData+0x1b0>)
 8001b8c:	f00a ff5e 	bl	800ca4c <puts>
 8001b90:	e041      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b24      	cmp	r3, #36	; 0x24
 8001b96:	d103      	bne.n	8001ba0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001b98:	482c      	ldr	r0, [pc, #176]	; (8001c4c <bno055_writeData+0x1b4>)
 8001b9a:	f00a ff57 	bl	800ca4c <puts>
 8001b9e:	e03a      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b21      	cmp	r3, #33	; 0x21
 8001ba4:	d103      	bne.n	8001bae <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001ba6:	482a      	ldr	r0, [pc, #168]	; (8001c50 <bno055_writeData+0x1b8>)
 8001ba8:	f00a ff50 	bl	800ca4c <puts>
 8001bac:	e033      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	2b22      	cmp	r3, #34	; 0x22
 8001bb2:	d103      	bne.n	8001bbc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001bb4:	4827      	ldr	r0, [pc, #156]	; (8001c54 <bno055_writeData+0x1bc>)
 8001bb6:	f00a ff49 	bl	800ca4c <puts>
 8001bba:	e02c      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b28      	cmp	r3, #40	; 0x28
 8001bc0:	d103      	bne.n	8001bca <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001bc2:	4825      	ldr	r0, [pc, #148]	; (8001c58 <bno055_writeData+0x1c0>)
 8001bc4:	f00a ff42 	bl	800ca4c <puts>
 8001bc8:	e025      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	2b29      	cmp	r3, #41	; 0x29
 8001bce:	d103      	bne.n	8001bd8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001bd0:	4822      	ldr	r0, [pc, #136]	; (8001c5c <bno055_writeData+0x1c4>)
 8001bd2:	f00a ff3b 	bl	800ca4c <puts>
 8001bd6:	e01e      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b2a      	cmp	r3, #42	; 0x2a
 8001bdc:	d103      	bne.n	8001be6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001bde:	4820      	ldr	r0, [pc, #128]	; (8001c60 <bno055_writeData+0x1c8>)
 8001be0:	f00a ff34 	bl	800ca4c <puts>
 8001be4:	e017      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b60      	cmp	r3, #96	; 0x60
 8001bea:	d103      	bne.n	8001bf4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001bec:	481d      	ldr	r0, [pc, #116]	; (8001c64 <bno055_writeData+0x1cc>)
 8001bee:	f00a ff2d 	bl	800ca4c <puts>
 8001bf2:	e010      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8001bf8:	d103      	bne.n	8001c02 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001bfa:	481b      	ldr	r0, [pc, #108]	; (8001c68 <bno055_writeData+0x1d0>)
 8001bfc:	f00a ff26 	bl	800ca4c <puts>
 8001c00:	e009      	b.n	8001c16 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2be0      	cmp	r3, #224	; 0xe0
 8001c06:	d106      	bne.n	8001c16 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001c08:	4818      	ldr	r0, [pc, #96]	; (8001c6c <bno055_writeData+0x1d4>)
 8001c0a:	f00a ff1f 	bl	800ca4c <puts>
 8001c0e:	e002      	b.n	8001c16 <bno055_writeData+0x17e>
    return;
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <bno055_writeData+0x17e>
    return;
 8001c14:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000020c 	.word	0x2000020c
 8001c20:	0800ee7c 	.word	0x0800ee7c
 8001c24:	0800eea0 	.word	0x0800eea0
 8001c28:	0800eec8 	.word	0x0800eec8
 8001c2c:	0800eeec 	.word	0x0800eeec
 8001c30:	0800ef04 	.word	0x0800ef04
 8001c34:	0800ef18 	.word	0x0800ef18
 8001c38:	0800ef2c 	.word	0x0800ef2c
 8001c3c:	0800ef40 	.word	0x0800ef40
 8001c40:	0800ef54 	.word	0x0800ef54
 8001c44:	0800ef68 	.word	0x0800ef68
 8001c48:	0800ef80 	.word	0x0800ef80
 8001c4c:	0800ef98 	.word	0x0800ef98
 8001c50:	0800efac 	.word	0x0800efac
 8001c54:	0800efc4 	.word	0x0800efc4
 8001c58:	0800efdc 	.word	0x0800efdc
 8001c5c:	0800eff4 	.word	0x0800eff4
 8001c60:	0800f014 	.word	0x0800f014
 8001c64:	0800f034 	.word	0x0800f034
 8001c68:	0800f04c 	.word	0x0800f04c
 8001c6c:	0800f064 	.word	0x0800f064

08001c70 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <bno055_readData+0x40>)
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	1dfa      	adds	r2, r7, #7
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	2150      	movs	r1, #80	; 0x50
 8001c8e:	f002 f99b 	bl	8003fc8 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <bno055_readData+0x40>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2264      	movs	r2, #100	; 0x64
 8001c9c:	9200      	str	r2, [sp, #0]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	2150      	movs	r1, #80	; 0x50
 8001ca2:	f002 fa8f 	bl	80041c4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000020c 	.word	0x2000020c

08001cb4 <ParseReceivedCommand>:
char RW_Buffer[200];
DWORD FreeClusters;
uint32_t TotalSize, FreeSpace;

void ParseReceivedCommand(char cmd[], uint8_t payloadSize)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
	if(cmd[0] == '\0')
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d05a      	beq.n	8001d7e <ParseReceivedCommand+0xca>
		return;

	cmdSymbol = cmd[0];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <ParseReceivedCommand+0xd4>)
 8001cce:	701a      	strb	r2, [r3, #0]
	int cmdCounter = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
	int cmdParamCounter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 2; i < payloadSize; i++){
 8001cd8:	2302      	movs	r3, #2
 8001cda:	75fb      	strb	r3, [r7, #23]
 8001cdc:	e020      	b.n	8001d20 <ParseReceivedCommand+0x6c>
		if(cmd[i] == ' '){
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d105      	bne.n	8001cf6 <ParseReceivedCommand+0x42>
			cmdCounter++;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
			cmdParamCounter = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	e011      	b.n	8001d1a <ParseReceivedCommand+0x66>
		}
		else{
			cmdParams[cmdCounter][cmdParamCounter] = cmd[i];
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	7818      	ldrb	r0, [r3, #0]
 8001cfe:	4923      	ldr	r1, [pc, #140]	; (8001d8c <ParseReceivedCommand+0xd8>)
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	18ca      	adds	r2, r1, r3
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
			cmdParamCounter++;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 2; i < payloadSize; i++){
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	75fb      	strb	r3, [r7, #23]
 8001d20:	7dfa      	ldrb	r2, [r7, #23]
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d3da      	bcc.n	8001cde <ParseReceivedCommand+0x2a>
		}
	}

	if(cmdSymbol == 's'){ //format like "s {servoNumber} {servoAngle}"
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <ParseReceivedCommand+0xd4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b73      	cmp	r3, #115	; 0x73
 8001d2e:	d11a      	bne.n	8001d66 <ParseReceivedCommand+0xb2>
		int servoNumber = atoi(cmdParams[0]);
 8001d30:	4816      	ldr	r0, [pc, #88]	; (8001d8c <ParseReceivedCommand+0xd8>)
 8001d32:	f00a f86d 	bl	800be10 <atoi>
 8001d36:	60f8      	str	r0, [r7, #12]
		int servoAngle = atoi(cmdParams[1]);
 8001d38:	4815      	ldr	r0, [pc, #84]	; (8001d90 <ParseReceivedCommand+0xdc>)
 8001d3a:	f00a f869 	bl	800be10 <atoi>
 8001d3e:	60b8      	str	r0, [r7, #8]
		PCA9685_Init(&hi2c2);
 8001d40:	4814      	ldr	r0, [pc, #80]	; (8001d94 <ParseReceivedCommand+0xe0>)
 8001d42:	f000 fde1 	bl	8002908 <PCA9685_Init>
		PCA9685_SetPwmFrequency(50);
 8001d46:	2032      	movs	r0, #50	; 0x32
 8001d48:	f000 fc6a 	bl	8002620 <PCA9685_SetPwmFrequency>
		PCA9685_SetServoAngle(servoNumber, servoAngle);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	ee07 2a90 	vmov	s15, r2
 8001d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fd76 	bl	8002850 <PCA9685_SetServoAngle>
 8001d64:	e00c      	b.n	8001d80 <ParseReceivedCommand+0xcc>
	}
	else if(cmdSymbol == 'l'){ //format like "s {servoNumber} {servoAngle}"
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <ParseReceivedCommand+0xd4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b6c      	cmp	r3, #108	; 0x6c
 8001d6c:	d108      	bne.n	8001d80 <ParseReceivedCommand+0xcc>
		int lighterNumber = atoi(cmdParams[0]);
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <ParseReceivedCommand+0xd8>)
 8001d70:	f00a f84e 	bl	800be10 <atoi>
 8001d74:	6138      	str	r0, [r7, #16]
		FigherLighter(lighterNumber);
 8001d76:	6938      	ldr	r0, [r7, #16]
 8001d78:	f000 f80e 	bl	8001d98 <FigherLighter>
 8001d7c:	e000      	b.n	8001d80 <ParseReceivedCommand+0xcc>
		return;
 8001d7e:	bf00      	nop
	}
}
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000440 	.word	0x20000440
 8001d8c:	20000444 	.word	0x20000444
 8001d90:	2000044a 	.word	0x2000044a
 8001d94:	20000210 	.word	0x20000210

08001d98 <FigherLighter>:

void FigherLighter(uint8_t lighterNumber){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	uint16_t pinNumber = 0 | (1<<(6+lighterNumber));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	3306      	adds	r3, #6
 8001da6:	2201      	movs	r2, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, pinNumber, GPIO_PIN_SET);
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4619      	mov	r1, r3
 8001db4:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <FigherLighter+0x3c>)
 8001db6:	f001 ffa9 	bl	8003d0c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001dba:	200f      	movs	r0, #15
 8001dbc:	f001 f91e 	bl	8002ffc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, pinNumber, GPIO_PIN_RESET);
 8001dc0:	89fb      	ldrh	r3, [r7, #14]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <FigherLighter+0x3c>)
 8001dc8:	f001 ffa0 	bl	8003d0c <HAL_GPIO_WritePin>
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ddc:	b0ac      	sub	sp, #176	; 0xb0
 8001dde:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de0:	f001 f89a 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001de4:	f000 f9ba 	bl	800215c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de8:	f000 face 	bl	8002388 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dec:	f000 faa4 	bl	8002338 <MX_DMA_Init>
  MX_I2C2_Init();
 8001df0:	f000 fa1e 	bl	8002230 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001df4:	f000 fa6a 	bl	80022cc <MX_SPI3_Init>
  MX_SDIO_SD_Init();
 8001df8:	f000 fa48 	bl	800228c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001dfc:	f006 fd1a 	bl	8008834 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 8001e00:	f7ff fa14 	bl	800122c <NRF24_Init>
  NRF24_TxRxMode(TxAddress, RxAddress, 76);
 8001e04:	224c      	movs	r2, #76	; 0x4c
 8001e06:	49c0      	ldr	r1, [pc, #768]	; (8002108 <main+0x330>)
 8001e08:	48c0      	ldr	r0, [pc, #768]	; (800210c <main+0x334>)
 8001e0a:	f7ff fa36 	bl	800127a <NRF24_TxRxMode>
  NRF24_RxMode();
 8001e0e:	f7ff fa97 	bl	8001340 <NRF24_RxMode>

  bno055_assignI2C(&hi2c2);
 8001e12:	48bf      	ldr	r0, [pc, #764]	; (8002110 <main+0x338>)
 8001e14:	f7ff fe24 	bl	8001a60 <bno055_assignI2C>
  bno055_setup();
 8001e18:	f7ff fbaa 	bl	8001570 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001e1c:	f7ff fb95 	bl	800154a <bno055_setOperationModeNDOF>

  PCA9685_Init(&hi2c2);
 8001e20:	48bb      	ldr	r0, [pc, #748]	; (8002110 <main+0x338>)
 8001e22:	f000 fd71 	bl	8002908 <PCA9685_Init>
  PCA9685_SetPwmFrequency(50);
 8001e26:	2032      	movs	r0, #50	; 0x32
 8001e28:	f000 fbfa 	bl	8002620 <PCA9685_SetPwmFrequency>

  uint32_t lastRxMode = HAL_GetTick();
 8001e2c:	f001 f8da 	bl	8002fe4 <HAL_GetTick>
 8001e30:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  bool rxMode = false;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint32_t timestamp = HAL_GetTick();
 8001e3a:	f001 f8d3 	bl	8002fe4 <HAL_GetTick>
 8001e3e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	bno055_vector_t orientation = bno055_getVectorEuler();
 8001e42:	f7ff fd44 	bl	80018ce <bno055_getVectorEuler>
 8001e46:	eeb0 4a40 	vmov.f32	s8, s0
 8001e4a:	eef0 4a60 	vmov.f32	s9, s1
 8001e4e:	eeb0 5a41 	vmov.f32	s10, s2
 8001e52:	eef0 5a61 	vmov.f32	s11, s3
 8001e56:	eeb0 6a42 	vmov.f32	s12, s4
 8001e5a:	eef0 6a62 	vmov.f32	s13, s5
 8001e5e:	eeb0 7a43 	vmov.f32	s14, s6
 8001e62:	eef0 7a63 	vmov.f32	s15, s7
 8001e66:	ed87 4b00 	vstr	d4, [r7]
 8001e6a:	ed87 5b02 	vstr	d5, [r7, #8]
 8001e6e:	ed87 6b04 	vstr	d6, [r7, #16]
 8001e72:	ed87 7b06 	vstr	d7, [r7, #24]
	bno055_vector_t linearAccel = bno055_getVectorLinearAccel();
 8001e76:	f7ff fd6d 	bl	8001954 <bno055_getVectorLinearAccel>
 8001e7a:	eeb0 4a40 	vmov.f32	s8, s0
 8001e7e:	eef0 4a60 	vmov.f32	s9, s1
 8001e82:	eeb0 5a41 	vmov.f32	s10, s2
 8001e86:	eef0 5a61 	vmov.f32	s11, s3
 8001e8a:	eeb0 6a42 	vmov.f32	s12, s4
 8001e8e:	eef0 6a62 	vmov.f32	s13, s5
 8001e92:	eeb0 7a43 	vmov.f32	s14, s6
 8001e96:	eef0 7a63 	vmov.f32	s15, s7
 8001e9a:	ed87 4b08 	vstr	d4, [r7, #32]
 8001e9e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001ea2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001ea6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	bno055_vector_t quaternion = bno055_getVectorQuaternion();
 8001eaa:	f7ff fd96 	bl	80019da <bno055_getVectorQuaternion>
 8001eae:	eeb0 4a40 	vmov.f32	s8, s0
 8001eb2:	eef0 4a60 	vmov.f32	s9, s1
 8001eb6:	eeb0 5a41 	vmov.f32	s10, s2
 8001eba:	eef0 5a61 	vmov.f32	s11, s3
 8001ebe:	eeb0 6a42 	vmov.f32	s12, s4
 8001ec2:	eef0 6a62 	vmov.f32	s13, s5
 8001ec6:	eeb0 7a43 	vmov.f32	s14, s6
 8001eca:	eef0 7a63 	vmov.f32	s15, s7
 8001ece:	ed87 4b10 	vstr	d4, [r7, #64]	; 0x40
 8001ed2:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
 8001ed6:	ed87 6b14 	vstr	d6, [r7, #80]	; 0x50
 8001eda:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	bno055_vector_t gyro = bno055_getVectorGyroscope();
 8001ede:	f7ff fcb3 	bl	8001848 <bno055_getVectorGyroscope>
 8001ee2:	eeb0 4a40 	vmov.f32	s8, s0
 8001ee6:	eef0 4a60 	vmov.f32	s9, s1
 8001eea:	eeb0 5a41 	vmov.f32	s10, s2
 8001eee:	eef0 5a61 	vmov.f32	s11, s3
 8001ef2:	eeb0 6a42 	vmov.f32	s12, s4
 8001ef6:	eef0 6a62 	vmov.f32	s13, s5
 8001efa:	eeb0 7a43 	vmov.f32	s14, s6
 8001efe:	eef0 7a63 	vmov.f32	s15, s7
 8001f02:	ed87 4b18 	vstr	d4, [r7, #96]	; 0x60
 8001f06:	ed87 5b1a 	vstr	d5, [r7, #104]	; 0x68
 8001f0a:	ed87 6b1c 	vstr	d6, [r7, #112]	; 0x70
 8001f0e:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78

	FR_Status = f_mount(&SDFatFS, SDPath, 1);
 8001f12:	2201      	movs	r2, #1
 8001f14:	497f      	ldr	r1, [pc, #508]	; (8002114 <main+0x33c>)
 8001f16:	4880      	ldr	r0, [pc, #512]	; (8002118 <main+0x340>)
 8001f18:	f009 f8ba 	bl	800b090 <f_mount>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b7e      	ldr	r3, [pc, #504]	; (800211c <main+0x344>)
 8001f22:	701a      	strb	r2, [r3, #0]
	f_getfree("", &FreeClusters, &SDFatFS);
 8001f24:	4a7c      	ldr	r2, [pc, #496]	; (8002118 <main+0x340>)
 8001f26:	497e      	ldr	r1, [pc, #504]	; (8002120 <main+0x348>)
 8001f28:	487e      	ldr	r0, [pc, #504]	; (8002124 <main+0x34c>)
 8001f2a:	f009 fcff 	bl	800b92c <f_getfree>
    TotalSize = (uint32_t)((SDFatFS.n_fatent - 2) * SDFatFS.csize * 0.5);
 8001f2e:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <main+0x340>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	3b02      	subs	r3, #2
 8001f34:	4a78      	ldr	r2, [pc, #480]	; (8002118 <main+0x340>)
 8001f36:	8952      	ldrh	r2, [r2, #10]
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fae1 	bl	8000504 <__aeabi_ui2d>
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <main+0x350>)
 8001f48:	f7fe fb56 	bl	80005f8 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe28 	bl	8000ba8 <__aeabi_d2uiz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4a74      	ldr	r2, [pc, #464]	; (800212c <main+0x354>)
 8001f5c:	6013      	str	r3, [r2, #0]
    FreeSpace = (uint32_t)(FreeClusters * SDFatFS.csize * 0.5);
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <main+0x340>)
 8001f60:	895b      	ldrh	r3, [r3, #10]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <main+0x348>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fac9 	bl	8000504 <__aeabi_ui2d>
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <main+0x350>)
 8001f78:	f7fe fb3e 	bl	80005f8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fe10 	bl	8000ba8 <__aeabi_d2uiz>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4a69      	ldr	r2, [pc, #420]	; (8002130 <main+0x358>)
 8001f8c:	6013      	str	r3, [r2, #0]

	FR_Status = f_open(&SDFile, "MyTextFile.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001f8e:	220b      	movs	r2, #11
 8001f90:	4968      	ldr	r1, [pc, #416]	; (8002134 <main+0x35c>)
 8001f92:	4869      	ldr	r0, [pc, #420]	; (8002138 <main+0x360>)
 8001f94:	f009 f8c2 	bl	800b11c <f_open>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	; (800211c <main+0x344>)
 8001f9e:	701a      	strb	r2, [r3, #0]
	f_puts("Hello! From STM32 To SD Card Over SDIO, Using f_puts()\n", &SDFile);
 8001fa0:	4965      	ldr	r1, [pc, #404]	; (8002138 <main+0x360>)
 8001fa2:	4866      	ldr	r0, [pc, #408]	; (800213c <main+0x364>)
 8001fa4:	f009 fdee 	bl	800bb84 <f_puts>
	f_close(&SDFile);
 8001fa8:	4863      	ldr	r0, [pc, #396]	; (8002138 <main+0x360>)
 8001faa:	f009 fc95 	bl	800b8d8 <f_close>
	FR_Status = f_mount(NULL, "", 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	495c      	ldr	r1, [pc, #368]	; (8002124 <main+0x34c>)
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f009 f86c 	bl	800b090 <f_mount>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <main+0x344>)
 8001fbe:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 8001fc0:	200a      	movs	r0, #10
 8001fc2:	f001 f81b 	bl	8002ffc <HAL_Delay>
	if(!rxMode){
 8001fc6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d072      	beq.n	80020ba <main+0x2e2>
		NRF24_TxMode();
 8001fd4:	f7ff f994 	bl	8001300 <NRF24_TxMode>
		sprintf(TxData, "o %d %.2f %.2f %.2f", timestamp, orientation.x, orientation.y, orientation.z);
 8001fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fe0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001fe4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fec:	e9cd 2300 	strd	r2, r3, [sp]
 8001ff0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ff4:	4952      	ldr	r1, [pc, #328]	; (8002140 <main+0x368>)
 8001ff6:	4853      	ldr	r0, [pc, #332]	; (8002144 <main+0x36c>)
 8001ff8:	f00a fd30 	bl	800ca5c <siprintf>
		NRF24_Transmit(TxData);
 8001ffc:	4851      	ldr	r0, [pc, #324]	; (8002144 <main+0x36c>)
 8001ffe:	f7ff f9bf 	bl	8001380 <NRF24_Transmit>

		sprintf(TxData, "g %d %.2f %.2f %.2f", timestamp, gyro.x, gyro.y, gyro.z);
 8002002:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002006:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800200a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800200e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002016:	e9cd 2300 	strd	r2, r3, [sp]
 800201a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800201e:	494a      	ldr	r1, [pc, #296]	; (8002148 <main+0x370>)
 8002020:	4848      	ldr	r0, [pc, #288]	; (8002144 <main+0x36c>)
 8002022:	f00a fd1b 	bl	800ca5c <siprintf>
		NRF24_Transmit(TxData);
 8002026:	4847      	ldr	r0, [pc, #284]	; (8002144 <main+0x36c>)
 8002028:	f7ff f9aa 	bl	8001380 <NRF24_Transmit>

		sprintf(TxData, "a %d %.2f %.2f %.2f", timestamp, linearAccel.x, linearAccel.y, linearAccel.z);
 800202c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002030:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002034:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002038:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800203c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002040:	e9cd 2300 	strd	r2, r3, [sp]
 8002044:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002048:	4940      	ldr	r1, [pc, #256]	; (800214c <main+0x374>)
 800204a:	483e      	ldr	r0, [pc, #248]	; (8002144 <main+0x36c>)
 800204c:	f00a fd06 	bl	800ca5c <siprintf>
		NRF24_Transmit(TxData);
 8002050:	483c      	ldr	r0, [pc, #240]	; (8002144 <main+0x36c>)
 8002052:	f7ff f995 	bl	8001380 <NRF24_Transmit>

		sprintf(TxData, "q %d %.2f %.2f %.2f %.2f", timestamp, quaternion.x, quaternion.y, quaternion.z, quaternion.w);
 8002056:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800205a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800205e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002062:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002066:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800206a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800206e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002072:	e9cd 2300 	strd	r2, r3, [sp]
 8002076:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800207a:	4935      	ldr	r1, [pc, #212]	; (8002150 <main+0x378>)
 800207c:	4831      	ldr	r0, [pc, #196]	; (8002144 <main+0x36c>)
 800207e:	f00a fced 	bl	800ca5c <siprintf>
		NRF24_Transmit(TxData);
 8002082:	4830      	ldr	r0, [pc, #192]	; (8002144 <main+0x36c>)
 8002084:	f7ff f97c 	bl	8001380 <NRF24_Transmit>

		if(timestamp - lastRxMode > 500){
 8002088:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800208c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002096:	d932      	bls.n	80020fe <main+0x326>
			sprintf(TxData, "c");
 8002098:	492e      	ldr	r1, [pc, #184]	; (8002154 <main+0x37c>)
 800209a:	482a      	ldr	r0, [pc, #168]	; (8002144 <main+0x36c>)
 800209c:	f00a fcde 	bl	800ca5c <siprintf>
			NRF24_Transmit(TxData);
 80020a0:	4828      	ldr	r0, [pc, #160]	; (8002144 <main+0x36c>)
 80020a2:	f7ff f96d 	bl	8001380 <NRF24_Transmit>
			rxMode = true;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			NRF24_RxMode();
 80020ac:	f7ff f948 	bl	8001340 <NRF24_RxMode>
			lastRxMode = HAL_GetTick();
 80020b0:	f000 ff98 	bl	8002fe4 <HAL_GetTick>
 80020b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80020b8:	e021      	b.n	80020fe <main+0x326>
		}
	}
	else{
		if (isDataAvailable() == 1)
 80020ba:	f7ff f9cd 	bl	8001458 <isDataAvailable>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10e      	bne.n	80020e2 <main+0x30a>
		{
			NRF24_Receive(RxData);
 80020c4:	4824      	ldr	r0, [pc, #144]	; (8002158 <main+0x380>)
 80020c6:	f7ff f9e9 	bl	800149c <NRF24_Receive>
			rxMode = false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			lastRxMode = HAL_GetTick();
 80020d0:	f000 ff88 	bl	8002fe4 <HAL_GetTick>
 80020d4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			ParseReceivedCommand(RxData, sizeof(RxData));
 80020d8:	2120      	movs	r1, #32
 80020da:	481f      	ldr	r0, [pc, #124]	; (8002158 <main+0x380>)
 80020dc:	f7ff fdea 	bl	8001cb4 <ParseReceivedCommand>
 80020e0:	e00d      	b.n	80020fe <main+0x326>
		}
		else if(timestamp - lastRxMode > 250){
 80020e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2bfa      	cmp	r3, #250	; 0xfa
 80020ee:	d906      	bls.n	80020fe <main+0x326>
			rxMode = false;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			lastRxMode = HAL_GetTick();
 80020f6:	f000 ff75 	bl	8002fe4 <HAL_GetTick>
 80020fa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		}
	}

	HAL_Delay(100);
 80020fe:	2064      	movs	r0, #100	; 0x64
 8002100:	f000 ff7c 	bl	8002ffc <HAL_Delay>
  {
 8002104:	e699      	b.n	8001e3a <main+0x62>
 8002106:	bf00      	nop
 8002108:	20000014 	.word	0x20000014
 800210c:	2000000c 	.word	0x2000000c
 8002110:	20000210 	.word	0x20000210
 8002114:	20000480 	.word	0x20000480
 8002118:	20000484 	.word	0x20000484
 800211c:	20000462 	.word	0x20000462
 8002120:	20000464 	.word	0x20000464
 8002124:	0800f07c 	.word	0x0800f07c
 8002128:	3fe00000 	.word	0x3fe00000
 800212c:	20000468 	.word	0x20000468
 8002130:	2000046c 	.word	0x2000046c
 8002134:	0800f080 	.word	0x0800f080
 8002138:	200014bc 	.word	0x200014bc
 800213c:	0800f090 	.word	0x0800f090
 8002140:	0800f0c8 	.word	0x0800f0c8
 8002144:	20000400 	.word	0x20000400
 8002148:	0800f0dc 	.word	0x0800f0dc
 800214c:	0800f0f0 	.word	0x0800f0f0
 8002150:	0800f104 	.word	0x0800f104
 8002154:	0800f120 	.word	0x0800f120
 8002158:	20000420 	.word	0x20000420

0800215c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b094      	sub	sp, #80	; 0x50
 8002160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002162:	f107 0320 	add.w	r3, r7, #32
 8002166:	2230      	movs	r2, #48	; 0x30
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f00a fd6e 	bl	800cc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <SystemClock_Config+0xcc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <SystemClock_Config+0xcc>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <SystemClock_Config+0xcc>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <SystemClock_Config+0xd0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <SystemClock_Config+0xd0>)
 80021a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <SystemClock_Config+0xd0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021bc:	2301      	movs	r3, #1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021c0:	2310      	movs	r3, #16
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021cc:	2308      	movs	r3, #8
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80021d0:	2350      	movs	r3, #80	; 0x50
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021d8:	2304      	movs	r3, #4
 80021da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	4618      	mov	r0, r3
 80021e2:	f003 fa6b 	bl	80056bc <HAL_RCC_OscConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021ec:	f000 f96c 	bl	80024c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f0:	230f      	movs	r3, #15
 80021f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021f4:	2302      	movs	r3, #2
 80021f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80021fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002200:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2102      	movs	r1, #2
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fccc 	bl	8005bac <HAL_RCC_ClockConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800221a:	f000 f955 	bl	80024c8 <Error_Handler>
  }
}
 800221e:	bf00      	nop
 8002220:	3750      	adds	r7, #80	; 0x50
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000

08002230 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_I2C2_Init+0x50>)
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <MX_I2C2_Init+0x54>)
 8002238:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_I2C2_Init+0x50>)
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_I2C2_Init+0x58>)
 800223e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_I2C2_Init+0x50>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_I2C2_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_I2C2_Init+0x50>)
 800224e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002252:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <MX_I2C2_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_I2C2_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <MX_I2C2_Init+0x50>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_I2C2_Init+0x50>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800226c:	4804      	ldr	r0, [pc, #16]	; (8002280 <MX_I2C2_Init+0x50>)
 800226e:	f001 fd67 	bl	8003d40 <HAL_I2C_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002278:	f000 f926 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000210 	.word	0x20000210
 8002284:	40005800 	.word	0x40005800
 8002288:	000186a0 	.word	0x000186a0

0800228c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 8002292:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <MX_SDIO_SD_Init+0x3c>)
 8002294:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <MX_SDIO_SD_Init+0x38>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000264 	.word	0x20000264
 80022c8:	40012c00 	.word	0x40012c00

080022cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_SPI3_Init+0x64>)
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <MX_SPI3_Init+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <MX_SPI3_Init+0x64>)
 80022d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <MX_SPI3_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <MX_SPI3_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_SPI3_Init+0x64>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <MX_SPI3_Init+0x64>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_SPI3_Init+0x64>)
 80022f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_SPI3_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <MX_SPI3_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_SPI3_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <MX_SPI3_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_SPI3_Init+0x64>)
 8002318:	220a      	movs	r2, #10
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	; (8002330 <MX_SPI3_Init+0x64>)
 800231e:	f004 ff81 	bl	8007224 <HAL_SPI_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002328:	f000 f8ce 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200003a8 	.word	0x200003a8
 8002334:	40003c00 	.word	0x40003c00

08002338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_DMA_Init+0x4c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <MX_DMA_Init+0x4c>)
 8002348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_DMA_Init+0x4c>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	203b      	movs	r0, #59	; 0x3b
 8002360:	f000 ff4b 	bl	80031fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002364:	203b      	movs	r0, #59	; 0x3b
 8002366:	f000 ff64 	bl	8003232 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2045      	movs	r0, #69	; 0x45
 8002370:	f000 ff43 	bl	80031fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002374:	2045      	movs	r0, #69	; 0x45
 8002376:	f000 ff5c 	bl	8003232 <HAL_NVIC_EnableIRQ>

}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	4b45      	ldr	r3, [pc, #276]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <MX_GPIO_Init+0x130>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002446:	2200      	movs	r2, #0
 8002448:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800244c:	481b      	ldr	r0, [pc, #108]	; (80024bc <MX_GPIO_Init+0x134>)
 800244e:	f001 fc5d 	bl	8003d0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	21c0      	movs	r1, #192	; 0xc0
 8002456:	481a      	ldr	r0, [pc, #104]	; (80024c0 <MX_GPIO_Init+0x138>)
 8002458:	f001 fc58 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800245c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8002460:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	4811      	ldr	r0, [pc, #68]	; (80024bc <MX_GPIO_Init+0x134>)
 8002476:	f001 fa95 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <MX_GPIO_Init+0x13c>)
 800248e:	f001 fa89 	bl	80039a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8002492:	23c0      	movs	r3, #192	; 0xc0
 8002494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_GPIO_Init+0x138>)
 80024aa:	f001 fa7b 	bl	80039a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024ae:	bf00      	nop
 80024b0:	3730      	adds	r7, #48	; 0x30
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800

080024c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <Error_Handler+0x8>
	...

080024d4 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af04      	add	r7, sp, #16
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	460b      	mov	r3, r1
 80024e0:	71bb      	strb	r3, [r7, #6]
 80024e2:	4613      	mov	r3, r2
 80024e4:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 80024e6:	797b      	ldrb	r3, [r7, #5]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <PCA9685_SetBit+0x1c>
 80024ec:	2301      	movs	r3, #1
 80024ee:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <PCA9685_SetBit+0xb0>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	230a      	movs	r3, #10
 80024fa:	9302      	str	r3, [sp, #8]
 80024fc:	2301      	movs	r3, #1
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	f107 030f 	add.w	r3, r7, #15
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	2301      	movs	r3, #1
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	f002 f987 	bl	800481c <HAL_I2C_Mem_Read>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e031      	b.n	800257c <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	2201      	movs	r2, #1
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002526:	b25b      	sxtb	r3, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	b25a      	sxtb	r2, r3
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	b25b      	sxtb	r3, r3
 8002530:	4013      	ands	r3, r2
 8002532:	b25b      	sxtb	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8002538:	797b      	ldrb	r3, [r7, #5]
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	b25a      	sxtb	r2, r3
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	b25b      	sxtb	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	b25b      	sxtb	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <PCA9685_SetBit+0xb0>)
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	b29a      	uxth	r2, r3
 800255a:	230a      	movs	r3, #10
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	2301      	movs	r3, #1
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	f107 030f 	add.w	r3, r7, #15
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2301      	movs	r3, #1
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	f002 f85c 	bl	8004628 <HAL_I2C_Mem_Write>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000470 	.word	0x20000470

08002588 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 800258e:	2306      	movs	r3, #6
 8002590:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <PCA9685_SoftwareReset+0x30>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	1dfa      	adds	r2, r7, #7
 8002598:	230a      	movs	r3, #10
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	2100      	movs	r1, #0
 80025a0:	f001 fd12 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000470 	.word	0x20000470

080025bc <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	461a      	mov	r2, r3
 80025ca:	2104      	movs	r1, #4
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff ff81 	bl	80024d4 <PCA9685_SetBit>
 80025d2:	4603      	mov	r3, r0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	461a      	mov	r2, r3
 80025ea:	2107      	movs	r1, #7
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7ff ff71 	bl	80024d4 <PCA9685_SetBit>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	461a      	mov	r2, r3
 800260a:	2105      	movs	r1, #5
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff ff61 	bl	80024d4 <PCA9685_SetBit>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	0000      	movs	r0, r0
	...

08002620 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af04      	add	r7, sp, #16
 8002626:	4603      	mov	r3, r0
 8002628:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002630:	4293      	cmp	r3, r2
 8002632:	d902      	bls.n	800263a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8002634:	2303      	movs	r3, #3
 8002636:	72fb      	strb	r3, [r7, #11]
 8002638:	e046      	b.n	80026c8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b18      	cmp	r3, #24
 800263e:	d802      	bhi.n	8002646 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8002640:	23ff      	movs	r3, #255	; 0xff
 8002642:	72fb      	strb	r3, [r7, #11]
 8002644:	e040      	b.n	80026c8 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	ee07 3a90 	vmov	s15, r3
 800264c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002650:	ee17 0a90 	vmov	r0, s15
 8002654:	f7fd ff78 	bl	8000548 <__aeabi_f2d>
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <PCA9685_SetPwmFrequency+0xe8>)
 800265e:	f7fd ffcb 	bl	80005f8 <__aeabi_dmul>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	a126      	add	r1, pc, #152	; (adr r1, 8002700 <PCA9685_SetPwmFrequency+0xe0>)
 8002668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800266c:	f7fe f8ee 	bl	800084c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4b23      	ldr	r3, [pc, #140]	; (800270c <PCA9685_SetPwmFrequency+0xec>)
 800267e:	f7fd fe03 	bl	8000288 <__aeabi_dsub>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f7fe faad 	bl	8000be8 <__aeabi_d2f>
 800268e:	4603      	mov	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7fd ff58 	bl	8000548 <__aeabi_f2d>
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <PCA9685_SetPwmFrequency+0xf0>)
 800269e:	f7fd fdf5 	bl	800028c <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	ec43 2b17 	vmov	d7, r2, r3
 80026aa:	eeb0 0a47 	vmov.f32	s0, s14
 80026ae:	eef0 0a67 	vmov.f32	s1, s15
 80026b2:	f00c fb31 	bl	800ed18 <floor>
 80026b6:	ec53 2b10 	vmov	r2, r3, d0
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa73 	bl	8000ba8 <__aeabi_d2uiz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff ff77 	bl	80025bc <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <PCA9685_SetPwmFrequency+0xf4>)
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	230a      	movs	r3, #10
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	2301      	movs	r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	f107 030b 	add.w	r3, r7, #11
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	22fe      	movs	r2, #254	; 0xfe
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	f001 ff9f 	bl	8004628 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7ff ff66 	bl	80025bc <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff ff73 	bl	80025dc <PCA9685_RestartMode>
	return PCA9685_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	00000000 	.word	0x00000000
 8002704:	4177d784 	.word	0x4177d784
 8002708:	40b00000 	.word	0x40b00000
 800270c:	3ff00000 	.word	0x3ff00000
 8002710:	3fe00000 	.word	0x3fe00000
 8002714:	20000470 	.word	0x20000470

08002718 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af04      	add	r7, sp, #16
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	460b      	mov	r3, r1
 8002724:	80bb      	strh	r3, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	b2db      	uxtb	r3, r3
 8002730:	3306      	adds	r3, #6
 8002732:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8002734:	88bb      	ldrh	r3, [r7, #4]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	b29b      	uxth	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	b29b      	uxth	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10);
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <PCA9685_SetPwm+0x74>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	b29a      	uxth	r2, r3
 800275c:	230a      	movs	r3, #10
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	2304      	movs	r3, #4
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	f001 ff5b 	bl	8004628 <HAL_I2C_Mem_Write>
 8002772:	4603      	mov	r3, r0
 8002774:	73bb      	strb	r3, [r7, #14]
	if(status != HAL_OK)
 8002776:	7bbb      	ldrb	r3, [r7, #14]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <PCA9685_SetPwm+0x68>
	{
		return PCA9685_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <PCA9685_SetPwm+0x6a>
	}

	return PCA9685_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000470 	.word	0x20000470

08002790 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	460b      	mov	r3, r1
 800279c:	80bb      	strh	r3, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a8:	d302      	bcc.n	80027b0 <PCA9685_SetPin+0x20>
 80027aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80027ae:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d025      	beq.n	8002802 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80027b6:	88bb      	ldrh	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d108      	bne.n	80027ce <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ffa7 	bl	8002718 <PCA9685_SetPwm>
 80027ca:	4603      	mov	r3, r0
 80027cc:	e03a      	b.n	8002844 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 80027ce:	88bb      	ldrh	r3, [r7, #4]
 80027d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d108      	bne.n	80027ea <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff99 	bl	8002718 <PCA9685_SetPwm>
 80027e6:	4603      	mov	r3, r0
 80027e8:	e02c      	b.n	8002844 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 80027ea:	88bb      	ldrh	r3, [r7, #4]
 80027ec:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80027f0:	330f      	adds	r3, #15
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff8d 	bl	8002718 <PCA9685_SetPwm>
 80027fe:	4603      	mov	r3, r0
 8002800:	e020      	b.n	8002844 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8002802:	88bb      	ldrh	r3, [r7, #4]
 8002804:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002808:	4293      	cmp	r3, r2
 800280a:	d108      	bne.n	800281e <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	2200      	movs	r2, #0
 8002810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff7f 	bl	8002718 <PCA9685_SetPwm>
 800281a:	4603      	mov	r3, r0
 800281c:	e012      	b.n	8002844 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 800281e:	88bb      	ldrh	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d108      	bne.n	8002836 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff73 	bl	8002718 <PCA9685_SetPwm>
 8002832:	4603      	mov	r3, r0
 8002834:	e006      	b.n	8002844 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8002836:	88ba      	ldrh	r2, [r7, #4]
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff6b 	bl	8002718 <PCA9685_SetPwm>
 8002842:	4603      	mov	r3, r0
    }
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0000      	movs	r0, r0
	...

08002850 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	ed87 0a00 	vstr	s0, [r7]
 800285c:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 800285e:	edd7 7a00 	vldr	s15, [r7]
 8002862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d502      	bpl.n	8002872 <PCA9685_SetServoAngle+0x22>
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8002872:	edd7 7a00 	vldr	s15, [r7]
 8002876:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80028f8 <PCA9685_SetServoAngle+0xa8>
 800287a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	dd01      	ble.n	8002888 <PCA9685_SetServoAngle+0x38>
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <PCA9685_SetServoAngle+0xac>)
 8002886:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f7fd fe5d 	bl	8000548 <__aeabi_f2d>
 800288e:	a318      	add	r3, pc, #96	; (adr r3, 80028f0 <PCA9685_SetServoAngle+0xa0>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd feb0 	bl	80005f8 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <PCA9685_SetServoAngle+0xb0>)
 80028a6:	f7fd ffd1 	bl	800084c <__aeabi_ddiv>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <PCA9685_SetServoAngle+0xb4>)
 80028b8:	f7fd fce8 	bl	800028c <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f990 	bl	8000be8 <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 80028cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d4:	ee17 3a90 	vmov	r3, s15
 80028d8:	b299      	uxth	r1, r3
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2200      	movs	r2, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff56 	bl	8002790 <PCA9685_SetPin>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40786000 	.word	0x40786000
 80028f8:	43340000 	.word	0x43340000
 80028fc:	43340000 	.word	0x43340000
 8002900:	40668000 	.word	0x40668000
 8002904:	405b8000 	.word	0x405b8000

08002908 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8002910:	4a07      	ldr	r2, [pc, #28]	; (8002930 <PCA9685_Init+0x28>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8002916:	f7ff fe37 	bl	8002588 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 800291a:	2030      	movs	r0, #48	; 0x30
 800291c:	f7ff fe80 	bl	8002620 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8002920:	2001      	movs	r0, #1
 8002922:	f7ff fe6b 	bl	80025fc <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000470 	.word	0x20000470

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <HAL_MspInit+0x4c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <HAL_MspInit+0x4c>)
 8002944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002948:	6453      	str	r3, [r2, #68]	; 0x44
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_MspInit+0x4c>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_I2C_MspInit+0x84>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d12c      	bne.n	8002a00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_I2C_MspInit+0x88>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_I2C_MspInit+0x88>)
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_I2C_MspInit+0x88>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c8:	2312      	movs	r3, #18
 80029ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d0:	2303      	movs	r3, #3
 80029d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029d4:	2304      	movs	r3, #4
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	480c      	ldr	r0, [pc, #48]	; (8002a10 <HAL_I2C_MspInit+0x8c>)
 80029e0:	f000 ffe0 	bl	80039a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_I2C_MspInit+0x88>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_I2C_MspInit+0x88>)
 80029ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_I2C_MspInit+0x88>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40005800 	.word	0x40005800
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020400 	.word	0x40020400

08002a14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a68      	ldr	r2, [pc, #416]	; (8002bd4 <HAL_SD_MspInit+0x1c0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	f040 80c9 	bne.w	8002bca <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a46:	6453      	str	r3, [r2, #68]	; 0x44
 8002a48:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	4b5f      	ldr	r3, [pc, #380]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4a5e      	ldr	r2, [pc, #376]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a5e:	f043 0304 	orr.w	r3, r3, #4
 8002a62:	6313      	str	r3, [r2, #48]	; 0x30
 8002a64:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	4b58      	ldr	r3, [pc, #352]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	4a57      	ldr	r2, [pc, #348]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a80:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <HAL_SD_MspInit+0x1c4>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002a8c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	484c      	ldr	r0, [pc, #304]	; (8002bdc <HAL_SD_MspInit+0x1c8>)
 8002aaa:	f000 ff7b 	bl	80039a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4845      	ldr	r0, [pc, #276]	; (8002be0 <HAL_SD_MspInit+0x1cc>)
 8002aca:	f000 ff6b 	bl	80039a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002ace:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002ad0:	4a45      	ldr	r2, [pc, #276]	; (8002be8 <HAL_SD_MspInit+0x1d4>)
 8002ad2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ada:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae2:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae8:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aee:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002af6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002afe:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b02:	2220      	movs	r2, #32
 8002b04:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b0c:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b0e:	2204      	movs	r2, #4
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b14:	2203      	movs	r2, #3
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b20:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002b28:	482e      	ldr	r0, [pc, #184]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b2a:	f000 fb9d 	bl	8003268 <HAL_DMA_Init>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8002b34:	f7ff fcc8 	bl	80024c8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_SD_MspInit+0x1d0>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b46:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <HAL_SD_MspInit+0x1dc>)
 8002b48:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b50:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b52:	4b26      	ldr	r3, [pc, #152]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b64:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b66:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b6c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b74:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b78:	2220      	movs	r2, #32
 8002b7a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b84:	2204      	movs	r2, #4
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002b98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002b9e:	4813      	ldr	r0, [pc, #76]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002ba0:	f000 fb62 	bl	8003268 <HAL_DMA_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002baa:	f7ff fc8d 	bl	80024c8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_SD_MspInit+0x1d8>)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2031      	movs	r0, #49	; 0x31
 8002bc0:	f000 fb1b 	bl	80031fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002bc4:	2031      	movs	r0, #49	; 0x31
 8002bc6:	f000 fb34 	bl	8003232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	40020c00 	.word	0x40020c00
 8002be4:	200002e8 	.word	0x200002e8
 8002be8:	40026458 	.word	0x40026458
 8002bec:	20000348 	.word	0x20000348
 8002bf0:	400264a0 	.word	0x400264a0

08002bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a19      	ldr	r2, [pc, #100]	; (8002c78 <HAL_SPI_MspInit+0x84>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d12b      	bne.n	8002c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_SPI_MspInit+0x88>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_SPI_MspInit+0x88>)
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_SPI_MspInit+0x88>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_SPI_MspInit+0x88>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_SPI_MspInit+0x88>)
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_SPI_MspInit+0x88>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c4e:	2338      	movs	r3, #56	; 0x38
 8002c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c5e:	2306      	movs	r3, #6
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	f107 0314 	add.w	r3, r7, #20
 8002c66:	4619      	mov	r1, r3
 8002c68:	4805      	ldr	r0, [pc, #20]	; (8002c80 <HAL_SPI_MspInit+0x8c>)
 8002c6a:	f000 fe9b 	bl	80039a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c6e:	bf00      	nop
 8002c70:	3728      	adds	r7, #40	; 0x28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40003c00 	.word	0x40003c00
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40020400 	.word	0x40020400

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd0:	f000 f974 	bl	8002fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <SDIO_IRQHandler+0x10>)
 8002cde:	f003 fbe9 	bl	80064b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000264 	.word	0x20000264

08002cec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <DMA2_Stream3_IRQHandler+0x10>)
 8002cf2:	f000 fbe1 	bl	80034b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200002e8 	.word	0x200002e8

08002d00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <DMA2_Stream6_IRQHandler+0x10>)
 8002d06:	f000 fbd7 	bl	80034b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000348 	.word	0x20000348

08002d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <_kill>:

int _kill(int pid, int sig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d2e:	f009 ffdf 	bl	800ccf0 <__errno>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2216      	movs	r2, #22
 8002d36:	601a      	str	r2, [r3, #0]
  return -1;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_exit>:

void _exit (int status)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ffe7 	bl	8002d24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d56:	e7fe      	b.n	8002d56 <_exit+0x12>

08002d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
  }

  return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e009      	b.n	8002db8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60ba      	str	r2, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbf1      	blt.n	8002da4 <_write+0x12>
  }
  return len;
 8002dc0:	687b      	ldr	r3, [r7, #4]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_close>:

int _close(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df2:	605a      	str	r2, [r3, #4]
  return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <_isatty>:

int _isatty(int file)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <_sbrk+0x5c>)
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <_sbrk+0x60>)
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <_sbrk+0x64>)
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <_sbrk+0x68>)
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <_sbrk+0x64>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d207      	bcs.n	8002e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e64:	f009 ff44 	bl	800ccf0 <__errno>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	e009      	b.n	8002e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <_sbrk+0x64>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <_sbrk+0x64>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <_sbrk+0x64>)
 8002e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e86:	68fb      	ldr	r3, [r7, #12]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20020000 	.word	0x20020000
 8002e94:	00000800 	.word	0x00000800
 8002e98:	20000474 	.word	0x20000474
 8002e9c:	20002878 	.word	0x20002878

08002ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <SystemInit+0x20>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <SystemInit+0x20>)
 8002eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002efc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ec8:	f7ff ffea 	bl	8002ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f009 ff03 	bl	800ccfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef6:	f7fe ff6f 	bl	8001dd8 <main>
  bx  lr    
 8002efa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002f08:	0800f964 	.word	0x0800f964
  ldr r2, =_sbss
 8002f0c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f10:	20002874 	.word	0x20002874

08002f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC_IRQHandler>
	...

08002f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <HAL_Init+0x40>)
 8002f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_Init+0x40>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_Init+0x40>)
 8002f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <HAL_Init+0x40>)
 8002f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f40:	2003      	movs	r0, #3
 8002f42:	f000 f94f 	bl	80031e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f46:	200f      	movs	r0, #15
 8002f48:	f000 f808 	bl	8002f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f4c:	f7ff fcf2 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023c00 	.word	0x40023c00

08002f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_InitTick+0x54>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_InitTick+0x58>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f967 	bl	800324e <HAL_SYSTICK_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00e      	b.n	8002fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d80a      	bhi.n	8002fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f000 f92f 	bl	80031fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <HAL_InitTick+0x5c>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2000001c 	.word	0x2000001c
 8002fb4:	20000024 	.word	0x20000024
 8002fb8:	20000020 	.word	0x20000020

08002fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_IncTick+0x20>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x24>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <HAL_IncTick+0x24>)
 8002fce:	6013      	str	r3, [r2, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000024 	.word	0x20000024
 8002fe0:	20000478 	.word	0x20000478

08002fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_GetTick+0x14>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000478 	.word	0x20000478

08002ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003004:	f7ff ffee 	bl	8002fe4 <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d005      	beq.n	8003022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_Delay+0x44>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003022:	bf00      	nop
 8003024:	f7ff ffde 	bl	8002fe4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	429a      	cmp	r2, r3
 8003032:	d8f7      	bhi.n	8003024 <HAL_Delay+0x28>
  {
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000024 	.word	0x20000024

08003044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <__NVIC_SetPriorityGrouping+0x44>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003060:	4013      	ands	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800306c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003076:	4a04      	ldr	r2, [pc, #16]	; (8003088 <__NVIC_SetPriorityGrouping+0x44>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	60d3      	str	r3, [r2, #12]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 0307 	and.w	r3, r3, #7
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	db0b      	blt.n	80030d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	4907      	ldr	r1, [pc, #28]	; (80030e0 <__NVIC_EnableIRQ+0x38>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2001      	movs	r0, #1
 80030ca:	fa00 f202 	lsl.w	r2, r0, r2
 80030ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	; (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b0:	d301      	bcc.n	80031b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b2:	2301      	movs	r3, #1
 80031b4:	e00f      	b.n	80031d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <SysTick_Config+0x40>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031be:	210f      	movs	r1, #15
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	f7ff ff8e 	bl	80030e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <SysTick_Config+0x40>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <SysTick_Config+0x40>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	e000e010 	.word	0xe000e010

080031e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ff29 	bl	8003044 <__NVIC_SetPriorityGrouping>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800320c:	f7ff ff3e 	bl	800308c <__NVIC_GetPriorityGrouping>
 8003210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff8e 	bl	8003138 <NVIC_EncodePriority>
 800321c:	4602      	mov	r2, r0
 800321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff5d 	bl	80030e4 <__NVIC_SetPriority>
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff31 	bl	80030a8 <__NVIC_EnableIRQ>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffa2 	bl	80031a0 <SysTick_Config>
 800325c:	4603      	mov	r3, r0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7ff feb6 	bl	8002fe4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e099      	b.n	80033b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032a4:	e00f      	b.n	80032c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a6:	f7ff fe9d 	bl	8002fe4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d908      	bls.n	80032c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2203      	movs	r2, #3
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e078      	b.n	80033b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e8      	bne.n	80032a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <HAL_DMA_Init+0x158>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2b04      	cmp	r3, #4
 800331e:	d107      	bne.n	8003330 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4313      	orrs	r3, r2
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0307 	bic.w	r3, r3, #7
 8003346:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2b04      	cmp	r3, #4
 8003358:	d117      	bne.n	800338a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00e      	beq.n	800338a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fa9d 	bl	80038ac <DMA_CheckFifoParam>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2240      	movs	r2, #64	; 0x40
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003386:	2301      	movs	r3, #1
 8003388:	e016      	b.n	80033b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa54 	bl	8003840 <DMA_CalcBaseAndBitshift>
 8003398:	4603      	mov	r3, r0
 800339a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a0:	223f      	movs	r2, #63	; 0x3f
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	f010803f 	.word	0xf010803f

080033c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Start_IT+0x26>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e040      	b.n	800346c <HAL_DMA_Start_IT+0xa8>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d12f      	bne.n	800345e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f9e6 	bl	80037e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0216 	orr.w	r2, r2, #22
 8003432:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0208 	orr.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e005      	b.n	800346a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e00c      	b.n	80034ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2205      	movs	r2, #5
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034c4:	4b8e      	ldr	r3, [pc, #568]	; (8003700 <HAL_DMA_IRQHandler+0x248>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8e      	ldr	r2, [pc, #568]	; (8003704 <HAL_DMA_IRQHandler+0x24c>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e2:	2208      	movs	r2, #8
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01a      	beq.n	8003524 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003510:	2208      	movs	r2, #8
 8003512:	409a      	lsls	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2201      	movs	r2, #1
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f043 0202 	orr.w	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	2204      	movs	r2, #4
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2204      	movs	r2, #4
 800357e:	409a      	lsls	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0204 	orr.w	r2, r3, #4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	2210      	movs	r2, #16
 8003596:	409a      	lsls	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d043      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03c      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b2:	2210      	movs	r2, #16
 80035b4:	409a      	lsls	r2, r3
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d018      	beq.n	80035fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d024      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	4798      	blx	r3
 80035e6:	e01f      	b.n	8003628 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
 80035f8:	e016      	b.n	8003628 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0208 	bic.w	r2, r2, #8
 8003616:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	2220      	movs	r2, #32
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 808f 	beq.w	8003758 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8087 	beq.w	8003758 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2220      	movs	r2, #32
 8003650:	409a      	lsls	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b05      	cmp	r3, #5
 8003660:	d136      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0216 	bic.w	r2, r2, #22
 8003670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003680:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_DMA_IRQHandler+0x1da>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0208 	bic.w	r2, r2, #8
 80036a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a6:	223f      	movs	r2, #63	; 0x3f
 80036a8:	409a      	lsls	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d07e      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
        }
        return;
 80036ce:	e079      	b.n	80037c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01d      	beq.n	800371a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d031      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4798      	blx	r3
 80036fc:	e02c      	b.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
 80036fe:	bf00      	nop
 8003700:	2000001c 	.word	0x2000001c
 8003704:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d023      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4798      	blx	r3
 8003718:	e01e      	b.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0210 	bic.w	r2, r2, #16
 8003736:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	2b00      	cmp	r3, #0
 800375e:	d032      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d022      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2205      	movs	r2, #5
 8003770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3301      	adds	r3, #1
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	429a      	cmp	r2, r3
 800378e:	d307      	bcc.n	80037a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f2      	bne.n	8003784 <HAL_DMA_IRQHandler+0x2cc>
 800379e:	e000      	b.n	80037a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
 80037c2:	e000      	b.n	80037c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037c4:	bf00      	nop
    }
  }
}
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003800:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d108      	bne.n	8003824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003822:	e007      	b.n	8003834 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3b10      	subs	r3, #16
 8003850:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800385a:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <DMA_CalcBaseAndBitshift+0x68>)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d909      	bls.n	8003882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	659a      	str	r2, [r3, #88]	; 0x58
 8003880:	e007      	b.n	8003892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	aaaaaaab 	.word	0xaaaaaaab
 80038a8:	0800f184 	.word	0x0800f184

080038ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11f      	bne.n	8003906 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d856      	bhi.n	800397a <DMA_CheckFifoParam+0xce>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <DMA_CheckFifoParam+0x28>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038f7 	.word	0x080038f7
 80038dc:	080038e5 	.word	0x080038e5
 80038e0:	0800397b 	.word	0x0800397b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d046      	beq.n	800397e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f4:	e043      	b.n	800397e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038fe:	d140      	bne.n	8003982 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003904:	e03d      	b.n	8003982 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390e:	d121      	bne.n	8003954 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d837      	bhi.n	8003986 <DMA_CheckFifoParam+0xda>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <DMA_CheckFifoParam+0x70>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003933 	.word	0x08003933
 8003924:	0800392d 	.word	0x0800392d
 8003928:	08003945 	.word	0x08003945
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e030      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d025      	beq.n	800398a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003942:	e022      	b.n	800398a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800394c:	d11f      	bne.n	800398e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003952:	e01c      	b.n	800398e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d903      	bls.n	8003962 <DMA_CheckFifoParam+0xb6>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d003      	beq.n	8003968 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003960:	e018      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
      break;
 8003966:	e015      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
      break;
 8003978:	e00b      	b.n	8003992 <DMA_CheckFifoParam+0xe6>
      break;
 800397a:	bf00      	nop
 800397c:	e00a      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 800397e:	bf00      	nop
 8003980:	e008      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 8003982:	bf00      	nop
 8003984:	e006      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 8003986:	bf00      	nop
 8003988:	e004      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 800398a:	bf00      	nop
 800398c:	e002      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;   
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <DMA_CheckFifoParam+0xe8>
      break;
 8003992:	bf00      	nop
    }
  } 
  
  return status; 
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop

080039a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e16b      	b.n	8003c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039c0:	2201      	movs	r2, #1
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f040 815a 	bne.w	8003c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d005      	beq.n	80039f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d130      	bne.n	8003a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	f003 0201 	and.w	r2, r3, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d017      	beq.n	8003a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d123      	bne.n	8003ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	08da      	lsrs	r2, r3, #3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3208      	adds	r2, #8
 8003aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	08da      	lsrs	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3208      	adds	r2, #8
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2203      	movs	r2, #3
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80b4 	beq.w	8003c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b60      	ldr	r3, [pc, #384]	; (8003cb0 <HAL_GPIO_Init+0x30c>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	4a5f      	ldr	r2, [pc, #380]	; (8003cb0 <HAL_GPIO_Init+0x30c>)
 8003b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b38:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <HAL_GPIO_Init+0x30c>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_GPIO_Init+0x310>)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_GPIO_Init+0x314>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02b      	beq.n	8003bca <HAL_GPIO_Init+0x226>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a51      	ldr	r2, [pc, #324]	; (8003cbc <HAL_GPIO_Init+0x318>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d025      	beq.n	8003bc6 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_GPIO_Init+0x31c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4f      	ldr	r2, [pc, #316]	; (8003cc4 <HAL_GPIO_Init+0x320>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d019      	beq.n	8003bbe <HAL_GPIO_Init+0x21a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4e      	ldr	r2, [pc, #312]	; (8003cc8 <HAL_GPIO_Init+0x324>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_Init+0x216>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4d      	ldr	r2, [pc, #308]	; (8003ccc <HAL_GPIO_Init+0x328>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00d      	beq.n	8003bb6 <HAL_GPIO_Init+0x212>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4c      	ldr	r2, [pc, #304]	; (8003cd0 <HAL_GPIO_Init+0x32c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <HAL_GPIO_Init+0x20e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a4b      	ldr	r2, [pc, #300]	; (8003cd4 <HAL_GPIO_Init+0x330>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_GPIO_Init+0x20a>
 8003baa:	2307      	movs	r3, #7
 8003bac:	e00e      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	e00c      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	e00a      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e008      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bba:	2304      	movs	r3, #4
 8003bbc:	e006      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e004      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e002      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_GPIO_Init+0x228>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	f002 0203 	and.w	r2, r2, #3
 8003bd2:	0092      	lsls	r2, r2, #2
 8003bd4:	4093      	lsls	r3, r2
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bdc:	4935      	ldr	r1, [pc, #212]	; (8003cb4 <HAL_GPIO_Init+0x310>)
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bea:	4b3b      	ldr	r3, [pc, #236]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c0e:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_GPIO_Init+0x334>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b0f      	cmp	r3, #15
 8003c9c:	f67f ae90 	bls.w	80039c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3724      	adds	r7, #36	; 0x24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	40020800 	.word	0x40020800
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40021400 	.word	0x40021400
 8003cd0:	40021800 	.word	0x40021800
 8003cd4:	40021c00 	.word	0x40021c00
 8003cd8:	40013c00 	.word	0x40013c00

08003cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	887b      	ldrh	r3, [r7, #2]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
 8003cf8:	e001      	b.n	8003cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d1c:	787b      	ldrb	r3, [r7, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d28:	e003      	b.n	8003d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2a:	887b      	ldrh	r3, [r7, #2]
 8003d2c:	041a      	lsls	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	619a      	str	r2, [r3, #24]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e12b      	b.n	8003faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe fe0c 	bl	8002984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	; 0x24
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da4:	f002 f8fa 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a81      	ldr	r2, [pc, #516]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d807      	bhi.n	8003dc4 <HAL_I2C_Init+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_I2C_Init+0x278>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e006      	b.n	8003dd2 <HAL_I2C_Init+0x92>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <HAL_I2C_Init+0x27c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e7      	b.n	8003faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_I2C_Init+0x280>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d802      	bhi.n	8003e14 <HAL_I2C_Init+0xd4>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	e009      	b.n	8003e28 <HAL_I2C_Init+0xe8>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a69      	ldr	r2, [pc, #420]	; (8003fc4 <HAL_I2C_Init+0x284>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	3301      	adds	r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	495c      	ldr	r1, [pc, #368]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d819      	bhi.n	8003e7c <HAL_I2C_Init+0x13c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e59      	subs	r1, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_I2C_Init+0x138>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e59      	subs	r1, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	e051      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e04f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <HAL_I2C_Init+0x168>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e012      	b.n	8003ece <HAL_I2C_Init+0x18e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x196>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e022      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10e      	bne.n	8003efc <HAL_I2C_Init+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e58      	subs	r0, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	440b      	add	r3, r1
 8003eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6809      	ldr	r1, [r1, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6911      	ldr	r1, [r2, #16]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	000186a0 	.word	0x000186a0
 8003fb8:	001e847f 	.word	0x001e847f
 8003fbc:	003d08ff 	.word	0x003d08ff
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	817b      	strh	r3, [r7, #10]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7ff f802 	bl	8002fe4 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f040 80e0 	bne.w	80041b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2319      	movs	r3, #25
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4970      	ldr	r1, [pc, #448]	; (80041bc <HAL_I2C_Master_Transmit+0x1f4>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f001 f928 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	e0d3      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x50>
 8004014:	2302      	movs	r3, #2
 8004016:	e0cc      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d007      	beq.n	800403e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2221      	movs	r2, #33	; 0x21
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2210      	movs	r2, #16
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	893a      	ldrh	r2, [r7, #8]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004080:	8979      	ldrh	r1, [r7, #10]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fe14 	bl	8004cb4 <I2C_MasterRequestWrite>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e08d      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040ac:	e066      	b.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 f9e6 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_I2C_Master_Transmit+0x188>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f001 f9dd 	bl	8005514 <I2C_WaitOnBTFFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e01a      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d194      	bne.n	80040ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000

080041c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	; 0x30
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	460b      	mov	r3, r1
 80041d2:	817b      	strh	r3, [r7, #10]
 80041d4:	4613      	mov	r3, r2
 80041d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7fe ff04 	bl	8002fe4 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	f040 8217 	bne.w	800461a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2319      	movs	r3, #25
 80041f2:	2201      	movs	r2, #1
 80041f4:	497c      	ldr	r1, [pc, #496]	; (80043e8 <HAL_I2C_Master_Receive+0x224>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f001 f82a 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	e20a      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_I2C_Master_Receive+0x50>
 8004210:	2302      	movs	r3, #2
 8004212:	e203      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d007      	beq.n	800423a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2222      	movs	r2, #34	; 0x22
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2210      	movs	r2, #16
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a5c      	ldr	r2, [pc, #368]	; (80043ec <HAL_I2C_Master_Receive+0x228>)
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800427c:	8979      	ldrh	r1, [r7, #10]
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fd98 	bl	8004db8 <I2C_MasterRequestRead>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1c4      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d113      	bne.n	80042c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e198      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d11b      	bne.n	8004302 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e178      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11b      	bne.n	8004342 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004318:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	e158      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004368:	e144      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	2b03      	cmp	r3, #3
 8004370:	f200 80f1 	bhi.w	8004556 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	2b01      	cmp	r3, #1
 800437a:	d123      	bne.n	80043c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f001 f90f 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e145      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c2:	e117      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d14e      	bne.n	800446a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	2200      	movs	r2, #0
 80043d4:	4906      	ldr	r1, [pc, #24]	; (80043f0 <HAL_I2C_Master_Receive+0x22c>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 ff3a 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e11a      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000
 80043f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004468:	e0c4      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	496c      	ldr	r1, [pc, #432]	; (8004624 <HAL_I2C_Master_Receive+0x460>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 feeb 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0cb      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	4955      	ldr	r1, [pc, #340]	; (8004624 <HAL_I2C_Master_Receive+0x460>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 febd 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e09d      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004554:	e04e      	b.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 f822 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e058      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d124      	bne.n	80045f4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f47f aeb6 	bne.w	800436a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	00010004 	.word	0x00010004

08004628 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4603      	mov	r3, r0
 8004638:	817b      	strh	r3, [r7, #10]
 800463a:	460b      	mov	r3, r1
 800463c:	813b      	strh	r3, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004642:	f7fe fccf 	bl	8002fe4 <HAL_GetTick>
 8004646:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	f040 80d9 	bne.w	8004808 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2319      	movs	r3, #25
 800465c:	2201      	movs	r2, #1
 800465e:	496d      	ldr	r1, [pc, #436]	; (8004814 <HAL_I2C_Mem_Write+0x1ec>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fdf5 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
 800466e:	e0cc      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_I2C_Mem_Write+0x56>
 800467a:	2302      	movs	r3, #2
 800467c:	e0c5      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d007      	beq.n	80046a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2221      	movs	r2, #33	; 0x21
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2240      	movs	r2, #64	; 0x40
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a3a      	ldr	r2, [r7, #32]
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a4d      	ldr	r2, [pc, #308]	; (8004818 <HAL_I2C_Mem_Write+0x1f0>)
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e6:	88f8      	ldrh	r0, [r7, #6]
 80046e8:	893a      	ldrh	r2, [r7, #8]
 80046ea:	8979      	ldrh	r1, [r7, #10]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	4603      	mov	r3, r0
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fc2c 	bl	8004f54 <I2C_RequestMemoryWrite>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d052      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e081      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 feba 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06b      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_I2C_Mem_Write+0x180>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1aa      	bne.n	8004706 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fead 	bl	8005514 <I2C_WaitOnBTFFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00d      	beq.n	80047dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d107      	bne.n	80047d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e016      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	00100002 	.word	0x00100002
 8004818:	ffff0000 	.word	0xffff0000

0800481c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	461a      	mov	r2, r3
 800482a:	4603      	mov	r3, r0
 800482c:	817b      	strh	r3, [r7, #10]
 800482e:	460b      	mov	r3, r1
 8004830:	813b      	strh	r3, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004836:	f7fe fbd5 	bl	8002fe4 <HAL_GetTick>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b20      	cmp	r3, #32
 8004846:	f040 8214 	bne.w	8004c72 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	2319      	movs	r3, #25
 8004850:	2201      	movs	r2, #1
 8004852:	497b      	ldr	r1, [pc, #492]	; (8004a40 <HAL_I2C_Mem_Read+0x224>)
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fcfb 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004860:	2302      	movs	r3, #2
 8004862:	e207      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_I2C_Mem_Read+0x56>
 800486e:	2302      	movs	r3, #2
 8004870:	e200      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d007      	beq.n	8004898 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2222      	movs	r2, #34	; 0x22
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2240      	movs	r2, #64	; 0x40
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a5b      	ldr	r2, [pc, #364]	; (8004a44 <HAL_I2C_Mem_Read+0x228>)
 80048d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048da:	88f8      	ldrh	r0, [r7, #6]
 80048dc:	893a      	ldrh	r2, [r7, #8]
 80048de:	8979      	ldrh	r1, [r7, #10]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4603      	mov	r3, r0
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fbc8 	bl	8005080 <I2C_RequestMemoryRead>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e1bc      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d113      	bne.n	800492a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004902:	2300      	movs	r3, #0
 8004904:	623b      	str	r3, [r7, #32]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	623b      	str	r3, [r7, #32]
 8004916:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e190      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	2b01      	cmp	r3, #1
 8004930:	d11b      	bne.n	800496a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e170      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	2b02      	cmp	r3, #2
 8004970:	d11b      	bne.n	80049aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	e150      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049c0:	e144      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	f200 80f1 	bhi.w	8004bae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d123      	bne.n	8004a1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fde3 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e145      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a1a:	e117      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d14e      	bne.n	8004ac2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	4906      	ldr	r1, [pc, #24]	; (8004a48 <HAL_I2C_Mem_Read+0x22c>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fc0e 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d008      	beq.n	8004a4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e11a      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
 8004a3e:	bf00      	nop
 8004a40:	00100002 	.word	0x00100002
 8004a44:	ffff0000 	.word	0xffff0000
 8004a48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ac0:	e0c4      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	2200      	movs	r2, #0
 8004aca:	496c      	ldr	r1, [pc, #432]	; (8004c7c <HAL_I2C_Mem_Read+0x460>)
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fbbf 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0cb      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	2200      	movs	r2, #0
 8004b26:	4955      	ldr	r1, [pc, #340]	; (8004c7c <HAL_I2C_Mem_Read+0x460>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fb91 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e09d      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bac:	e04e      	b.n	8004c4c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fcf6 	bl	80055a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e058      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d124      	bne.n	8004c4c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d107      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c18:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f47f aeb6 	bne.w	80049c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2302      	movs	r3, #2
  }
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3728      	adds	r7, #40	; 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	00010004 	.word	0x00010004

08004c80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d006      	beq.n	8004cde <I2C_MasterRequestWrite+0x2a>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d003      	beq.n	8004cde <I2C_MasterRequestWrite+0x2a>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cdc:	d108      	bne.n	8004cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	e00b      	b.n	8004d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	2b12      	cmp	r3, #18
 8004cf6:	d107      	bne.n	8004d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fa9b 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00d      	beq.n	8004d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2e:	d103      	bne.n	8004d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e035      	b.n	8004da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d44:	d108      	bne.n	8004d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d46:	897b      	ldrh	r3, [r7, #10]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d54:	611a      	str	r2, [r3, #16]
 8004d56:	e01b      	b.n	8004d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d58:	897b      	ldrh	r3, [r7, #10]
 8004d5a:	11db      	asrs	r3, r3, #7
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 0306 	and.w	r3, r3, #6
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f063 030f 	orn	r3, r3, #15
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	490e      	ldr	r1, [pc, #56]	; (8004db0 <I2C_MasterRequestWrite+0xfc>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fae4 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e010      	b.n	8004da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d86:	897b      	ldrh	r3, [r7, #10]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4907      	ldr	r1, [pc, #28]	; (8004db4 <I2C_MasterRequestWrite+0x100>)
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fad4 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	00010008 	.word	0x00010008
 8004db4:	00010002 	.word	0x00010002

08004db8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ddc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d006      	beq.n	8004df2 <I2C_MasterRequestRead+0x3a>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d003      	beq.n	8004df2 <I2C_MasterRequestRead+0x3a>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004df0:	d108      	bne.n	8004e04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e00b      	b.n	8004e1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	2b11      	cmp	r3, #17
 8004e0a:	d107      	bne.n	8004e1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fa11 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	d103      	bne.n	8004e4c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e079      	b.n	8004f44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e58:	d108      	bne.n	8004e6c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e5a:	897b      	ldrh	r3, [r7, #10]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	611a      	str	r2, [r3, #16]
 8004e6a:	e05f      	b.n	8004f2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e6c:	897b      	ldrh	r3, [r7, #10]
 8004e6e:	11db      	asrs	r3, r3, #7
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0306 	and.w	r3, r3, #6
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f063 030f 	orn	r3, r3, #15
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4930      	ldr	r1, [pc, #192]	; (8004f4c <I2C_MasterRequestRead+0x194>)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa5a 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e054      	b.n	8004f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e9a:	897b      	ldrh	r3, [r7, #10]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4929      	ldr	r1, [pc, #164]	; (8004f50 <I2C_MasterRequestRead+0x198>)
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fa4a 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e044      	b.n	8004f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ede:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f9af 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f06:	d103      	bne.n	8004f10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e017      	b.n	8004f44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f14:	897b      	ldrh	r3, [r7, #10]
 8004f16:	11db      	asrs	r3, r3, #7
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0306 	and.w	r3, r3, #6
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 030e 	orn	r3, r3, #14
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4907      	ldr	r1, [pc, #28]	; (8004f50 <I2C_MasterRequestRead+0x198>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fa06 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	00010008 	.word	0x00010008
 8004f50:	00010002 	.word	0x00010002

08004f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	460b      	mov	r3, r1
 8004f68:	813b      	strh	r3, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f960 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa4:	d103      	bne.n	8004fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e05f      	b.n	8005072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	492d      	ldr	r1, [pc, #180]	; (800507c <I2C_RequestMemoryWrite+0x128>)
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f9bb 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e04c      	b.n	8005072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	6a39      	ldr	r1, [r7, #32]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fa46 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	2b04      	cmp	r3, #4
 8005004:	d107      	bne.n	8005016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e02b      	b.n	8005072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005020:	893b      	ldrh	r3, [r7, #8]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	611a      	str	r2, [r3, #16]
 800502a:	e021      	b.n	8005070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	b29b      	uxth	r3, r3
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503c:	6a39      	ldr	r1, [r7, #32]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa20 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00d      	beq.n	8005066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b04      	cmp	r3, #4
 8005050:	d107      	bne.n	8005062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e005      	b.n	8005072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005066:	893b      	ldrh	r3, [r7, #8]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	00010002 	.word	0x00010002

08005080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	461a      	mov	r2, r3
 800508e:	4603      	mov	r3, r0
 8005090:	817b      	strh	r3, [r7, #10]
 8005092:	460b      	mov	r3, r1
 8005094:	813b      	strh	r3, [r7, #8]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f8c2 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e0:	d103      	bne.n	80050ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0aa      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050ee:	897b      	ldrh	r3, [r7, #10]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	6a3a      	ldr	r2, [r7, #32]
 8005102:	4952      	ldr	r1, [pc, #328]	; (800524c <I2C_RequestMemoryRead+0x1cc>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f91d 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e097      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512c:	6a39      	ldr	r1, [r7, #32]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f9a8 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b04      	cmp	r3, #4
 8005140:	d107      	bne.n	8005152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e076      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d105      	bne.n	8005168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	611a      	str	r2, [r3, #16]
 8005166:	e021      	b.n	80051ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005168:	893b      	ldrh	r3, [r7, #8]
 800516a:	0a1b      	lsrs	r3, r3, #8
 800516c:	b29b      	uxth	r3, r3
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005178:	6a39      	ldr	r1, [r7, #32]
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 f982 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00d      	beq.n	80051a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	2b04      	cmp	r3, #4
 800518c:	d107      	bne.n	800519e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e050      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a2:	893b      	ldrh	r3, [r7, #8]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	6a39      	ldr	r1, [r7, #32]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f967 	bl	8005484 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d107      	bne.n	80051d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e035      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f82b 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800520e:	d103      	bne.n	8005218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e013      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800521c:	897b      	ldrh	r3, [r7, #10]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	4906      	ldr	r1, [pc, #24]	; (800524c <I2C_RequestMemoryRead+0x1cc>)
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f886 	bl	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	00010002 	.word	0x00010002

08005250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005260:	e048      	b.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d044      	beq.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526a:	f7fd febb 	bl	8002fe4 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d139      	bne.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10d      	bne.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	43da      	mvns	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4013      	ands	r3, r2
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	e00c      	b.n	80052c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	43da      	mvns	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d116      	bne.n	80052f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e023      	b.n	800533c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10d      	bne.n	800531a <I2C_WaitOnFlagUntilTimeout+0xca>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	43da      	mvns	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf0c      	ite	eq
 8005310:	2301      	moveq	r3, #1
 8005312:	2300      	movne	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	e00c      	b.n	8005334 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	43da      	mvns	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4013      	ands	r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	429a      	cmp	r2, r3
 8005338:	d093      	beq.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005352:	e071      	b.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005362:	d123      	bne.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005372:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800537c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f043 0204 	orr.w	r2, r3, #4
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e067      	b.n	800547c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d041      	beq.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b4:	f7fd fe16 	bl	8002fe4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d302      	bcc.n	80053ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d136      	bne.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10c      	bne.n	80053ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf14      	ite	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	2300      	moveq	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	e00b      	b.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	43da      	mvns	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e021      	b.n	800547c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d10c      	bne.n	800545c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	43da      	mvns	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf14      	ite	ne
 8005454:	2301      	movne	r3, #1
 8005456:	2300      	moveq	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e00b      	b.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	f47f af6d 	bne.w	8005354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005490:	e034      	b.n	80054fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 f8e3 	bl	800565e <I2C_IsAcknowledgeFailed>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e034      	b.n	800550c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d028      	beq.n	80054fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fd fd9b 	bl	8002fe4 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11d      	bne.n	80054fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d016      	beq.n	80054fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e007      	b.n	800550c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d1c3      	bne.n	8005492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005520:	e034      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f89b 	bl	800565e <I2C_IsAcknowledgeFailed>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e034      	b.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d028      	beq.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fd fd53 	bl	8002fe4 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d11d      	bne.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b04      	cmp	r3, #4
 800555c:	d016      	beq.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e007      	b.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d1c3      	bne.n	8005522 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055b0:	e049      	b.n	8005646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d119      	bne.n	80055f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e030      	b.n	8005656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f4:	f7fd fcf6 	bl	8002fe4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d302      	bcc.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11d      	bne.n	8005646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d016      	beq.n	8005646 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e007      	b.n	8005656 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d1ae      	bne.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d11b      	bne.n	80056ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800567e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e267      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d075      	beq.n	80057c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056da:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d00c      	beq.n	8005700 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e6:	4b85      	ldr	r3, [pc, #532]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d112      	bne.n	8005718 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056f2:	4b82      	ldr	r3, [pc, #520]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fe:	d10b      	bne.n	8005718 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005700:	4b7e      	ldr	r3, [pc, #504]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d05b      	beq.n	80057c4 <HAL_RCC_OscConfig+0x108>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d157      	bne.n	80057c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e242      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d106      	bne.n	8005730 <HAL_RCC_OscConfig+0x74>
 8005722:	4b76      	ldr	r3, [pc, #472]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a75      	ldr	r2, [pc, #468]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e01d      	b.n	800576c <HAL_RCC_OscConfig+0xb0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x98>
 800573a:	4b70      	ldr	r3, [pc, #448]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6f      	ldr	r2, [pc, #444]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b6d      	ldr	r3, [pc, #436]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6c      	ldr	r2, [pc, #432]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e00b      	b.n	800576c <HAL_RCC_OscConfig+0xb0>
 8005754:	4b69      	ldr	r3, [pc, #420]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a68      	ldr	r2, [pc, #416]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 800575a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4b66      	ldr	r3, [pc, #408]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a65      	ldr	r2, [pc, #404]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800576a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d013      	beq.n	800579c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fd fc36 	bl	8002fe4 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800577c:	f7fd fc32 	bl	8002fe4 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b64      	cmp	r3, #100	; 0x64
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e207      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0xc0>
 800579a:	e014      	b.n	80057c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579c:	f7fd fc22 	bl	8002fe4 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057a4:	f7fd fc1e 	bl	8002fe4 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b64      	cmp	r3, #100	; 0x64
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e1f3      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b6:	4b51      	ldr	r3, [pc, #324]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0xe8>
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d063      	beq.n	800589a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057d2:	4b4a      	ldr	r3, [pc, #296]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057de:	4b47      	ldr	r3, [pc, #284]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d11c      	bne.n	8005824 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ea:	4b44      	ldr	r3, [pc, #272]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d116      	bne.n	8005824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f6:	4b41      	ldr	r3, [pc, #260]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_RCC_OscConfig+0x152>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e1c7      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580e:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4937      	ldr	r1, [pc, #220]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005822:	e03a      	b.n	800589a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d020      	beq.n	800586e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800582c:	4b34      	ldr	r3, [pc, #208]	; (8005900 <HAL_RCC_OscConfig+0x244>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fd fbd7 	bl	8002fe4 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800583a:	f7fd fbd3 	bl	8002fe4 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e1a8      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584c:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005858:	4b28      	ldr	r3, [pc, #160]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4925      	ldr	r1, [pc, #148]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]
 800586c:	e015      	b.n	800589a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586e:	4b24      	ldr	r3, [pc, #144]	; (8005900 <HAL_RCC_OscConfig+0x244>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fd fbb6 	bl	8002fe4 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800587c:	f7fd fbb2 	bl	8002fe4 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e187      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d036      	beq.n	8005914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <HAL_RCC_OscConfig+0x248>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fd fb96 	bl	8002fe4 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058bc:	f7fd fb92 	bl	8002fe4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e167      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ce:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCC_OscConfig+0x240>)
 80058d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0x200>
 80058da:	e01b      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <HAL_RCC_OscConfig+0x248>)
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e2:	f7fd fb7f 	bl	8002fe4 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e8:	e00e      	b.n	8005908 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ea:	f7fd fb7b 	bl	8002fe4 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d907      	bls.n	8005908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e150      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	42470000 	.word	0x42470000
 8005904:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005908:	4b88      	ldr	r3, [pc, #544]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 800590a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ea      	bne.n	80058ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8097 	beq.w	8005a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005926:	4b81      	ldr	r3, [pc, #516]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	4b7d      	ldr	r3, [pc, #500]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	4a7c      	ldr	r2, [pc, #496]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005940:	6413      	str	r3, [r2, #64]	; 0x40
 8005942:	4b7a      	ldr	r3, [pc, #488]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005952:	4b77      	ldr	r3, [pc, #476]	; (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d118      	bne.n	8005990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595e:	4b74      	ldr	r3, [pc, #464]	; (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a73      	ldr	r2, [pc, #460]	; (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800596a:	f7fd fb3b 	bl	8002fe4 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005972:	f7fd fb37 	bl	8002fe4 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e10c      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005984:	4b6a      	ldr	r3, [pc, #424]	; (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d106      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2ea>
 8005998:	4b64      	ldr	r3, [pc, #400]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4a63      	ldr	r2, [pc, #396]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70
 80059a4:	e01c      	b.n	80059e0 <HAL_RCC_OscConfig+0x324>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x30c>
 80059ae:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a5e      	ldr	r2, [pc, #376]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059b4:	f043 0304 	orr.w	r3, r3, #4
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ba:	4b5c      	ldr	r3, [pc, #368]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a5b      	ldr	r2, [pc, #364]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	6713      	str	r3, [r2, #112]	; 0x70
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0x324>
 80059c8:	4b58      	ldr	r3, [pc, #352]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	4a57      	ldr	r2, [pc, #348]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	6713      	str	r3, [r2, #112]	; 0x70
 80059d4:	4b55      	ldr	r3, [pc, #340]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d8:	4a54      	ldr	r2, [pc, #336]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059da:	f023 0304 	bic.w	r3, r3, #4
 80059de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fd fafc 	bl	8002fe4 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f0:	f7fd faf8 	bl	8002fe4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e0cb      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a06:	4b49      	ldr	r3, [pc, #292]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ee      	beq.n	80059f0 <HAL_RCC_OscConfig+0x334>
 8005a12:	e014      	b.n	8005a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a14:	f7fd fae6 	bl	8002fe4 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1a:	e00a      	b.n	8005a32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1c:	f7fd fae2 	bl	8002fe4 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e0b5      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a32:	4b3e      	ldr	r3, [pc, #248]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ee      	bne.n	8005a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d105      	bne.n	8005a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a44:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	4a38      	ldr	r2, [pc, #224]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80a1 	beq.w	8005b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a5a:	4b34      	ldr	r3, [pc, #208]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d05c      	beq.n	8005b20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d141      	bne.n	8005af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <HAL_RCC_OscConfig+0x478>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a74:	f7fd fab6 	bl	8002fe4 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fd fab2 	bl	8002fe4 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e087      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	061b      	lsls	r3, r3, #24
 8005abe:	491b      	ldr	r1, [pc, #108]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_OscConfig+0x478>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aca:	f7fd fa8b 	bl	8002fe4 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fd fa87 	bl	8002fe4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e05c      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae4:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x416>
 8005af0:	e054      	b.n	8005b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0x478>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af8:	f7fd fa74 	bl	8002fe4 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fd fa70 	bl	8002fe4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e045      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x444>
 8005b1e:	e03d      	b.n	8005b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e038      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40007000 	.word	0x40007000
 8005b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b38:	4b1b      	ldr	r3, [pc, #108]	; (8005ba8 <HAL_RCC_OscConfig+0x4ec>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d028      	beq.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d121      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d11a      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d111      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800

08005bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0cc      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b68      	ldr	r3, [pc, #416]	; (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d90c      	bls.n	8005be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b65      	ldr	r3, [pc, #404]	; (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b63      	ldr	r3, [pc, #396]	; (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0b8      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c00:	4b59      	ldr	r3, [pc, #356]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	4a58      	ldr	r2, [pc, #352]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c18:	4b53      	ldr	r3, [pc, #332]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a52      	ldr	r2, [pc, #328]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c24:	4b50      	ldr	r3, [pc, #320]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	494d      	ldr	r1, [pc, #308]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d044      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d119      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e07f      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d003      	beq.n	8005c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d107      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e06f      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7a:	4b3b      	ldr	r3, [pc, #236]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e067      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8a:	4b37      	ldr	r3, [pc, #220]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 0203 	bic.w	r2, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4934      	ldr	r1, [pc, #208]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c9c:	f7fd f9a2 	bl	8002fe4 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca4:	f7fd f99e 	bl	8002fe4 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e04f      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 020c 	and.w	r2, r3, #12
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d1eb      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b25      	ldr	r3, [pc, #148]	; (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d20c      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e032      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d00:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4916      	ldr	r1, [pc, #88]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	490e      	ldr	r1, [pc, #56]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d32:	f000 f821 	bl	8005d78 <HAL_RCC_GetSysClockFreq>
 8005d36:	4602      	mov	r2, r0
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	490a      	ldr	r1, [pc, #40]	; (8005d6c <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	5ccb      	ldrb	r3, [r1, r3]
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	4a09      	ldr	r2, [pc, #36]	; (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d4e:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fd f902 	bl	8002f5c <HAL_InitTick>

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40023c00 	.word	0x40023c00
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	0800f16c 	.word	0x0800f16c
 8005d70:	2000001c 	.word	0x2000001c
 8005d74:	20000020 	.word	0x20000020

08005d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d7c:	b094      	sub	sp, #80	; 0x50
 8005d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
 8005d84:	2300      	movs	r3, #0
 8005d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d88:	2300      	movs	r3, #0
 8005d8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d90:	4b79      	ldr	r3, [pc, #484]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d00d      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x40>
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	f200 80e1 	bhi.w	8005f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x34>
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d003      	beq.n	8005db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005daa:	e0db      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b73      	ldr	r3, [pc, #460]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005dae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005db0:	e0db      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005db2:	4b73      	ldr	r3, [pc, #460]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8005db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005db6:	e0d8      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db8:	4b6f      	ldr	r3, [pc, #444]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dc2:	4b6d      	ldr	r3, [pc, #436]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d063      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dce:	4b6a      	ldr	r3, [pc, #424]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	099b      	lsrs	r3, r3, #6
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
 8005de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f04f 0000 	mov.w	r0, #0
 8005df2:	f04f 0100 	mov.w	r1, #0
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dfc:	0150      	lsls	r0, r2, #5
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4621      	mov	r1, r4
 8005e04:	1a51      	subs	r1, r2, r1
 8005e06:	6139      	str	r1, [r7, #16]
 8005e08:	4629      	mov	r1, r5
 8005e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	018b      	lsls	r3, r1, #6
 8005e20:	4651      	mov	r1, sl
 8005e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e26:	4651      	mov	r1, sl
 8005e28:	018a      	lsls	r2, r1, #6
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005e30:	4659      	mov	r1, fp
 8005e32:	eb63 0901 	sbc.w	r9, r3, r1
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e4a:	4690      	mov	r8, r2
 8005e4c:	4699      	mov	r9, r3
 8005e4e:	4623      	mov	r3, r4
 8005e50:	eb18 0303 	adds.w	r3, r8, r3
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	462b      	mov	r3, r5
 8005e58:	eb49 0303 	adc.w	r3, r9, r3
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	024b      	lsls	r3, r1, #9
 8005e6e:	4621      	mov	r1, r4
 8005e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e74:	4621      	mov	r1, r4
 8005e76:	024a      	lsls	r2, r1, #9
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7e:	2200      	movs	r2, #0
 8005e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e88:	f7fa fefe 	bl	8000c88 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4613      	mov	r3, r2
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e94:	e058      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e96:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ea6:	623b      	str	r3, [r7, #32]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	0159      	lsls	r1, r3, #5
 8005ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec2:	0150      	lsls	r0, r2, #5
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4641      	mov	r1, r8
 8005eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ece:	4649      	mov	r1, r9
 8005ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8005eec:	eb63 050b 	sbc.w	r5, r3, fp
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	00eb      	lsls	r3, r5, #3
 8005efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efe:	00e2      	lsls	r2, r4, #3
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	4643      	mov	r3, r8
 8005f06:	18e3      	adds	r3, r4, r3
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	eb45 0303 	adc.w	r3, r5, r3
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f1e:	4629      	mov	r1, r5
 8005f20:	028b      	lsls	r3, r1, #10
 8005f22:	4621      	mov	r1, r4
 8005f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f28:	4621      	mov	r1, r4
 8005f2a:	028a      	lsls	r2, r1, #10
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	2200      	movs	r2, #0
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	61fa      	str	r2, [r7, #28]
 8005f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f3c:	f7fa fea4 	bl	8000c88 <__aeabi_uldivmod>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4613      	mov	r3, r2
 8005f46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	3301      	adds	r3, #1
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f62:	e002      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3750      	adds	r7, #80	; 0x50
 8005f70:	46bd      	mov	sp, r7
 8005f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	007a1200 	.word	0x007a1200

08005f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f88:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	2000001c 	.word	0x2000001c

08005f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fa0:	f7ff fff0 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0a9b      	lsrs	r3, r3, #10
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	4903      	ldr	r1, [pc, #12]	; (8005fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb2:	5ccb      	ldrb	r3, [r1, r3]
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	0800f17c 	.word	0x0800f17c

08005fc4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e022      	b.n	800601c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fc fd13 	bl	8002a14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f814 	bl	8006024 <HAL_SD_InitCard>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e00a      	b.n	800601c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006024:	b5b0      	push	{r4, r5, r7, lr}
 8006026:	b08e      	sub	sp, #56	; 0x38
 8006028:	af04      	add	r7, sp, #16
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800602c:	2300      	movs	r3, #0
 800602e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800603c:	2300      	movs	r3, #0
 800603e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006040:	2376      	movs	r3, #118	; 0x76
 8006042:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681d      	ldr	r5, [r3, #0]
 8006048:	466c      	mov	r4, sp
 800604a:	f107 0314 	add.w	r3, r7, #20
 800604e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006056:	f107 0308 	add.w	r3, r7, #8
 800605a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800605c:	4628      	mov	r0, r5
 800605e:	f001 feb7 	bl	8007dd0 <SDIO_Init>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e04f      	b.n	8006114 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006074:	4b29      	ldr	r3, [pc, #164]	; (800611c <HAL_SD_InitCard+0xf8>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f001 feef 	bl	8007e62 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_SD_InitCard+0xf8>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800608a:	2002      	movs	r0, #2
 800608c:	f7fc ffb6 	bl	8002ffc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 ff6b 	bl	8006f6c <SD_PowerON>
 8006096:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e02e      	b.n	8006114 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fe8a 	bl	8006dd0 <SD_InitCard>
 80060bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e01b      	b.n	8006114 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 ff4e 	bl	8007f86 <SDMMC_CmdBlockLength>
 80060ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00f      	beq.n	8006112 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <HAL_SD_InitCard+0xfc>)
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3728      	adds	r7, #40	; 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	bdb0      	pop	{r4, r5, r7, pc}
 800611c:	422580a0 	.word	0x422580a0
 8006120:	004005ff 	.word	0x004005ff

08006124 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08c      	sub	sp, #48	; 0x30
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d107      	bne.n	800614c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0c0      	b.n	80062ce <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	f040 80b9 	bne.w	80062cc <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	441a      	add	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616a:	429a      	cmp	r2, r3
 800616c:	d907      	bls.n	800617e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006172:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e0a7      	b.n	80062ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2203      	movs	r2, #3
 8006182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2200      	movs	r2, #0
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800619c:	f043 0302 	orr.w	r3, r3, #2
 80061a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	4a4c      	ldr	r2, [pc, #304]	; (80062d8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80061a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a4b      	ldr	r2, [pc, #300]	; (80062dc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80061b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2200      	movs	r2, #0
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3380      	adds	r3, #128	; 0x80
 80061e8:	4619      	mov	r1, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	025b      	lsls	r3, r3, #9
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	f7fd f8e7 	bl	80033c4 <HAL_DMA_Start_IT>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d017      	beq.n	800622c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800620a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a33      	ldr	r2, [pc, #204]	; (80062e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006212:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e050      	b.n	80062ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800622c:	4b2d      	ldr	r3, [pc, #180]	; (80062e4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	2b01      	cmp	r3, #1
 8006238:	d002      	beq.n	8006240 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	025b      	lsls	r3, r3, #9
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006240:	f04f 33ff 	mov.w	r3, #4294967295
 8006244:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	025b      	lsls	r3, r3, #9
 800624a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800624c:	2390      	movs	r3, #144	; 0x90
 800624e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006250:	2302      	movs	r3, #2
 8006252:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006254:	2300      	movs	r3, #0
 8006256:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006258:	2301      	movs	r3, #1
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f107 0210 	add.w	r2, r7, #16
 8006264:	4611      	mov	r1, r2
 8006266:	4618      	mov	r0, r3
 8006268:	f001 fe61 	bl	8007f2e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d90a      	bls.n	8006288 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2282      	movs	r2, #130	; 0x82
 8006276:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800627e:	4618      	mov	r0, r3
 8006280:	f001 fec5 	bl	800800e <SDMMC_CmdReadMultiBlock>
 8006284:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006286:	e009      	b.n	800629c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2281      	movs	r2, #129	; 0x81
 800628c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006294:	4618      	mov	r0, r3
 8006296:	f001 fe98 	bl	8007fca <SDMMC_CmdReadSingleBlock>
 800629a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d012      	beq.n	80062c8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a0e      	ldr	r2, [pc, #56]	; (80062e0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	431a      	orrs	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e002      	b.n	80062ce <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3730      	adds	r7, #48	; 0x30
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	08006bdf 	.word	0x08006bdf
 80062dc:	08006c51 	.word	0x08006c51
 80062e0:	004005ff 	.word	0x004005ff
 80062e4:	4225858c 	.word	0x4225858c

080062e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0c5      	b.n	800649c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	f040 80be 	bne.w	800649a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	441a      	add	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632e:	429a      	cmp	r2, r3
 8006330:	d907      	bls.n	8006342 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0ac      	b.n	800649c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2203      	movs	r2, #3
 8006346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006360:	f043 0302 	orr.w	r3, r3, #2
 8006364:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	4a4e      	ldr	r2, [pc, #312]	; (80064a4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800636c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	4a4d      	ldr	r2, [pc, #308]	; (80064a8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	2200      	movs	r2, #0
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	2b01      	cmp	r3, #1
 8006384:	d002      	beq.n	800638c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	025b      	lsls	r3, r3, #9
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d90a      	bls.n	80063a8 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	22a0      	movs	r2, #160	; 0xa0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 fe79 	bl	8008096 <SDMMC_CmdWriteMultiBlock>
 80063a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063a6:	e009      	b.n	80063bc <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2290      	movs	r2, #144	; 0x90
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fe4c 	bl	8008052 <SDMMC_CmdWriteSingleBlock>
 80063ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d012      	beq.n	80063e8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a39      	ldr	r2, [pc, #228]	; (80064ac <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e059      	b.n	800649c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80063e8:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	2240      	movs	r2, #64	; 0x40
 80063f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3380      	adds	r3, #128	; 0x80
 800641e:	461a      	mov	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	025b      	lsls	r3, r3, #9
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	f7fc ffcd 	bl	80033c4 <HAL_DMA_Start_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800643e:	f023 0302 	bic.w	r3, r3, #2
 8006442:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a18      	ldr	r2, [pc, #96]	; (80064ac <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e018      	b.n	800649c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	025b      	lsls	r3, r3, #9
 8006474:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006476:	2390      	movs	r3, #144	; 0x90
 8006478:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006482:	2301      	movs	r3, #1
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f107 0210 	add.w	r2, r7, #16
 800648e:	4611      	mov	r1, r2
 8006490:	4618      	mov	r0, r3
 8006492:	f001 fd4c 	bl	8007f2e <SDIO_ConfigData>

      return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3730      	adds	r7, #48	; 0x30
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08006bb5 	.word	0x08006bb5
 80064a8:	08006c51 	.word	0x08006c51
 80064ac:	004005ff 	.word	0x004005ff
 80064b0:	4225858c 	.word	0x4225858c

080064b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_SD_IRQHandler+0x2e>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fdfc 	bl	80070d8 <SD_Read_IT>
 80064e0:	e165      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 808f 	beq.w	8006610 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800650a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800650e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d039      	beq.n	800659e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <HAL_SD_IRQHandler+0x8a>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d011      	beq.n	8006562 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fdca 	bl	80080dc <SDMMC_CmdStopTransfer>
 8006548:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f92f 	bl	80067c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f240 523a 	movw	r2, #1338	; 0x53a
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_SD_IRQHandler+0xda>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f002 f9e8 	bl	8008964 <HAL_SD_RxCpltCallback>
 8006594:	e10b      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f002 f9da 	bl	8008950 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800659c:	e107      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8102 	beq.w	80067ae <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fd8f 	bl	80080dc <SDMMC_CmdStopTransfer>
 80065be:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f8f4 	bl	80067c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 80e5 	bne.w	80067ae <HAL_SD_IRQHandler+0x2fa>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 80df 	bne.w	80067ae <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0208 	bic.w	r2, r2, #8
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 f9a1 	bl	8008950 <HAL_SD_TxCpltCallback>
}
 800660e:	e0ce      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_SD_IRQHandler+0x17c>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fda6 	bl	800717a <SD_Write_IT>
 800662e:	e0be      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006636:	f240 233a 	movw	r3, #570	; 0x23a
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80b6 	beq.w	80067ae <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	f043 0202 	orr.w	r2, r3, #2
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	f043 0208 	orr.w	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	f043 0210 	orr.w	r2, r3, #16
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	f043 0208 	orr.w	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f240 723a 	movw	r2, #1850	; 0x73a
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80066dc:	f023 0302 	bic.w	r3, r3, #2
 80066e0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 fcf8 	bl	80080dc <SDMMC_CmdStopTransfer>
 80066ec:	4602      	mov	r2, r0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f855 	bl	80067c0 <HAL_SD_ErrorCallback>
}
 8006716:	e04a      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d045      	beq.n	80067ae <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_SD_IRQHandler+0x282>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d011      	beq.n	800675a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	4a1f      	ldr	r2, [pc, #124]	; (80067b8 <HAL_SD_IRQHandler+0x304>)
 800673c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	4618      	mov	r0, r3
 8006744:	f7fc fe96 	bl	8003474 <HAL_DMA_Abort_IT>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d02f      	beq.n	80067ae <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	4618      	mov	r0, r3
 8006754:	f000 face 	bl	8006cf4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006758:	e029      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_SD_IRQHandler+0x2ba>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d011      	beq.n	8006792 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <HAL_SD_IRQHandler+0x308>)
 8006774:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	4618      	mov	r0, r3
 800677c:	f7fc fe7a 	bl	8003474 <HAL_DMA_Abort_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d013      	beq.n	80067ae <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fae9 	bl	8006d62 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006790:	e00d      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f002 f8c8 	bl	800893c <HAL_SD_AbortCallback>
}
 80067ac:	e7ff      	b.n	80067ae <HAL_SD_IRQHandler+0x2fa>
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	08006cf5 	.word	0x08006cf5
 80067bc:	08006d63 	.word	0x08006d63

080067c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e2:	0f9b      	lsrs	r3, r3, #30
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ee:	0e9b      	lsrs	r3, r3, #26
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006800:	0e1b      	lsrs	r3, r3, #24
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	b2da      	uxtb	r2, r3
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006812:	0c1b      	lsrs	r3, r3, #16
 8006814:	b2da      	uxtb	r2, r3
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b2da      	uxtb	r2, r3
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682a:	b2da      	uxtb	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006834:	0d1b      	lsrs	r3, r3, #20
 8006836:	b29a      	uxth	r2, r3
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	b2da      	uxtb	r2, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006852:	0bdb      	lsrs	r3, r3, #15
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	b2da      	uxtb	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006864:	0b9b      	lsrs	r3, r3, #14
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	b2da      	uxtb	r2, r3
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006876:	0b5b      	lsrs	r3, r3, #13
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006888:	0b1b      	lsrs	r3, r3, #12
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	b2da      	uxtb	r2, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2200      	movs	r2, #0
 800689a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d163      	bne.n	800696c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a8:	009a      	lsls	r2, r3, #2
 80068aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068ae:	4013      	ands	r3, r2
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80068b4:	0f92      	lsrs	r2, r2, #30
 80068b6:	431a      	orrs	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	0edb      	lsrs	r3, r3, #27
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d2:	0e1b      	lsrs	r3, r3, #24
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e4:	0d5b      	lsrs	r3, r3, #21
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f6:	0c9b      	lsrs	r3, r3, #18
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006908:	0bdb      	lsrs	r3, r3, #15
 800690a:	b2db      	uxtb	r3, r3
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	b2da      	uxtb	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	7e1b      	ldrb	r3, [r3, #24]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	3302      	adds	r3, #2
 800692c:	2201      	movs	r2, #1
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006936:	fb03 f202 	mul.w	r2, r3, r2
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	7a1b      	ldrb	r3, [r3, #8]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2201      	movs	r2, #1
 800694a:	409a      	lsls	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006958:	0a52      	lsrs	r2, r2, #9
 800695a:	fb03 f202 	mul.w	r2, r3, r2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006968:	661a      	str	r2, [r3, #96]	; 0x60
 800696a:	e031      	b.n	80069d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	2b01      	cmp	r3, #1
 8006972:	d11d      	bne.n	80069b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	431a      	orrs	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	029a      	lsls	r2, r3, #10
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	661a      	str	r2, [r3, #96]	; 0x60
 80069ae:	e00f      	b.n	80069d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a58      	ldr	r2, [pc, #352]	; (8006b18 <HAL_SD_GetCardCSD+0x344>)
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e09d      	b.n	8006b0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d4:	0b9b      	lsrs	r3, r3, #14
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e6:	09db      	lsrs	r3, r3, #7
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	0fdb      	lsrs	r3, r3, #31
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a14:	0f5b      	lsrs	r3, r3, #29
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	0e9b      	lsrs	r3, r3, #26
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a38:	0d9b      	lsrs	r3, r3, #22
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	0d5b      	lsrs	r3, r3, #21
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	0c1b      	lsrs	r3, r3, #16
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	0bdb      	lsrs	r3, r3, #15
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	0b9b      	lsrs	r3, r3, #14
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	0b5b      	lsrs	r3, r3, #13
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	0b1b      	lsrs	r3, r3, #12
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	0a9b      	lsrs	r3, r3, #10
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	0a1b      	lsrs	r3, r3, #8
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	004005ff 	.word	0x004005ff

08006b1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa7e 	bl	8007088 <SD_SendStatus>
 8006b8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	0a5b      	lsrs	r3, r3, #9
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006baa:	693b      	ldr	r3, [r7, #16]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf0:	2b82      	cmp	r3, #130	; 0x82
 8006bf2:	d111      	bne.n	8006c18 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fa6f 	bl	80080dc <SDMMC_CmdStopTransfer>
 8006bfe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff fdd4 	bl	80067c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0208 	bic.w	r2, r2, #8
 8006c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f001 fe8f 	bl	8008964 <HAL_SD_RxCpltCallback>
#endif
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fc fdb4 	bl	80037cc <HAL_DMA_GetError>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d03e      	beq.n	8006ce8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d002      	beq.n	8006c86 <SD_DMAError+0x36>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d12d      	bne.n	8006ce2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <SD_DMAError+0xa0>)
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c9c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	f7ff ff62 	bl	8006b74 <HAL_SD_GetCardState>
 8006cb0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	d002      	beq.n	8006cbe <SD_DMAError+0x6e>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d10a      	bne.n	8006cd4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fa0a 	bl	80080dc <SDMMC_CmdStopTransfer>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006ce2:	6978      	ldr	r0, [r7, #20]
 8006ce4:	f7ff fd6c 	bl	80067c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006ce8:	bf00      	nop
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	004005ff 	.word	0x004005ff

08006cf4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff ff31 	bl	8006b74 <HAL_SD_GetCardState>
 8006d12:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d002      	beq.n	8006d2e <SD_DMATxAbort+0x3a>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	d10a      	bne.n	8006d44 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 f9d2 	bl	80080dc <SDMMC_CmdStopTransfer>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d103      	bne.n	8006d54 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f001 fdf5 	bl	800893c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006d52:	e002      	b.n	8006d5a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7ff fd33 	bl	80067c0 <HAL_SD_ErrorCallback>
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fefa 	bl	8006b74 <HAL_SD_GetCardState>
 8006d80:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b06      	cmp	r3, #6
 8006d94:	d002      	beq.n	8006d9c <SD_DMARxAbort+0x3a>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b05      	cmp	r3, #5
 8006d9a:	d10a      	bne.n	8006db2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f99b 	bl	80080dc <SDMMC_CmdStopTransfer>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	431a      	orrs	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d103      	bne.n	8006dc2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 fdbe 	bl	800893c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006dc0:	e002      	b.n	8006dc8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fcfc 	bl	80067c0 <HAL_SD_ErrorCallback>
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006dd0:	b5b0      	push	{r4, r5, r7, lr}
 8006dd2:	b094      	sub	sp, #80	; 0x50
 8006dd4:	af04      	add	r7, sp, #16
 8006dd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 f84c 	bl	8007e7e <SDIO_GetPowerState>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006df0:	e0b8      	b.n	8006f64 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d02f      	beq.n	8006e5a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fa33 	bl	800826a <SDMMC_CmdSendCID>
 8006e04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <SD_InitCard+0x40>
    {
      return errorstate;
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0e:	e0a9      	b.n	8006f64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f876 	bl	8007f08 <SDIO_GetResponse>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2104      	movs	r1, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f86d 	bl	8007f08 <SDIO_GetResponse>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2108      	movs	r1, #8
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f864 	bl	8007f08 <SDIO_GetResponse>
 8006e40:	4602      	mov	r2, r0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	210c      	movs	r1, #12
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f85b 	bl	8007f08 <SDIO_GetResponse>
 8006e52:	4602      	mov	r2, r0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d00d      	beq.n	8006e7e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f107 020e 	add.w	r2, r7, #14
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fa39 	bl	80082e4 <SDMMC_CmdSetRelAdd>
 8006e72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <SD_InitCard+0xae>
    {
      return errorstate;
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	e072      	b.n	8006f64 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d036      	beq.n	8006ef4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006e86:	89fb      	ldrh	r3, [r7, #14]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e96:	041b      	lsls	r3, r3, #16
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	f001 fa03 	bl	80082a6 <SDMMC_CmdSendCSD>
 8006ea0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eaa:	e05b      	b.n	8006f64 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f828 	bl	8007f08 <SDIO_GetResponse>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f81f 	bl	8007f08 <SDIO_GetResponse>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2108      	movs	r1, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f816 	bl	8007f08 <SDIO_GetResponse>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	210c      	movs	r1, #12
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f001 f80d 	bl	8007f08 <SDIO_GetResponse>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2104      	movs	r1, #4
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 f804 	bl	8007f08 <SDIO_GetResponse>
 8006f00:	4603      	mov	r3, r0
 8006f02:	0d1a      	lsrs	r2, r3, #20
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fc60 	bl	80067d4 <HAL_SD_GetCardCSD>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f1e:	e021      	b.n	8006f64 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6819      	ldr	r1, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	461c      	mov	r4, r3
 8006f2e:	4615      	mov	r5, r2
 8006f30:	4622      	mov	r2, r4
 8006f32:	462b      	mov	r3, r5
 8006f34:	4608      	mov	r0, r1
 8006f36:	f001 f8f3 	bl	8008120 <SDMMC_CmdSelDesel>
 8006f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <SD_InitCard+0x176>
  {
    return errorstate;
 8006f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f44:	e00e      	b.n	8006f64 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681d      	ldr	r5, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	466c      	mov	r4, sp
 8006f4e:	f103 0210 	add.w	r2, r3, #16
 8006f52:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f58:	3304      	adds	r3, #4
 8006f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 ff37 	bl	8007dd0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3740      	adds	r7, #64	; 0x40
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bdb0      	pop	{r4, r5, r7, pc}

08006f6c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 f8ee 	bl	8008166 <SDMMC_CmdGoIdleState>
 8006f8a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	e072      	b.n	800707c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 f901 	bl	80081a2 <SDMMC_CmdOperCond>
 8006fa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00d      	beq.n	8006fc4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f8d7 	bl	8008166 <SDMMC_CmdGoIdleState>
 8006fb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <SD_PowerON+0x5e>
    {
      return errorstate;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	e05b      	b.n	800707c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d137      	bne.n	8007042 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f001 f901 	bl	80081e0 <SDMMC_CmdAppCommand>
 8006fde:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d02d      	beq.n	8007042 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fea:	e047      	b.n	800707c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f8f4 	bl	80081e0 <SDMMC_CmdAppCommand>
 8006ff8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <SD_PowerON+0x98>
    {
      return errorstate;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	e03b      	b.n	800707c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	491e      	ldr	r1, [pc, #120]	; (8007084 <SD_PowerON+0x118>)
 800700a:	4618      	mov	r0, r3
 800700c:	f001 f90a 	bl	8008224 <SDMMC_CmdAppOperCommand>
 8007010:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007018:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800701c:	e02e      	b.n	800707c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f000 ff6f 	bl	8007f08 <SDIO_GetResponse>
 800702a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	0fdb      	lsrs	r3, r3, #31
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <SD_PowerON+0xcc>
 8007034:	2301      	movs	r3, #1
 8007036:	e000      	b.n	800703a <SD_PowerON+0xce>
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]

    count++;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3301      	adds	r3, #1
 8007040:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007048:	4293      	cmp	r3, r2
 800704a:	d802      	bhi.n	8007052 <SD_PowerON+0xe6>
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0cc      	beq.n	8006fec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007058:	4293      	cmp	r3, r2
 800705a:	d902      	bls.n	8007062 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800705c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007060:	e00c      	b.n	800707c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	645a      	str	r2, [r3, #68]	; 0x44
 8007072:	e002      	b.n	800707a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	c1100000 	.word	0xc1100000

08007088 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007098:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800709c:	e018      	b.n	80070d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f001 f93b 	bl	8008326 <SDMMC_CmdSendStatus>
 80070b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <SD_SendStatus+0x34>
  {
    return errorstate;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	e009      	b.n	80070d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 ff20 	bl	8007f08 <SDIO_GetResponse>
 80070c8:	4602      	mov	r2, r0
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d03f      	beq.n	8007172 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e033      	b.n	8007160 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fe92 	bl	8007e26 <SDIO_ReadFIFO>
 8007102:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3b01      	subs	r3, #1
 8007116:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3b01      	subs	r3, #1
 800712c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	b2da      	uxtb	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	0e1b      	lsrs	r3, r3, #24
 8007148:	b2da      	uxtb	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3301      	adds	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b07      	cmp	r3, #7
 8007164:	d9c8      	bls.n	80070f8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007172:	bf00      	nop
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d043      	beq.n	800721c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e037      	b.n	800720a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	021a      	lsls	r2, r3, #8
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	041a      	lsls	r2, r3, #16
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3b01      	subs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	061a      	lsls	r2, r3, #24
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f107 0208 	add.w	r2, r7, #8
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fe1e 	bl	8007e40 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b07      	cmp	r3, #7
 800720e:	d9c4      	bls.n	800719a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e07b      	b.n	800732e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	2b00      	cmp	r3, #0
 800723c:	d108      	bne.n	8007250 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007246:	d009      	beq.n	800725c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	61da      	str	r2, [r3, #28]
 800724e:	e005      	b.n	800725c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7fb fcbc 	bl	8002bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007292:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ae:	431a      	orrs	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072cc:	431a      	orrs	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072d6:	431a      	orrs	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e0:	ea42 0103 	orr.w	r1, r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	f003 0104 	and.w	r1, r3, #4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	f003 0210 	and.w	r2, r3, #16
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69da      	ldr	r2, [r3, #28]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800731c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b088      	sub	sp, #32
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	603b      	str	r3, [r7, #0]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_SPI_Transmit+0x22>
 8007354:	2302      	movs	r3, #2
 8007356:	e12d      	b.n	80075b4 <HAL_SPI_Transmit+0x27e>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007360:	f7fb fe40 	bl	8002fe4 <HAL_GetTick>
 8007364:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d002      	beq.n	800737c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007376:	2302      	movs	r3, #2
 8007378:	77fb      	strb	r3, [r7, #31]
    goto error;
 800737a:	e116      	b.n	80075aa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_SPI_Transmit+0x52>
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800738c:	e10d      	b.n	80075aa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	88fa      	ldrh	r2, [r7, #6]
 80073a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d4:	d10f      	bne.n	80073f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d007      	beq.n	8007414 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741c:	d14f      	bne.n	80074be <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SPI_Transmit+0xf6>
 8007426:	8afb      	ldrh	r3, [r7, #22]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d142      	bne.n	80074b2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	1c9a      	adds	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007450:	e02f      	b.n	80074b2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b02      	cmp	r3, #2
 800745e:	d112      	bne.n	8007486 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	86da      	strh	r2, [r3, #54]	; 0x36
 8007484:	e015      	b.n	80074b2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007486:	f7fb fdad 	bl	8002fe4 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d803      	bhi.n	800749e <HAL_SPI_Transmit+0x168>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d102      	bne.n	80074a4 <HAL_SPI_Transmit+0x16e>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80074b0:	e07b      	b.n	80075aa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1ca      	bne.n	8007452 <HAL_SPI_Transmit+0x11c>
 80074bc:	e050      	b.n	8007560 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_SPI_Transmit+0x196>
 80074c6:	8afb      	ldrh	r3, [r7, #22]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d144      	bne.n	8007556 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80074f2:	e030      	b.n	8007556 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d113      	bne.n	800752a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	330c      	adds	r3, #12
 800750c:	7812      	ldrb	r2, [r2, #0]
 800750e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800751e:	b29b      	uxth	r3, r3
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	86da      	strh	r2, [r3, #54]	; 0x36
 8007528:	e015      	b.n	8007556 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800752a:	f7fb fd5b 	bl	8002fe4 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d803      	bhi.n	8007542 <HAL_SPI_Transmit+0x20c>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d102      	bne.n	8007548 <HAL_SPI_Transmit+0x212>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007554:	e029      	b.n	80075aa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1c9      	bne.n	80074f4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 fbdf 	bl	8007d28 <SPI_EndRxTxTransaction>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	77fb      	strb	r3, [r7, #31]
 80075a0:	e003      	b.n	80075aa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3720      	adds	r7, #32
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	4613      	mov	r3, r2
 80075ca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d002      	beq.n	80075e2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80075dc:	2302      	movs	r3, #2
 80075de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075e0:	e0fb      	b.n	80077da <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ea:	d112      	bne.n	8007612 <HAL_SPI_Receive+0x56>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10e      	bne.n	8007612 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2204      	movs	r2, #4
 80075f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075fc:	88fa      	ldrh	r2, [r7, #6]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	68b9      	ldr	r1, [r7, #8]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f8ef 	bl	80077ec <HAL_SPI_TransmitReceive>
 800760e:	4603      	mov	r3, r0
 8007610:	e0e8      	b.n	80077e4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_SPI_Receive+0x64>
 800761c:	2302      	movs	r3, #2
 800761e:	e0e1      	b.n	80077e4 <HAL_SPI_Receive+0x228>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007628:	f7fb fcdc 	bl	8002fe4 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SPI_Receive+0x7e>
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d102      	bne.n	8007640 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800763e:	e0cc      	b.n	80077da <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2204      	movs	r2, #4
 8007644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007686:	d10f      	bne.n	80076a8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d007      	beq.n	80076c6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d16a      	bne.n	80077a4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076ce:	e032      	b.n	8007736 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d115      	bne.n	800770a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f103 020c 	add.w	r2, r3, #12
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007708:	e015      	b.n	8007736 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770a:	f7fb fc6b 	bl	8002fe4 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d803      	bhi.n	8007722 <HAL_SPI_Receive+0x166>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d102      	bne.n	8007728 <HAL_SPI_Receive+0x16c>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007734:	e051      	b.n	80077da <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1c7      	bne.n	80076d0 <HAL_SPI_Receive+0x114>
 8007740:	e035      	b.n	80077ae <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d113      	bne.n	8007778 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	b292      	uxth	r2, r2
 800775c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776c:	b29b      	uxth	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	b29a      	uxth	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007776:	e015      	b.n	80077a4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007778:	f7fb fc34 	bl	8002fe4 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d803      	bhi.n	8007790 <HAL_SPI_Receive+0x1d4>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778e:	d102      	bne.n	8007796 <HAL_SPI_Receive+0x1da>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80077a2:	e01a      	b.n	80077da <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1c9      	bne.n	8007742 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 fa52 	bl	8007c5c <SPI_EndRxTransaction>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]
 80077d0:	e003      	b.n	80077da <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08c      	sub	sp, #48	; 0x30
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077fa:	2301      	movs	r3, #1
 80077fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_SPI_TransmitReceive+0x26>
 800780e:	2302      	movs	r3, #2
 8007810:	e198      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x358>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800781a:	f7fb fbe3 	bl	8002fe4 <HAL_GetTick>
 800781e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007830:	887b      	ldrh	r3, [r7, #2]
 8007832:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007838:	2b01      	cmp	r3, #1
 800783a:	d00f      	beq.n	800785c <HAL_SPI_TransmitReceive+0x70>
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007842:	d107      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x68>
 800784c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007850:	2b04      	cmp	r3, #4
 8007852:	d003      	beq.n	800785c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007854:	2302      	movs	r3, #2
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800785a:	e16d      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_SPI_TransmitReceive+0x82>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <HAL_SPI_TransmitReceive+0x82>
 8007868:	887b      	ldrh	r3, [r7, #2]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007874:	e160      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b04      	cmp	r3, #4
 8007880:	d003      	beq.n	800788a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2205      	movs	r2, #5
 8007886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	887a      	ldrh	r2, [r7, #2]
 800789a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	887a      	ldrh	r2, [r7, #2]
 80078a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	887a      	ldrh	r2, [r7, #2]
 80078ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	887a      	ldrh	r2, [r7, #2]
 80078b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d007      	beq.n	80078de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e6:	d17c      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x10a>
 80078f0:	8b7b      	ldrh	r3, [r7, #26]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d16a      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	1c9a      	adds	r2, r3, #2
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800791a:	e057      	b.n	80079cc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b02      	cmp	r3, #2
 8007928:	d11b      	bne.n	8007962 <HAL_SPI_TransmitReceive+0x176>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800792e:	b29b      	uxth	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d016      	beq.n	8007962 <HAL_SPI_TransmitReceive+0x176>
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	2b01      	cmp	r3, #1
 8007938:	d113      	bne.n	8007962 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	881a      	ldrh	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	1c9a      	adds	r2, r3, #2
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007954:	b29b      	uxth	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b01      	cmp	r3, #1
 800796e:	d119      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x1b8>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d014      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007984:	b292      	uxth	r2, r2
 8007986:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	1c9a      	adds	r2, r3, #2
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079a0:	2301      	movs	r3, #1
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079a4:	f7fb fb1e 	bl	8002fe4 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d80b      	bhi.n	80079cc <HAL_SPI_TransmitReceive+0x1e0>
 80079b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d007      	beq.n	80079cc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80079ca:	e0b5      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1a2      	bne.n	800791c <HAL_SPI_TransmitReceive+0x130>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d19d      	bne.n	800791c <HAL_SPI_TransmitReceive+0x130>
 80079e0:	e080      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x204>
 80079ea:	8b7b      	ldrh	r3, [r7, #26]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d16f      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a16:	e05b      	b.n	8007ad0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d11c      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x274>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d017      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x274>
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d114      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	330c      	adds	r3, #12
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d119      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x2b6>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d014      	beq.n	8007aa2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aa2:	f7fb fa9f 	bl	8002fe4 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d803      	bhi.n	8007aba <HAL_SPI_TransmitReceive+0x2ce>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x2d4>
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d107      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007ace:	e033      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d19e      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x22c>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d199      	bne.n	8007a18 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f91d 	bl	8007d28 <SPI_EndRxTxTransaction>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b00:	e01a      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2e:	e003      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3730      	adds	r7, #48	; 0x30
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b5c:	f7fb fa42 	bl	8002fe4 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	4413      	add	r3, r2
 8007b6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b6c:	f7fb fa3a 	bl	8002fe4 <HAL_GetTick>
 8007b70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b72:	4b39      	ldr	r3, [pc, #228]	; (8007c58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	015b      	lsls	r3, r3, #5
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b82:	e054      	b.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d050      	beq.n	8007c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b8c:	f7fb fa2a 	bl	8002fe4 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d902      	bls.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d13d      	bne.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bba:	d111      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc4:	d004      	beq.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bce:	d107      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be8:	d10f      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e017      	b.n	8007c4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	2300      	movne	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d19b      	bne.n	8007b84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	2000001c 	.word	0x2000001c

08007c5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c70:	d111      	bne.n	8007c96 <SPI_EndRxTransaction+0x3a>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c7a:	d004      	beq.n	8007c86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c84:	d107      	bne.n	8007c96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c9e:	d12a      	bne.n	8007cf6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca8:	d012      	beq.n	8007cd0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2180      	movs	r1, #128	; 0x80
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff ff49 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d02d      	beq.n	8007d1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc4:	f043 0220 	orr.w	r2, r3, #32
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e026      	b.n	8007d1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2101      	movs	r1, #1
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ff36 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01a      	beq.n	8007d1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e013      	b.n	8007d1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	2101      	movs	r1, #1
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff ff23 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d007      	beq.n	8007d1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	f043 0220 	orr.w	r2, r3, #32
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e000      	b.n	8007d1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	2102      	movs	r1, #2
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff ff04 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	f043 0220 	orr.w	r2, r3, #32
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e032      	b.n	8007dc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <SPI_EndRxTxTransaction+0xa0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1b      	ldr	r2, [pc, #108]	; (8007dcc <SPI_EndRxTxTransaction+0xa4>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	0d5b      	lsrs	r3, r3, #21
 8007d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d6a:	fb02 f303 	mul.w	r3, r2, r3
 8007d6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d78:	d112      	bne.n	8007da0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	2180      	movs	r1, #128	; 0x80
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fee1 	bl	8007b4c <SPI_WaitFlagStateUntilTimeout>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d016      	beq.n	8007dbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	f043 0220 	orr.w	r2, r3, #32
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e00f      	b.n	8007dc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b80      	cmp	r3, #128	; 0x80
 8007db8:	d0f2      	beq.n	8007da0 <SPI_EndRxTxTransaction+0x78>
 8007dba:	e000      	b.n	8007dbe <SPI_EndRxTxTransaction+0x96>
        break;
 8007dbc:	bf00      	nop
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	2000001c 	.word	0x2000001c
 8007dcc:	165e9f81 	.word	0x165e9f81

08007dd0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	f107 001c 	add.w	r0, r7, #28
 8007dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007de6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007de8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007dea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007dee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007df2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007df6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007dfa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007e0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	b004      	add	sp, #16
 8007e24:	4770      	bx	lr

08007e26 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0303 	and.w	r3, r3, #3
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007eb8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007ebe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007ec4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007ed4:	f023 030f 	bic.w	r3, r3, #15
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	b2db      	uxtb	r3, r3
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3314      	adds	r3, #20
 8007f16:	461a      	mov	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
}  
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007f54:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007f5a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007f60:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0

}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b088      	sub	sp, #32
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007f94:	2310      	movs	r3, #16
 8007f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fa6:	f107 0308 	add.w	r3, r7, #8
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff74 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fb6:	2110      	movs	r1, #16
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f9d7 	bl	800836c <SDMMC_GetCmdResp1>
 8007fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b088      	sub	sp, #32
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007fd8:	2311      	movs	r3, #17
 8007fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fdc:	2340      	movs	r3, #64	; 0x40
 8007fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff ff52 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffa:	2111      	movs	r1, #17
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9b5 	bl	800836c <SDMMC_GetCmdResp1>
 8008002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008004:	69fb      	ldr	r3, [r7, #28]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b088      	sub	sp, #32
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800801c:	2312      	movs	r3, #18
 800801e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008020:	2340      	movs	r3, #64	; 0x40
 8008022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff ff30 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800803a:	f241 3288 	movw	r2, #5000	; 0x1388
 800803e:	2112      	movs	r1, #18
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f993 	bl	800836c <SDMMC_GetCmdResp1>
 8008046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008048:	69fb      	ldr	r3, [r7, #28]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008060:	2318      	movs	r3, #24
 8008062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008064:	2340      	movs	r3, #64	; 0x40
 8008066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800806c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff ff0e 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800807e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008082:	2118      	movs	r1, #24
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f971 	bl	800836c <SDMMC_GetCmdResp1>
 800808a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800808c:	69fb      	ldr	r3, [r7, #28]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3720      	adds	r7, #32
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b088      	sub	sp, #32
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80080a4:	2319      	movs	r3, #25
 80080a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080b6:	f107 0308 	add.w	r3, r7, #8
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff feec 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80080c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c6:	2119      	movs	r1, #25
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f94f 	bl	800836c <SDMMC_GetCmdResp1>
 80080ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080d0:	69fb      	ldr	r3, [r7, #28]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80080e8:	230c      	movs	r3, #12
 80080ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080ec:	2340      	movs	r3, #64	; 0x40
 80080ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff feca 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008106:	4a05      	ldr	r2, [pc, #20]	; (800811c <SDMMC_CmdStopTransfer+0x40>)
 8008108:	210c      	movs	r1, #12
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f92e 	bl	800836c <SDMMC_GetCmdResp1>
 8008110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008112:	69fb      	ldr	r3, [r7, #28]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	05f5e100 	.word	0x05f5e100

08008120 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008130:	2307      	movs	r3, #7
 8008132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008134:	2340      	movs	r3, #64	; 0x40
 8008136:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800813c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008140:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008142:	f107 0310 	add.w	r3, r7, #16
 8008146:	4619      	mov	r1, r3
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff fea6 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800814e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008152:	2107      	movs	r1, #7
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f909 	bl	800836c <SDMMC_GetCmdResp1>
 800815a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800815e:	4618      	mov	r0, r3
 8008160:	3728      	adds	r7, #40	; 0x28
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b088      	sub	sp, #32
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008176:	2300      	movs	r3, #0
 8008178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800817e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fe85 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fb23 	bl	80087dc <SDMMC_GetCmdError>
 8008196:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008198:	69fb      	ldr	r3, [r7, #28]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b088      	sub	sp, #32
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80081aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80081ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80081b0:	2308      	movs	r3, #8
 80081b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081b4:	2340      	movs	r3, #64	; 0x40
 80081b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff fe66 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fab6 	bl	8008740 <SDMMC_GetCmdResp7>
 80081d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081d6:	69fb      	ldr	r3, [r7, #28]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3720      	adds	r7, #32
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80081ee:	2337      	movs	r3, #55	; 0x37
 80081f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008200:	f107 0308 	add.w	r3, r7, #8
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff fe47 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800820c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008210:	2137      	movs	r1, #55	; 0x37
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8aa 	bl	800836c <SDMMC_GetCmdResp1>
 8008218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800821a:	69fb      	ldr	r3, [r7, #28]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800823a:	2329      	movs	r3, #41	; 0x29
 800823c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800824a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800824c:	f107 0308 	add.w	r3, r7, #8
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fe21 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f9bd 	bl	80085d8 <SDMMC_GetCmdResp3>
 800825e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008260:	69fb      	ldr	r3, [r7, #28]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b088      	sub	sp, #32
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008276:	2302      	movs	r3, #2
 8008278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800827a:	23c0      	movs	r3, #192	; 0xc0
 800827c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff fe03 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f957 	bl	8008548 <SDMMC_GetCmdResp2>
 800829a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800829c:	69fb      	ldr	r3, [r7, #28]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80082b4:	2309      	movs	r3, #9
 80082b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80082b8:	23c0      	movs	r3, #192	; 0xc0
 80082ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff fde4 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f938 	bl	8008548 <SDMMC_GetCmdResp2>
 80082d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082da:	69fb      	ldr	r3, [r7, #28]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3720      	adds	r7, #32
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80082f2:	2303      	movs	r3, #3
 80082f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082f6:	2340      	movs	r3, #64	; 0x40
 80082f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fdc5 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	2103      	movs	r1, #3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f99d 	bl	8008654 <SDMMC_GetCmdResp6>
 800831a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800831c:	69fb      	ldr	r3, [r7, #28]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3720      	adds	r7, #32
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b088      	sub	sp, #32
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008334:	230d      	movs	r3, #13
 8008336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008338:	2340      	movs	r3, #64	; 0x40
 800833a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008344:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008346:	f107 0308 	add.w	r3, r7, #8
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff fda4 	bl	8007e9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008352:	f241 3288 	movw	r2, #5000	; 0x1388
 8008356:	210d      	movs	r1, #13
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f807 	bl	800836c <SDMMC_GetCmdResp1>
 800835e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008360:	69fb      	ldr	r3, [r7, #28]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3720      	adds	r7, #32
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	460b      	mov	r3, r1
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800837a:	4b70      	ldr	r3, [pc, #448]	; (800853c <SDMMC_GetCmdResp1+0x1d0>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a70      	ldr	r2, [pc, #448]	; (8008540 <SDMMC_GetCmdResp1+0x1d4>)
 8008380:	fba2 2303 	umull	r2, r3, r2, r3
 8008384:	0a5a      	lsrs	r2, r3, #9
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	fb02 f303 	mul.w	r3, r2, r3
 800838c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	61fa      	str	r2, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800839c:	e0c9      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0ef      	beq.n	800838e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ea      	bne.n	800838e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2204      	movs	r2, #4
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083ca:	2304      	movs	r3, #4
 80083cc:	e0b1      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0a6      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	22c5      	movs	r2, #197	; 0xc5
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fd7f 	bl	8007eee <SDIO_GetCommandResponse>
 80083f0:	4603      	mov	r3, r0
 80083f2:	461a      	mov	r2, r3
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d001      	beq.n	80083fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e099      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80083fe:	2100      	movs	r1, #0
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7ff fd81 	bl	8007f08 <SDIO_GetResponse>
 8008406:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4b4e      	ldr	r3, [pc, #312]	; (8008544 <SDMMC_GetCmdResp1+0x1d8>)
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008412:	2300      	movs	r3, #0
 8008414:	e08d      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	da02      	bge.n	8008422 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800841c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008420:	e087      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	e080      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800843a:	2380      	movs	r3, #128	; 0x80
 800843c:	e079      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800844c:	e071      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800845c:	e069      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800846c:	e061      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800847c:	e059      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800848c:	e051      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800849c:	e049      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80084a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084ac:	e041      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80084b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084bc:	e039      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80084c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084cc:	e031      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80084d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084dc:	e029      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80084e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084ec:	e021      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80084f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80084fc:	e019      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800850c:	e011      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800851c:	e009      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800852c:	e001      	b.n	8008532 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800852e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	2000001c 	.word	0x2000001c
 8008540:	10624dd3 	.word	0x10624dd3
 8008544:	fdffe008 	.word	0xfdffe008

08008548 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008550:	4b1f      	ldr	r3, [pc, #124]	; (80085d0 <SDMMC_GetCmdResp2+0x88>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <SDMMC_GetCmdResp2+0x8c>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	0a5b      	lsrs	r3, r3, #9
 800855c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008560:	fb02 f303 	mul.w	r3, r2, r3
 8008564:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1e5a      	subs	r2, r3, #1
 800856a:	60fa      	str	r2, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d102      	bne.n	8008576 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008574:	e026      	b.n	80085c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0ef      	beq.n	8008566 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1ea      	bne.n	8008566 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2204      	movs	r2, #4
 80085a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085a2:	2304      	movs	r3, #4
 80085a4:	e00e      	b.n	80085c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e003      	b.n	80085c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	22c5      	movs	r2, #197	; 0xc5
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	2000001c 	.word	0x2000001c
 80085d4:	10624dd3 	.word	0x10624dd3

080085d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085e0:	4b1a      	ldr	r3, [pc, #104]	; (800864c <SDMMC_GetCmdResp3+0x74>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a1a      	ldr	r2, [pc, #104]	; (8008650 <SDMMC_GetCmdResp3+0x78>)
 80085e6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ea:	0a5b      	lsrs	r3, r3, #9
 80085ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f0:	fb02 f303 	mul.w	r3, r2, r3
 80085f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	1e5a      	subs	r2, r3, #1
 80085fa:	60fa      	str	r2, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008604:	e01b      	b.n	800863e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800860a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0ef      	beq.n	80085f6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1ea      	bne.n	80085f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2204      	movs	r2, #4
 8008630:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008632:	2304      	movs	r3, #4
 8008634:	e003      	b.n	800863e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	22c5      	movs	r2, #197	; 0xc5
 800863a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	2000001c 	.word	0x2000001c
 8008650:	10624dd3 	.word	0x10624dd3

08008654 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b088      	sub	sp, #32
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	460b      	mov	r3, r1
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008662:	4b35      	ldr	r3, [pc, #212]	; (8008738 <SDMMC_GetCmdResp6+0xe4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a35      	ldr	r2, [pc, #212]	; (800873c <SDMMC_GetCmdResp6+0xe8>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	0a5b      	lsrs	r3, r3, #9
 800866e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008672:	fb02 f303 	mul.w	r3, r2, r3
 8008676:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	61fa      	str	r2, [r7, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008686:	e052      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0ef      	beq.n	8008678 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1ea      	bne.n	8008678 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2204      	movs	r2, #4
 80086b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086b4:	2304      	movs	r3, #4
 80086b6:	e03a      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d004      	beq.n	80086ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e02f      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff fc0d 	bl	8007eee <SDIO_GetCommandResponse>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	4293      	cmp	r3, r2
 80086dc:	d001      	beq.n	80086e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086de:	2301      	movs	r3, #1
 80086e0:	e025      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	22c5      	movs	r2, #197	; 0xc5
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80086e8:	2100      	movs	r1, #0
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff fc0c 	bl	8007f08 <SDIO_GetResponse>
 80086f0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d106      	bne.n	800870a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	b29a      	uxth	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008706:	2300      	movs	r3, #0
 8008708:	e011      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008718:	e009      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008728:	e001      	b.n	800872e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800872a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800872e:	4618      	mov	r0, r3
 8008730:	3720      	adds	r7, #32
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	2000001c 	.word	0x2000001c
 800873c:	10624dd3 	.word	0x10624dd3

08008740 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008748:	4b22      	ldr	r3, [pc, #136]	; (80087d4 <SDMMC_GetCmdResp7+0x94>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a22      	ldr	r2, [pc, #136]	; (80087d8 <SDMMC_GetCmdResp7+0x98>)
 800874e:	fba2 2303 	umull	r2, r3, r2, r3
 8008752:	0a5b      	lsrs	r3, r3, #9
 8008754:	f241 3288 	movw	r2, #5000	; 0x1388
 8008758:	fb02 f303 	mul.w	r3, r2, r3
 800875c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1e5a      	subs	r2, r3, #1
 8008762:	60fa      	str	r2, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d102      	bne.n	800876e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800876c:	e02c      	b.n	80087c8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0ef      	beq.n	800875e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1ea      	bne.n	800875e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2204      	movs	r2, #4
 8008798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800879a:	2304      	movs	r3, #4
 800879c:	e014      	b.n	80087c8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e009      	b.n	80087c8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2240      	movs	r2, #64	; 0x40
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087c6:	2300      	movs	r3, #0
  
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	2000001c 	.word	0x2000001c
 80087d8:	10624dd3 	.word	0x10624dd3

080087dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <SDMMC_GetCmdError+0x50>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a11      	ldr	r2, [pc, #68]	; (8008830 <SDMMC_GetCmdError+0x54>)
 80087ea:	fba2 2303 	umull	r2, r3, r2, r3
 80087ee:	0a5b      	lsrs	r3, r3, #9
 80087f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	1e5a      	subs	r2, r3, #1
 80087fe:	60fa      	str	r2, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008808:	e009      	b.n	800881e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f1      	beq.n	80087fa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	22c5      	movs	r2, #197	; 0xc5
 800881a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	2000001c 	.word	0x2000001c
 8008830:	10624dd3 	.word	0x10624dd3

08008834 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008838:	4904      	ldr	r1, [pc, #16]	; (800884c <MX_FATFS_Init+0x18>)
 800883a:	4805      	ldr	r0, [pc, #20]	; (8008850 <MX_FATFS_Init+0x1c>)
 800883c:	f003 fa12 	bl	800bc64 <FATFS_LinkDriver>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	4b03      	ldr	r3, [pc, #12]	; (8008854 <MX_FATFS_Init+0x20>)
 8008846:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008848:	bf00      	nop
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20000480 	.word	0x20000480
 8008850:	0800f18c 	.word	0x0800f18c
 8008854:	2000047c 	.word	0x2000047c

08008858 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800885c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800885e:	4618      	mov	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008872:	f000 f888 	bl	8008986 <BSP_SD_IsDetected>
 8008876:	4603      	mov	r3, r0
 8008878:	2b01      	cmp	r3, #1
 800887a:	d001      	beq.n	8008880 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e005      	b.n	800888c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008880:	4804      	ldr	r0, [pc, #16]	; (8008894 <BSP_SD_Init+0x2c>)
 8008882:	f7fd fb9f 	bl	8005fc4 <HAL_SD_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800888a:	79fb      	ldrb	r3, [r7, #7]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	20000264 	.word	0x20000264

08008898 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	68f9      	ldr	r1, [r7, #12]
 80088ae:	4806      	ldr	r0, [pc, #24]	; (80088c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80088b0:	f7fd fc38 	bl	8006124 <HAL_SD_ReadBlocks_DMA>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000264 	.word	0x20000264

080088cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	4806      	ldr	r0, [pc, #24]	; (80088fc <BSP_SD_WriteBlocks_DMA+0x30>)
 80088e4:	f7fd fd00 	bl	80062e8 <HAL_SD_WriteBlocks_DMA>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000264 	.word	0x20000264

08008900 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008904:	4805      	ldr	r0, [pc, #20]	; (800891c <BSP_SD_GetCardState+0x1c>)
 8008906:	f7fe f935 	bl	8006b74 <HAL_SD_GetCardState>
 800890a:	4603      	mov	r3, r0
 800890c:	2b04      	cmp	r3, #4
 800890e:	bf14      	ite	ne
 8008910:	2301      	movne	r3, #1
 8008912:	2300      	moveq	r3, #0
 8008914:	b2db      	uxtb	r3, r3
}
 8008916:	4618      	mov	r0, r3
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000264 	.word	0x20000264

08008920 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	4803      	ldr	r0, [pc, #12]	; (8008938 <BSP_SD_GetCardInfo+0x18>)
 800892c:	f7fe f8f6 	bl	8006b1c <HAL_SD_GetCardInfo>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000264 	.word	0x20000264

0800893c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008944:	f000 f818 	bl	8008978 <BSP_SD_AbortCallback>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008958:	f000 f9a8 	bl	8008cac <BSP_SD_WriteCpltCallback>
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800896c:	f000 f9aa 	bl	8008cc4 <BSP_SD_ReadCpltCallback>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0

}
 800897c:	bf00      	nop
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800898c:	2301      	movs	r3, #1
 800898e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008990:	f000 f80c 	bl	80089ac <BSP_PlatformIsDetected>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800899a:	2300      	movs	r3, #0
 800899c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	b2db      	uxtb	r3, r3
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80089b2:	2301      	movs	r3, #1
 80089b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80089b6:	2180      	movs	r1, #128	; 0x80
 80089b8:	4806      	ldr	r0, [pc, #24]	; (80089d4 <BSP_PlatformIsDetected+0x28>)
 80089ba:	f7fb f98f 	bl	8003cdc <HAL_GPIO_ReadPin>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80089c4:	2300      	movs	r3, #0
 80089c6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80089c8:	79fb      	ldrb	r3, [r7, #7]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40020800 	.word	0x40020800

080089d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80089e0:	f7fa fb00 	bl	8002fe4 <HAL_GetTick>
 80089e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80089e6:	e006      	b.n	80089f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80089e8:	f7ff ff8a 	bl	8008900 <BSP_SD_GetCardState>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e009      	b.n	8008a0a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80089f6:	f7fa faf5 	bl	8002fe4 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d8f0      	bhi.n	80089e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <SD_CheckStatus+0x38>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008a24:	f7ff ff6c 	bl	8008900 <BSP_SD_GetCardState>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008a2e:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <SD_CheckStatus+0x38>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <SD_CheckStatus+0x38>)
 8008a3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008a3e:	4b03      	ldr	r3, [pc, #12]	; (8008a4c <SD_CheckStatus+0x38>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	b2db      	uxtb	r3, r3
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000025 	.word	0x20000025

08008a50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	4603      	mov	r3, r0
 8008a58:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008a5a:	f7ff ff05 	bl	8008868 <BSP_SD_Init>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d107      	bne.n	8008a74 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff ffd4 	bl	8008a14 <SD_CheckStatus>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	461a      	mov	r2, r3
 8008a70:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <SD_initialize+0x34>)
 8008a72:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008a74:	4b03      	ldr	r3, [pc, #12]	; (8008a84 <SD_initialize+0x34>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	20000025 	.word	0x20000025

08008a88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff ffbd 	bl	8008a14 <SD_CheckStatus>
 8008a9a:	4603      	mov	r3, r0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	603b      	str	r3, [r7, #0]
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008ab8:	f247 5030 	movw	r0, #30000	; 0x7530
 8008abc:	f7ff ff8c 	bl	80089d8 <SD_CheckStatusWithTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	da01      	bge.n	8008aca <SD_read+0x26>
  {
    return res;
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	e03b      	b.n	8008b42 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	68b8      	ldr	r0, [r7, #8]
 8008ad0:	f7ff fee2 	bl	8008898 <BSP_SD_ReadBlocks_DMA>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d132      	bne.n	8008b40 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008ada:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <SD_read+0xa8>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008ae0:	f7fa fa80 	bl	8002fe4 <HAL_GetTick>
 8008ae4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008ae6:	bf00      	nop
 8008ae8:	4b18      	ldr	r3, [pc, #96]	; (8008b4c <SD_read+0xa8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d108      	bne.n	8008b02 <SD_read+0x5e>
 8008af0:	f7fa fa78 	bl	8002fe4 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	f247 522f 	movw	r2, #29999	; 0x752f
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d9f2      	bls.n	8008ae8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008b02:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <SD_read+0xa8>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e017      	b.n	8008b40 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008b10:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <SD_read+0xa8>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008b16:	f7fa fa65 	bl	8002fe4 <HAL_GetTick>
 8008b1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008b1c:	e007      	b.n	8008b2e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008b1e:	f7ff feef 	bl	8008900 <BSP_SD_GetCardState>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <SD_read+0x8a>
          {
            res = RES_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008b2c:	e008      	b.n	8008b40 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008b2e:	f7fa fa59 	bl	8002fe4 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f247 522f 	movw	r2, #29999	; 0x752f
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d9ee      	bls.n	8008b1e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200024f0 	.word	0x200024f0

08008b50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008b64:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <SD_write+0xa8>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008b6a:	f247 5030 	movw	r0, #30000	; 0x7530
 8008b6e:	f7ff ff33 	bl	80089d8 <SD_CheckStatusWithTimeout>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da01      	bge.n	8008b7c <SD_write+0x2c>
  {
    return res;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	e038      	b.n	8008bee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008b7c:	683a      	ldr	r2, [r7, #0]
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	f7ff fea3 	bl	80088cc <BSP_SD_WriteBlocks_DMA>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d12f      	bne.n	8008bec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008b8c:	f7fa fa2a 	bl	8002fe4 <HAL_GetTick>
 8008b90:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008b92:	bf00      	nop
 8008b94:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <SD_write+0xa8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d108      	bne.n	8008bae <SD_write+0x5e>
 8008b9c:	f7fa fa22 	bl	8002fe4 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f247 522f 	movw	r2, #29999	; 0x752f
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d9f2      	bls.n	8008b94 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <SD_write+0xa8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75fb      	strb	r3, [r7, #23]
 8008bba:	e017      	b.n	8008bec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <SD_write+0xa8>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008bc2:	f7fa fa0f 	bl	8002fe4 <HAL_GetTick>
 8008bc6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008bc8:	e007      	b.n	8008bda <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008bca:	f7ff fe99 	bl	8008900 <BSP_SD_GetCardState>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <SD_write+0x8a>
          {
            res = RES_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	75fb      	strb	r3, [r7, #23]
            break;
 8008bd8:	e008      	b.n	8008bec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008bda:	f7fa fa03 	bl	8002fe4 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	f247 522f 	movw	r2, #29999	; 0x752f
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d9ee      	bls.n	8008bca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200024ec 	.word	0x200024ec

08008bfc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08c      	sub	sp, #48	; 0x30
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	603a      	str	r2, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008c12:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <SD_ioctl+0xac>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <SD_ioctl+0x28>
 8008c20:	2303      	movs	r3, #3
 8008c22:	e03c      	b.n	8008c9e <SD_ioctl+0xa2>

  switch (cmd)
 8008c24:	79bb      	ldrb	r3, [r7, #6]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d834      	bhi.n	8008c94 <SD_ioctl+0x98>
 8008c2a:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <SD_ioctl+0x34>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c41 	.word	0x08008c41
 8008c34:	08008c49 	.word	0x08008c49
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	08008c7b 	.word	0x08008c7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c46:	e028      	b.n	8008c9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fe67 	bl	8008920 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c5e:	e01c      	b.n	8008c9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c60:	f107 030c 	add.w	r3, r7, #12
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fe5b 	bl	8008920 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c78:	e00f      	b.n	8008c9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c7a:	f107 030c 	add.w	r3, r7, #12
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff fe4e 	bl	8008920 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	0a5a      	lsrs	r2, r3, #9
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c92:	e002      	b.n	8008c9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3730      	adds	r7, #48	; 0x30
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000025 	.word	0x20000025

08008cac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008cac:	b480      	push	{r7}
 8008cae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008cb0:	4b03      	ldr	r3, [pc, #12]	; (8008cc0 <BSP_SD_WriteCpltCallback+0x14>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	200024ec 	.word	0x200024ec

08008cc4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008cc8:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <BSP_SD_ReadCpltCallback+0x14>)
 8008cca:	2201      	movs	r2, #1
 8008ccc:	601a      	str	r2, [r3, #0]
}
 8008cce:	bf00      	nop
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr
 8008cd8:	200024f0 	.word	0x200024f0

08008cdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <disk_status+0x30>)
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	79fa      	ldrb	r2, [r7, #7]
 8008cf4:	4905      	ldr	r1, [pc, #20]	; (8008d0c <disk_status+0x30>)
 8008cf6:	440a      	add	r2, r1
 8008cf8:	7a12      	ldrb	r2, [r2, #8]
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4798      	blx	r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	2000271c 	.word	0x2000271c

08008d10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	4a0e      	ldr	r2, [pc, #56]	; (8008d5c <disk_initialize+0x4c>)
 8008d22:	5cd3      	ldrb	r3, [r2, r3]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d114      	bne.n	8008d52 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	4a0c      	ldr	r2, [pc, #48]	; (8008d5c <disk_initialize+0x4c>)
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	79fa      	ldrb	r2, [r7, #7]
 8008d36:	4909      	ldr	r1, [pc, #36]	; (8008d5c <disk_initialize+0x4c>)
 8008d38:	440a      	add	r2, r1
 8008d3a:	7a12      	ldrb	r2, [r2, #8]
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	4603      	mov	r3, r0
 8008d42:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	4a03      	ldr	r2, [pc, #12]	; (8008d5c <disk_initialize+0x4c>)
 8008d4e:	2101      	movs	r1, #1
 8008d50:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	2000271c 	.word	0x2000271c

08008d60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <disk_read+0x3c>)
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	689c      	ldr	r4, [r3, #8]
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	4a07      	ldr	r2, [pc, #28]	; (8008d9c <disk_read+0x3c>)
 8008d80:	4413      	add	r3, r2
 8008d82:	7a18      	ldrb	r0, [r3, #8]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	47a0      	blx	r4
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd90      	pop	{r4, r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	2000271c 	.word	0x2000271c

08008da0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008da0:	b590      	push	{r4, r7, lr}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008db0:	7bfb      	ldrb	r3, [r7, #15]
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <disk_write+0x3c>)
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	68dc      	ldr	r4, [r3, #12]
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4a07      	ldr	r2, [pc, #28]	; (8008ddc <disk_write+0x3c>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	7a18      	ldrb	r0, [r3, #8]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68b9      	ldr	r1, [r7, #8]
 8008dca:	47a0      	blx	r4
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75fb      	strb	r3, [r7, #23]
  return res;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd90      	pop	{r4, r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	2000271c 	.word	0x2000271c

08008de0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	603a      	str	r2, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
 8008dec:	460b      	mov	r3, r1
 8008dee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <disk_ioctl+0x38>)
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	79fa      	ldrb	r2, [r7, #7]
 8008dfe:	4906      	ldr	r1, [pc, #24]	; (8008e18 <disk_ioctl+0x38>)
 8008e00:	440a      	add	r2, r1
 8008e02:	7a10      	ldrb	r0, [r2, #8]
 8008e04:	79b9      	ldrb	r1, [r7, #6]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	4798      	blx	r3
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	2000271c 	.word	0x2000271c

08008e1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3301      	adds	r3, #1
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e2c:	89fb      	ldrh	r3, [r7, #14]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	b21a      	sxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	b21b      	sxth	r3, r3
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b21b      	sxth	r3, r3
 8008e3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3303      	adds	r3, #3
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	3202      	adds	r2, #2
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	3201      	adds	r2, #1
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	021b      	lsls	r3, r3, #8
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
	return rv;
 8008e84:	68fb      	ldr	r3, [r7, #12]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008e92:	b480      	push	{r7}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	887a      	ldrh	r2, [r7, #2]
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	887b      	ldrh	r3, [r7, #2]
 8008eac:	0a1b      	lsrs	r3, r3, #8
 8008eae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	887a      	ldrh	r2, [r7, #2]
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	701a      	strb	r2, [r3, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	607a      	str	r2, [r7, #4]
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	0a1b      	lsrs	r3, r3, #8
 8008ee2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	607a      	str	r2, [r7, #4]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	0a1b      	lsrs	r3, r3, #8
 8008ef4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	0a1b      	lsrs	r3, r3, #8
 8008f06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	b2d2      	uxtb	r2, r2
 8008f12:	701a      	strb	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00d      	beq.n	8008f56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	1c53      	adds	r3, r2, #1
 8008f3e:	613b      	str	r3, [r7, #16]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	1c59      	adds	r1, r3, #1
 8008f44:	6179      	str	r1, [r7, #20]
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1f1      	bne.n	8008f3a <mem_cpy+0x1a>
	}
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f62:	b480      	push	{r7}
 8008f64:	b087      	sub	sp, #28
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	617a      	str	r2, [r7, #20]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f3      	bne.n	8008f72 <mem_set+0x10>
}
 8008f8a:	bf00      	nop
 8008f8c:	bf00      	nop
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f98:	b480      	push	{r7}
 8008f9a:	b089      	sub	sp, #36	; 0x24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	61fa      	str	r2, [r7, #28]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	61ba      	str	r2, [r7, #24]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	1acb      	subs	r3, r1, r3
 8008fc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	607b      	str	r3, [r7, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <mem_cmp+0x40>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0eb      	beq.n	8008fb0 <mem_cmp+0x18>

	return r;
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3724      	adds	r7, #36	; 0x24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ff0:	e002      	b.n	8008ff8 <chk_chr+0x12>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <chk_chr+0x26>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	4293      	cmp	r3, r2
 800900a:	d1f2      	bne.n	8008ff2 <chk_chr+0xc>
	return *str;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	781b      	ldrb	r3, [r3, #0]
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	e029      	b.n	8009084 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009030:	4a27      	ldr	r2, [pc, #156]	; (80090d0 <chk_lock+0xb4>)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	011b      	lsls	r3, r3, #4
 8009036:	4413      	add	r3, r2
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01d      	beq.n	800907a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800903e:	4a24      	ldr	r2, [pc, #144]	; (80090d0 <chk_lock+0xb4>)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	4413      	add	r3, r2
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d116      	bne.n	800907e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009050:	4a1f      	ldr	r2, [pc, #124]	; (80090d0 <chk_lock+0xb4>)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	4413      	add	r3, r2
 8009058:	3304      	adds	r3, #4
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009060:	429a      	cmp	r2, r3
 8009062:	d10c      	bne.n	800907e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009064:	4a1a      	ldr	r2, [pc, #104]	; (80090d0 <chk_lock+0xb4>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	4413      	add	r3, r2
 800906c:	3308      	adds	r3, #8
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009074:	429a      	cmp	r2, r3
 8009076:	d102      	bne.n	800907e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009078:	e007      	b.n	800908a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800907a:	2301      	movs	r3, #1
 800907c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d9d2      	bls.n	8009030 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d109      	bne.n	80090a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d102      	bne.n	800909c <chk_lock+0x80>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b02      	cmp	r3, #2
 800909a:	d101      	bne.n	80090a0 <chk_lock+0x84>
 800909c:	2300      	movs	r3, #0
 800909e:	e010      	b.n	80090c2 <chk_lock+0xa6>
 80090a0:	2312      	movs	r3, #18
 80090a2:	e00e      	b.n	80090c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d108      	bne.n	80090bc <chk_lock+0xa0>
 80090aa:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <chk_lock+0xb4>)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	4413      	add	r3, r2
 80090b2:	330c      	adds	r3, #12
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ba:	d101      	bne.n	80090c0 <chk_lock+0xa4>
 80090bc:	2310      	movs	r3, #16
 80090be:	e000      	b.n	80090c2 <chk_lock+0xa6>
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	200024fc 	.word	0x200024fc

080090d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090da:	2300      	movs	r3, #0
 80090dc:	607b      	str	r3, [r7, #4]
 80090de:	e002      	b.n	80090e6 <enq_lock+0x12>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3301      	adds	r3, #1
 80090e4:	607b      	str	r3, [r7, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d806      	bhi.n	80090fa <enq_lock+0x26>
 80090ec:	4a09      	ldr	r2, [pc, #36]	; (8009114 <enq_lock+0x40>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	4413      	add	r3, r2
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1f2      	bne.n	80090e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	bf14      	ite	ne
 8009100:	2301      	movne	r3, #1
 8009102:	2300      	moveq	r3, #0
 8009104:	b2db      	uxtb	r3, r3
}
 8009106:	4618      	mov	r0, r3
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	200024fc 	.word	0x200024fc

08009118 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	e01f      	b.n	8009168 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009128:	4a41      	ldr	r2, [pc, #260]	; (8009230 <inc_lock+0x118>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	4413      	add	r3, r2
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d113      	bne.n	8009162 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800913a:	4a3d      	ldr	r2, [pc, #244]	; (8009230 <inc_lock+0x118>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	4413      	add	r3, r2
 8009142:	3304      	adds	r3, #4
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800914a:	429a      	cmp	r2, r3
 800914c:	d109      	bne.n	8009162 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800914e:	4a38      	ldr	r2, [pc, #224]	; (8009230 <inc_lock+0x118>)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	4413      	add	r3, r2
 8009156:	3308      	adds	r3, #8
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800915e:	429a      	cmp	r2, r3
 8009160:	d006      	beq.n	8009170 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d9dc      	bls.n	8009128 <inc_lock+0x10>
 800916e:	e000      	b.n	8009172 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009170:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d132      	bne.n	80091de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e002      	b.n	8009184 <inc_lock+0x6c>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	3301      	adds	r3, #1
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d806      	bhi.n	8009198 <inc_lock+0x80>
 800918a:	4a29      	ldr	r2, [pc, #164]	; (8009230 <inc_lock+0x118>)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	4413      	add	r3, r2
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f2      	bne.n	800917e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b02      	cmp	r3, #2
 800919c:	d101      	bne.n	80091a2 <inc_lock+0x8a>
 800919e:	2300      	movs	r3, #0
 80091a0:	e040      	b.n	8009224 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4922      	ldr	r1, [pc, #136]	; (8009230 <inc_lock+0x118>)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	440b      	add	r3, r1
 80091ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	491e      	ldr	r1, [pc, #120]	; (8009230 <inc_lock+0x118>)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	440b      	add	r3, r1
 80091bc:	3304      	adds	r3, #4
 80091be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	491a      	ldr	r1, [pc, #104]	; (8009230 <inc_lock+0x118>)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	440b      	add	r3, r1
 80091cc:	3308      	adds	r3, #8
 80091ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091d0:	4a17      	ldr	r2, [pc, #92]	; (8009230 <inc_lock+0x118>)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	4413      	add	r3, r2
 80091d8:	330c      	adds	r3, #12
 80091da:	2200      	movs	r2, #0
 80091dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <inc_lock+0xe0>
 80091e4:	4a12      	ldr	r2, [pc, #72]	; (8009230 <inc_lock+0x118>)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	4413      	add	r3, r2
 80091ec:	330c      	adds	r3, #12
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <inc_lock+0xe0>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e015      	b.n	8009224 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d108      	bne.n	8009210 <inc_lock+0xf8>
 80091fe:	4a0c      	ldr	r2, [pc, #48]	; (8009230 <inc_lock+0x118>)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	4413      	add	r3, r2
 8009206:	330c      	adds	r3, #12
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	e001      	b.n	8009214 <inc_lock+0xfc>
 8009210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009214:	4906      	ldr	r1, [pc, #24]	; (8009230 <inc_lock+0x118>)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	440b      	add	r3, r1
 800921c:	330c      	adds	r3, #12
 800921e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3301      	adds	r3, #1
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	200024fc 	.word	0x200024fc

08009234 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3b01      	subs	r3, #1
 8009240:	607b      	str	r3, [r7, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d825      	bhi.n	8009294 <dec_lock+0x60>
		n = Files[i].ctr;
 8009248:	4a17      	ldr	r2, [pc, #92]	; (80092a8 <dec_lock+0x74>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	4413      	add	r3, r2
 8009250:	330c      	adds	r3, #12
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009256:	89fb      	ldrh	r3, [r7, #14]
 8009258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800925c:	d101      	bne.n	8009262 <dec_lock+0x2e>
 800925e:	2300      	movs	r3, #0
 8009260:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009262:	89fb      	ldrh	r3, [r7, #14]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <dec_lock+0x3a>
 8009268:	89fb      	ldrh	r3, [r7, #14]
 800926a:	3b01      	subs	r3, #1
 800926c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800926e:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <dec_lock+0x74>)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	4413      	add	r3, r2
 8009276:	330c      	adds	r3, #12
 8009278:	89fa      	ldrh	r2, [r7, #14]
 800927a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800927c:	89fb      	ldrh	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <dec_lock+0x5a>
 8009282:	4a09      	ldr	r2, [pc, #36]	; (80092a8 <dec_lock+0x74>)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	4413      	add	r3, r2
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	737b      	strb	r3, [r7, #13]
 8009292:	e001      	b.n	8009298 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009294:	2302      	movs	r3, #2
 8009296:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009298:	7b7b      	ldrb	r3, [r7, #13]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	200024fc 	.word	0x200024fc

080092ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	e010      	b.n	80092dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80092ba:	4a0d      	ldr	r2, [pc, #52]	; (80092f0 <clear_lock+0x44>)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	4413      	add	r3, r2
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d105      	bne.n	80092d6 <clear_lock+0x2a>
 80092ca:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <clear_lock+0x44>)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	4413      	add	r3, r2
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3301      	adds	r3, #1
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d9eb      	bls.n	80092ba <clear_lock+0xe>
	}
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	200024fc 	.word	0x200024fc

080092f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	78db      	ldrb	r3, [r3, #3]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d034      	beq.n	8009372 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7858      	ldrb	r0, [r3, #1]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009318:	2301      	movs	r3, #1
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	f7ff fd40 	bl	8008da0 <disk_write>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
 800932a:	e022      	b.n	8009372 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	1ad2      	subs	r2, r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	429a      	cmp	r2, r3
 8009340:	d217      	bcs.n	8009372 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	789b      	ldrb	r3, [r3, #2]
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	e010      	b.n	800936c <sync_window+0x78>
					wsect += fs->fsize;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4413      	add	r3, r2
 8009352:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	7858      	ldrb	r0, [r3, #1]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800935e:	2301      	movs	r3, #1
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	f7ff fd1d 	bl	8008da0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	3b01      	subs	r3, #1
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d8eb      	bhi.n	800934a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	429a      	cmp	r2, r3
 8009392:	d01b      	beq.n	80093cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff ffad 	bl	80092f4 <sync_window>
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d113      	bne.n	80093cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7858      	ldrb	r0, [r3, #1]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093ae:	2301      	movs	r3, #1
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	f7ff fcd5 	bl	8008d60 <disk_read>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093bc:	f04f 33ff 	mov.w	r3, #4294967295
 80093c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff ff87 	bl	80092f4 <sync_window>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d159      	bne.n	80094a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d149      	bne.n	800948c <sync_fs+0xb4>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	791b      	ldrb	r3, [r3, #4]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d145      	bne.n	800948c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	899b      	ldrh	r3, [r3, #12]
 800940a:	461a      	mov	r2, r3
 800940c:	2100      	movs	r1, #0
 800940e:	f7ff fda8 	bl	8008f62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3338      	adds	r3, #56	; 0x38
 8009416:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800941a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff fd37 	bl	8008e92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3338      	adds	r3, #56	; 0x38
 8009428:	4921      	ldr	r1, [pc, #132]	; (80094b0 <sync_fs+0xd8>)
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff fd4c 	bl	8008ec8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3338      	adds	r3, #56	; 0x38
 8009434:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009438:	491e      	ldr	r1, [pc, #120]	; (80094b4 <sync_fs+0xdc>)
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fd44 	bl	8008ec8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3338      	adds	r3, #56	; 0x38
 8009444:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f7ff fd3a 	bl	8008ec8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3338      	adds	r3, #56	; 0x38
 8009458:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f7ff fd30 	bl	8008ec8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	1c5a      	adds	r2, r3, #1
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7858      	ldrb	r0, [r3, #1]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009480:	2301      	movs	r3, #1
 8009482:	f7ff fc8d 	bl	8008da0 <disk_write>
			fs->fsi_flag = 0;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	2200      	movs	r2, #0
 8009492:	2100      	movs	r1, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff fca3 	bl	8008de0 <disk_ioctl>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <sync_fs+0xcc>
 80094a0:	2301      	movs	r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	41615252 	.word	0x41615252
 80094b4:	61417272 	.word	0x61417272

080094b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	3b02      	subs	r3, #2
 80094c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	3b02      	subs	r3, #2
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d301      	bcc.n	80094d8 <clust2sect+0x20>
 80094d4:	2300      	movs	r3, #0
 80094d6:	e008      	b.n	80094ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	895b      	ldrh	r3, [r3, #10]
 80094dc:	461a      	mov	r2, r3
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	fb03 f202 	mul.w	r2, r3, r2
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e8:	4413      	add	r3, r2
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d904      	bls.n	8009516 <get_fat+0x20>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009516:	2301      	movs	r3, #1
 8009518:	617b      	str	r3, [r7, #20]
 800951a:	e0bb      	b.n	8009694 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800951c:	f04f 33ff 	mov.w	r3, #4294967295
 8009520:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	2b03      	cmp	r3, #3
 8009528:	f000 8083 	beq.w	8009632 <get_fat+0x13c>
 800952c:	2b03      	cmp	r3, #3
 800952e:	f300 80a7 	bgt.w	8009680 <get_fat+0x18a>
 8009532:	2b01      	cmp	r3, #1
 8009534:	d002      	beq.n	800953c <get_fat+0x46>
 8009536:	2b02      	cmp	r3, #2
 8009538:	d056      	beq.n	80095e8 <get_fat+0xf2>
 800953a:	e0a1      	b.n	8009680 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	085b      	lsrs	r3, r3, #1
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	899b      	ldrh	r3, [r3, #12]
 8009552:	4619      	mov	r1, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	fbb3 f3f1 	udiv	r3, r3, r1
 800955a:	4413      	add	r3, r2
 800955c:	4619      	mov	r1, r3
 800955e:	6938      	ldr	r0, [r7, #16]
 8009560:	f7ff ff0c 	bl	800937c <move_window>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	f040 808d 	bne.w	8009686 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	60fa      	str	r2, [r7, #12]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	8992      	ldrh	r2, [r2, #12]
 8009576:	fbb3 f1f2 	udiv	r1, r3, r2
 800957a:	fb01 f202 	mul.w	r2, r1, r2
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	4413      	add	r3, r2
 8009584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009588:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	899b      	ldrh	r3, [r3, #12]
 8009592:	4619      	mov	r1, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	fbb3 f3f1 	udiv	r3, r3, r1
 800959a:	4413      	add	r3, r2
 800959c:	4619      	mov	r1, r3
 800959e:	6938      	ldr	r0, [r7, #16]
 80095a0:	f7ff feec 	bl	800937c <move_window>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d16f      	bne.n	800968a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	899b      	ldrh	r3, [r3, #12]
 80095ae:	461a      	mov	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80095b6:	fb01 f202 	mul.w	r2, r1, r2
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4413      	add	r3, r2
 80095c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	461a      	mov	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <get_fat+0xe8>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	091b      	lsrs	r3, r3, #4
 80095dc:	e002      	b.n	80095e4 <get_fat+0xee>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e4:	617b      	str	r3, [r7, #20]
			break;
 80095e6:	e055      	b.n	8009694 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	899b      	ldrh	r3, [r3, #12]
 80095f0:	085b      	lsrs	r3, r3, #1
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80095fc:	4413      	add	r3, r2
 80095fe:	4619      	mov	r1, r3
 8009600:	6938      	ldr	r0, [r7, #16]
 8009602:	f7ff febb 	bl	800937c <move_window>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d140      	bne.n	800968e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	8992      	ldrh	r2, [r2, #12]
 800961a:	fbb3 f0f2 	udiv	r0, r3, r2
 800961e:	fb00 f202 	mul.w	r2, r0, r2
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	440b      	add	r3, r1
 8009626:	4618      	mov	r0, r3
 8009628:	f7ff fbf8 	bl	8008e1c <ld_word>
 800962c:	4603      	mov	r3, r0
 800962e:	617b      	str	r3, [r7, #20]
			break;
 8009630:	e030      	b.n	8009694 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	089b      	lsrs	r3, r3, #2
 800963c:	b29b      	uxth	r3, r3
 800963e:	4619      	mov	r1, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	fbb3 f3f1 	udiv	r3, r3, r1
 8009646:	4413      	add	r3, r2
 8009648:	4619      	mov	r1, r3
 800964a:	6938      	ldr	r0, [r7, #16]
 800964c:	f7ff fe96 	bl	800937c <move_window>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d11d      	bne.n	8009692 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	8992      	ldrh	r2, [r2, #12]
 8009664:	fbb3 f0f2 	udiv	r0, r3, r2
 8009668:	fb00 f202 	mul.w	r2, r0, r2
 800966c:	1a9b      	subs	r3, r3, r2
 800966e:	440b      	add	r3, r1
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fbeb 	bl	8008e4c <ld_dword>
 8009676:	4603      	mov	r3, r0
 8009678:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800967c:	617b      	str	r3, [r7, #20]
			break;
 800967e:	e009      	b.n	8009694 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e006      	b.n	8009694 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009686:	bf00      	nop
 8009688:	e004      	b.n	8009694 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800968a:	bf00      	nop
 800968c:	e002      	b.n	8009694 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800968e:	bf00      	nop
 8009690:	e000      	b.n	8009694 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009692:	bf00      	nop
		}
	}

	return val;
 8009694:	697b      	ldr	r3, [r7, #20]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800969e:	b590      	push	{r4, r7, lr}
 80096a0:	b089      	sub	sp, #36	; 0x24
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80096aa:	2302      	movs	r3, #2
 80096ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f240 8109 	bls.w	80098c8 <put_fat+0x22a>
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	429a      	cmp	r2, r3
 80096be:	f080 8103 	bcs.w	80098c8 <put_fat+0x22a>
		switch (fs->fs_type) {
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	f000 80b6 	beq.w	8009838 <put_fat+0x19a>
 80096cc:	2b03      	cmp	r3, #3
 80096ce:	f300 80fb 	bgt.w	80098c8 <put_fat+0x22a>
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d003      	beq.n	80096de <put_fat+0x40>
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	f000 8083 	beq.w	80097e2 <put_fat+0x144>
 80096dc:	e0f4      	b.n	80098c8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	085b      	lsrs	r3, r3, #1
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	4413      	add	r3, r2
 80096ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	899b      	ldrh	r3, [r3, #12]
 80096f4:	4619      	mov	r1, r3
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80096fc:	4413      	add	r3, r2
 80096fe:	4619      	mov	r1, r3
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fe3b 	bl	800937c <move_window>
 8009706:	4603      	mov	r3, r0
 8009708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800970a:	7ffb      	ldrb	r3, [r7, #31]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 80d4 	bne.w	80098ba <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	61ba      	str	r2, [r7, #24]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	8992      	ldrh	r2, [r2, #12]
 8009722:	fbb3 f0f2 	udiv	r0, r3, r2
 8009726:	fb00 f202 	mul.w	r2, r0, r2
 800972a:	1a9b      	subs	r3, r3, r2
 800972c:	440b      	add	r3, r1
 800972e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00d      	beq.n	8009756 <put_fat+0xb8>
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	b25b      	sxtb	r3, r3
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	b25a      	sxtb	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	b25b      	sxtb	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b25b      	sxtb	r3, r3
 8009752:	b2db      	uxtb	r3, r3
 8009754:	e001      	b.n	800975a <put_fat+0xbc>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	899b      	ldrh	r3, [r3, #12]
 800976c:	4619      	mov	r1, r3
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	fbb3 f3f1 	udiv	r3, r3, r1
 8009774:	4413      	add	r3, r2
 8009776:	4619      	mov	r1, r3
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff fdff 	bl	800937c <move_window>
 800977e:	4603      	mov	r3, r0
 8009780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009782:	7ffb      	ldrb	r3, [r7, #31]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f040 809a 	bne.w	80098be <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	899b      	ldrh	r3, [r3, #12]
 8009794:	461a      	mov	r2, r3
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	fbb3 f0f2 	udiv	r0, r3, r2
 800979c:	fb00 f202 	mul.w	r2, r0, r2
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	440b      	add	r3, r1
 80097a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f003 0301 	and.w	r3, r3, #1
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <put_fat+0x11a>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	091b      	lsrs	r3, r3, #4
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	e00e      	b.n	80097d6 <put_fat+0x138>
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b25b      	sxtb	r3, r3
 80097be:	f023 030f 	bic.w	r3, r3, #15
 80097c2:	b25a      	sxtb	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	0a1b      	lsrs	r3, r3, #8
 80097c8:	b25b      	sxtb	r3, r3
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	4313      	orrs	r3, r2
 80097d2:	b25b      	sxtb	r3, r3
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	70da      	strb	r2, [r3, #3]
			break;
 80097e0:	e072      	b.n	80098c8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	899b      	ldrh	r3, [r3, #12]
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	4619      	mov	r1, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80097f6:	4413      	add	r3, r2
 80097f8:	4619      	mov	r1, r3
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff fdbe 	bl	800937c <move_window>
 8009800:	4603      	mov	r3, r0
 8009802:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009804:	7ffb      	ldrb	r3, [r7, #31]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d15b      	bne.n	80098c2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	8992      	ldrh	r2, [r2, #12]
 8009818:	fbb3 f0f2 	udiv	r0, r3, r2
 800981c:	fb00 f202 	mul.w	r2, r0, r2
 8009820:	1a9b      	subs	r3, r3, r2
 8009822:	440b      	add	r3, r1
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	b292      	uxth	r2, r2
 8009828:	4611      	mov	r1, r2
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff fb31 	bl	8008e92 <st_word>
			fs->wflag = 1;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	70da      	strb	r2, [r3, #3]
			break;
 8009836:	e047      	b.n	80098c8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	899b      	ldrh	r3, [r3, #12]
 8009840:	089b      	lsrs	r3, r3, #2
 8009842:	b29b      	uxth	r3, r3
 8009844:	4619      	mov	r1, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	fbb3 f3f1 	udiv	r3, r3, r1
 800984c:	4413      	add	r3, r2
 800984e:	4619      	mov	r1, r3
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff fd93 	bl	800937c <move_window>
 8009856:	4603      	mov	r3, r0
 8009858:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800985a:	7ffb      	ldrb	r3, [r7, #31]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d132      	bne.n	80098c6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	8992      	ldrh	r2, [r2, #12]
 8009874:	fbb3 f0f2 	udiv	r0, r3, r2
 8009878:	fb00 f202 	mul.w	r2, r0, r2
 800987c:	1a9b      	subs	r3, r3, r2
 800987e:	440b      	add	r3, r1
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff fae3 	bl	8008e4c <ld_dword>
 8009886:	4603      	mov	r3, r0
 8009888:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800988c:	4323      	orrs	r3, r4
 800988e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	8992      	ldrh	r2, [r2, #12]
 800989e:	fbb3 f0f2 	udiv	r0, r3, r2
 80098a2:	fb00 f202 	mul.w	r2, r0, r2
 80098a6:	1a9b      	subs	r3, r3, r2
 80098a8:	440b      	add	r3, r1
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fb0b 	bl	8008ec8 <st_dword>
			fs->wflag = 1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	70da      	strb	r2, [r3, #3]
			break;
 80098b8:	e006      	b.n	80098c8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80098ba:	bf00      	nop
 80098bc:	e004      	b.n	80098c8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80098be:	bf00      	nop
 80098c0:	e002      	b.n	80098c8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80098c2:	bf00      	nop
 80098c4:	e000      	b.n	80098c8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80098c6:	bf00      	nop
		}
	}
	return res;
 80098c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3724      	adds	r7, #36	; 0x24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd90      	pop	{r4, r7, pc}

080098d2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b088      	sub	sp, #32
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d904      	bls.n	80098f8 <remove_chain+0x26>
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d301      	bcc.n	80098fc <remove_chain+0x2a>
 80098f8:	2302      	movs	r3, #2
 80098fa:	e04b      	b.n	8009994 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00c      	beq.n	800991c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009902:	f04f 32ff 	mov.w	r2, #4294967295
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	69b8      	ldr	r0, [r7, #24]
 800990a:	f7ff fec8 	bl	800969e <put_fat>
 800990e:	4603      	mov	r3, r0
 8009910:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009912:	7ffb      	ldrb	r3, [r7, #31]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <remove_chain+0x4a>
 8009918:	7ffb      	ldrb	r3, [r7, #31]
 800991a:	e03b      	b.n	8009994 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f7ff fde9 	bl	80094f6 <get_fat>
 8009924:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d031      	beq.n	8009990 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d101      	bne.n	8009936 <remove_chain+0x64>
 8009932:	2302      	movs	r3, #2
 8009934:	e02e      	b.n	8009994 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d101      	bne.n	8009942 <remove_chain+0x70>
 800993e:	2301      	movs	r3, #1
 8009940:	e028      	b.n	8009994 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009942:	2200      	movs	r2, #0
 8009944:	68b9      	ldr	r1, [r7, #8]
 8009946:	69b8      	ldr	r0, [r7, #24]
 8009948:	f7ff fea9 	bl	800969e <put_fat>
 800994c:	4603      	mov	r3, r0
 800994e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009950:	7ffb      	ldrb	r3, [r7, #31]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <remove_chain+0x88>
 8009956:	7ffb      	ldrb	r3, [r7, #31]
 8009958:	e01c      	b.n	8009994 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	699a      	ldr	r2, [r3, #24]
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	3b02      	subs	r3, #2
 8009964:	429a      	cmp	r2, r3
 8009966:	d20b      	bcs.n	8009980 <remove_chain+0xae>
			fs->free_clst++;
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	791b      	ldrb	r3, [r3, #4]
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	b2da      	uxtb	r2, r3
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	429a      	cmp	r2, r3
 800998c:	d3c6      	bcc.n	800991c <remove_chain+0x4a>
 800998e:	e000      	b.n	8009992 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009990:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10d      	bne.n	80099ce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <create_chain+0x2c>
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d31b      	bcc.n	8009a00 <create_chain+0x64>
 80099c8:	2301      	movs	r3, #1
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	e018      	b.n	8009a00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7ff fd90 	bl	80094f6 <get_fat>
 80099d6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d801      	bhi.n	80099e2 <create_chain+0x46>
 80099de:	2301      	movs	r3, #1
 80099e0:	e070      	b.n	8009ac4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d101      	bne.n	80099ee <create_chain+0x52>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	e06a      	b.n	8009ac4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d201      	bcs.n	80099fc <create_chain+0x60>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	e063      	b.n	8009ac4 <create_chain+0x128>
		scl = clst;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	3301      	adds	r3, #1
 8009a08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d307      	bcc.n	8009a24 <create_chain+0x88>
				ncl = 2;
 8009a14:	2302      	movs	r3, #2
 8009a16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009a18:	69fa      	ldr	r2, [r7, #28]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d901      	bls.n	8009a24 <create_chain+0x88>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e04f      	b.n	8009ac4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009a24:	69f9      	ldr	r1, [r7, #28]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff fd65 	bl	80094f6 <get_fat>
 8009a2c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00e      	beq.n	8009a52 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d003      	beq.n	8009a42 <create_chain+0xa6>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a40:	d101      	bne.n	8009a46 <create_chain+0xaa>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	e03e      	b.n	8009ac4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009a46:	69fa      	ldr	r2, [r7, #28]
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d1da      	bne.n	8009a04 <create_chain+0x68>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e038      	b.n	8009ac4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009a52:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009a54:	f04f 32ff 	mov.w	r2, #4294967295
 8009a58:	69f9      	ldr	r1, [r7, #28]
 8009a5a:	6938      	ldr	r0, [r7, #16]
 8009a5c:	f7ff fe1f 	bl	800969e <put_fat>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d109      	bne.n	8009a7e <create_chain+0xe2>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6938      	ldr	r0, [r7, #16]
 8009a76:	f7ff fe12 	bl	800969e <put_fat>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d116      	bne.n	8009ab2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	699a      	ldr	r2, [r3, #24]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	3b02      	subs	r3, #2
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d804      	bhi.n	8009aa2 <create_chain+0x106>
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	1e5a      	subs	r2, r3, #1
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	711a      	strb	r2, [r3, #4]
 8009ab0:	e007      	b.n	8009ac2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d102      	bne.n	8009abe <create_chain+0x122>
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8009abc:	e000      	b.n	8009ac0 <create_chain+0x124>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ac2:	69fb      	ldr	r3, [r7, #28]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3720      	adds	r7, #32
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	899b      	ldrh	r3, [r3, #12]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	8952      	ldrh	r2, [r2, #10]
 8009af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	1d1a      	adds	r2, r3, #4
 8009afe:	613a      	str	r2, [r7, #16]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <clmt_clust+0x42>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e010      	b.n	8009b30 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d307      	bcc.n	8009b26 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	3304      	adds	r3, #4
 8009b22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b24:	e7e9      	b.n	8009afa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009b26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	4413      	add	r3, r2
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b52:	d204      	bcs.n	8009b5e <dir_sdi+0x22>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	f003 031f 	and.w	r3, r3, #31
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e071      	b.n	8009c46 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <dir_sdi+0x46>
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d902      	bls.n	8009b82 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10c      	bne.n	8009ba2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	8912      	ldrh	r2, [r2, #8]
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d301      	bcc.n	8009b98 <dir_sdi+0x5c>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e056      	b.n	8009c46 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	61da      	str	r2, [r3, #28]
 8009ba0:	e02d      	b.n	8009bfe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	895b      	ldrh	r3, [r3, #10]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	899b      	ldrh	r3, [r3, #12]
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bb2:	e019      	b.n	8009be8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6979      	ldr	r1, [r7, #20]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fc9c 	bl	80094f6 <get_fat>
 8009bbe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc6:	d101      	bne.n	8009bcc <dir_sdi+0x90>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e03c      	b.n	8009c46 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d904      	bls.n	8009bdc <dir_sdi+0xa0>
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d301      	bcc.n	8009be0 <dir_sdi+0xa4>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e032      	b.n	8009c46 <dir_sdi+0x10a>
			ofs -= csz;
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d2e1      	bcs.n	8009bb4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009bf0:	6979      	ldr	r1, [r7, #20]
 8009bf2:	6938      	ldr	r0, [r7, #16]
 8009bf4:	f7ff fc60 	bl	80094b8 <clust2sect>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <dir_sdi+0xd4>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e01a      	b.n	8009c46 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	899b      	ldrh	r3, [r3, #12]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c20:	441a      	add	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	899b      	ldrh	r3, [r3, #12]
 8009c30:	461a      	mov	r2, r3
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c38:	fb00 f202 	mul.w	r2, r0, r2
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	18ca      	adds	r2, r1, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b086      	sub	sp, #24
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	3320      	adds	r3, #32
 8009c64:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <dir_next+0x28>
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c74:	d301      	bcc.n	8009c7a <dir_next+0x2c>
 8009c76:	2304      	movs	r3, #4
 8009c78:	e0bb      	b.n	8009df2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	899b      	ldrh	r3, [r3, #12]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c86:	fb01 f202 	mul.w	r2, r1, r2
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f040 809d 	bne.w	8009dcc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10b      	bne.n	8009cbc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	095b      	lsrs	r3, r3, #5
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	8912      	ldrh	r2, [r2, #8]
 8009cac:	4293      	cmp	r3, r2
 8009cae:	f0c0 808d 	bcc.w	8009dcc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	61da      	str	r2, [r3, #28]
 8009cb8:	2304      	movs	r3, #4
 8009cba:	e09a      	b.n	8009df2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	899b      	ldrh	r3, [r3, #12]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	8952      	ldrh	r2, [r2, #10]
 8009ccc:	3a01      	subs	r2, #1
 8009cce:	4013      	ands	r3, r2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d17b      	bne.n	8009dcc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7ff fc0a 	bl	80094f6 <get_fat>
 8009ce2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d801      	bhi.n	8009cee <dir_next+0xa0>
 8009cea:	2302      	movs	r3, #2
 8009cec:	e081      	b.n	8009df2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf4:	d101      	bne.n	8009cfa <dir_next+0xac>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e07b      	b.n	8009df2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d359      	bcc.n	8009db8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	61da      	str	r2, [r3, #28]
 8009d10:	2304      	movs	r3, #4
 8009d12:	e06e      	b.n	8009df2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f7ff fe3d 	bl	800999c <create_chain>
 8009d22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <dir_next+0xe0>
 8009d2a:	2307      	movs	r3, #7
 8009d2c:	e061      	b.n	8009df2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d101      	bne.n	8009d38 <dir_next+0xea>
 8009d34:	2302      	movs	r3, #2
 8009d36:	e05c      	b.n	8009df2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d101      	bne.n	8009d44 <dir_next+0xf6>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e056      	b.n	8009df2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff fad5 	bl	80092f4 <sync_window>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <dir_next+0x106>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e04e      	b.n	8009df2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	899b      	ldrh	r3, [r3, #12]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	2100      	movs	r1, #0
 8009d62:	f7ff f8fe 	bl	8008f62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d66:	2300      	movs	r3, #0
 8009d68:	613b      	str	r3, [r7, #16]
 8009d6a:	6979      	ldr	r1, [r7, #20]
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f7ff fba3 	bl	80094b8 <clust2sect>
 8009d72:	4602      	mov	r2, r0
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	635a      	str	r2, [r3, #52]	; 0x34
 8009d78:	e012      	b.n	8009da0 <dir_next+0x152>
						fs->wflag = 1;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7ff fab7 	bl	80092f4 <sync_window>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <dir_next+0x142>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e030      	b.n	8009df2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	3301      	adds	r3, #1
 8009d94:	613b      	str	r3, [r7, #16]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	635a      	str	r2, [r3, #52]	; 0x34
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	895b      	ldrh	r3, [r3, #10]
 8009da4:	461a      	mov	r2, r3
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d3e6      	bcc.n	8009d7a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	1ad2      	subs	r2, r2, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009dbe:	6979      	ldr	r1, [r7, #20]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff fb79 	bl	80094b8 <clust2sect>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	899b      	ldrh	r3, [r3, #12]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009de4:	fb00 f202 	mul.w	r2, r0, r2
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	18ca      	adds	r2, r1, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b086      	sub	sp, #24
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fe95 	bl	8009b3c <dir_sdi>
 8009e12:	4603      	mov	r3, r0
 8009e14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d12b      	bne.n	8009e74 <dir_alloc+0x7a>
		n = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	4619      	mov	r1, r3
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7ff faa8 	bl	800937c <move_window>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d11d      	bne.n	8009e72 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2be5      	cmp	r3, #229	; 0xe5
 8009e3e:	d004      	beq.n	8009e4a <dir_alloc+0x50>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d107      	bne.n	8009e5a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	613b      	str	r3, [r7, #16]
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d102      	bne.n	8009e5e <dir_alloc+0x64>
 8009e58:	e00c      	b.n	8009e74 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e5e:	2101      	movs	r1, #1
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff fef4 	bl	8009c4e <dir_next>
 8009e66:	4603      	mov	r3, r0
 8009e68:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e6a:	7dfb      	ldrb	r3, [r7, #23]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0d7      	beq.n	8009e20 <dir_alloc+0x26>
 8009e70:	e000      	b.n	8009e74 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009e72:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d101      	bne.n	8009e7e <dir_alloc+0x84>
 8009e7a:	2307      	movs	r3, #7
 8009e7c:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	331a      	adds	r3, #26
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe ffc0 	bl	8008e1c <ld_word>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d109      	bne.n	8009ebc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	3314      	adds	r3, #20
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe ffb5 	bl	8008e1c <ld_word>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	331a      	adds	r3, #26
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	b292      	uxth	r2, r2
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe ffd8 	bl	8008e92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d109      	bne.n	8009efe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f103 0214 	add.w	r2, r3, #20
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	0c1b      	lsrs	r3, r3, #16
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7fe ffca 	bl	8008e92 <st_word>
	}
}
 8009efe:	bf00      	nop
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009f08:	b590      	push	{r4, r7, lr}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	331a      	adds	r3, #26
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe ff80 	bl	8008e1c <ld_word>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <cmp_lfn+0x1e>
 8009f22:	2300      	movs	r3, #0
 8009f24:	e059      	b.n	8009fda <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f2e:	1e5a      	subs	r2, r3, #1
 8009f30:	4613      	mov	r3, r2
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	81fb      	strh	r3, [r7, #14]
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
 8009f44:	e033      	b.n	8009fae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009f46:	4a27      	ldr	r2, [pc, #156]	; (8009fe4 <cmp_lfn+0xdc>)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	4413      	add	r3, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe ff61 	bl	8008e1c <ld_word>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009f5e:	89fb      	ldrh	r3, [r7, #14]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01a      	beq.n	8009f9a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2bfe      	cmp	r3, #254	; 0xfe
 8009f68:	d812      	bhi.n	8009f90 <cmp_lfn+0x88>
 8009f6a:	89bb      	ldrh	r3, [r7, #12]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fec5 	bl	800bcfc <ff_wtoupper>
 8009f72:	4603      	mov	r3, r0
 8009f74:	461c      	mov	r4, r3
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	617a      	str	r2, [r7, #20]
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f001 feb9 	bl	800bcfc <ff_wtoupper>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	d001      	beq.n	8009f94 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009f90:	2300      	movs	r3, #0
 8009f92:	e022      	b.n	8009fda <cmp_lfn+0xd2>
			}
			wc = uc;
 8009f94:	89bb      	ldrh	r3, [r7, #12]
 8009f96:	81fb      	strh	r3, [r7, #14]
 8009f98:	e006      	b.n	8009fa8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009f9a:	89bb      	ldrh	r3, [r7, #12]
 8009f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d001      	beq.n	8009fa8 <cmp_lfn+0xa0>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e018      	b.n	8009fda <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	3301      	adds	r3, #1
 8009fac:	613b      	str	r3, [r7, #16]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b0c      	cmp	r3, #12
 8009fb2:	d9c8      	bls.n	8009f46 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00b      	beq.n	8009fd8 <cmp_lfn+0xd0>
 8009fc0:	89fb      	ldrh	r3, [r7, #14]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d008      	beq.n	8009fd8 <cmp_lfn+0xd0>
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	4413      	add	r3, r2
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <cmp_lfn+0xd0>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e000      	b.n	8009fda <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009fd8:	2301      	movs	r3, #1
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	371c      	adds	r7, #28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd90      	pop	{r4, r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800f220 	.word	0x0800f220

08009fe8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	71fb      	strb	r3, [r7, #7]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	330d      	adds	r3, #13
 800a002:	79ba      	ldrb	r2, [r7, #6]
 800a004:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	330b      	adds	r3, #11
 800a00a:	220f      	movs	r2, #15
 800a00c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	330c      	adds	r3, #12
 800a012:	2200      	movs	r2, #0
 800a014:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	331a      	adds	r3, #26
 800a01a:	2100      	movs	r1, #0
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fe ff38 	bl	8008e92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	1e5a      	subs	r2, r3, #1
 800a026:	4613      	mov	r3, r2
 800a028:	005b      	lsls	r3, r3, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	82fb      	strh	r3, [r7, #22]
 800a036:	2300      	movs	r3, #0
 800a038:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a03a:	8afb      	ldrh	r3, [r7, #22]
 800a03c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a040:	4293      	cmp	r3, r2
 800a042:	d007      	beq.n	800a054 <put_lfn+0x6c>
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	1c5a      	adds	r2, r3, #1
 800a048:	61fa      	str	r2, [r7, #28]
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a054:	4a17      	ldr	r2, [pc, #92]	; (800a0b4 <put_lfn+0xcc>)
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	4413      	add	r3, r2
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	4413      	add	r3, r2
 800a062:	8afa      	ldrh	r2, [r7, #22]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe ff13 	bl	8008e92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a06c:	8afb      	ldrh	r3, [r7, #22]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d102      	bne.n	800a078 <put_lfn+0x90>
 800a072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a076:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	3301      	adds	r3, #1
 800a07c:	61bb      	str	r3, [r7, #24]
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	2b0c      	cmp	r3, #12
 800a082:	d9da      	bls.n	800a03a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a084:	8afb      	ldrh	r3, [r7, #22]
 800a086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d006      	beq.n	800a09c <put_lfn+0xb4>
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d103      	bne.n	800a0a4 <put_lfn+0xbc>
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	79fa      	ldrb	r2, [r7, #7]
 800a0a8:	701a      	strb	r2, [r3, #0]
}
 800a0aa:	bf00      	nop
 800a0ac:	3720      	adds	r7, #32
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800f220 	.word	0x0800f220

0800a0b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08c      	sub	sp, #48	; 0x30
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a0c6:	220b      	movs	r2, #11
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7fe ff28 	bl	8008f20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2b05      	cmp	r3, #5
 800a0d4:	d92b      	bls.n	800a12e <gen_numname+0x76>
		sr = seq;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a0da:	e022      	b.n	800a122 <gen_numname+0x6a>
			wc = *lfn++;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	607a      	str	r2, [r7, #4]
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0ea:	e017      	b.n	800a11c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	005a      	lsls	r2, r3, #1
 800a0f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	4413      	add	r3, r2
 800a0f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a0fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0fc:	085b      	lsrs	r3, r3, #1
 800a0fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <gen_numname+0x5e>
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a110:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a114:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	3301      	adds	r3, #1
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11e:	2b0f      	cmp	r3, #15
 800a120:	d9e4      	bls.n	800a0ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1d8      	bne.n	800a0dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a12e:	2307      	movs	r3, #7
 800a130:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 030f 	and.w	r3, r3, #15
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	3330      	adds	r3, #48	; 0x30
 800a13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a146:	2b39      	cmp	r3, #57	; 0x39
 800a148:	d904      	bls.n	800a154 <gen_numname+0x9c>
 800a14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a14e:	3307      	adds	r3, #7
 800a150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	1e5a      	subs	r2, r3, #1
 800a158:	62ba      	str	r2, [r7, #40]	; 0x28
 800a15a:	3330      	adds	r3, #48	; 0x30
 800a15c:	443b      	add	r3, r7
 800a15e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a162:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	091b      	lsrs	r3, r3, #4
 800a16a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1df      	bne.n	800a132 <gen_numname+0x7a>
	ns[i] = '~';
 800a172:	f107 0214 	add.w	r2, r7, #20
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	4413      	add	r3, r2
 800a17a:	227e      	movs	r2, #126	; 0x7e
 800a17c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a17e:	2300      	movs	r3, #0
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
 800a182:	e002      	b.n	800a18a <gen_numname+0xd2>
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	3301      	adds	r3, #1
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
 800a18a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	429a      	cmp	r2, r3
 800a190:	d205      	bcs.n	800a19e <gen_numname+0xe6>
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	4413      	add	r3, r2
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b20      	cmp	r3, #32
 800a19c:	d1f2      	bne.n	800a184 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a0:	2b07      	cmp	r3, #7
 800a1a2:	d807      	bhi.n	800a1b4 <gen_numname+0xfc>
 800a1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800a1aa:	3330      	adds	r3, #48	; 0x30
 800a1ac:	443b      	add	r3, r7
 800a1ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a1b2:	e000      	b.n	800a1b6 <gen_numname+0xfe>
 800a1b4:	2120      	movs	r1, #32
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	627a      	str	r2, [r7, #36]	; 0x24
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	460a      	mov	r2, r1
 800a1c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	2b07      	cmp	r3, #7
 800a1c8:	d9e9      	bls.n	800a19e <gen_numname+0xe6>
}
 800a1ca:	bf00      	nop
 800a1cc:	bf00      	nop
 800a1ce:	3730      	adds	r7, #48	; 0x30
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a1e0:	230b      	movs	r3, #11
 800a1e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	0852      	lsrs	r2, r2, #1
 800a1ea:	01db      	lsls	r3, r3, #7
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	1c59      	adds	r1, r3, #1
 800a1f4:	6079      	str	r1, [r7, #4]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	60bb      	str	r3, [r7, #8]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1ed      	bne.n	800a1e4 <sum_sfn+0x10>
	return sum;
 800a208:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b086      	sub	sp, #24
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a224:	2100      	movs	r1, #0
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff fc88 	bl	8009b3c <dir_sdi>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <dir_find+0x24>
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	e0a9      	b.n	800a38e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a23a:	23ff      	movs	r3, #255	; 0xff
 800a23c:	753b      	strb	r3, [r7, #20]
 800a23e:	7d3b      	ldrb	r3, [r7, #20]
 800a240:	757b      	strb	r3, [r7, #21]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f04f 32ff 	mov.w	r2, #4294967295
 800a248:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	4619      	mov	r1, r3
 800a250:	6938      	ldr	r0, [r7, #16]
 800a252:	f7ff f893 	bl	800937c <move_window>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f040 8090 	bne.w	800a382 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a26a:	7dbb      	ldrb	r3, [r7, #22]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d102      	bne.n	800a276 <dir_find+0x60>
 800a270:	2304      	movs	r3, #4
 800a272:	75fb      	strb	r3, [r7, #23]
 800a274:	e08a      	b.n	800a38c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	330b      	adds	r3, #11
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a282:	73fb      	strb	r3, [r7, #15]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7bfa      	ldrb	r2, [r7, #15]
 800a288:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a28a:	7dbb      	ldrb	r3, [r7, #22]
 800a28c:	2be5      	cmp	r3, #229	; 0xe5
 800a28e:	d007      	beq.n	800a2a0 <dir_find+0x8a>
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	f003 0308 	and.w	r3, r3, #8
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <dir_find+0x98>
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	2b0f      	cmp	r3, #15
 800a29e:	d006      	beq.n	800a2ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a2a0:	23ff      	movs	r3, #255	; 0xff
 800a2a2:	757b      	strb	r3, [r7, #21]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a2ac:	e05e      	b.n	800a36c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	2b0f      	cmp	r3, #15
 800a2b2:	d136      	bne.n	800a322 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d154      	bne.n	800a36c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
 800a2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00d      	beq.n	800a2e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	7b5b      	ldrb	r3, [r3, #13]
 800a2d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a2d4:	7dbb      	ldrb	r3, [r7, #22]
 800a2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2da:	75bb      	strb	r3, [r7, #22]
 800a2dc:	7dbb      	ldrb	r3, [r7, #22]
 800a2de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	695a      	ldr	r2, [r3, #20]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a2e8:	7dba      	ldrb	r2, [r7, #22]
 800a2ea:	7d7b      	ldrb	r3, [r7, #21]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d115      	bne.n	800a31c <dir_find+0x106>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	330d      	adds	r3, #13
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	7d3a      	ldrb	r2, [r7, #20]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d10e      	bne.n	800a31c <dir_find+0x106>
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	691a      	ldr	r2, [r3, #16]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	4619      	mov	r1, r3
 800a308:	4610      	mov	r0, r2
 800a30a:	f7ff fdfd 	bl	8009f08 <cmp_lfn>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <dir_find+0x106>
 800a314:	7d7b      	ldrb	r3, [r7, #21]
 800a316:	3b01      	subs	r3, #1
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	e000      	b.n	800a31e <dir_find+0x108>
 800a31c:	23ff      	movs	r3, #255	; 0xff
 800a31e:	757b      	strb	r3, [r7, #21]
 800a320:	e024      	b.n	800a36c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a322:	7d7b      	ldrb	r3, [r7, #21]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <dir_find+0x126>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a1b      	ldr	r3, [r3, #32]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff ff51 	bl	800a1d4 <sum_sfn>
 800a332:	4603      	mov	r3, r0
 800a334:	461a      	mov	r2, r3
 800a336:	7d3b      	ldrb	r3, [r7, #20]
 800a338:	4293      	cmp	r3, r2
 800a33a:	d024      	beq.n	800a386 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <dir_find+0x14a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a18      	ldr	r0, [r3, #32]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3324      	adds	r3, #36	; 0x24
 800a352:	220b      	movs	r2, #11
 800a354:	4619      	mov	r1, r3
 800a356:	f7fe fe1f 	bl	8008f98 <mem_cmp>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d014      	beq.n	800a38a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a360:	23ff      	movs	r3, #255	; 0xff
 800a362:	757b      	strb	r3, [r7, #21]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a36c:	2100      	movs	r1, #0
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7ff fc6d 	bl	8009c4e <dir_next>
 800a374:	4603      	mov	r3, r0
 800a376:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f43f af65 	beq.w	800a24a <dir_find+0x34>
 800a380:	e004      	b.n	800a38c <dir_find+0x176>
		if (res != FR_OK) break;
 800a382:	bf00      	nop
 800a384:	e002      	b.n	800a38c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a38a:	bf00      	nop

	return res;
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08c      	sub	sp, #48	; 0x30
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a3ac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <dir_register+0x20>
 800a3b4:	2306      	movs	r3, #6
 800a3b6:	e0e0      	b.n	800a57a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a3bc:	e002      	b.n	800a3c4 <dir_register+0x2c>
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	691a      	ldr	r2, [r3, #16]
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f4      	bne.n	800a3be <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a3da:	f107 030c 	add.w	r3, r7, #12
 800a3de:	220c      	movs	r2, #12
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fd9d 	bl	8008f20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d032      	beq.n	800a456 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2240      	movs	r2, #64	; 0x40
 800a3f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3fc:	e016      	b.n	800a42c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	691a      	ldr	r2, [r3, #16]
 800a408:	f107 010c 	add.w	r1, r7, #12
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	f7ff fe53 	bl	800a0b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff feff 	bl	800a216 <dir_find>
 800a418:	4603      	mov	r3, r0
 800a41a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a41e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	3301      	adds	r3, #1
 800a42a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	2b63      	cmp	r3, #99	; 0x63
 800a430:	d9e5      	bls.n	800a3fe <dir_register+0x66>
 800a432:	e000      	b.n	800a436 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a434:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	2b64      	cmp	r3, #100	; 0x64
 800a43a:	d101      	bne.n	800a440 <dir_register+0xa8>
 800a43c:	2307      	movs	r3, #7
 800a43e:	e09c      	b.n	800a57a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a444:	2b04      	cmp	r3, #4
 800a446:	d002      	beq.n	800a44e <dir_register+0xb6>
 800a448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a44c:	e095      	b.n	800a57a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a44e:	7dfa      	ldrb	r2, [r7, #23]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d007      	beq.n	800a470 <dir_register+0xd8>
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	330c      	adds	r3, #12
 800a464:	4a47      	ldr	r2, [pc, #284]	; (800a584 <dir_register+0x1ec>)
 800a466:	fba2 2303 	umull	r2, r3, r2, r3
 800a46a:	089b      	lsrs	r3, r3, #2
 800a46c:	3301      	adds	r3, #1
 800a46e:	e000      	b.n	800a472 <dir_register+0xda>
 800a470:	2301      	movs	r3, #1
 800a472:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a474:	6a39      	ldr	r1, [r7, #32]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff fcbf 	bl	8009dfa <dir_alloc>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a482:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a486:	2b00      	cmp	r3, #0
 800a488:	d148      	bne.n	800a51c <dir_register+0x184>
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	623b      	str	r3, [r7, #32]
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d042      	beq.n	800a51c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695a      	ldr	r2, [r3, #20]
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	015b      	lsls	r3, r3, #5
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fb4a 	bl	8009b3c <dir_sdi>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a4ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d132      	bne.n	800a51c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3324      	adds	r3, #36	; 0x24
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7ff fe8a 	bl	800a1d4 <sum_sfn>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	69f8      	ldr	r0, [r7, #28]
 800a4cc:	f7fe ff56 	bl	800937c <move_window>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d11d      	bne.n	800a51a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	6918      	ldr	r0, [r3, #16]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a19      	ldr	r1, [r3, #32]
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	7efb      	ldrb	r3, [r7, #27]
 800a4ec:	f7ff fd7c 	bl	8009fe8 <put_lfn>
				fs->wflag = 1;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff fba8 	bl	8009c4e <dir_next>
 800a4fe:	4603      	mov	r3, r0
 800a500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d107      	bne.n	800a51c <dir_register+0x184>
 800a50c:	6a3b      	ldr	r3, [r7, #32]
 800a50e:	3b01      	subs	r3, #1
 800a510:	623b      	str	r3, [r7, #32]
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1d5      	bne.n	800a4c4 <dir_register+0x12c>
 800a518:	e000      	b.n	800a51c <dir_register+0x184>
				if (res != FR_OK) break;
 800a51a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a51c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a520:	2b00      	cmp	r3, #0
 800a522:	d128      	bne.n	800a576 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	4619      	mov	r1, r3
 800a52a:	69f8      	ldr	r0, [r7, #28]
 800a52c:	f7fe ff26 	bl	800937c <move_window>
 800a530:	4603      	mov	r3, r0
 800a532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d11b      	bne.n	800a576 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	2220      	movs	r2, #32
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f7fe fd0b 	bl	8008f62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a18      	ldr	r0, [r3, #32]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3324      	adds	r3, #36	; 0x24
 800a554:	220b      	movs	r2, #11
 800a556:	4619      	mov	r1, r3
 800a558:	f7fe fce2 	bl	8008f20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	330c      	adds	r3, #12
 800a568:	f002 0218 	and.w	r2, r2, #24
 800a56c:	b2d2      	uxtb	r2, r2
 800a56e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	2201      	movs	r2, #1
 800a574:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3730      	adds	r7, #48	; 0x30
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	4ec4ec4f 	.word	0x4ec4ec4f

0800a588 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08a      	sub	sp, #40	; 0x28
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	613b      	str	r3, [r7, #16]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	61ba      	str	r2, [r7, #24]
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5b8:	2b1f      	cmp	r3, #31
 800a5ba:	d940      	bls.n	800a63e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a5bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5be:	2b2f      	cmp	r3, #47	; 0x2f
 800a5c0:	d006      	beq.n	800a5d0 <create_name+0x48>
 800a5c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c4:	2b5c      	cmp	r3, #92	; 0x5c
 800a5c6:	d110      	bne.n	800a5ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a5c8:	e002      	b.n	800a5d0 <create_name+0x48>
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	61bb      	str	r3, [r7, #24]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b2f      	cmp	r3, #47	; 0x2f
 800a5da:	d0f6      	beq.n	800a5ca <create_name+0x42>
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a5e6:	d0f0      	beq.n	800a5ca <create_name+0x42>
			break;
 800a5e8:	e02a      	b.n	800a640 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2bfe      	cmp	r3, #254	; 0xfe
 800a5ee:	d901      	bls.n	800a5f4 <create_name+0x6c>
 800a5f0:	2306      	movs	r3, #6
 800a5f2:	e17d      	b.n	800a8f0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a5f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	4618      	mov	r0, r3
 800a600:	f001 fb40 	bl	800bc84 <ff_convert>
 800a604:	4603      	mov	r3, r0
 800a606:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <create_name+0x8a>
 800a60e:	2306      	movs	r3, #6
 800a610:	e16e      	b.n	800a8f0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a614:	2b7f      	cmp	r3, #127	; 0x7f
 800a616:	d809      	bhi.n	800a62c <create_name+0xa4>
 800a618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a61a:	4619      	mov	r1, r3
 800a61c:	488d      	ldr	r0, [pc, #564]	; (800a854 <create_name+0x2cc>)
 800a61e:	f7fe fce2 	bl	8008fe6 <chk_chr>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <create_name+0xa4>
 800a628:	2306      	movs	r3, #6
 800a62a:	e161      	b.n	800a8f0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	617a      	str	r2, [r7, #20]
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a63a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a63c:	e7b4      	b.n	800a5a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a63e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	441a      	add	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a64a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a64c:	2b1f      	cmp	r3, #31
 800a64e:	d801      	bhi.n	800a654 <create_name+0xcc>
 800a650:	2304      	movs	r3, #4
 800a652:	e000      	b.n	800a656 <create_name+0xce>
 800a654:	2300      	movs	r3, #0
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a65a:	e011      	b.n	800a680 <create_name+0xf8>
		w = lfn[di - 1];
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a662:	3b01      	subs	r3, #1
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4413      	add	r3, r2
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a66e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a670:	2b20      	cmp	r3, #32
 800a672:	d002      	beq.n	800a67a <create_name+0xf2>
 800a674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a676:	2b2e      	cmp	r3, #46	; 0x2e
 800a678:	d106      	bne.n	800a688 <create_name+0x100>
		di--;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1ea      	bne.n	800a65c <create_name+0xd4>
 800a686:	e000      	b.n	800a68a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a688:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	4413      	add	r3, r2
 800a692:	2200      	movs	r2, #0
 800a694:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <create_name+0x118>
 800a69c:	2306      	movs	r3, #6
 800a69e:	e127      	b.n	800a8f0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3324      	adds	r3, #36	; 0x24
 800a6a4:	220b      	movs	r2, #11
 800a6a6:	2120      	movs	r1, #32
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fe fc5a 	bl	8008f62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61bb      	str	r3, [r7, #24]
 800a6b2:	e002      	b.n	800a6ba <create_name+0x132>
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	61bb      	str	r3, [r7, #24]
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	2b20      	cmp	r3, #32
 800a6c6:	d0f5      	beq.n	800a6b4 <create_name+0x12c>
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	005b      	lsls	r3, r3, #1
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d4:	d0ee      	beq.n	800a6b4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d009      	beq.n	800a6f0 <create_name+0x168>
 800a6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6e0:	f043 0303 	orr.w	r3, r3, #3
 800a6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a6e8:	e002      	b.n	800a6f0 <create_name+0x168>
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d009      	beq.n	800a70a <create_name+0x182>
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	2b2e      	cmp	r3, #46	; 0x2e
 800a708:	d1ef      	bne.n	800a6ea <create_name+0x162>

	i = b = 0; ni = 8;
 800a70a:	2300      	movs	r3, #0
 800a70c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a710:	2300      	movs	r3, #0
 800a712:	623b      	str	r3, [r7, #32]
 800a714:	2308      	movs	r3, #8
 800a716:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	61ba      	str	r2, [r7, #24]
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 8090 	beq.w	800a850 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a732:	2b20      	cmp	r3, #32
 800a734:	d006      	beq.n	800a744 <create_name+0x1bc>
 800a736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a738:	2b2e      	cmp	r3, #46	; 0x2e
 800a73a:	d10a      	bne.n	800a752 <create_name+0x1ca>
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	429a      	cmp	r2, r3
 800a742:	d006      	beq.n	800a752 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a748:	f043 0303 	orr.w	r3, r3, #3
 800a74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a750:	e07d      	b.n	800a84e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a752:	6a3a      	ldr	r2, [r7, #32]
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	429a      	cmp	r2, r3
 800a758:	d203      	bcs.n	800a762 <create_name+0x1da>
 800a75a:	69ba      	ldr	r2, [r7, #24]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d123      	bne.n	800a7aa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	2b0b      	cmp	r3, #11
 800a766:	d106      	bne.n	800a776 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a76c:	f043 0303 	orr.w	r3, r3, #3
 800a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a774:	e075      	b.n	800a862 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d005      	beq.n	800a78a <create_name+0x202>
 800a77e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a782:	f043 0303 	orr.w	r3, r3, #3
 800a786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a78a:	69ba      	ldr	r2, [r7, #24]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d866      	bhi.n	800a860 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	61bb      	str	r3, [r7, #24]
 800a796:	2308      	movs	r3, #8
 800a798:	623b      	str	r3, [r7, #32]
 800a79a:	230b      	movs	r3, #11
 800a79c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a79e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a7a8:	e051      	b.n	800a84e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a7aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ac:	2b7f      	cmp	r3, #127	; 0x7f
 800a7ae:	d914      	bls.n	800a7da <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a7b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 fa65 	bl	800bc84 <ff_convert>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a7be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d004      	beq.n	800a7ce <create_name+0x246>
 800a7c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7c6:	3b80      	subs	r3, #128	; 0x80
 800a7c8:	4a23      	ldr	r2, [pc, #140]	; (800a858 <create_name+0x2d0>)
 800a7ca:	5cd3      	ldrb	r3, [r2, r3]
 800a7cc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d2:	f043 0302 	orr.w	r3, r3, #2
 800a7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a7da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d007      	beq.n	800a7f0 <create_name+0x268>
 800a7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	481d      	ldr	r0, [pc, #116]	; (800a85c <create_name+0x2d4>)
 800a7e6:	f7fe fbfe 	bl	8008fe6 <chk_chr>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d008      	beq.n	800a802 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a7f0:	235f      	movs	r3, #95	; 0x5f
 800a7f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7f8:	f043 0303 	orr.w	r3, r3, #3
 800a7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a800:	e01b      	b.n	800a83a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d909      	bls.n	800a81c <create_name+0x294>
 800a808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a80a:	2b5a      	cmp	r3, #90	; 0x5a
 800a80c:	d806      	bhi.n	800a81c <create_name+0x294>
					b |= 2;
 800a80e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a812:	f043 0302 	orr.w	r3, r3, #2
 800a816:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a81a:	e00e      	b.n	800a83a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a81c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a81e:	2b60      	cmp	r3, #96	; 0x60
 800a820:	d90b      	bls.n	800a83a <create_name+0x2b2>
 800a822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a824:	2b7a      	cmp	r3, #122	; 0x7a
 800a826:	d808      	bhi.n	800a83a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a82c:	f043 0301 	orr.w	r3, r3, #1
 800a830:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a836:	3b20      	subs	r3, #32
 800a838:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	623a      	str	r2, [r7, #32]
 800a840:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a842:	b2d1      	uxtb	r1, r2
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	4413      	add	r3, r2
 800a848:	460a      	mov	r2, r1
 800a84a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a84e:	e763      	b.n	800a718 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a850:	bf00      	nop
 800a852:	e006      	b.n	800a862 <create_name+0x2da>
 800a854:	0800f124 	.word	0x0800f124
 800a858:	0800f1a0 	.word	0x0800f1a0
 800a85c:	0800f130 	.word	0x0800f130
			if (si > di) break;			/* No extension */
 800a860:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a868:	2be5      	cmp	r3, #229	; 0xe5
 800a86a:	d103      	bne.n	800a874 <create_name+0x2ec>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2205      	movs	r2, #5
 800a870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2b08      	cmp	r3, #8
 800a878:	d104      	bne.n	800a884 <create_name+0x2fc>
 800a87a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a888:	f003 030c 	and.w	r3, r3, #12
 800a88c:	2b0c      	cmp	r3, #12
 800a88e:	d005      	beq.n	800a89c <create_name+0x314>
 800a890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d105      	bne.n	800a8a8 <create_name+0x320>
 800a89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a0:	f043 0302 	orr.w	r3, r3, #2
 800a8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a8a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d117      	bne.n	800a8e4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a8b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8b8:	f003 0303 	and.w	r3, r3, #3
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d105      	bne.n	800a8cc <create_name+0x344>
 800a8c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8c4:	f043 0310 	orr.w	r3, r3, #16
 800a8c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a8cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a8d0:	f003 030c 	and.w	r3, r3, #12
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d105      	bne.n	800a8e4 <create_name+0x35c>
 800a8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8dc:	f043 0308 	orr.w	r3, r3, #8
 800a8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a8ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a8ee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3728      	adds	r7, #40	; 0x28
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a90c:	e002      	b.n	800a914 <follow_path+0x1c>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b2f      	cmp	r3, #47	; 0x2f
 800a91a:	d0f8      	beq.n	800a90e <follow_path+0x16>
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	2b5c      	cmp	r3, #92	; 0x5c
 800a922:	d0f4      	beq.n	800a90e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	2200      	movs	r2, #0
 800a928:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b1f      	cmp	r3, #31
 800a930:	d80a      	bhi.n	800a948 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2280      	movs	r2, #128	; 0x80
 800a936:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a93a:	2100      	movs	r1, #0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff f8fd 	bl	8009b3c <dir_sdi>
 800a942:	4603      	mov	r3, r0
 800a944:	75fb      	strb	r3, [r7, #23]
 800a946:	e048      	b.n	800a9da <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a948:	463b      	mov	r3, r7
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff fe1b 	bl	800a588 <create_name>
 800a952:	4603      	mov	r3, r0
 800a954:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d139      	bne.n	800a9d0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7ff fc5a 	bl	800a216 <dir_find>
 800a962:	4603      	mov	r3, r0
 800a964:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a96c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00a      	beq.n	800a98a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b04      	cmp	r3, #4
 800a978:	d12c      	bne.n	800a9d4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a97a:	7afb      	ldrb	r3, [r7, #11]
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d127      	bne.n	800a9d4 <follow_path+0xdc>
 800a984:	2305      	movs	r3, #5
 800a986:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a988:	e024      	b.n	800a9d4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a98a:	7afb      	ldrb	r3, [r7, #11]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d121      	bne.n	800a9d8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	799b      	ldrb	r3, [r3, #6]
 800a998:	f003 0310 	and.w	r3, r3, #16
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d102      	bne.n	800a9a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a9a0:	2305      	movs	r3, #5
 800a9a2:	75fb      	strb	r3, [r7, #23]
 800a9a4:	e019      	b.n	800a9da <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	8992      	ldrh	r2, [r2, #12]
 800a9b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9b8:	fb00 f202 	mul.w	r2, r0, r2
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	440b      	add	r3, r1
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7ff fa60 	bl	8009e88 <ld_clust>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a9ce:	e7bb      	b.n	800a948 <follow_path+0x50>
			if (res != FR_OK) break;
 800a9d0:	bf00      	nop
 800a9d2:	e002      	b.n	800a9da <follow_path+0xe2>
				break;
 800a9d4:	bf00      	nop
 800a9d6:	e000      	b.n	800a9da <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a9d8:	bf00      	nop
			}
		}
	}

	return res;
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d031      	beq.n	800aa5e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	e002      	b.n	800aa08 <get_ldnumber+0x24>
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	3301      	adds	r3, #1
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b1f      	cmp	r3, #31
 800aa0e:	d903      	bls.n	800aa18 <get_ldnumber+0x34>
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b3a      	cmp	r3, #58	; 0x3a
 800aa16:	d1f4      	bne.n	800aa02 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b3a      	cmp	r3, #58	; 0x3a
 800aa1e:	d11c      	bne.n	800aa5a <get_ldnumber+0x76>
			tp = *path;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	60fa      	str	r2, [r7, #12]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	3b30      	subs	r3, #48	; 0x30
 800aa30:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b09      	cmp	r3, #9
 800aa36:	d80e      	bhi.n	800aa56 <get_ldnumber+0x72>
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d10a      	bne.n	800aa56 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d107      	bne.n	800aa56 <get_ldnumber+0x72>
					vol = (int)i;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	617b      	str	r3, [r7, #20]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	e002      	b.n	800aa60 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aa5e:	693b      	ldr	r3, [r7, #16]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	371c      	adds	r7, #28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	70da      	strb	r2, [r3, #3]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa82:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fe fc78 	bl	800937c <move_window>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <check_fs+0x2a>
 800aa92:	2304      	movs	r3, #4
 800aa94:	e038      	b.n	800ab08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3338      	adds	r3, #56	; 0x38
 800aa9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe f9bc 	bl	8008e1c <ld_word>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d001      	beq.n	800aab4 <check_fs+0x48>
 800aab0:	2303      	movs	r3, #3
 800aab2:	e029      	b.n	800ab08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aaba:	2be9      	cmp	r3, #233	; 0xe9
 800aabc:	d009      	beq.n	800aad2 <check_fs+0x66>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aac4:	2beb      	cmp	r3, #235	; 0xeb
 800aac6:	d11e      	bne.n	800ab06 <check_fs+0x9a>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aace:	2b90      	cmp	r3, #144	; 0x90
 800aad0:	d119      	bne.n	800ab06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3338      	adds	r3, #56	; 0x38
 800aad6:	3336      	adds	r3, #54	; 0x36
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe f9b7 	bl	8008e4c <ld_dword>
 800aade:	4603      	mov	r3, r0
 800aae0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aae4:	4a0a      	ldr	r2, [pc, #40]	; (800ab10 <check_fs+0xa4>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d101      	bne.n	800aaee <check_fs+0x82>
 800aaea:	2300      	movs	r3, #0
 800aaec:	e00c      	b.n	800ab08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3338      	adds	r3, #56	; 0x38
 800aaf2:	3352      	adds	r3, #82	; 0x52
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe f9a9 	bl	8008e4c <ld_dword>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4a05      	ldr	r2, [pc, #20]	; (800ab14 <check_fs+0xa8>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d101      	bne.n	800ab06 <check_fs+0x9a>
 800ab02:	2300      	movs	r3, #0
 800ab04:	e000      	b.n	800ab08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ab06:	2302      	movs	r3, #2
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	00544146 	.word	0x00544146
 800ab14:	33544146 	.word	0x33544146

0800ab18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b096      	sub	sp, #88	; 0x58
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	4613      	mov	r3, r2
 800ab24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7ff ff59 	bl	800a9e4 <get_ldnumber>
 800ab32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	da01      	bge.n	800ab3e <find_volume+0x26>
 800ab3a:	230b      	movs	r3, #11
 800ab3c:	e265      	b.n	800b00a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ab3e:	4a9f      	ldr	r2, [pc, #636]	; (800adbc <find_volume+0x2a4>)
 800ab40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <find_volume+0x3a>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	e25b      	b.n	800b00a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	f023 0301 	bic.w	r3, r3, #1
 800ab5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01a      	beq.n	800ab9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ab68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe f8b5 	bl	8008cdc <disk_status>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ab78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10c      	bne.n	800ab9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <find_volume+0x82>
 800ab8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab8e:	f003 0304 	and.w	r3, r3, #4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ab96:	230a      	movs	r3, #10
 800ab98:	e237      	b.n	800b00a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e235      	b.n	800b00a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	2200      	movs	r2, #0
 800aba2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800abac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abae:	785b      	ldrb	r3, [r3, #1]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7fe f8ad 	bl	8008d10 <disk_initialize>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800abbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800abc8:	2303      	movs	r3, #3
 800abca:	e21e      	b.n	800b00a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d007      	beq.n	800abe2 <find_volume+0xca>
 800abd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abd6:	f003 0304 	and.w	r3, r3, #4
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800abde:	230a      	movs	r3, #10
 800abe0:	e213      	b.n	800b00a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800abe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe4:	7858      	ldrb	r0, [r3, #1]
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	330c      	adds	r3, #12
 800abea:	461a      	mov	r2, r3
 800abec:	2102      	movs	r1, #2
 800abee:	f7fe f8f7 	bl	8008de0 <disk_ioctl>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <find_volume+0xe4>
 800abf8:	2301      	movs	r3, #1
 800abfa:	e206      	b.n	800b00a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800abfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfe:	899b      	ldrh	r3, [r3, #12]
 800ac00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac04:	d80d      	bhi.n	800ac22 <find_volume+0x10a>
 800ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac08:	899b      	ldrh	r3, [r3, #12]
 800ac0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac0e:	d308      	bcc.n	800ac22 <find_volume+0x10a>
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	899b      	ldrh	r3, [r3, #12]
 800ac14:	461a      	mov	r2, r3
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	899b      	ldrh	r3, [r3, #12]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <find_volume+0x10e>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e1f1      	b.n	800b00a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ac2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac2e:	f7ff ff1d 	bl	800aa6c <check_fs>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ac38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d149      	bne.n	800acd4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac40:	2300      	movs	r3, #0
 800ac42:	643b      	str	r3, [r7, #64]	; 0x40
 800ac44:	e01e      	b.n	800ac84 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ac4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ac54:	4413      	add	r3, r2
 800ac56:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d006      	beq.n	800ac70 <find_volume+0x158>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	3308      	adds	r3, #8
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe f8f0 	bl	8008e4c <ld_dword>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	e000      	b.n	800ac72 <find_volume+0x15a>
 800ac70:	2200      	movs	r2, #0
 800ac72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	3358      	adds	r3, #88	; 0x58
 800ac78:	443b      	add	r3, r7
 800ac7a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ac7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac80:	3301      	adds	r3, #1
 800ac82:	643b      	str	r3, [r7, #64]	; 0x40
 800ac84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d9dd      	bls.n	800ac46 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ac8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <find_volume+0x182>
 800ac94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac96:	3b01      	subs	r3, #1
 800ac98:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ac9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	3358      	adds	r3, #88	; 0x58
 800aca0:	443b      	add	r3, r7
 800aca2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aca6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d005      	beq.n	800acba <find_volume+0x1a2>
 800acae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acb2:	f7ff fedb 	bl	800aa6c <check_fs>
 800acb6:	4603      	mov	r3, r0
 800acb8:	e000      	b.n	800acbc <find_volume+0x1a4>
 800acba:	2303      	movs	r3, #3
 800acbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800acc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d905      	bls.n	800acd4 <find_volume+0x1bc>
 800acc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acca:	3301      	adds	r3, #1
 800accc:	643b      	str	r3, [r7, #64]	; 0x40
 800acce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d9e2      	bls.n	800ac9a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800acd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d101      	bne.n	800ace0 <find_volume+0x1c8>
 800acdc:	2301      	movs	r3, #1
 800acde:	e194      	b.n	800b00a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ace0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d901      	bls.n	800acec <find_volume+0x1d4>
 800ace8:	230d      	movs	r3, #13
 800acea:	e18e      	b.n	800b00a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	3338      	adds	r3, #56	; 0x38
 800acf0:	330b      	adds	r3, #11
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe f892 	bl	8008e1c <ld_word>
 800acf8:	4603      	mov	r3, r0
 800acfa:	461a      	mov	r2, r3
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	899b      	ldrh	r3, [r3, #12]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d001      	beq.n	800ad08 <find_volume+0x1f0>
 800ad04:	230d      	movs	r3, #13
 800ad06:	e180      	b.n	800b00a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	3338      	adds	r3, #56	; 0x38
 800ad0c:	3316      	adds	r3, #22
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe f884 	bl	8008e1c <ld_word>
 800ad14:	4603      	mov	r3, r0
 800ad16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ad18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d106      	bne.n	800ad2c <find_volume+0x214>
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad20:	3338      	adds	r3, #56	; 0x38
 800ad22:	3324      	adds	r3, #36	; 0x24
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe f891 	bl	8008e4c <ld_dword>
 800ad2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad30:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ad32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad34:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	789b      	ldrb	r3, [r3, #2]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d005      	beq.n	800ad50 <find_volume+0x238>
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	789b      	ldrb	r3, [r3, #2]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d001      	beq.n	800ad50 <find_volume+0x238>
 800ad4c:	230d      	movs	r3, #13
 800ad4e:	e15c      	b.n	800b00a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ad50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad52:	789b      	ldrb	r3, [r3, #2]
 800ad54:	461a      	mov	r2, r3
 800ad56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad58:	fb02 f303 	mul.w	r3, r2, r3
 800ad5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	895b      	ldrh	r3, [r3, #10]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d008      	beq.n	800ad84 <find_volume+0x26c>
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	895b      	ldrh	r3, [r3, #10]
 800ad76:	461a      	mov	r2, r3
 800ad78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7a:	895b      	ldrh	r3, [r3, #10]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	4013      	ands	r3, r2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <find_volume+0x270>
 800ad84:	230d      	movs	r3, #13
 800ad86:	e140      	b.n	800b00a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ad88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8a:	3338      	adds	r3, #56	; 0x38
 800ad8c:	3311      	adds	r3, #17
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe f844 	bl	8008e1c <ld_word>
 800ad94:	4603      	mov	r3, r0
 800ad96:	461a      	mov	r2, r3
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	891b      	ldrh	r3, [r3, #8]
 800ada0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ada2:	8992      	ldrh	r2, [r2, #12]
 800ada4:	0952      	lsrs	r2, r2, #5
 800ada6:	b292      	uxth	r2, r2
 800ada8:	fbb3 f1f2 	udiv	r1, r3, r2
 800adac:	fb01 f202 	mul.w	r2, r1, r2
 800adb0:	1a9b      	subs	r3, r3, r2
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <find_volume+0x2a8>
 800adb8:	230d      	movs	r3, #13
 800adba:	e126      	b.n	800b00a <find_volume+0x4f2>
 800adbc:	200024f4 	.word	0x200024f4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	3338      	adds	r3, #56	; 0x38
 800adc4:	3313      	adds	r3, #19
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe f828 	bl	8008e1c <ld_word>
 800adcc:	4603      	mov	r3, r0
 800adce:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800add0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <find_volume+0x2cc>
 800add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add8:	3338      	adds	r3, #56	; 0x38
 800adda:	3320      	adds	r3, #32
 800addc:	4618      	mov	r0, r3
 800adde:	f7fe f835 	bl	8008e4c <ld_dword>
 800ade2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	3338      	adds	r3, #56	; 0x38
 800ade8:	330e      	adds	r3, #14
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe f816 	bl	8008e1c <ld_word>
 800adf0:	4603      	mov	r3, r0
 800adf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800adf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <find_volume+0x2e6>
 800adfa:	230d      	movs	r3, #13
 800adfc:	e105      	b.n	800b00a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800adfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae02:	4413      	add	r3, r2
 800ae04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae06:	8911      	ldrh	r1, [r2, #8]
 800ae08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae0a:	8992      	ldrh	r2, [r2, #12]
 800ae0c:	0952      	lsrs	r2, r2, #5
 800ae0e:	b292      	uxth	r2, r2
 800ae10:	fbb1 f2f2 	udiv	r2, r1, r2
 800ae14:	b292      	uxth	r2, r2
 800ae16:	4413      	add	r3, r2
 800ae18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ae1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d201      	bcs.n	800ae26 <find_volume+0x30e>
 800ae22:	230d      	movs	r3, #13
 800ae24:	e0f1      	b.n	800b00a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ae26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae2e:	8952      	ldrh	r2, [r2, #10]
 800ae30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae34:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d101      	bne.n	800ae40 <find_volume+0x328>
 800ae3c:	230d      	movs	r3, #13
 800ae3e:	e0e4      	b.n	800b00a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ae40:	2303      	movs	r3, #3
 800ae42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d802      	bhi.n	800ae56 <find_volume+0x33e>
 800ae50:	2302      	movs	r3, #2
 800ae52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d802      	bhi.n	800ae66 <find_volume+0x34e>
 800ae60:	2301      	movs	r3, #1
 800ae62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	1c9a      	adds	r2, r3, #2
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae72:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ae74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae78:	441a      	add	r2, r3
 800ae7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ae7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	441a      	add	r2, r3
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ae88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae8c:	2b03      	cmp	r3, #3
 800ae8e:	d11e      	bne.n	800aece <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ae90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae92:	3338      	adds	r3, #56	; 0x38
 800ae94:	332a      	adds	r3, #42	; 0x2a
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fd ffc0 	bl	8008e1c <ld_word>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <find_volume+0x38e>
 800aea2:	230d      	movs	r3, #13
 800aea4:	e0b1      	b.n	800b00a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	891b      	ldrh	r3, [r3, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <find_volume+0x39a>
 800aeae:	230d      	movs	r3, #13
 800aeb0:	e0ab      	b.n	800b00a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	3338      	adds	r3, #56	; 0x38
 800aeb6:	332c      	adds	r3, #44	; 0x2c
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fd ffc7 	bl	8008e4c <ld_dword>
 800aebe:	4602      	mov	r2, r0
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	647b      	str	r3, [r7, #68]	; 0x44
 800aecc:	e01f      	b.n	800af0e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	891b      	ldrh	r3, [r3, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <find_volume+0x3c2>
 800aed6:	230d      	movs	r3, #13
 800aed8:	e097      	b.n	800b00a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee0:	441a      	add	r2, r3
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d103      	bne.n	800aef6 <find_volume+0x3de>
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	e00a      	b.n	800af0c <find_volume+0x3f4>
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	69da      	ldr	r2, [r3, #28]
 800aefa:	4613      	mov	r3, r2
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	4413      	add	r3, r2
 800af00:	085a      	lsrs	r2, r3, #1
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800af0c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	6a1a      	ldr	r2, [r3, #32]
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	899b      	ldrh	r3, [r3, #12]
 800af16:	4619      	mov	r1, r3
 800af18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af1a:	440b      	add	r3, r1
 800af1c:	3b01      	subs	r3, #1
 800af1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800af20:	8989      	ldrh	r1, [r1, #12]
 800af22:	fbb3 f3f1 	udiv	r3, r3, r1
 800af26:	429a      	cmp	r2, r3
 800af28:	d201      	bcs.n	800af2e <find_volume+0x416>
 800af2a:	230d      	movs	r3, #13
 800af2c:	e06d      	b.n	800b00a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	f04f 32ff 	mov.w	r2, #4294967295
 800af34:	619a      	str	r2, [r3, #24]
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	699a      	ldr	r2, [r3, #24]
 800af3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	2280      	movs	r2, #128	; 0x80
 800af42:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800af44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d149      	bne.n	800afe0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	3338      	adds	r3, #56	; 0x38
 800af50:	3330      	adds	r3, #48	; 0x30
 800af52:	4618      	mov	r0, r3
 800af54:	f7fd ff62 	bl	8008e1c <ld_word>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d140      	bne.n	800afe0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800af5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af60:	3301      	adds	r3, #1
 800af62:	4619      	mov	r1, r3
 800af64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af66:	f7fe fa09 	bl	800937c <move_window>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d137      	bne.n	800afe0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	2200      	movs	r2, #0
 800af74:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	3338      	adds	r3, #56	; 0x38
 800af7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fd ff4c 	bl	8008e1c <ld_word>
 800af84:	4603      	mov	r3, r0
 800af86:	461a      	mov	r2, r3
 800af88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d127      	bne.n	800afe0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	3338      	adds	r3, #56	; 0x38
 800af94:	4618      	mov	r0, r3
 800af96:	f7fd ff59 	bl	8008e4c <ld_dword>
 800af9a:	4603      	mov	r3, r0
 800af9c:	4a1d      	ldr	r2, [pc, #116]	; (800b014 <find_volume+0x4fc>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d11e      	bne.n	800afe0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800afa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa4:	3338      	adds	r3, #56	; 0x38
 800afa6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd ff4e 	bl	8008e4c <ld_dword>
 800afb0:	4603      	mov	r3, r0
 800afb2:	4a19      	ldr	r2, [pc, #100]	; (800b018 <find_volume+0x500>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d113      	bne.n	800afe0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800afb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afba:	3338      	adds	r3, #56	; 0x38
 800afbc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fd ff43 	bl	8008e4c <ld_dword>
 800afc6:	4602      	mov	r2, r0
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	3338      	adds	r3, #56	; 0x38
 800afd0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fd ff39 	bl	8008e4c <ld_dword>
 800afda:	4602      	mov	r2, r0
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800afe6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800afe8:	4b0c      	ldr	r3, [pc, #48]	; (800b01c <find_volume+0x504>)
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	3301      	adds	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <find_volume+0x504>)
 800aff2:	801a      	strh	r2, [r3, #0]
 800aff4:	4b09      	ldr	r3, [pc, #36]	; (800b01c <find_volume+0x504>)
 800aff6:	881a      	ldrh	r2, [r3, #0]
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	4a08      	ldr	r2, [pc, #32]	; (800b020 <find_volume+0x508>)
 800b000:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b002:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b004:	f7fe f952 	bl	80092ac <clear_lock>
#endif
	return FR_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3758      	adds	r7, #88	; 0x58
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	41615252 	.word	0x41615252
 800b018:	61417272 	.word	0x61417272
 800b01c:	200024f8 	.word	0x200024f8
 800b020:	2000251c 	.word	0x2000251c

0800b024 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b02e:	2309      	movs	r3, #9
 800b030:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d01c      	beq.n	800b072 <validate+0x4e>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d018      	beq.n	800b072 <validate+0x4e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d013      	beq.n	800b072 <validate+0x4e>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	889a      	ldrh	r2, [r3, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	88db      	ldrh	r3, [r3, #6]
 800b054:	429a      	cmp	r2, r3
 800b056:	d10c      	bne.n	800b072 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	4618      	mov	r0, r3
 800b060:	f7fd fe3c 	bl	8008cdc <disk_status>
 800b064:	4603      	mov	r3, r0
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <validate+0x4e>
			res = FR_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <validate+0x5a>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	e000      	b.n	800b080 <validate+0x5c>
 800b07e:	2300      	movs	r3, #0
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	6013      	str	r3, [r2, #0]
	return res;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b0a2:	f107 0310 	add.w	r3, r7, #16
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff fc9c 	bl	800a9e4 <get_ldnumber>
 800b0ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	da01      	bge.n	800b0b8 <f_mount+0x28>
 800b0b4:	230b      	movs	r3, #11
 800b0b6:	e02b      	b.n	800b110 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b0b8:	4a17      	ldr	r2, [pc, #92]	; (800b118 <f_mount+0x88>)
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d005      	beq.n	800b0d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b0c8:	69b8      	ldr	r0, [r7, #24]
 800b0ca:	f7fe f8ef 	bl	80092ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	490d      	ldr	r1, [pc, #52]	; (800b118 <f_mount+0x88>)
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <f_mount+0x66>
 800b0f0:	79fb      	ldrb	r3, [r7, #7]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d001      	beq.n	800b0fa <f_mount+0x6a>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e00a      	b.n	800b110 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b0fa:	f107 010c 	add.w	r1, r7, #12
 800b0fe:	f107 0308 	add.w	r3, r7, #8
 800b102:	2200      	movs	r2, #0
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff fd07 	bl	800ab18 <find_volume>
 800b10a:	4603      	mov	r3, r0
 800b10c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3720      	adds	r7, #32
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	200024f4 	.word	0x200024f4

0800b11c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b09a      	sub	sp, #104	; 0x68
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	4613      	mov	r3, r2
 800b128:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <f_open+0x18>
 800b130:	2309      	movs	r3, #9
 800b132:	e1bb      	b.n	800b4ac <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b13a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b13c:	79fa      	ldrb	r2, [r7, #7]
 800b13e:	f107 0114 	add.w	r1, r7, #20
 800b142:	f107 0308 	add.w	r3, r7, #8
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff fce6 	bl	800ab18 <find_volume>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b156:	2b00      	cmp	r3, #0
 800b158:	f040 819f 	bne.w	800b49a <f_open+0x37e>
		dj.obj.fs = fs;
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	f107 0318 	add.w	r3, r7, #24
 800b166:	4611      	mov	r1, r2
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fbc5 	bl	800a8f8 <follow_path>
 800b16e:	4603      	mov	r3, r0
 800b170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b174:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d11a      	bne.n	800b1b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b17c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b180:	b25b      	sxtb	r3, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	da03      	bge.n	800b18e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b186:	2306      	movs	r3, #6
 800b188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b18c:	e011      	b.n	800b1b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	f023 0301 	bic.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	bf14      	ite	ne
 800b198:	2301      	movne	r3, #1
 800b19a:	2300      	moveq	r3, #0
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f107 0318 	add.w	r3, r7, #24
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fd ff38 	bl	800901c <chk_lock>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	f003 031c 	and.w	r3, r3, #28
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d07f      	beq.n	800b2bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b1bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d017      	beq.n	800b1f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b1c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1c8:	2b04      	cmp	r3, #4
 800b1ca:	d10e      	bne.n	800b1ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b1cc:	f7fd ff82 	bl	80090d4 <enq_lock>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d006      	beq.n	800b1e4 <f_open+0xc8>
 800b1d6:	f107 0318 	add.w	r3, r7, #24
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff f8dc 	bl	800a398 <dir_register>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	e000      	b.n	800b1e6 <f_open+0xca>
 800b1e4:	2312      	movs	r3, #18
 800b1e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	f043 0308 	orr.w	r3, r3, #8
 800b1f0:	71fb      	strb	r3, [r7, #7]
 800b1f2:	e010      	b.n	800b216 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b1f4:	7fbb      	ldrb	r3, [r7, #30]
 800b1f6:	f003 0311 	and.w	r3, r3, #17
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <f_open+0xea>
					res = FR_DENIED;
 800b1fe:	2307      	movs	r3, #7
 800b200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b204:	e007      	b.n	800b216 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <f_open+0xfa>
 800b210:	2308      	movs	r3, #8
 800b212:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b216:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d168      	bne.n	800b2f0 <f_open+0x1d4>
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	f003 0308 	and.w	r3, r3, #8
 800b224:	2b00      	cmp	r3, #0
 800b226:	d063      	beq.n	800b2f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b228:	f7fd fb16 	bl	8008858 <get_fattime>
 800b22c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	330e      	adds	r3, #14
 800b232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fe47 	bl	8008ec8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	3316      	adds	r3, #22
 800b23e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b240:	4618      	mov	r0, r3
 800b242:	f7fd fe41 	bl	8008ec8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b248:	330b      	adds	r3, #11
 800b24a:	2220      	movs	r2, #32
 800b24c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe fe17 	bl	8009e88 <ld_clust>
 800b25a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b260:	2200      	movs	r2, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fe2f 	bl	8009ec6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	331c      	adds	r3, #28
 800b26c:	2100      	movs	r1, #0
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fd fe2a 	bl	8008ec8 <st_dword>
					fs->wflag = 1;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2201      	movs	r2, #1
 800b278:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b27a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d037      	beq.n	800b2f0 <f_open+0x1d4>
						dw = fs->winsect;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b284:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b286:	f107 0318 	add.w	r3, r7, #24
 800b28a:	2200      	movs	r2, #0
 800b28c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fb1f 	bl	80098d2 <remove_chain>
 800b294:	4603      	mov	r3, r0
 800b296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b29a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d126      	bne.n	800b2f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe f868 	bl	800937c <move_window>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2b6:	3a01      	subs	r2, #1
 800b2b8:	615a      	str	r2, [r3, #20]
 800b2ba:	e019      	b.n	800b2f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b2bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d115      	bne.n	800b2f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b2c4:	7fbb      	ldrb	r3, [r7, #30]
 800b2c6:	f003 0310 	and.w	r3, r3, #16
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b2ce:	2304      	movs	r3, #4
 800b2d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b2d4:	e00c      	b.n	800b2f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d007      	beq.n	800b2f0 <f_open+0x1d4>
 800b2e0:	7fbb      	ldrb	r3, [r7, #30]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <f_open+0x1d4>
						res = FR_DENIED;
 800b2ea:	2307      	movs	r3, #7
 800b2ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b2f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d128      	bne.n	800b34a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b308:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	f023 0301 	bic.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	bf14      	ite	ne
 800b322:	2301      	movne	r3, #1
 800b324:	2300      	moveq	r3, #0
 800b326:	b2db      	uxtb	r3, r3
 800b328:	461a      	mov	r2, r3
 800b32a:	f107 0318 	add.w	r3, r7, #24
 800b32e:	4611      	mov	r1, r2
 800b330:	4618      	mov	r0, r3
 800b332:	f7fd fef1 	bl	8009118 <inc_lock>
 800b336:	4602      	mov	r2, r0
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d102      	bne.n	800b34a <f_open+0x22e>
 800b344:	2302      	movs	r3, #2
 800b346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b34a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 80a3 	bne.w	800b49a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fd94 	bl	8009e88 <ld_clust>
 800b360:	4602      	mov	r2, r0
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	331c      	adds	r3, #28
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fd fd6e 	bl	8008e4c <ld_dword>
 800b370:	4602      	mov	r2, r0
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	88da      	ldrh	r2, [r3, #6]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	79fa      	ldrb	r2, [r7, #7]
 800b38e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3330      	adds	r3, #48	; 0x30
 800b3a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fd fdd8 	bl	8008f62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	f003 0320 	and.w	r3, r3, #32
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d06e      	beq.n	800b49a <f_open+0x37e>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d06a      	beq.n	800b49a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	68da      	ldr	r2, [r3, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	895b      	ldrh	r3, [r3, #10]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	899b      	ldrh	r3, [r3, #12]
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
 800b3da:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3e8:	e016      	b.n	800b418 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fe f881 	bl	80094f6 <get_fat>
 800b3f4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b3f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d802      	bhi.n	800b402 <f_open+0x2e6>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b408:	d102      	bne.n	800b410 <f_open+0x2f4>
 800b40a:	2301      	movs	r3, #1
 800b40c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b410:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <f_open+0x30c>
 800b420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b424:	429a      	cmp	r2, r3
 800b426:	d8e0      	bhi.n	800b3ea <f_open+0x2ce>
				}
				fp->clust = clst;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b42c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b42e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b432:	2b00      	cmp	r3, #0
 800b434:	d131      	bne.n	800b49a <f_open+0x37e>
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	899b      	ldrh	r3, [r3, #12]
 800b43a:	461a      	mov	r2, r3
 800b43c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b43e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b442:	fb01 f202 	mul.w	r2, r1, r2
 800b446:	1a9b      	subs	r3, r3, r2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d026      	beq.n	800b49a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe f831 	bl	80094b8 <clust2sect>
 800b456:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <f_open+0x34a>
						res = FR_INT_ERR;
 800b45e:	2302      	movs	r3, #2
 800b460:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b464:	e019      	b.n	800b49a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	899b      	ldrh	r3, [r3, #12]
 800b46a:	461a      	mov	r2, r3
 800b46c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b46e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	7858      	ldrb	r0, [r3, #1]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6a1a      	ldr	r2, [r3, #32]
 800b488:	2301      	movs	r3, #1
 800b48a:	f7fd fc69 	bl	8008d60 <disk_read>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <f_open+0x37e>
 800b494:	2301      	movs	r3, #1
 800b496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b49a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <f_open+0x38c>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b4a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3768      	adds	r7, #104	; 0x68
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08c      	sub	sp, #48	; 0x30
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f107 0210 	add.w	r2, r7, #16
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff fda5 	bl	800b024 <validate>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d107      	bne.n	800b4f8 <f_write+0x44>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	7d5b      	ldrb	r3, [r3, #21]
 800b4ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b4f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <f_write+0x4a>
 800b4f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4fc:	e16a      	b.n	800b7d4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	7d1b      	ldrb	r3, [r3, #20]
 800b502:	f003 0302 	and.w	r3, r3, #2
 800b506:	2b00      	cmp	r3, #0
 800b508:	d101      	bne.n	800b50e <f_write+0x5a>
 800b50a:	2307      	movs	r3, #7
 800b50c:	e162      	b.n	800b7d4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	699a      	ldr	r2, [r3, #24]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	441a      	add	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	f080 814c 	bcs.w	800b7b8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	43db      	mvns	r3, r3
 800b526:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b528:	e146      	b.n	800b7b8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	693a      	ldr	r2, [r7, #16]
 800b530:	8992      	ldrh	r2, [r2, #12]
 800b532:	fbb3 f1f2 	udiv	r1, r3, r2
 800b536:	fb01 f202 	mul.w	r2, r1, r2
 800b53a:	1a9b      	subs	r3, r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f040 80f1 	bne.w	800b724 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	8992      	ldrh	r2, [r2, #12]
 800b54a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	8952      	ldrh	r2, [r2, #10]
 800b552:	3a01      	subs	r2, #1
 800b554:	4013      	ands	r3, r2
 800b556:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d143      	bne.n	800b5e6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10c      	bne.n	800b580 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d11a      	bne.n	800b5a8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fa10 	bl	800999c <create_chain>
 800b57c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b57e:	e013      	b.n	800b5a8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d007      	beq.n	800b598 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	4619      	mov	r1, r3
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7fe fa9c 	bl	8009acc <clmt_clust>
 800b594:	62b8      	str	r0, [r7, #40]	; 0x28
 800b596:	e007      	b.n	800b5a8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	f7fe f9fb 	bl	800999c <create_chain>
 800b5a6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 8109 	beq.w	800b7c2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d104      	bne.n	800b5c0 <f_write+0x10c>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	755a      	strb	r2, [r3, #21]
 800b5bc:	2302      	movs	r3, #2
 800b5be:	e109      	b.n	800b7d4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c6:	d104      	bne.n	800b5d2 <f_write+0x11e>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	755a      	strb	r2, [r3, #21]
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e100      	b.n	800b7d4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5d6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d102      	bne.n	800b5e6 <f_write+0x132>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ea:	b25b      	sxtb	r3, r3
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	da18      	bge.n	800b622 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	7858      	ldrb	r0, [r3, #1]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6a1a      	ldr	r2, [r3, #32]
 800b5fe:	2301      	movs	r3, #1
 800b600:	f7fd fbce 	bl	8008da0 <disk_write>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d004      	beq.n	800b614 <f_write+0x160>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	755a      	strb	r2, [r3, #21]
 800b610:	2301      	movs	r3, #1
 800b612:	e0df      	b.n	800b7d4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	7d1b      	ldrb	r3, [r3, #20]
 800b618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	69db      	ldr	r3, [r3, #28]
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fd ff44 	bl	80094b8 <clust2sect>
 800b630:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d104      	bne.n	800b642 <f_write+0x18e>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2202      	movs	r2, #2
 800b63c:	755a      	strb	r2, [r3, #21]
 800b63e:	2302      	movs	r3, #2
 800b640:	e0c8      	b.n	800b7d4 <f_write+0x320>
			sect += csect;
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	4413      	add	r3, r2
 800b648:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	899b      	ldrh	r3, [r3, #12]
 800b64e:	461a      	mov	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	fbb3 f3f2 	udiv	r3, r3, r2
 800b656:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d043      	beq.n	800b6e6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	4413      	add	r3, r2
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	8952      	ldrh	r2, [r2, #10]
 800b668:	4293      	cmp	r3, r2
 800b66a:	d905      	bls.n	800b678 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	895b      	ldrh	r3, [r3, #10]
 800b670:	461a      	mov	r2, r3
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	7858      	ldrb	r0, [r3, #1]
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	69f9      	ldr	r1, [r7, #28]
 800b682:	f7fd fb8d 	bl	8008da0 <disk_write>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <f_write+0x1e2>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2201      	movs	r2, #1
 800b690:	755a      	strb	r2, [r3, #21]
 800b692:	2301      	movs	r3, #1
 800b694:	e09e      	b.n	800b7d4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a1a      	ldr	r2, [r3, #32]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	6a3a      	ldr	r2, [r7, #32]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d918      	bls.n	800b6d6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a1a      	ldr	r2, [r3, #32]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	693a      	ldr	r2, [r7, #16]
 800b6b4:	8992      	ldrh	r2, [r2, #12]
 800b6b6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	18d1      	adds	r1, r2, r3
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	899b      	ldrh	r3, [r3, #12]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f7fd fc2c 	bl	8008f20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	7d1b      	ldrb	r3, [r3, #20]
 800b6cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	899b      	ldrh	r3, [r3, #12]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	fb02 f303 	mul.w	r3, r2, r3
 800b6e2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b6e4:	e04b      	b.n	800b77e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d016      	beq.n	800b71e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	699a      	ldr	r2, [r3, #24]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d210      	bcs.n	800b71e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	7858      	ldrb	r0, [r3, #1]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b706:	2301      	movs	r3, #1
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	f7fd fb29 	bl	8008d60 <disk_read>
 800b70e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2201      	movs	r2, #1
 800b718:	755a      	strb	r2, [r3, #21]
 800b71a:	2301      	movs	r3, #1
 800b71c:	e05a      	b.n	800b7d4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	899b      	ldrh	r3, [r3, #12]
 800b728:	4618      	mov	r0, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	8992      	ldrh	r2, [r2, #12]
 800b732:	fbb3 f1f2 	udiv	r1, r3, r2
 800b736:	fb01 f202 	mul.w	r2, r1, r2
 800b73a:	1a9b      	subs	r3, r3, r2
 800b73c:	1ac3      	subs	r3, r0, r3
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d901      	bls.n	800b74c <f_write+0x298>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	8992      	ldrh	r2, [r2, #12]
 800b75a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b75e:	fb00 f202 	mul.w	r2, r0, r2
 800b762:	1a9b      	subs	r3, r3, r2
 800b764:	440b      	add	r3, r1
 800b766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b768:	69f9      	ldr	r1, [r7, #28]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fd fbd8 	bl	8008f20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	7d1b      	ldrb	r3, [r3, #20]
 800b774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b77e:	69fa      	ldr	r2, [r7, #28]
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	4413      	add	r3, r2
 800b784:	61fb      	str	r3, [r7, #28]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	699a      	ldr	r2, [r3, #24]
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	441a      	add	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	619a      	str	r2, [r3, #24]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	bf38      	it	cc
 800b79e:	461a      	movcc	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	60da      	str	r2, [r3, #12]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	441a      	add	r2, r3
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f47f aeb5 	bne.w	800b52a <f_write+0x76>
 800b7c0:	e000      	b.n	800b7c4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b7c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	7d1b      	ldrb	r3, [r3, #20]
 800b7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3730      	adds	r7, #48	; 0x30
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f107 0208 	add.w	r2, r7, #8
 800b7ea:	4611      	mov	r1, r2
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff fc19 	bl	800b024 <validate>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d168      	bne.n	800b8ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	7d1b      	ldrb	r3, [r3, #20]
 800b800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	d062      	beq.n	800b8ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	7d1b      	ldrb	r3, [r3, #20]
 800b80c:	b25b      	sxtb	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	da15      	bge.n	800b83e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	7858      	ldrb	r0, [r3, #1]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1a      	ldr	r2, [r3, #32]
 800b820:	2301      	movs	r3, #1
 800b822:	f7fd fabd 	bl	8008da0 <disk_write>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <f_sync+0x54>
 800b82c:	2301      	movs	r3, #1
 800b82e:	e04f      	b.n	800b8d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	7d1b      	ldrb	r3, [r3, #20]
 800b834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b83e:	f7fd f80b 	bl	8008858 <get_fattime>
 800b842:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f7fd fd95 	bl	800937c <move_window>
 800b852:	4603      	mov	r3, r0
 800b854:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d138      	bne.n	800b8ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b860:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	330b      	adds	r3, #11
 800b866:	781a      	ldrb	r2, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	330b      	adds	r3, #11
 800b86c:	f042 0220 	orr.w	r2, r2, #32
 800b870:	b2d2      	uxtb	r2, r2
 800b872:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6818      	ldr	r0, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	461a      	mov	r2, r3
 800b87e:	68f9      	ldr	r1, [r7, #12]
 800b880:	f7fe fb21 	bl	8009ec6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f103 021c 	add.w	r2, r3, #28
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7fd fb19 	bl	8008ec8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3316      	adds	r3, #22
 800b89a:	6939      	ldr	r1, [r7, #16]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fd fb13 	bl	8008ec8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3312      	adds	r3, #18
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fd faf2 	bl	8008e92 <st_word>
					fs->wflag = 1;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd fd8e 	bl	80093d8 <sync_fs>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7d1b      	ldrb	r3, [r3, #20]
 800b8c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b8ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff ff7b 	bl	800b7dc <f_sync>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d118      	bne.n	800b922 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f107 0208 	add.w	r2, r7, #8
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7ff fb93 	bl	800b024 <validate>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10c      	bne.n	800b922 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fd fc91 	bl	8009234 <dec_lock>
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b922:	7bfb      	ldrb	r3, [r7, #15]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b092      	sub	sp, #72	; 0x48
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b938:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b93c:	f107 030c 	add.w	r3, r7, #12
 800b940:	2200      	movs	r2, #0
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff f8e8 	bl	800ab18 <find_volume>
 800b948:	4603      	mov	r3, r0
 800b94a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b94e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b952:	2b00      	cmp	r3, #0
 800b954:	f040 8099 	bne.w	800ba8a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	699a      	ldr	r2, [r3, #24]
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	3b02      	subs	r3, #2
 800b968:	429a      	cmp	r2, r3
 800b96a:	d804      	bhi.n	800b976 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	699a      	ldr	r2, [r3, #24]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e089      	b.n	800ba8a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d128      	bne.n	800b9d4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b982:	2302      	movs	r3, #2
 800b984:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b98a:	f107 0314 	add.w	r3, r7, #20
 800b98e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b990:	4618      	mov	r0, r3
 800b992:	f7fd fdb0 	bl	80094f6 <get_fat>
 800b996:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99e:	d103      	bne.n	800b9a8 <f_getfree+0x7c>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b9a6:	e063      	b.n	800ba70 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d103      	bne.n	800b9b6 <f_getfree+0x8a>
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b9b4:	e05c      	b.n	800ba70 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <f_getfree+0x96>
 800b9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9be:	3301      	adds	r3, #1
 800b9c0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d3db      	bcc.n	800b98a <f_getfree+0x5e>
 800b9d2:	e04d      	b.n	800ba70 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	69db      	ldr	r3, [r3, #28]
 800b9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9de:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d113      	bne.n	800ba16 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	63ba      	str	r2, [r7, #56]	; 0x38
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f7fd fcc0 	bl	800937c <move_window>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800ba02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d131      	bne.n	800ba6e <f_getfree+0x142>
							p = fs->win;
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	3338      	adds	r3, #56	; 0x38
 800ba0e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	899b      	ldrh	r3, [r3, #12]
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d10f      	bne.n	800ba3e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ba1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba20:	f7fd f9fc 	bl	8008e1c <ld_word>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d102      	bne.n	800ba30 <f_getfree+0x104>
 800ba2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	3302      	adds	r3, #2
 800ba34:	633b      	str	r3, [r7, #48]	; 0x30
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba38:	3b02      	subs	r3, #2
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3c:	e010      	b.n	800ba60 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ba3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba40:	f7fd fa04 	bl	8008e4c <ld_dword>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d102      	bne.n	800ba54 <f_getfree+0x128>
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba50:	3301      	adds	r3, #1
 800ba52:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	3304      	adds	r3, #4
 800ba58:	633b      	str	r3, [r7, #48]	; 0x30
 800ba5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5c:	3b04      	subs	r3, #4
 800ba5e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ba60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba62:	3b01      	subs	r3, #1
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1bd      	bne.n	800b9e8 <f_getfree+0xbc>
 800ba6c:	e000      	b.n	800ba70 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ba6e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba74:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba7a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	791a      	ldrb	r2, [r3, #4]
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	b2d2      	uxtb	r2, r2
 800ba88:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ba8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3748      	adds	r7, #72	; 0x48
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800baa2:	78fb      	ldrb	r3, [r7, #3]
 800baa4:	2b0a      	cmp	r3, #10
 800baa6:	d103      	bne.n	800bab0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800baa8:	210d      	movs	r1, #13
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff fff3 	bl	800ba96 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	db25      	blt.n	800bb08 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	1c5a      	adds	r2, r3, #1
 800bac0:	60fa      	str	r2, [r7, #12]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4413      	add	r3, r2
 800bac6:	78fa      	ldrb	r2, [r7, #3]
 800bac8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2b3c      	cmp	r3, #60	; 0x3c
 800bace:	dd12      	ble.n	800baf6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f103 010c 	add.w	r1, r3, #12
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	f107 0308 	add.w	r3, r7, #8
 800bae0:	f7ff fce8 	bl	800b4b4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d101      	bne.n	800baf0 <putc_bfd+0x5a>
 800baec:	2300      	movs	r3, #0
 800baee:	e001      	b.n	800baf4 <putc_bfd+0x5e>
 800baf0:	f04f 33ff 	mov.w	r3, #4294967295
 800baf4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	609a      	str	r2, [r3, #8]
 800bb06:	e000      	b.n	800bb0a <putc_bfd+0x74>
	if (i < 0) return;
 800bb08:	bf00      	nop
}
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	db16      	blt.n	800bb4e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6818      	ldr	r0, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f103 010c 	add.w	r1, r3, #12
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f107 030c 	add.w	r3, r7, #12
 800bb34:	f7ff fcbe 	bl	800b4b4 <f_write>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d107      	bne.n	800bb4e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d102      	bne.n	800bb4e <putc_flush+0x3e>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	e001      	b.n	800bb52 <putc_flush+0x42>
	return EOF;
 800bb4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	605a      	str	r2, [r3, #4]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	609a      	str	r2, [r3, #8]
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b096      	sub	sp, #88	; 0x58
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800bb8e:	f107 030c 	add.w	r3, r7, #12
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7ff ffe0 	bl	800bb5a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800bb9a:	e009      	b.n	800bbb0 <f_puts+0x2c>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	607a      	str	r2, [r7, #4]
 800bba2:	781a      	ldrb	r2, [r3, #0]
 800bba4:	f107 030c 	add.w	r3, r7, #12
 800bba8:	4611      	mov	r1, r2
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff ff73 	bl	800ba96 <putc_bfd>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1f1      	bne.n	800bb9c <f_puts+0x18>
	return putc_flush(&pb);
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7ff ffa7 	bl	800bb10 <putc_flush>
 800bbc2:	4603      	mov	r3, r0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3758      	adds	r7, #88	; 0x58
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bbe4:	7a5b      	ldrb	r3, [r3, #9]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d131      	bne.n	800bc50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbec:	4b1c      	ldr	r3, [pc, #112]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bbee:	7a5b      	ldrb	r3, [r3, #9]
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	4b1a      	ldr	r3, [pc, #104]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bbfa:	4b19      	ldr	r3, [pc, #100]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bbfc:	7a5b      	ldrb	r3, [r3, #9]
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	4a17      	ldr	r2, [pc, #92]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bc0a:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bc0c:	7a5b      	ldrb	r3, [r3, #9]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	461a      	mov	r2, r3
 800bc12:	4b13      	ldr	r3, [pc, #76]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bc14:	4413      	add	r3, r2
 800bc16:	79fa      	ldrb	r2, [r7, #7]
 800bc18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bc1a:	4b11      	ldr	r3, [pc, #68]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bc1c:	7a5b      	ldrb	r3, [r3, #9]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	b2d1      	uxtb	r1, r2
 800bc24:	4a0e      	ldr	r2, [pc, #56]	; (800bc60 <FATFS_LinkDriverEx+0x94>)
 800bc26:	7251      	strb	r1, [r2, #9]
 800bc28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc2a:	7dbb      	ldrb	r3, [r7, #22]
 800bc2c:	3330      	adds	r3, #48	; 0x30
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	3301      	adds	r3, #1
 800bc38:	223a      	movs	r2, #58	; 0x3a
 800bc3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	3302      	adds	r3, #2
 800bc40:	222f      	movs	r2, #47	; 0x2f
 800bc42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	3303      	adds	r3, #3
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	2000271c 	.word	0x2000271c

0800bc64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc6e:	2200      	movs	r2, #0
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff ffaa 	bl	800bbcc <FATFS_LinkDriverEx>
 800bc78:	4603      	mov	r3, r0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bc90:	88fb      	ldrh	r3, [r7, #6]
 800bc92:	2b7f      	cmp	r3, #127	; 0x7f
 800bc94:	d802      	bhi.n	800bc9c <ff_convert+0x18>
		c = chr;
 800bc96:	88fb      	ldrh	r3, [r7, #6]
 800bc98:	81fb      	strh	r3, [r7, #14]
 800bc9a:	e025      	b.n	800bce8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	2bff      	cmp	r3, #255	; 0xff
 800bca6:	d805      	bhi.n	800bcb4 <ff_convert+0x30>
 800bca8:	88fb      	ldrh	r3, [r7, #6]
 800bcaa:	3b80      	subs	r3, #128	; 0x80
 800bcac:	4a12      	ldr	r2, [pc, #72]	; (800bcf8 <ff_convert+0x74>)
 800bcae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb2:	e000      	b.n	800bcb6 <ff_convert+0x32>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	81fb      	strh	r3, [r7, #14]
 800bcb8:	e016      	b.n	800bce8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bcba:	2300      	movs	r3, #0
 800bcbc:	81fb      	strh	r3, [r7, #14]
 800bcbe:	e009      	b.n	800bcd4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bcc0:	89fb      	ldrh	r3, [r7, #14]
 800bcc2:	4a0d      	ldr	r2, [pc, #52]	; (800bcf8 <ff_convert+0x74>)
 800bcc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcc8:	88fa      	ldrh	r2, [r7, #6]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d006      	beq.n	800bcdc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bcce:	89fb      	ldrh	r3, [r7, #14]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	81fb      	strh	r3, [r7, #14]
 800bcd4:	89fb      	ldrh	r3, [r7, #14]
 800bcd6:	2b7f      	cmp	r3, #127	; 0x7f
 800bcd8:	d9f2      	bls.n	800bcc0 <ff_convert+0x3c>
 800bcda:	e000      	b.n	800bcde <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bcdc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bcde:	89fb      	ldrh	r3, [r7, #14]
 800bce0:	3380      	adds	r3, #128	; 0x80
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bce8:	89fb      	ldrh	r3, [r7, #14]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	0800f230 	.word	0x0800f230

0800bcfc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bd06:	88fb      	ldrh	r3, [r7, #6]
 800bd08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd0c:	d201      	bcs.n	800bd12 <ff_wtoupper+0x16>
 800bd0e:	4b3e      	ldr	r3, [pc, #248]	; (800be08 <ff_wtoupper+0x10c>)
 800bd10:	e000      	b.n	800bd14 <ff_wtoupper+0x18>
 800bd12:	4b3e      	ldr	r3, [pc, #248]	; (800be0c <ff_wtoupper+0x110>)
 800bd14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	1c9a      	adds	r2, r3, #2
 800bd1a:	617a      	str	r2, [r7, #20]
 800bd1c:	881b      	ldrh	r3, [r3, #0]
 800bd1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bd20:	8a7b      	ldrh	r3, [r7, #18]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d068      	beq.n	800bdf8 <ff_wtoupper+0xfc>
 800bd26:	88fa      	ldrh	r2, [r7, #6]
 800bd28:	8a7b      	ldrh	r3, [r7, #18]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d364      	bcc.n	800bdf8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	1c9a      	adds	r2, r3, #2
 800bd32:	617a      	str	r2, [r7, #20]
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	823b      	strh	r3, [r7, #16]
 800bd38:	8a3b      	ldrh	r3, [r7, #16]
 800bd3a:	0a1b      	lsrs	r3, r3, #8
 800bd3c:	81fb      	strh	r3, [r7, #14]
 800bd3e:	8a3b      	ldrh	r3, [r7, #16]
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bd44:	88fa      	ldrh	r2, [r7, #6]
 800bd46:	8a79      	ldrh	r1, [r7, #18]
 800bd48:	8a3b      	ldrh	r3, [r7, #16]
 800bd4a:	440b      	add	r3, r1
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	da49      	bge.n	800bde4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bd50:	89fb      	ldrh	r3, [r7, #14]
 800bd52:	2b08      	cmp	r3, #8
 800bd54:	d84f      	bhi.n	800bdf6 <ff_wtoupper+0xfa>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <ff_wtoupper+0x60>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bd93 	.word	0x0800bd93
 800bd64:	0800bda9 	.word	0x0800bda9
 800bd68:	0800bdb1 	.word	0x0800bdb1
 800bd6c:	0800bdb9 	.word	0x0800bdb9
 800bd70:	0800bdc1 	.word	0x0800bdc1
 800bd74:	0800bdc9 	.word	0x0800bdc9
 800bd78:	0800bdd1 	.word	0x0800bdd1
 800bd7c:	0800bdd9 	.word	0x0800bdd9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bd80:	88fa      	ldrh	r2, [r7, #6]
 800bd82:	8a7b      	ldrh	r3, [r7, #18]
 800bd84:	1ad3      	subs	r3, r2, r3
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	697a      	ldr	r2, [r7, #20]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	80fb      	strh	r3, [r7, #6]
 800bd90:	e027      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bd92:	88fa      	ldrh	r2, [r7, #6]
 800bd94:	8a7b      	ldrh	r3, [r7, #18]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	88fa      	ldrh	r2, [r7, #6]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	80fb      	strh	r3, [r7, #6]
 800bda6:	e01c      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bda8:	88fb      	ldrh	r3, [r7, #6]
 800bdaa:	3b10      	subs	r3, #16
 800bdac:	80fb      	strh	r3, [r7, #6]
 800bdae:	e018      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	3b20      	subs	r3, #32
 800bdb4:	80fb      	strh	r3, [r7, #6]
 800bdb6:	e014      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	3b30      	subs	r3, #48	; 0x30
 800bdbc:	80fb      	strh	r3, [r7, #6]
 800bdbe:	e010      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	3b1a      	subs	r3, #26
 800bdc4:	80fb      	strh	r3, [r7, #6]
 800bdc6:	e00c      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	3308      	adds	r3, #8
 800bdcc:	80fb      	strh	r3, [r7, #6]
 800bdce:	e008      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bdd0:	88fb      	ldrh	r3, [r7, #6]
 800bdd2:	3b50      	subs	r3, #80	; 0x50
 800bdd4:	80fb      	strh	r3, [r7, #6]
 800bdd6:	e004      	b.n	800bde2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bdd8:	88fb      	ldrh	r3, [r7, #6]
 800bdda:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bdde:	80fb      	strh	r3, [r7, #6]
 800bde0:	bf00      	nop
			}
			break;
 800bde2:	e008      	b.n	800bdf6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bde4:	89fb      	ldrh	r3, [r7, #14]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d195      	bne.n	800bd16 <ff_wtoupper+0x1a>
 800bdea:	8a3b      	ldrh	r3, [r7, #16]
 800bdec:	005b      	lsls	r3, r3, #1
 800bdee:	697a      	ldr	r2, [r7, #20]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bdf4:	e78f      	b.n	800bd16 <ff_wtoupper+0x1a>
			break;
 800bdf6:	bf00      	nop
	}

	return chr;
 800bdf8:	88fb      	ldrh	r3, [r7, #6]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	0800f330 	.word	0x0800f330
 800be0c:	0800f524 	.word	0x0800f524

0800be10 <atoi>:
 800be10:	220a      	movs	r2, #10
 800be12:	2100      	movs	r1, #0
 800be14:	f000 b882 	b.w	800bf1c <strtol>

0800be18 <_strtol_l.constprop.0>:
 800be18:	2b01      	cmp	r3, #1
 800be1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be1e:	d001      	beq.n	800be24 <_strtol_l.constprop.0+0xc>
 800be20:	2b24      	cmp	r3, #36	; 0x24
 800be22:	d906      	bls.n	800be32 <_strtol_l.constprop.0+0x1a>
 800be24:	f000 ff64 	bl	800ccf0 <__errno>
 800be28:	2316      	movs	r3, #22
 800be2a:	6003      	str	r3, [r0, #0]
 800be2c:	2000      	movs	r0, #0
 800be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf18 <_strtol_l.constprop.0+0x100>
 800be36:	460d      	mov	r5, r1
 800be38:	462e      	mov	r6, r5
 800be3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be3e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800be42:	f017 0708 	ands.w	r7, r7, #8
 800be46:	d1f7      	bne.n	800be38 <_strtol_l.constprop.0+0x20>
 800be48:	2c2d      	cmp	r4, #45	; 0x2d
 800be4a:	d132      	bne.n	800beb2 <_strtol_l.constprop.0+0x9a>
 800be4c:	782c      	ldrb	r4, [r5, #0]
 800be4e:	2701      	movs	r7, #1
 800be50:	1cb5      	adds	r5, r6, #2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d05b      	beq.n	800bf0e <_strtol_l.constprop.0+0xf6>
 800be56:	2b10      	cmp	r3, #16
 800be58:	d109      	bne.n	800be6e <_strtol_l.constprop.0+0x56>
 800be5a:	2c30      	cmp	r4, #48	; 0x30
 800be5c:	d107      	bne.n	800be6e <_strtol_l.constprop.0+0x56>
 800be5e:	782c      	ldrb	r4, [r5, #0]
 800be60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be64:	2c58      	cmp	r4, #88	; 0x58
 800be66:	d14d      	bne.n	800bf04 <_strtol_l.constprop.0+0xec>
 800be68:	786c      	ldrb	r4, [r5, #1]
 800be6a:	2310      	movs	r3, #16
 800be6c:	3502      	adds	r5, #2
 800be6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be72:	f108 38ff 	add.w	r8, r8, #4294967295
 800be76:	f04f 0e00 	mov.w	lr, #0
 800be7a:	fbb8 f9f3 	udiv	r9, r8, r3
 800be7e:	4676      	mov	r6, lr
 800be80:	fb03 8a19 	mls	sl, r3, r9, r8
 800be84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800be88:	f1bc 0f09 	cmp.w	ip, #9
 800be8c:	d816      	bhi.n	800bebc <_strtol_l.constprop.0+0xa4>
 800be8e:	4664      	mov	r4, ip
 800be90:	42a3      	cmp	r3, r4
 800be92:	dd24      	ble.n	800bede <_strtol_l.constprop.0+0xc6>
 800be94:	f1be 3fff 	cmp.w	lr, #4294967295
 800be98:	d008      	beq.n	800beac <_strtol_l.constprop.0+0x94>
 800be9a:	45b1      	cmp	r9, r6
 800be9c:	d31c      	bcc.n	800bed8 <_strtol_l.constprop.0+0xc0>
 800be9e:	d101      	bne.n	800bea4 <_strtol_l.constprop.0+0x8c>
 800bea0:	45a2      	cmp	sl, r4
 800bea2:	db19      	blt.n	800bed8 <_strtol_l.constprop.0+0xc0>
 800bea4:	fb06 4603 	mla	r6, r6, r3, r4
 800bea8:	f04f 0e01 	mov.w	lr, #1
 800beac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beb0:	e7e8      	b.n	800be84 <_strtol_l.constprop.0+0x6c>
 800beb2:	2c2b      	cmp	r4, #43	; 0x2b
 800beb4:	bf04      	itt	eq
 800beb6:	782c      	ldrbeq	r4, [r5, #0]
 800beb8:	1cb5      	addeq	r5, r6, #2
 800beba:	e7ca      	b.n	800be52 <_strtol_l.constprop.0+0x3a>
 800bebc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bec0:	f1bc 0f19 	cmp.w	ip, #25
 800bec4:	d801      	bhi.n	800beca <_strtol_l.constprop.0+0xb2>
 800bec6:	3c37      	subs	r4, #55	; 0x37
 800bec8:	e7e2      	b.n	800be90 <_strtol_l.constprop.0+0x78>
 800beca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bece:	f1bc 0f19 	cmp.w	ip, #25
 800bed2:	d804      	bhi.n	800bede <_strtol_l.constprop.0+0xc6>
 800bed4:	3c57      	subs	r4, #87	; 0x57
 800bed6:	e7db      	b.n	800be90 <_strtol_l.constprop.0+0x78>
 800bed8:	f04f 3eff 	mov.w	lr, #4294967295
 800bedc:	e7e6      	b.n	800beac <_strtol_l.constprop.0+0x94>
 800bede:	f1be 3fff 	cmp.w	lr, #4294967295
 800bee2:	d105      	bne.n	800bef0 <_strtol_l.constprop.0+0xd8>
 800bee4:	2322      	movs	r3, #34	; 0x22
 800bee6:	6003      	str	r3, [r0, #0]
 800bee8:	4646      	mov	r6, r8
 800beea:	b942      	cbnz	r2, 800befe <_strtol_l.constprop.0+0xe6>
 800beec:	4630      	mov	r0, r6
 800beee:	e79e      	b.n	800be2e <_strtol_l.constprop.0+0x16>
 800bef0:	b107      	cbz	r7, 800bef4 <_strtol_l.constprop.0+0xdc>
 800bef2:	4276      	negs	r6, r6
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	d0f9      	beq.n	800beec <_strtol_l.constprop.0+0xd4>
 800bef8:	f1be 0f00 	cmp.w	lr, #0
 800befc:	d000      	beq.n	800bf00 <_strtol_l.constprop.0+0xe8>
 800befe:	1e69      	subs	r1, r5, #1
 800bf00:	6011      	str	r1, [r2, #0]
 800bf02:	e7f3      	b.n	800beec <_strtol_l.constprop.0+0xd4>
 800bf04:	2430      	movs	r4, #48	; 0x30
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1b1      	bne.n	800be6e <_strtol_l.constprop.0+0x56>
 800bf0a:	2308      	movs	r3, #8
 800bf0c:	e7af      	b.n	800be6e <_strtol_l.constprop.0+0x56>
 800bf0e:	2c30      	cmp	r4, #48	; 0x30
 800bf10:	d0a5      	beq.n	800be5e <_strtol_l.constprop.0+0x46>
 800bf12:	230a      	movs	r3, #10
 800bf14:	e7ab      	b.n	800be6e <_strtol_l.constprop.0+0x56>
 800bf16:	bf00      	nop
 800bf18:	0800f5e1 	.word	0x0800f5e1

0800bf1c <strtol>:
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	460a      	mov	r2, r1
 800bf20:	4601      	mov	r1, r0
 800bf22:	4802      	ldr	r0, [pc, #8]	; (800bf2c <strtol+0x10>)
 800bf24:	6800      	ldr	r0, [r0, #0]
 800bf26:	f7ff bf77 	b.w	800be18 <_strtol_l.constprop.0>
 800bf2a:	bf00      	nop
 800bf2c:	20000080 	.word	0x20000080

0800bf30 <__cvt>:
 800bf30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf34:	ec55 4b10 	vmov	r4, r5, d0
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	460e      	mov	r6, r1
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	462b      	mov	r3, r5
 800bf40:	bfbb      	ittet	lt
 800bf42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf46:	461d      	movlt	r5, r3
 800bf48:	2300      	movge	r3, #0
 800bf4a:	232d      	movlt	r3, #45	; 0x2d
 800bf4c:	700b      	strb	r3, [r1, #0]
 800bf4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf54:	4691      	mov	r9, r2
 800bf56:	f023 0820 	bic.w	r8, r3, #32
 800bf5a:	bfbc      	itt	lt
 800bf5c:	4622      	movlt	r2, r4
 800bf5e:	4614      	movlt	r4, r2
 800bf60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf64:	d005      	beq.n	800bf72 <__cvt+0x42>
 800bf66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf6a:	d100      	bne.n	800bf6e <__cvt+0x3e>
 800bf6c:	3601      	adds	r6, #1
 800bf6e:	2102      	movs	r1, #2
 800bf70:	e000      	b.n	800bf74 <__cvt+0x44>
 800bf72:	2103      	movs	r1, #3
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	ab02      	add	r3, sp, #8
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	ec45 4b10 	vmov	d0, r4, r5
 800bf80:	4653      	mov	r3, sl
 800bf82:	4632      	mov	r2, r6
 800bf84:	f000 ff78 	bl	800ce78 <_dtoa_r>
 800bf88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf8c:	4607      	mov	r7, r0
 800bf8e:	d102      	bne.n	800bf96 <__cvt+0x66>
 800bf90:	f019 0f01 	tst.w	r9, #1
 800bf94:	d022      	beq.n	800bfdc <__cvt+0xac>
 800bf96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf9a:	eb07 0906 	add.w	r9, r7, r6
 800bf9e:	d110      	bne.n	800bfc2 <__cvt+0x92>
 800bfa0:	783b      	ldrb	r3, [r7, #0]
 800bfa2:	2b30      	cmp	r3, #48	; 0x30
 800bfa4:	d10a      	bne.n	800bfbc <__cvt+0x8c>
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	4620      	mov	r0, r4
 800bfac:	4629      	mov	r1, r5
 800bfae:	f7f4 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb2:	b918      	cbnz	r0, 800bfbc <__cvt+0x8c>
 800bfb4:	f1c6 0601 	rsb	r6, r6, #1
 800bfb8:	f8ca 6000 	str.w	r6, [sl]
 800bfbc:	f8da 3000 	ldr.w	r3, [sl]
 800bfc0:	4499      	add	r9, r3
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4629      	mov	r1, r5
 800bfca:	f7f4 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfce:	b108      	cbz	r0, 800bfd4 <__cvt+0xa4>
 800bfd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfd4:	2230      	movs	r2, #48	; 0x30
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	454b      	cmp	r3, r9
 800bfda:	d307      	bcc.n	800bfec <__cvt+0xbc>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfe0:	1bdb      	subs	r3, r3, r7
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	6013      	str	r3, [r2, #0]
 800bfe6:	b004      	add	sp, #16
 800bfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfec:	1c59      	adds	r1, r3, #1
 800bfee:	9103      	str	r1, [sp, #12]
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	e7f0      	b.n	800bfd6 <__cvt+0xa6>

0800bff4 <__exponent>:
 800bff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bff6:	4603      	mov	r3, r0
 800bff8:	2900      	cmp	r1, #0
 800bffa:	bfb8      	it	lt
 800bffc:	4249      	neglt	r1, r1
 800bffe:	f803 2b02 	strb.w	r2, [r3], #2
 800c002:	bfb4      	ite	lt
 800c004:	222d      	movlt	r2, #45	; 0x2d
 800c006:	222b      	movge	r2, #43	; 0x2b
 800c008:	2909      	cmp	r1, #9
 800c00a:	7042      	strb	r2, [r0, #1]
 800c00c:	dd2a      	ble.n	800c064 <__exponent+0x70>
 800c00e:	f10d 0207 	add.w	r2, sp, #7
 800c012:	4617      	mov	r7, r2
 800c014:	260a      	movs	r6, #10
 800c016:	4694      	mov	ip, r2
 800c018:	fb91 f5f6 	sdiv	r5, r1, r6
 800c01c:	fb06 1415 	mls	r4, r6, r5, r1
 800c020:	3430      	adds	r4, #48	; 0x30
 800c022:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c026:	460c      	mov	r4, r1
 800c028:	2c63      	cmp	r4, #99	; 0x63
 800c02a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c02e:	4629      	mov	r1, r5
 800c030:	dcf1      	bgt.n	800c016 <__exponent+0x22>
 800c032:	3130      	adds	r1, #48	; 0x30
 800c034:	f1ac 0402 	sub.w	r4, ip, #2
 800c038:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c03c:	1c41      	adds	r1, r0, #1
 800c03e:	4622      	mov	r2, r4
 800c040:	42ba      	cmp	r2, r7
 800c042:	d30a      	bcc.n	800c05a <__exponent+0x66>
 800c044:	f10d 0209 	add.w	r2, sp, #9
 800c048:	eba2 020c 	sub.w	r2, r2, ip
 800c04c:	42bc      	cmp	r4, r7
 800c04e:	bf88      	it	hi
 800c050:	2200      	movhi	r2, #0
 800c052:	4413      	add	r3, r2
 800c054:	1a18      	subs	r0, r3, r0
 800c056:	b003      	add	sp, #12
 800c058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c05a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c05e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c062:	e7ed      	b.n	800c040 <__exponent+0x4c>
 800c064:	2330      	movs	r3, #48	; 0x30
 800c066:	3130      	adds	r1, #48	; 0x30
 800c068:	7083      	strb	r3, [r0, #2]
 800c06a:	70c1      	strb	r1, [r0, #3]
 800c06c:	1d03      	adds	r3, r0, #4
 800c06e:	e7f1      	b.n	800c054 <__exponent+0x60>

0800c070 <_printf_float>:
 800c070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c074:	ed2d 8b02 	vpush	{d8}
 800c078:	b08d      	sub	sp, #52	; 0x34
 800c07a:	460c      	mov	r4, r1
 800c07c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c080:	4616      	mov	r6, r2
 800c082:	461f      	mov	r7, r3
 800c084:	4605      	mov	r5, r0
 800c086:	f000 fde9 	bl	800cc5c <_localeconv_r>
 800c08a:	f8d0 a000 	ldr.w	sl, [r0]
 800c08e:	4650      	mov	r0, sl
 800c090:	f7f4 f8ee 	bl	8000270 <strlen>
 800c094:	2300      	movs	r3, #0
 800c096:	930a      	str	r3, [sp, #40]	; 0x28
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	9305      	str	r3, [sp, #20]
 800c09c:	f8d8 3000 	ldr.w	r3, [r8]
 800c0a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c0a4:	3307      	adds	r3, #7
 800c0a6:	f023 0307 	bic.w	r3, r3, #7
 800c0aa:	f103 0208 	add.w	r2, r3, #8
 800c0ae:	f8c8 2000 	str.w	r2, [r8]
 800c0b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0ba:	9307      	str	r3, [sp, #28]
 800c0bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c0c0:	ee08 0a10 	vmov	s16, r0
 800c0c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0cc:	4b9e      	ldr	r3, [pc, #632]	; (800c348 <_printf_float+0x2d8>)
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	f7f4 fd2b 	bl	8000b2c <__aeabi_dcmpun>
 800c0d6:	bb88      	cbnz	r0, 800c13c <_printf_float+0xcc>
 800c0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0dc:	4b9a      	ldr	r3, [pc, #616]	; (800c348 <_printf_float+0x2d8>)
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	f7f4 fd05 	bl	8000af0 <__aeabi_dcmple>
 800c0e6:	bb48      	cbnz	r0, 800c13c <_printf_float+0xcc>
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	f7f4 fcf4 	bl	8000adc <__aeabi_dcmplt>
 800c0f4:	b110      	cbz	r0, 800c0fc <_printf_float+0x8c>
 800c0f6:	232d      	movs	r3, #45	; 0x2d
 800c0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0fc:	4a93      	ldr	r2, [pc, #588]	; (800c34c <_printf_float+0x2dc>)
 800c0fe:	4b94      	ldr	r3, [pc, #592]	; (800c350 <_printf_float+0x2e0>)
 800c100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c104:	bf94      	ite	ls
 800c106:	4690      	movls	r8, r2
 800c108:	4698      	movhi	r8, r3
 800c10a:	2303      	movs	r3, #3
 800c10c:	6123      	str	r3, [r4, #16]
 800c10e:	9b05      	ldr	r3, [sp, #20]
 800c110:	f023 0304 	bic.w	r3, r3, #4
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	f04f 0900 	mov.w	r9, #0
 800c11a:	9700      	str	r7, [sp, #0]
 800c11c:	4633      	mov	r3, r6
 800c11e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c120:	4621      	mov	r1, r4
 800c122:	4628      	mov	r0, r5
 800c124:	f000 f9da 	bl	800c4dc <_printf_common>
 800c128:	3001      	adds	r0, #1
 800c12a:	f040 8090 	bne.w	800c24e <_printf_float+0x1de>
 800c12e:	f04f 30ff 	mov.w	r0, #4294967295
 800c132:	b00d      	add	sp, #52	; 0x34
 800c134:	ecbd 8b02 	vpop	{d8}
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	4642      	mov	r2, r8
 800c13e:	464b      	mov	r3, r9
 800c140:	4640      	mov	r0, r8
 800c142:	4649      	mov	r1, r9
 800c144:	f7f4 fcf2 	bl	8000b2c <__aeabi_dcmpun>
 800c148:	b140      	cbz	r0, 800c15c <_printf_float+0xec>
 800c14a:	464b      	mov	r3, r9
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfbc      	itt	lt
 800c150:	232d      	movlt	r3, #45	; 0x2d
 800c152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c156:	4a7f      	ldr	r2, [pc, #508]	; (800c354 <_printf_float+0x2e4>)
 800c158:	4b7f      	ldr	r3, [pc, #508]	; (800c358 <_printf_float+0x2e8>)
 800c15a:	e7d1      	b.n	800c100 <_printf_float+0x90>
 800c15c:	6863      	ldr	r3, [r4, #4]
 800c15e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c162:	9206      	str	r2, [sp, #24]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	d13f      	bne.n	800c1e8 <_printf_float+0x178>
 800c168:	2306      	movs	r3, #6
 800c16a:	6063      	str	r3, [r4, #4]
 800c16c:	9b05      	ldr	r3, [sp, #20]
 800c16e:	6861      	ldr	r1, [r4, #4]
 800c170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c174:	2300      	movs	r3, #0
 800c176:	9303      	str	r3, [sp, #12]
 800c178:	ab0a      	add	r3, sp, #40	; 0x28
 800c17a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c17e:	ab09      	add	r3, sp, #36	; 0x24
 800c180:	ec49 8b10 	vmov	d0, r8, r9
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	6022      	str	r2, [r4, #0]
 800c188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c18c:	4628      	mov	r0, r5
 800c18e:	f7ff fecf 	bl	800bf30 <__cvt>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c196:	2b47      	cmp	r3, #71	; 0x47
 800c198:	4680      	mov	r8, r0
 800c19a:	d108      	bne.n	800c1ae <_printf_float+0x13e>
 800c19c:	1cc8      	adds	r0, r1, #3
 800c19e:	db02      	blt.n	800c1a6 <_printf_float+0x136>
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	dd41      	ble.n	800c22a <_printf_float+0x1ba>
 800c1a6:	f1ab 0302 	sub.w	r3, fp, #2
 800c1aa:	fa5f fb83 	uxtb.w	fp, r3
 800c1ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1b2:	d820      	bhi.n	800c1f6 <_printf_float+0x186>
 800c1b4:	3901      	subs	r1, #1
 800c1b6:	465a      	mov	r2, fp
 800c1b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c1bc:	9109      	str	r1, [sp, #36]	; 0x24
 800c1be:	f7ff ff19 	bl	800bff4 <__exponent>
 800c1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1c4:	1813      	adds	r3, r2, r0
 800c1c6:	2a01      	cmp	r2, #1
 800c1c8:	4681      	mov	r9, r0
 800c1ca:	6123      	str	r3, [r4, #16]
 800c1cc:	dc02      	bgt.n	800c1d4 <_printf_float+0x164>
 800c1ce:	6822      	ldr	r2, [r4, #0]
 800c1d0:	07d2      	lsls	r2, r2, #31
 800c1d2:	d501      	bpl.n	800c1d8 <_printf_float+0x168>
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d09c      	beq.n	800c11a <_printf_float+0xaa>
 800c1e0:	232d      	movs	r3, #45	; 0x2d
 800c1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e6:	e798      	b.n	800c11a <_printf_float+0xaa>
 800c1e8:	9a06      	ldr	r2, [sp, #24]
 800c1ea:	2a47      	cmp	r2, #71	; 0x47
 800c1ec:	d1be      	bne.n	800c16c <_printf_float+0xfc>
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1bc      	bne.n	800c16c <_printf_float+0xfc>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e7b9      	b.n	800c16a <_printf_float+0xfa>
 800c1f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c1fa:	d118      	bne.n	800c22e <_printf_float+0x1be>
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	6863      	ldr	r3, [r4, #4]
 800c200:	dd0b      	ble.n	800c21a <_printf_float+0x1aa>
 800c202:	6121      	str	r1, [r4, #16]
 800c204:	b913      	cbnz	r3, 800c20c <_printf_float+0x19c>
 800c206:	6822      	ldr	r2, [r4, #0]
 800c208:	07d0      	lsls	r0, r2, #31
 800c20a:	d502      	bpl.n	800c212 <_printf_float+0x1a2>
 800c20c:	3301      	adds	r3, #1
 800c20e:	440b      	add	r3, r1
 800c210:	6123      	str	r3, [r4, #16]
 800c212:	65a1      	str	r1, [r4, #88]	; 0x58
 800c214:	f04f 0900 	mov.w	r9, #0
 800c218:	e7de      	b.n	800c1d8 <_printf_float+0x168>
 800c21a:	b913      	cbnz	r3, 800c222 <_printf_float+0x1b2>
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	07d2      	lsls	r2, r2, #31
 800c220:	d501      	bpl.n	800c226 <_printf_float+0x1b6>
 800c222:	3302      	adds	r3, #2
 800c224:	e7f4      	b.n	800c210 <_printf_float+0x1a0>
 800c226:	2301      	movs	r3, #1
 800c228:	e7f2      	b.n	800c210 <_printf_float+0x1a0>
 800c22a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c230:	4299      	cmp	r1, r3
 800c232:	db05      	blt.n	800c240 <_printf_float+0x1d0>
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	6121      	str	r1, [r4, #16]
 800c238:	07d8      	lsls	r0, r3, #31
 800c23a:	d5ea      	bpl.n	800c212 <_printf_float+0x1a2>
 800c23c:	1c4b      	adds	r3, r1, #1
 800c23e:	e7e7      	b.n	800c210 <_printf_float+0x1a0>
 800c240:	2900      	cmp	r1, #0
 800c242:	bfd4      	ite	le
 800c244:	f1c1 0202 	rsble	r2, r1, #2
 800c248:	2201      	movgt	r2, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	e7e0      	b.n	800c210 <_printf_float+0x1a0>
 800c24e:	6823      	ldr	r3, [r4, #0]
 800c250:	055a      	lsls	r2, r3, #21
 800c252:	d407      	bmi.n	800c264 <_printf_float+0x1f4>
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	4642      	mov	r2, r8
 800c258:	4631      	mov	r1, r6
 800c25a:	4628      	mov	r0, r5
 800c25c:	47b8      	blx	r7
 800c25e:	3001      	adds	r0, #1
 800c260:	d12c      	bne.n	800c2bc <_printf_float+0x24c>
 800c262:	e764      	b.n	800c12e <_printf_float+0xbe>
 800c264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c268:	f240 80e0 	bls.w	800c42c <_printf_float+0x3bc>
 800c26c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c270:	2200      	movs	r2, #0
 800c272:	2300      	movs	r3, #0
 800c274:	f7f4 fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d034      	beq.n	800c2e6 <_printf_float+0x276>
 800c27c:	4a37      	ldr	r2, [pc, #220]	; (800c35c <_printf_float+0x2ec>)
 800c27e:	2301      	movs	r3, #1
 800c280:	4631      	mov	r1, r6
 800c282:	4628      	mov	r0, r5
 800c284:	47b8      	blx	r7
 800c286:	3001      	adds	r0, #1
 800c288:	f43f af51 	beq.w	800c12e <_printf_float+0xbe>
 800c28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c290:	429a      	cmp	r2, r3
 800c292:	db02      	blt.n	800c29a <_printf_float+0x22a>
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	07d8      	lsls	r0, r3, #31
 800c298:	d510      	bpl.n	800c2bc <_printf_float+0x24c>
 800c29a:	ee18 3a10 	vmov	r3, s16
 800c29e:	4652      	mov	r2, sl
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f af41 	beq.w	800c12e <_printf_float+0xbe>
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	f104 091a 	add.w	r9, r4, #26
 800c2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	4543      	cmp	r3, r8
 800c2ba:	dc09      	bgt.n	800c2d0 <_printf_float+0x260>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	079b      	lsls	r3, r3, #30
 800c2c0:	f100 8107 	bmi.w	800c4d2 <_printf_float+0x462>
 800c2c4:	68e0      	ldr	r0, [r4, #12]
 800c2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c8:	4298      	cmp	r0, r3
 800c2ca:	bfb8      	it	lt
 800c2cc:	4618      	movlt	r0, r3
 800c2ce:	e730      	b.n	800c132 <_printf_float+0xc2>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	464a      	mov	r2, r9
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b8      	blx	r7
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f43f af27 	beq.w	800c12e <_printf_float+0xbe>
 800c2e0:	f108 0801 	add.w	r8, r8, #1
 800c2e4:	e7e6      	b.n	800c2b4 <_printf_float+0x244>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	dc39      	bgt.n	800c360 <_printf_float+0x2f0>
 800c2ec:	4a1b      	ldr	r2, [pc, #108]	; (800c35c <_printf_float+0x2ec>)
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b8      	blx	r7
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	f43f af19 	beq.w	800c12e <_printf_float+0xbe>
 800c2fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c300:	4313      	orrs	r3, r2
 800c302:	d102      	bne.n	800c30a <_printf_float+0x29a>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	07d9      	lsls	r1, r3, #31
 800c308:	d5d8      	bpl.n	800c2bc <_printf_float+0x24c>
 800c30a:	ee18 3a10 	vmov	r3, s16
 800c30e:	4652      	mov	r2, sl
 800c310:	4631      	mov	r1, r6
 800c312:	4628      	mov	r0, r5
 800c314:	47b8      	blx	r7
 800c316:	3001      	adds	r0, #1
 800c318:	f43f af09 	beq.w	800c12e <_printf_float+0xbe>
 800c31c:	f04f 0900 	mov.w	r9, #0
 800c320:	f104 0a1a 	add.w	sl, r4, #26
 800c324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c326:	425b      	negs	r3, r3
 800c328:	454b      	cmp	r3, r9
 800c32a:	dc01      	bgt.n	800c330 <_printf_float+0x2c0>
 800c32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c32e:	e792      	b.n	800c256 <_printf_float+0x1e6>
 800c330:	2301      	movs	r3, #1
 800c332:	4652      	mov	r2, sl
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	f43f aef7 	beq.w	800c12e <_printf_float+0xbe>
 800c340:	f109 0901 	add.w	r9, r9, #1
 800c344:	e7ee      	b.n	800c324 <_printf_float+0x2b4>
 800c346:	bf00      	nop
 800c348:	7fefffff 	.word	0x7fefffff
 800c34c:	0800f6e1 	.word	0x0800f6e1
 800c350:	0800f6e5 	.word	0x0800f6e5
 800c354:	0800f6e9 	.word	0x0800f6e9
 800c358:	0800f6ed 	.word	0x0800f6ed
 800c35c:	0800f6f1 	.word	0x0800f6f1
 800c360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c364:	429a      	cmp	r2, r3
 800c366:	bfa8      	it	ge
 800c368:	461a      	movge	r2, r3
 800c36a:	2a00      	cmp	r2, #0
 800c36c:	4691      	mov	r9, r2
 800c36e:	dc37      	bgt.n	800c3e0 <_printf_float+0x370>
 800c370:	f04f 0b00 	mov.w	fp, #0
 800c374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c378:	f104 021a 	add.w	r2, r4, #26
 800c37c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	eba3 0309 	sub.w	r3, r3, r9
 800c384:	455b      	cmp	r3, fp
 800c386:	dc33      	bgt.n	800c3f0 <_printf_float+0x380>
 800c388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c38c:	429a      	cmp	r2, r3
 800c38e:	db3b      	blt.n	800c408 <_printf_float+0x398>
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	07da      	lsls	r2, r3, #31
 800c394:	d438      	bmi.n	800c408 <_printf_float+0x398>
 800c396:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c39a:	eba2 0903 	sub.w	r9, r2, r3
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	1ad2      	subs	r2, r2, r3
 800c3a2:	4591      	cmp	r9, r2
 800c3a4:	bfa8      	it	ge
 800c3a6:	4691      	movge	r9, r2
 800c3a8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ac:	dc35      	bgt.n	800c41a <_printf_float+0x3aa>
 800c3ae:	f04f 0800 	mov.w	r8, #0
 800c3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3b6:	f104 0a1a 	add.w	sl, r4, #26
 800c3ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	eba3 0309 	sub.w	r3, r3, r9
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	f77f af79 	ble.w	800c2bc <_printf_float+0x24c>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	4652      	mov	r2, sl
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b8      	blx	r7
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f43f aeaa 	beq.w	800c12e <_printf_float+0xbe>
 800c3da:	f108 0801 	add.w	r8, r8, #1
 800c3de:	e7ec      	b.n	800c3ba <_printf_float+0x34a>
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	4631      	mov	r1, r6
 800c3e4:	4642      	mov	r2, r8
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	47b8      	blx	r7
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d1c0      	bne.n	800c370 <_printf_float+0x300>
 800c3ee:	e69e      	b.n	800c12e <_printf_float+0xbe>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	9205      	str	r2, [sp, #20]
 800c3f8:	47b8      	blx	r7
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f43f ae97 	beq.w	800c12e <_printf_float+0xbe>
 800c400:	9a05      	ldr	r2, [sp, #20]
 800c402:	f10b 0b01 	add.w	fp, fp, #1
 800c406:	e7b9      	b.n	800c37c <_printf_float+0x30c>
 800c408:	ee18 3a10 	vmov	r3, s16
 800c40c:	4652      	mov	r2, sl
 800c40e:	4631      	mov	r1, r6
 800c410:	4628      	mov	r0, r5
 800c412:	47b8      	blx	r7
 800c414:	3001      	adds	r0, #1
 800c416:	d1be      	bne.n	800c396 <_printf_float+0x326>
 800c418:	e689      	b.n	800c12e <_printf_float+0xbe>
 800c41a:	9a05      	ldr	r2, [sp, #20]
 800c41c:	464b      	mov	r3, r9
 800c41e:	4442      	add	r2, r8
 800c420:	4631      	mov	r1, r6
 800c422:	4628      	mov	r0, r5
 800c424:	47b8      	blx	r7
 800c426:	3001      	adds	r0, #1
 800c428:	d1c1      	bne.n	800c3ae <_printf_float+0x33e>
 800c42a:	e680      	b.n	800c12e <_printf_float+0xbe>
 800c42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c42e:	2a01      	cmp	r2, #1
 800c430:	dc01      	bgt.n	800c436 <_printf_float+0x3c6>
 800c432:	07db      	lsls	r3, r3, #31
 800c434:	d53a      	bpl.n	800c4ac <_printf_float+0x43c>
 800c436:	2301      	movs	r3, #1
 800c438:	4642      	mov	r2, r8
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	f43f ae74 	beq.w	800c12e <_printf_float+0xbe>
 800c446:	ee18 3a10 	vmov	r3, s16
 800c44a:	4652      	mov	r2, sl
 800c44c:	4631      	mov	r1, r6
 800c44e:	4628      	mov	r0, r5
 800c450:	47b8      	blx	r7
 800c452:	3001      	adds	r0, #1
 800c454:	f43f ae6b 	beq.w	800c12e <_printf_float+0xbe>
 800c458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c464:	f7f4 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 800c468:	b9d8      	cbnz	r0, 800c4a2 <_printf_float+0x432>
 800c46a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c46e:	f108 0201 	add.w	r2, r8, #1
 800c472:	4631      	mov	r1, r6
 800c474:	4628      	mov	r0, r5
 800c476:	47b8      	blx	r7
 800c478:	3001      	adds	r0, #1
 800c47a:	d10e      	bne.n	800c49a <_printf_float+0x42a>
 800c47c:	e657      	b.n	800c12e <_printf_float+0xbe>
 800c47e:	2301      	movs	r3, #1
 800c480:	4652      	mov	r2, sl
 800c482:	4631      	mov	r1, r6
 800c484:	4628      	mov	r0, r5
 800c486:	47b8      	blx	r7
 800c488:	3001      	adds	r0, #1
 800c48a:	f43f ae50 	beq.w	800c12e <_printf_float+0xbe>
 800c48e:	f108 0801 	add.w	r8, r8, #1
 800c492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c494:	3b01      	subs	r3, #1
 800c496:	4543      	cmp	r3, r8
 800c498:	dcf1      	bgt.n	800c47e <_printf_float+0x40e>
 800c49a:	464b      	mov	r3, r9
 800c49c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c4a0:	e6da      	b.n	800c258 <_printf_float+0x1e8>
 800c4a2:	f04f 0800 	mov.w	r8, #0
 800c4a6:	f104 0a1a 	add.w	sl, r4, #26
 800c4aa:	e7f2      	b.n	800c492 <_printf_float+0x422>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	4642      	mov	r2, r8
 800c4b0:	e7df      	b.n	800c472 <_printf_float+0x402>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	464a      	mov	r2, r9
 800c4b6:	4631      	mov	r1, r6
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	47b8      	blx	r7
 800c4bc:	3001      	adds	r0, #1
 800c4be:	f43f ae36 	beq.w	800c12e <_printf_float+0xbe>
 800c4c2:	f108 0801 	add.w	r8, r8, #1
 800c4c6:	68e3      	ldr	r3, [r4, #12]
 800c4c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c4ca:	1a5b      	subs	r3, r3, r1
 800c4cc:	4543      	cmp	r3, r8
 800c4ce:	dcf0      	bgt.n	800c4b2 <_printf_float+0x442>
 800c4d0:	e6f8      	b.n	800c2c4 <_printf_float+0x254>
 800c4d2:	f04f 0800 	mov.w	r8, #0
 800c4d6:	f104 0919 	add.w	r9, r4, #25
 800c4da:	e7f4      	b.n	800c4c6 <_printf_float+0x456>

0800c4dc <_printf_common>:
 800c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e0:	4616      	mov	r6, r2
 800c4e2:	4699      	mov	r9, r3
 800c4e4:	688a      	ldr	r2, [r1, #8]
 800c4e6:	690b      	ldr	r3, [r1, #16]
 800c4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	bfb8      	it	lt
 800c4f0:	4613      	movlt	r3, r2
 800c4f2:	6033      	str	r3, [r6, #0]
 800c4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4f8:	4607      	mov	r7, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	b10a      	cbz	r2, 800c502 <_printf_common+0x26>
 800c4fe:	3301      	adds	r3, #1
 800c500:	6033      	str	r3, [r6, #0]
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	0699      	lsls	r1, r3, #26
 800c506:	bf42      	ittt	mi
 800c508:	6833      	ldrmi	r3, [r6, #0]
 800c50a:	3302      	addmi	r3, #2
 800c50c:	6033      	strmi	r3, [r6, #0]
 800c50e:	6825      	ldr	r5, [r4, #0]
 800c510:	f015 0506 	ands.w	r5, r5, #6
 800c514:	d106      	bne.n	800c524 <_printf_common+0x48>
 800c516:	f104 0a19 	add.w	sl, r4, #25
 800c51a:	68e3      	ldr	r3, [r4, #12]
 800c51c:	6832      	ldr	r2, [r6, #0]
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	42ab      	cmp	r3, r5
 800c522:	dc26      	bgt.n	800c572 <_printf_common+0x96>
 800c524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c528:	1e13      	subs	r3, r2, #0
 800c52a:	6822      	ldr	r2, [r4, #0]
 800c52c:	bf18      	it	ne
 800c52e:	2301      	movne	r3, #1
 800c530:	0692      	lsls	r2, r2, #26
 800c532:	d42b      	bmi.n	800c58c <_printf_common+0xb0>
 800c534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c538:	4649      	mov	r1, r9
 800c53a:	4638      	mov	r0, r7
 800c53c:	47c0      	blx	r8
 800c53e:	3001      	adds	r0, #1
 800c540:	d01e      	beq.n	800c580 <_printf_common+0xa4>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	f003 0306 	and.w	r3, r3, #6
 800c54a:	2b04      	cmp	r3, #4
 800c54c:	bf02      	ittt	eq
 800c54e:	68e5      	ldreq	r5, [r4, #12]
 800c550:	6833      	ldreq	r3, [r6, #0]
 800c552:	1aed      	subeq	r5, r5, r3
 800c554:	68a3      	ldr	r3, [r4, #8]
 800c556:	bf0c      	ite	eq
 800c558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c55c:	2500      	movne	r5, #0
 800c55e:	4293      	cmp	r3, r2
 800c560:	bfc4      	itt	gt
 800c562:	1a9b      	subgt	r3, r3, r2
 800c564:	18ed      	addgt	r5, r5, r3
 800c566:	2600      	movs	r6, #0
 800c568:	341a      	adds	r4, #26
 800c56a:	42b5      	cmp	r5, r6
 800c56c:	d11a      	bne.n	800c5a4 <_printf_common+0xc8>
 800c56e:	2000      	movs	r0, #0
 800c570:	e008      	b.n	800c584 <_printf_common+0xa8>
 800c572:	2301      	movs	r3, #1
 800c574:	4652      	mov	r2, sl
 800c576:	4649      	mov	r1, r9
 800c578:	4638      	mov	r0, r7
 800c57a:	47c0      	blx	r8
 800c57c:	3001      	adds	r0, #1
 800c57e:	d103      	bne.n	800c588 <_printf_common+0xac>
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c588:	3501      	adds	r5, #1
 800c58a:	e7c6      	b.n	800c51a <_printf_common+0x3e>
 800c58c:	18e1      	adds	r1, r4, r3
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	2030      	movs	r0, #48	; 0x30
 800c592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c596:	4422      	add	r2, r4
 800c598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c59c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c5a0:	3302      	adds	r3, #2
 800c5a2:	e7c7      	b.n	800c534 <_printf_common+0x58>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	4622      	mov	r2, r4
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	47c0      	blx	r8
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d0e6      	beq.n	800c580 <_printf_common+0xa4>
 800c5b2:	3601      	adds	r6, #1
 800c5b4:	e7d9      	b.n	800c56a <_printf_common+0x8e>
	...

0800c5b8 <_printf_i>:
 800c5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5bc:	7e0f      	ldrb	r7, [r1, #24]
 800c5be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c5c0:	2f78      	cmp	r7, #120	; 0x78
 800c5c2:	4691      	mov	r9, r2
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c5ce:	d807      	bhi.n	800c5e0 <_printf_i+0x28>
 800c5d0:	2f62      	cmp	r7, #98	; 0x62
 800c5d2:	d80a      	bhi.n	800c5ea <_printf_i+0x32>
 800c5d4:	2f00      	cmp	r7, #0
 800c5d6:	f000 80d4 	beq.w	800c782 <_printf_i+0x1ca>
 800c5da:	2f58      	cmp	r7, #88	; 0x58
 800c5dc:	f000 80c0 	beq.w	800c760 <_printf_i+0x1a8>
 800c5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5e8:	e03a      	b.n	800c660 <_printf_i+0xa8>
 800c5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5ee:	2b15      	cmp	r3, #21
 800c5f0:	d8f6      	bhi.n	800c5e0 <_printf_i+0x28>
 800c5f2:	a101      	add	r1, pc, #4	; (adr r1, 800c5f8 <_printf_i+0x40>)
 800c5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5f8:	0800c651 	.word	0x0800c651
 800c5fc:	0800c665 	.word	0x0800c665
 800c600:	0800c5e1 	.word	0x0800c5e1
 800c604:	0800c5e1 	.word	0x0800c5e1
 800c608:	0800c5e1 	.word	0x0800c5e1
 800c60c:	0800c5e1 	.word	0x0800c5e1
 800c610:	0800c665 	.word	0x0800c665
 800c614:	0800c5e1 	.word	0x0800c5e1
 800c618:	0800c5e1 	.word	0x0800c5e1
 800c61c:	0800c5e1 	.word	0x0800c5e1
 800c620:	0800c5e1 	.word	0x0800c5e1
 800c624:	0800c769 	.word	0x0800c769
 800c628:	0800c691 	.word	0x0800c691
 800c62c:	0800c723 	.word	0x0800c723
 800c630:	0800c5e1 	.word	0x0800c5e1
 800c634:	0800c5e1 	.word	0x0800c5e1
 800c638:	0800c78b 	.word	0x0800c78b
 800c63c:	0800c5e1 	.word	0x0800c5e1
 800c640:	0800c691 	.word	0x0800c691
 800c644:	0800c5e1 	.word	0x0800c5e1
 800c648:	0800c5e1 	.word	0x0800c5e1
 800c64c:	0800c72b 	.word	0x0800c72b
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	1d1a      	adds	r2, r3, #4
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	602a      	str	r2, [r5, #0]
 800c658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c660:	2301      	movs	r3, #1
 800c662:	e09f      	b.n	800c7a4 <_printf_i+0x1ec>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	0607      	lsls	r7, r0, #24
 800c66a:	f103 0104 	add.w	r1, r3, #4
 800c66e:	6029      	str	r1, [r5, #0]
 800c670:	d501      	bpl.n	800c676 <_printf_i+0xbe>
 800c672:	681e      	ldr	r6, [r3, #0]
 800c674:	e003      	b.n	800c67e <_printf_i+0xc6>
 800c676:	0646      	lsls	r6, r0, #25
 800c678:	d5fb      	bpl.n	800c672 <_printf_i+0xba>
 800c67a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c67e:	2e00      	cmp	r6, #0
 800c680:	da03      	bge.n	800c68a <_printf_i+0xd2>
 800c682:	232d      	movs	r3, #45	; 0x2d
 800c684:	4276      	negs	r6, r6
 800c686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c68a:	485a      	ldr	r0, [pc, #360]	; (800c7f4 <_printf_i+0x23c>)
 800c68c:	230a      	movs	r3, #10
 800c68e:	e012      	b.n	800c6b6 <_printf_i+0xfe>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	6820      	ldr	r0, [r4, #0]
 800c694:	1d19      	adds	r1, r3, #4
 800c696:	6029      	str	r1, [r5, #0]
 800c698:	0605      	lsls	r5, r0, #24
 800c69a:	d501      	bpl.n	800c6a0 <_printf_i+0xe8>
 800c69c:	681e      	ldr	r6, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <_printf_i+0xee>
 800c6a0:	0641      	lsls	r1, r0, #25
 800c6a2:	d5fb      	bpl.n	800c69c <_printf_i+0xe4>
 800c6a4:	881e      	ldrh	r6, [r3, #0]
 800c6a6:	4853      	ldr	r0, [pc, #332]	; (800c7f4 <_printf_i+0x23c>)
 800c6a8:	2f6f      	cmp	r7, #111	; 0x6f
 800c6aa:	bf0c      	ite	eq
 800c6ac:	2308      	moveq	r3, #8
 800c6ae:	230a      	movne	r3, #10
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6b6:	6865      	ldr	r5, [r4, #4]
 800c6b8:	60a5      	str	r5, [r4, #8]
 800c6ba:	2d00      	cmp	r5, #0
 800c6bc:	bfa2      	ittt	ge
 800c6be:	6821      	ldrge	r1, [r4, #0]
 800c6c0:	f021 0104 	bicge.w	r1, r1, #4
 800c6c4:	6021      	strge	r1, [r4, #0]
 800c6c6:	b90e      	cbnz	r6, 800c6cc <_printf_i+0x114>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	d04b      	beq.n	800c764 <_printf_i+0x1ac>
 800c6cc:	4615      	mov	r5, r2
 800c6ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6d2:	fb03 6711 	mls	r7, r3, r1, r6
 800c6d6:	5dc7      	ldrb	r7, [r0, r7]
 800c6d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6dc:	4637      	mov	r7, r6
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	460e      	mov	r6, r1
 800c6e2:	d9f4      	bls.n	800c6ce <_printf_i+0x116>
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d10b      	bne.n	800c700 <_printf_i+0x148>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	07de      	lsls	r6, r3, #31
 800c6ec:	d508      	bpl.n	800c700 <_printf_i+0x148>
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	6861      	ldr	r1, [r4, #4]
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	bfde      	ittt	le
 800c6f6:	2330      	movle	r3, #48	; 0x30
 800c6f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c700:	1b52      	subs	r2, r2, r5
 800c702:	6122      	str	r2, [r4, #16]
 800c704:	f8cd a000 	str.w	sl, [sp]
 800c708:	464b      	mov	r3, r9
 800c70a:	aa03      	add	r2, sp, #12
 800c70c:	4621      	mov	r1, r4
 800c70e:	4640      	mov	r0, r8
 800c710:	f7ff fee4 	bl	800c4dc <_printf_common>
 800c714:	3001      	adds	r0, #1
 800c716:	d14a      	bne.n	800c7ae <_printf_i+0x1f6>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	b004      	add	sp, #16
 800c71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c722:	6823      	ldr	r3, [r4, #0]
 800c724:	f043 0320 	orr.w	r3, r3, #32
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	4833      	ldr	r0, [pc, #204]	; (800c7f8 <_printf_i+0x240>)
 800c72c:	2778      	movs	r7, #120	; 0x78
 800c72e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	6829      	ldr	r1, [r5, #0]
 800c736:	061f      	lsls	r7, r3, #24
 800c738:	f851 6b04 	ldr.w	r6, [r1], #4
 800c73c:	d402      	bmi.n	800c744 <_printf_i+0x18c>
 800c73e:	065f      	lsls	r7, r3, #25
 800c740:	bf48      	it	mi
 800c742:	b2b6      	uxthmi	r6, r6
 800c744:	07df      	lsls	r7, r3, #31
 800c746:	bf48      	it	mi
 800c748:	f043 0320 	orrmi.w	r3, r3, #32
 800c74c:	6029      	str	r1, [r5, #0]
 800c74e:	bf48      	it	mi
 800c750:	6023      	strmi	r3, [r4, #0]
 800c752:	b91e      	cbnz	r6, 800c75c <_printf_i+0x1a4>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	f023 0320 	bic.w	r3, r3, #32
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	2310      	movs	r3, #16
 800c75e:	e7a7      	b.n	800c6b0 <_printf_i+0xf8>
 800c760:	4824      	ldr	r0, [pc, #144]	; (800c7f4 <_printf_i+0x23c>)
 800c762:	e7e4      	b.n	800c72e <_printf_i+0x176>
 800c764:	4615      	mov	r5, r2
 800c766:	e7bd      	b.n	800c6e4 <_printf_i+0x12c>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	6826      	ldr	r6, [r4, #0]
 800c76c:	6961      	ldr	r1, [r4, #20]
 800c76e:	1d18      	adds	r0, r3, #4
 800c770:	6028      	str	r0, [r5, #0]
 800c772:	0635      	lsls	r5, r6, #24
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	d501      	bpl.n	800c77c <_printf_i+0x1c4>
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	e002      	b.n	800c782 <_printf_i+0x1ca>
 800c77c:	0670      	lsls	r0, r6, #25
 800c77e:	d5fb      	bpl.n	800c778 <_printf_i+0x1c0>
 800c780:	8019      	strh	r1, [r3, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	4615      	mov	r5, r2
 800c788:	e7bc      	b.n	800c704 <_printf_i+0x14c>
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	602a      	str	r2, [r5, #0]
 800c790:	681d      	ldr	r5, [r3, #0]
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	2100      	movs	r1, #0
 800c796:	4628      	mov	r0, r5
 800c798:	f7f3 fd1a 	bl	80001d0 <memchr>
 800c79c:	b108      	cbz	r0, 800c7a2 <_printf_i+0x1ea>
 800c79e:	1b40      	subs	r0, r0, r5
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	6123      	str	r3, [r4, #16]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ac:	e7aa      	b.n	800c704 <_printf_i+0x14c>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	462a      	mov	r2, r5
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	47d0      	blx	sl
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d0ad      	beq.n	800c718 <_printf_i+0x160>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	079b      	lsls	r3, r3, #30
 800c7c0:	d413      	bmi.n	800c7ea <_printf_i+0x232>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	bfb8      	it	lt
 800c7ca:	4618      	movlt	r0, r3
 800c7cc:	e7a6      	b.n	800c71c <_printf_i+0x164>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	47d0      	blx	sl
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d09d      	beq.n	800c718 <_printf_i+0x160>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	9903      	ldr	r1, [sp, #12]
 800c7e2:	1a5b      	subs	r3, r3, r1
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dcf2      	bgt.n	800c7ce <_printf_i+0x216>
 800c7e8:	e7eb      	b.n	800c7c2 <_printf_i+0x20a>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	f104 0619 	add.w	r6, r4, #25
 800c7f0:	e7f5      	b.n	800c7de <_printf_i+0x226>
 800c7f2:	bf00      	nop
 800c7f4:	0800f6f3 	.word	0x0800f6f3
 800c7f8:	0800f704 	.word	0x0800f704

0800c7fc <std>:
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	b510      	push	{r4, lr}
 800c800:	4604      	mov	r4, r0
 800c802:	e9c0 3300 	strd	r3, r3, [r0]
 800c806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c80a:	6083      	str	r3, [r0, #8]
 800c80c:	8181      	strh	r1, [r0, #12]
 800c80e:	6643      	str	r3, [r0, #100]	; 0x64
 800c810:	81c2      	strh	r2, [r0, #14]
 800c812:	6183      	str	r3, [r0, #24]
 800c814:	4619      	mov	r1, r3
 800c816:	2208      	movs	r2, #8
 800c818:	305c      	adds	r0, #92	; 0x5c
 800c81a:	f000 fa17 	bl	800cc4c <memset>
 800c81e:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <std+0x58>)
 800c820:	6263      	str	r3, [r4, #36]	; 0x24
 800c822:	4b0d      	ldr	r3, [pc, #52]	; (800c858 <std+0x5c>)
 800c824:	62a3      	str	r3, [r4, #40]	; 0x28
 800c826:	4b0d      	ldr	r3, [pc, #52]	; (800c85c <std+0x60>)
 800c828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c82a:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <std+0x64>)
 800c82c:	6323      	str	r3, [r4, #48]	; 0x30
 800c82e:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <std+0x68>)
 800c830:	6224      	str	r4, [r4, #32]
 800c832:	429c      	cmp	r4, r3
 800c834:	d006      	beq.n	800c844 <std+0x48>
 800c836:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c83a:	4294      	cmp	r4, r2
 800c83c:	d002      	beq.n	800c844 <std+0x48>
 800c83e:	33d0      	adds	r3, #208	; 0xd0
 800c840:	429c      	cmp	r4, r3
 800c842:	d105      	bne.n	800c850 <std+0x54>
 800c844:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c84c:	f000 ba7a 	b.w	800cd44 <__retarget_lock_init_recursive>
 800c850:	bd10      	pop	{r4, pc}
 800c852:	bf00      	nop
 800c854:	0800ca9d 	.word	0x0800ca9d
 800c858:	0800cabf 	.word	0x0800cabf
 800c85c:	0800caf7 	.word	0x0800caf7
 800c860:	0800cb1b 	.word	0x0800cb1b
 800c864:	20002728 	.word	0x20002728

0800c868 <stdio_exit_handler>:
 800c868:	4a02      	ldr	r2, [pc, #8]	; (800c874 <stdio_exit_handler+0xc>)
 800c86a:	4903      	ldr	r1, [pc, #12]	; (800c878 <stdio_exit_handler+0x10>)
 800c86c:	4803      	ldr	r0, [pc, #12]	; (800c87c <stdio_exit_handler+0x14>)
 800c86e:	f000 b869 	b.w	800c944 <_fwalk_sglue>
 800c872:	bf00      	nop
 800c874:	20000028 	.word	0x20000028
 800c878:	0800e999 	.word	0x0800e999
 800c87c:	20000034 	.word	0x20000034

0800c880 <cleanup_stdio>:
 800c880:	6841      	ldr	r1, [r0, #4]
 800c882:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <cleanup_stdio+0x34>)
 800c884:	4299      	cmp	r1, r3
 800c886:	b510      	push	{r4, lr}
 800c888:	4604      	mov	r4, r0
 800c88a:	d001      	beq.n	800c890 <cleanup_stdio+0x10>
 800c88c:	f002 f884 	bl	800e998 <_fflush_r>
 800c890:	68a1      	ldr	r1, [r4, #8]
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <cleanup_stdio+0x38>)
 800c894:	4299      	cmp	r1, r3
 800c896:	d002      	beq.n	800c89e <cleanup_stdio+0x1e>
 800c898:	4620      	mov	r0, r4
 800c89a:	f002 f87d 	bl	800e998 <_fflush_r>
 800c89e:	68e1      	ldr	r1, [r4, #12]
 800c8a0:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <cleanup_stdio+0x3c>)
 800c8a2:	4299      	cmp	r1, r3
 800c8a4:	d004      	beq.n	800c8b0 <cleanup_stdio+0x30>
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ac:	f002 b874 	b.w	800e998 <_fflush_r>
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20002728 	.word	0x20002728
 800c8b8:	20002790 	.word	0x20002790
 800c8bc:	200027f8 	.word	0x200027f8

0800c8c0 <global_stdio_init.part.0>:
 800c8c0:	b510      	push	{r4, lr}
 800c8c2:	4b0b      	ldr	r3, [pc, #44]	; (800c8f0 <global_stdio_init.part.0+0x30>)
 800c8c4:	4c0b      	ldr	r4, [pc, #44]	; (800c8f4 <global_stdio_init.part.0+0x34>)
 800c8c6:	4a0c      	ldr	r2, [pc, #48]	; (800c8f8 <global_stdio_init.part.0+0x38>)
 800c8c8:	601a      	str	r2, [r3, #0]
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2104      	movs	r1, #4
 800c8d0:	f7ff ff94 	bl	800c7fc <std>
 800c8d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c8d8:	2201      	movs	r2, #1
 800c8da:	2109      	movs	r1, #9
 800c8dc:	f7ff ff8e 	bl	800c7fc <std>
 800c8e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c8e4:	2202      	movs	r2, #2
 800c8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ea:	2112      	movs	r1, #18
 800c8ec:	f7ff bf86 	b.w	800c7fc <std>
 800c8f0:	20002860 	.word	0x20002860
 800c8f4:	20002728 	.word	0x20002728
 800c8f8:	0800c869 	.word	0x0800c869

0800c8fc <__sfp_lock_acquire>:
 800c8fc:	4801      	ldr	r0, [pc, #4]	; (800c904 <__sfp_lock_acquire+0x8>)
 800c8fe:	f000 ba22 	b.w	800cd46 <__retarget_lock_acquire_recursive>
 800c902:	bf00      	nop
 800c904:	20002869 	.word	0x20002869

0800c908 <__sfp_lock_release>:
 800c908:	4801      	ldr	r0, [pc, #4]	; (800c910 <__sfp_lock_release+0x8>)
 800c90a:	f000 ba1d 	b.w	800cd48 <__retarget_lock_release_recursive>
 800c90e:	bf00      	nop
 800c910:	20002869 	.word	0x20002869

0800c914 <__sinit>:
 800c914:	b510      	push	{r4, lr}
 800c916:	4604      	mov	r4, r0
 800c918:	f7ff fff0 	bl	800c8fc <__sfp_lock_acquire>
 800c91c:	6a23      	ldr	r3, [r4, #32]
 800c91e:	b11b      	cbz	r3, 800c928 <__sinit+0x14>
 800c920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c924:	f7ff bff0 	b.w	800c908 <__sfp_lock_release>
 800c928:	4b04      	ldr	r3, [pc, #16]	; (800c93c <__sinit+0x28>)
 800c92a:	6223      	str	r3, [r4, #32]
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <__sinit+0x2c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1f5      	bne.n	800c920 <__sinit+0xc>
 800c934:	f7ff ffc4 	bl	800c8c0 <global_stdio_init.part.0>
 800c938:	e7f2      	b.n	800c920 <__sinit+0xc>
 800c93a:	bf00      	nop
 800c93c:	0800c881 	.word	0x0800c881
 800c940:	20002860 	.word	0x20002860

0800c944 <_fwalk_sglue>:
 800c944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c948:	4607      	mov	r7, r0
 800c94a:	4688      	mov	r8, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	2600      	movs	r6, #0
 800c950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c954:	f1b9 0901 	subs.w	r9, r9, #1
 800c958:	d505      	bpl.n	800c966 <_fwalk_sglue+0x22>
 800c95a:	6824      	ldr	r4, [r4, #0]
 800c95c:	2c00      	cmp	r4, #0
 800c95e:	d1f7      	bne.n	800c950 <_fwalk_sglue+0xc>
 800c960:	4630      	mov	r0, r6
 800c962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d907      	bls.n	800c97c <_fwalk_sglue+0x38>
 800c96c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c970:	3301      	adds	r3, #1
 800c972:	d003      	beq.n	800c97c <_fwalk_sglue+0x38>
 800c974:	4629      	mov	r1, r5
 800c976:	4638      	mov	r0, r7
 800c978:	47c0      	blx	r8
 800c97a:	4306      	orrs	r6, r0
 800c97c:	3568      	adds	r5, #104	; 0x68
 800c97e:	e7e9      	b.n	800c954 <_fwalk_sglue+0x10>

0800c980 <iprintf>:
 800c980:	b40f      	push	{r0, r1, r2, r3}
 800c982:	b507      	push	{r0, r1, r2, lr}
 800c984:	4906      	ldr	r1, [pc, #24]	; (800c9a0 <iprintf+0x20>)
 800c986:	ab04      	add	r3, sp, #16
 800c988:	6808      	ldr	r0, [r1, #0]
 800c98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98e:	6881      	ldr	r1, [r0, #8]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f001 fe61 	bl	800e658 <_vfiprintf_r>
 800c996:	b003      	add	sp, #12
 800c998:	f85d eb04 	ldr.w	lr, [sp], #4
 800c99c:	b004      	add	sp, #16
 800c99e:	4770      	bx	lr
 800c9a0:	20000080 	.word	0x20000080

0800c9a4 <_puts_r>:
 800c9a4:	6a03      	ldr	r3, [r0, #32]
 800c9a6:	b570      	push	{r4, r5, r6, lr}
 800c9a8:	6884      	ldr	r4, [r0, #8]
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	460e      	mov	r6, r1
 800c9ae:	b90b      	cbnz	r3, 800c9b4 <_puts_r+0x10>
 800c9b0:	f7ff ffb0 	bl	800c914 <__sinit>
 800c9b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9b6:	07db      	lsls	r3, r3, #31
 800c9b8:	d405      	bmi.n	800c9c6 <_puts_r+0x22>
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	0598      	lsls	r0, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_puts_r+0x22>
 800c9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c2:	f000 f9c0 	bl	800cd46 <__retarget_lock_acquire_recursive>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	0719      	lsls	r1, r3, #28
 800c9ca:	d513      	bpl.n	800c9f4 <_puts_r+0x50>
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	b18b      	cbz	r3, 800c9f4 <_puts_r+0x50>
 800c9d0:	3e01      	subs	r6, #1
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	60a3      	str	r3, [r4, #8]
 800c9dc:	b9e9      	cbnz	r1, 800ca1a <_puts_r+0x76>
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	da2e      	bge.n	800ca40 <_puts_r+0x9c>
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	210a      	movs	r1, #10
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	f000 f89b 	bl	800cb22 <__swbuf_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d007      	beq.n	800ca00 <_puts_r+0x5c>
 800c9f0:	250a      	movs	r5, #10
 800c9f2:	e007      	b.n	800ca04 <_puts_r+0x60>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	f000 f8d0 	bl	800cb9c <__swsetup_r>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d0e7      	beq.n	800c9d0 <_puts_r+0x2c>
 800ca00:	f04f 35ff 	mov.w	r5, #4294967295
 800ca04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca06:	07da      	lsls	r2, r3, #31
 800ca08:	d405      	bmi.n	800ca16 <_puts_r+0x72>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	059b      	lsls	r3, r3, #22
 800ca0e:	d402      	bmi.n	800ca16 <_puts_r+0x72>
 800ca10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca12:	f000 f999 	bl	800cd48 <__retarget_lock_release_recursive>
 800ca16:	4628      	mov	r0, r5
 800ca18:	bd70      	pop	{r4, r5, r6, pc}
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	da04      	bge.n	800ca28 <_puts_r+0x84>
 800ca1e:	69a2      	ldr	r2, [r4, #24]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	dc06      	bgt.n	800ca32 <_puts_r+0x8e>
 800ca24:	290a      	cmp	r1, #10
 800ca26:	d004      	beq.n	800ca32 <_puts_r+0x8e>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	6022      	str	r2, [r4, #0]
 800ca2e:	7019      	strb	r1, [r3, #0]
 800ca30:	e7cf      	b.n	800c9d2 <_puts_r+0x2e>
 800ca32:	4622      	mov	r2, r4
 800ca34:	4628      	mov	r0, r5
 800ca36:	f000 f874 	bl	800cb22 <__swbuf_r>
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d1c9      	bne.n	800c9d2 <_puts_r+0x2e>
 800ca3e:	e7df      	b.n	800ca00 <_puts_r+0x5c>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	250a      	movs	r5, #10
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	6022      	str	r2, [r4, #0]
 800ca48:	701d      	strb	r5, [r3, #0]
 800ca4a:	e7db      	b.n	800ca04 <_puts_r+0x60>

0800ca4c <puts>:
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <puts+0xc>)
 800ca4e:	4601      	mov	r1, r0
 800ca50:	6818      	ldr	r0, [r3, #0]
 800ca52:	f7ff bfa7 	b.w	800c9a4 <_puts_r>
 800ca56:	bf00      	nop
 800ca58:	20000080 	.word	0x20000080

0800ca5c <siprintf>:
 800ca5c:	b40e      	push	{r1, r2, r3}
 800ca5e:	b500      	push	{lr}
 800ca60:	b09c      	sub	sp, #112	; 0x70
 800ca62:	ab1d      	add	r3, sp, #116	; 0x74
 800ca64:	9002      	str	r0, [sp, #8]
 800ca66:	9006      	str	r0, [sp, #24]
 800ca68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca6c:	4809      	ldr	r0, [pc, #36]	; (800ca94 <siprintf+0x38>)
 800ca6e:	9107      	str	r1, [sp, #28]
 800ca70:	9104      	str	r1, [sp, #16]
 800ca72:	4909      	ldr	r1, [pc, #36]	; (800ca98 <siprintf+0x3c>)
 800ca74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca78:	9105      	str	r1, [sp, #20]
 800ca7a:	6800      	ldr	r0, [r0, #0]
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	a902      	add	r1, sp, #8
 800ca80:	f001 fcc2 	bl	800e408 <_svfiprintf_r>
 800ca84:	9b02      	ldr	r3, [sp, #8]
 800ca86:	2200      	movs	r2, #0
 800ca88:	701a      	strb	r2, [r3, #0]
 800ca8a:	b01c      	add	sp, #112	; 0x70
 800ca8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca90:	b003      	add	sp, #12
 800ca92:	4770      	bx	lr
 800ca94:	20000080 	.word	0x20000080
 800ca98:	ffff0208 	.word	0xffff0208

0800ca9c <__sread>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	460c      	mov	r4, r1
 800caa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa4:	f000 f900 	bl	800cca8 <_read_r>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	bfab      	itete	ge
 800caac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caae:	89a3      	ldrhlt	r3, [r4, #12]
 800cab0:	181b      	addge	r3, r3, r0
 800cab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cab6:	bfac      	ite	ge
 800cab8:	6563      	strge	r3, [r4, #84]	; 0x54
 800caba:	81a3      	strhlt	r3, [r4, #12]
 800cabc:	bd10      	pop	{r4, pc}

0800cabe <__swrite>:
 800cabe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac2:	461f      	mov	r7, r3
 800cac4:	898b      	ldrh	r3, [r1, #12]
 800cac6:	05db      	lsls	r3, r3, #23
 800cac8:	4605      	mov	r5, r0
 800caca:	460c      	mov	r4, r1
 800cacc:	4616      	mov	r6, r2
 800cace:	d505      	bpl.n	800cadc <__swrite+0x1e>
 800cad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad4:	2302      	movs	r3, #2
 800cad6:	2200      	movs	r2, #0
 800cad8:	f000 f8d4 	bl	800cc84 <_lseek_r>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cae6:	81a3      	strh	r3, [r4, #12]
 800cae8:	4632      	mov	r2, r6
 800caea:	463b      	mov	r3, r7
 800caec:	4628      	mov	r0, r5
 800caee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caf2:	f000 b8eb 	b.w	800cccc <_write_r>

0800caf6 <__sseek>:
 800caf6:	b510      	push	{r4, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafe:	f000 f8c1 	bl	800cc84 <_lseek_r>
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	bf15      	itete	ne
 800cb08:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb12:	81a3      	strheq	r3, [r4, #12]
 800cb14:	bf18      	it	ne
 800cb16:	81a3      	strhne	r3, [r4, #12]
 800cb18:	bd10      	pop	{r4, pc}

0800cb1a <__sclose>:
 800cb1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1e:	f000 b8a1 	b.w	800cc64 <_close_r>

0800cb22 <__swbuf_r>:
 800cb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb24:	460e      	mov	r6, r1
 800cb26:	4614      	mov	r4, r2
 800cb28:	4605      	mov	r5, r0
 800cb2a:	b118      	cbz	r0, 800cb34 <__swbuf_r+0x12>
 800cb2c:	6a03      	ldr	r3, [r0, #32]
 800cb2e:	b90b      	cbnz	r3, 800cb34 <__swbuf_r+0x12>
 800cb30:	f7ff fef0 	bl	800c914 <__sinit>
 800cb34:	69a3      	ldr	r3, [r4, #24]
 800cb36:	60a3      	str	r3, [r4, #8]
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	071a      	lsls	r2, r3, #28
 800cb3c:	d525      	bpl.n	800cb8a <__swbuf_r+0x68>
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	b31b      	cbz	r3, 800cb8a <__swbuf_r+0x68>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	6922      	ldr	r2, [r4, #16]
 800cb46:	1a98      	subs	r0, r3, r2
 800cb48:	6963      	ldr	r3, [r4, #20]
 800cb4a:	b2f6      	uxtb	r6, r6
 800cb4c:	4283      	cmp	r3, r0
 800cb4e:	4637      	mov	r7, r6
 800cb50:	dc04      	bgt.n	800cb5c <__swbuf_r+0x3a>
 800cb52:	4621      	mov	r1, r4
 800cb54:	4628      	mov	r0, r5
 800cb56:	f001 ff1f 	bl	800e998 <_fflush_r>
 800cb5a:	b9e0      	cbnz	r0, 800cb96 <__swbuf_r+0x74>
 800cb5c:	68a3      	ldr	r3, [r4, #8]
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	60a3      	str	r3, [r4, #8]
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	1c5a      	adds	r2, r3, #1
 800cb66:	6022      	str	r2, [r4, #0]
 800cb68:	701e      	strb	r6, [r3, #0]
 800cb6a:	6962      	ldr	r2, [r4, #20]
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d004      	beq.n	800cb7c <__swbuf_r+0x5a>
 800cb72:	89a3      	ldrh	r3, [r4, #12]
 800cb74:	07db      	lsls	r3, r3, #31
 800cb76:	d506      	bpl.n	800cb86 <__swbuf_r+0x64>
 800cb78:	2e0a      	cmp	r6, #10
 800cb7a:	d104      	bne.n	800cb86 <__swbuf_r+0x64>
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	4628      	mov	r0, r5
 800cb80:	f001 ff0a 	bl	800e998 <_fflush_r>
 800cb84:	b938      	cbnz	r0, 800cb96 <__swbuf_r+0x74>
 800cb86:	4638      	mov	r0, r7
 800cb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f000 f805 	bl	800cb9c <__swsetup_r>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d0d5      	beq.n	800cb42 <__swbuf_r+0x20>
 800cb96:	f04f 37ff 	mov.w	r7, #4294967295
 800cb9a:	e7f4      	b.n	800cb86 <__swbuf_r+0x64>

0800cb9c <__swsetup_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	4b2a      	ldr	r3, [pc, #168]	; (800cc48 <__swsetup_r+0xac>)
 800cba0:	4605      	mov	r5, r0
 800cba2:	6818      	ldr	r0, [r3, #0]
 800cba4:	460c      	mov	r4, r1
 800cba6:	b118      	cbz	r0, 800cbb0 <__swsetup_r+0x14>
 800cba8:	6a03      	ldr	r3, [r0, #32]
 800cbaa:	b90b      	cbnz	r3, 800cbb0 <__swsetup_r+0x14>
 800cbac:	f7ff feb2 	bl	800c914 <__sinit>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbb6:	0718      	lsls	r0, r3, #28
 800cbb8:	d422      	bmi.n	800cc00 <__swsetup_r+0x64>
 800cbba:	06d9      	lsls	r1, r3, #27
 800cbbc:	d407      	bmi.n	800cbce <__swsetup_r+0x32>
 800cbbe:	2309      	movs	r3, #9
 800cbc0:	602b      	str	r3, [r5, #0]
 800cbc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbcc:	e034      	b.n	800cc38 <__swsetup_r+0x9c>
 800cbce:	0758      	lsls	r0, r3, #29
 800cbd0:	d512      	bpl.n	800cbf8 <__swsetup_r+0x5c>
 800cbd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd4:	b141      	cbz	r1, 800cbe8 <__swsetup_r+0x4c>
 800cbd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbda:	4299      	cmp	r1, r3
 800cbdc:	d002      	beq.n	800cbe4 <__swsetup_r+0x48>
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f000 ff3c 	bl	800da5c <_free_r>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	6363      	str	r3, [r4, #52]	; 0x34
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbee:	81a3      	strh	r3, [r4, #12]
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	6063      	str	r3, [r4, #4]
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f043 0308 	orr.w	r3, r3, #8
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b94b      	cbnz	r3, 800cc18 <__swsetup_r+0x7c>
 800cc04:	89a3      	ldrh	r3, [r4, #12]
 800cc06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc0e:	d003      	beq.n	800cc18 <__swsetup_r+0x7c>
 800cc10:	4621      	mov	r1, r4
 800cc12:	4628      	mov	r0, r5
 800cc14:	f001 ff0e 	bl	800ea34 <__smakebuf_r>
 800cc18:	89a0      	ldrh	r0, [r4, #12]
 800cc1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc1e:	f010 0301 	ands.w	r3, r0, #1
 800cc22:	d00a      	beq.n	800cc3a <__swsetup_r+0x9e>
 800cc24:	2300      	movs	r3, #0
 800cc26:	60a3      	str	r3, [r4, #8]
 800cc28:	6963      	ldr	r3, [r4, #20]
 800cc2a:	425b      	negs	r3, r3
 800cc2c:	61a3      	str	r3, [r4, #24]
 800cc2e:	6923      	ldr	r3, [r4, #16]
 800cc30:	b943      	cbnz	r3, 800cc44 <__swsetup_r+0xa8>
 800cc32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc36:	d1c4      	bne.n	800cbc2 <__swsetup_r+0x26>
 800cc38:	bd38      	pop	{r3, r4, r5, pc}
 800cc3a:	0781      	lsls	r1, r0, #30
 800cc3c:	bf58      	it	pl
 800cc3e:	6963      	ldrpl	r3, [r4, #20]
 800cc40:	60a3      	str	r3, [r4, #8]
 800cc42:	e7f4      	b.n	800cc2e <__swsetup_r+0x92>
 800cc44:	2000      	movs	r0, #0
 800cc46:	e7f7      	b.n	800cc38 <__swsetup_r+0x9c>
 800cc48:	20000080 	.word	0x20000080

0800cc4c <memset>:
 800cc4c:	4402      	add	r2, r0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d100      	bne.n	800cc56 <memset+0xa>
 800cc54:	4770      	bx	lr
 800cc56:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5a:	e7f9      	b.n	800cc50 <memset+0x4>

0800cc5c <_localeconv_r>:
 800cc5c:	4800      	ldr	r0, [pc, #0]	; (800cc60 <_localeconv_r+0x4>)
 800cc5e:	4770      	bx	lr
 800cc60:	20000174 	.word	0x20000174

0800cc64 <_close_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	4d06      	ldr	r5, [pc, #24]	; (800cc80 <_close_r+0x1c>)
 800cc68:	2300      	movs	r3, #0
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	4608      	mov	r0, r1
 800cc6e:	602b      	str	r3, [r5, #0]
 800cc70:	f7f6 f8ab 	bl	8002dca <_close>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d102      	bne.n	800cc7e <_close_r+0x1a>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	b103      	cbz	r3, 800cc7e <_close_r+0x1a>
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	20002864 	.word	0x20002864

0800cc84 <_lseek_r>:
 800cc84:	b538      	push	{r3, r4, r5, lr}
 800cc86:	4d07      	ldr	r5, [pc, #28]	; (800cca4 <_lseek_r+0x20>)
 800cc88:	4604      	mov	r4, r0
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	2200      	movs	r2, #0
 800cc90:	602a      	str	r2, [r5, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	f7f6 f8c0 	bl	8002e18 <_lseek>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d102      	bne.n	800cca2 <_lseek_r+0x1e>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	b103      	cbz	r3, 800cca2 <_lseek_r+0x1e>
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	20002864 	.word	0x20002864

0800cca8 <_read_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	; (800ccc8 <_read_r+0x20>)
 800ccac:	4604      	mov	r4, r0
 800ccae:	4608      	mov	r0, r1
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	602a      	str	r2, [r5, #0]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	f7f6 f84e 	bl	8002d58 <_read>
 800ccbc:	1c43      	adds	r3, r0, #1
 800ccbe:	d102      	bne.n	800ccc6 <_read_r+0x1e>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b103      	cbz	r3, 800ccc6 <_read_r+0x1e>
 800ccc4:	6023      	str	r3, [r4, #0]
 800ccc6:	bd38      	pop	{r3, r4, r5, pc}
 800ccc8:	20002864 	.word	0x20002864

0800cccc <_write_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d07      	ldr	r5, [pc, #28]	; (800ccec <_write_r+0x20>)
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	4608      	mov	r0, r1
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	602a      	str	r2, [r5, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f7f6 f859 	bl	8002d92 <_write>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <_write_r+0x1e>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	b103      	cbz	r3, 800ccea <_write_r+0x1e>
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	20002864 	.word	0x20002864

0800ccf0 <__errno>:
 800ccf0:	4b01      	ldr	r3, [pc, #4]	; (800ccf8 <__errno+0x8>)
 800ccf2:	6818      	ldr	r0, [r3, #0]
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	20000080 	.word	0x20000080

0800ccfc <__libc_init_array>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	4d0d      	ldr	r5, [pc, #52]	; (800cd34 <__libc_init_array+0x38>)
 800cd00:	4c0d      	ldr	r4, [pc, #52]	; (800cd38 <__libc_init_array+0x3c>)
 800cd02:	1b64      	subs	r4, r4, r5
 800cd04:	10a4      	asrs	r4, r4, #2
 800cd06:	2600      	movs	r6, #0
 800cd08:	42a6      	cmp	r6, r4
 800cd0a:	d109      	bne.n	800cd20 <__libc_init_array+0x24>
 800cd0c:	4d0b      	ldr	r5, [pc, #44]	; (800cd3c <__libc_init_array+0x40>)
 800cd0e:	4c0c      	ldr	r4, [pc, #48]	; (800cd40 <__libc_init_array+0x44>)
 800cd10:	f002 f882 	bl	800ee18 <_init>
 800cd14:	1b64      	subs	r4, r4, r5
 800cd16:	10a4      	asrs	r4, r4, #2
 800cd18:	2600      	movs	r6, #0
 800cd1a:	42a6      	cmp	r6, r4
 800cd1c:	d105      	bne.n	800cd2a <__libc_init_array+0x2e>
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd24:	4798      	blx	r3
 800cd26:	3601      	adds	r6, #1
 800cd28:	e7ee      	b.n	800cd08 <__libc_init_array+0xc>
 800cd2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd2e:	4798      	blx	r3
 800cd30:	3601      	adds	r6, #1
 800cd32:	e7f2      	b.n	800cd1a <__libc_init_array+0x1e>
 800cd34:	0800f95c 	.word	0x0800f95c
 800cd38:	0800f95c 	.word	0x0800f95c
 800cd3c:	0800f95c 	.word	0x0800f95c
 800cd40:	0800f960 	.word	0x0800f960

0800cd44 <__retarget_lock_init_recursive>:
 800cd44:	4770      	bx	lr

0800cd46 <__retarget_lock_acquire_recursive>:
 800cd46:	4770      	bx	lr

0800cd48 <__retarget_lock_release_recursive>:
 800cd48:	4770      	bx	lr

0800cd4a <memcpy>:
 800cd4a:	440a      	add	r2, r1
 800cd4c:	4291      	cmp	r1, r2
 800cd4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd52:	d100      	bne.n	800cd56 <memcpy+0xc>
 800cd54:	4770      	bx	lr
 800cd56:	b510      	push	{r4, lr}
 800cd58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd60:	4291      	cmp	r1, r2
 800cd62:	d1f9      	bne.n	800cd58 <memcpy+0xe>
 800cd64:	bd10      	pop	{r4, pc}

0800cd66 <quorem>:
 800cd66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6a:	6903      	ldr	r3, [r0, #16]
 800cd6c:	690c      	ldr	r4, [r1, #16]
 800cd6e:	42a3      	cmp	r3, r4
 800cd70:	4607      	mov	r7, r0
 800cd72:	db7e      	blt.n	800ce72 <quorem+0x10c>
 800cd74:	3c01      	subs	r4, #1
 800cd76:	f101 0814 	add.w	r8, r1, #20
 800cd7a:	f100 0514 	add.w	r5, r0, #20
 800cd7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd82:	9301      	str	r3, [sp, #4]
 800cd84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd98:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd9c:	d331      	bcc.n	800ce02 <quorem+0x9c>
 800cd9e:	f04f 0e00 	mov.w	lr, #0
 800cda2:	4640      	mov	r0, r8
 800cda4:	46ac      	mov	ip, r5
 800cda6:	46f2      	mov	sl, lr
 800cda8:	f850 2b04 	ldr.w	r2, [r0], #4
 800cdac:	b293      	uxth	r3, r2
 800cdae:	fb06 e303 	mla	r3, r6, r3, lr
 800cdb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdb6:	0c1a      	lsrs	r2, r3, #16
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	ebaa 0303 	sub.w	r3, sl, r3
 800cdbe:	f8dc a000 	ldr.w	sl, [ip]
 800cdc2:	fa13 f38a 	uxtah	r3, r3, sl
 800cdc6:	fb06 220e 	mla	r2, r6, lr, r2
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	9b00      	ldr	r3, [sp, #0]
 800cdce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cdd2:	b292      	uxth	r2, r2
 800cdd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cdd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cddc:	f8bd 3000 	ldrh.w	r3, [sp]
 800cde0:	4581      	cmp	r9, r0
 800cde2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cde6:	f84c 3b04 	str.w	r3, [ip], #4
 800cdea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cdee:	d2db      	bcs.n	800cda8 <quorem+0x42>
 800cdf0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cdf4:	b92b      	cbnz	r3, 800ce02 <quorem+0x9c>
 800cdf6:	9b01      	ldr	r3, [sp, #4]
 800cdf8:	3b04      	subs	r3, #4
 800cdfa:	429d      	cmp	r5, r3
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	d32c      	bcc.n	800ce5a <quorem+0xf4>
 800ce00:	613c      	str	r4, [r7, #16]
 800ce02:	4638      	mov	r0, r7
 800ce04:	f001 f9a6 	bl	800e154 <__mcmp>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	db22      	blt.n	800ce52 <quorem+0xec>
 800ce0c:	3601      	adds	r6, #1
 800ce0e:	4629      	mov	r1, r5
 800ce10:	2000      	movs	r0, #0
 800ce12:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce16:	f8d1 c000 	ldr.w	ip, [r1]
 800ce1a:	b293      	uxth	r3, r2
 800ce1c:	1ac3      	subs	r3, r0, r3
 800ce1e:	0c12      	lsrs	r2, r2, #16
 800ce20:	fa13 f38c 	uxtah	r3, r3, ip
 800ce24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ce28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce32:	45c1      	cmp	r9, r8
 800ce34:	f841 3b04 	str.w	r3, [r1], #4
 800ce38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ce3c:	d2e9      	bcs.n	800ce12 <quorem+0xac>
 800ce3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce46:	b922      	cbnz	r2, 800ce52 <quorem+0xec>
 800ce48:	3b04      	subs	r3, #4
 800ce4a:	429d      	cmp	r5, r3
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	d30a      	bcc.n	800ce66 <quorem+0x100>
 800ce50:	613c      	str	r4, [r7, #16]
 800ce52:	4630      	mov	r0, r6
 800ce54:	b003      	add	sp, #12
 800ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5a:	6812      	ldr	r2, [r2, #0]
 800ce5c:	3b04      	subs	r3, #4
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	d1ce      	bne.n	800ce00 <quorem+0x9a>
 800ce62:	3c01      	subs	r4, #1
 800ce64:	e7c9      	b.n	800cdfa <quorem+0x94>
 800ce66:	6812      	ldr	r2, [r2, #0]
 800ce68:	3b04      	subs	r3, #4
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	d1f0      	bne.n	800ce50 <quorem+0xea>
 800ce6e:	3c01      	subs	r4, #1
 800ce70:	e7eb      	b.n	800ce4a <quorem+0xe4>
 800ce72:	2000      	movs	r0, #0
 800ce74:	e7ee      	b.n	800ce54 <quorem+0xee>
	...

0800ce78 <_dtoa_r>:
 800ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	ed2d 8b04 	vpush	{d8-d9}
 800ce80:	69c5      	ldr	r5, [r0, #28]
 800ce82:	b093      	sub	sp, #76	; 0x4c
 800ce84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ce88:	ec57 6b10 	vmov	r6, r7, d0
 800ce8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce90:	9107      	str	r1, [sp, #28]
 800ce92:	4604      	mov	r4, r0
 800ce94:	920a      	str	r2, [sp, #40]	; 0x28
 800ce96:	930d      	str	r3, [sp, #52]	; 0x34
 800ce98:	b975      	cbnz	r5, 800ceb8 <_dtoa_r+0x40>
 800ce9a:	2010      	movs	r0, #16
 800ce9c:	f000 fe2a 	bl	800daf4 <malloc>
 800cea0:	4602      	mov	r2, r0
 800cea2:	61e0      	str	r0, [r4, #28]
 800cea4:	b920      	cbnz	r0, 800ceb0 <_dtoa_r+0x38>
 800cea6:	4bae      	ldr	r3, [pc, #696]	; (800d160 <_dtoa_r+0x2e8>)
 800cea8:	21ef      	movs	r1, #239	; 0xef
 800ceaa:	48ae      	ldr	r0, [pc, #696]	; (800d164 <_dtoa_r+0x2ec>)
 800ceac:	f001 fe4a 	bl	800eb44 <__assert_func>
 800ceb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ceb4:	6005      	str	r5, [r0, #0]
 800ceb6:	60c5      	str	r5, [r0, #12]
 800ceb8:	69e3      	ldr	r3, [r4, #28]
 800ceba:	6819      	ldr	r1, [r3, #0]
 800cebc:	b151      	cbz	r1, 800ced4 <_dtoa_r+0x5c>
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	604a      	str	r2, [r1, #4]
 800cec2:	2301      	movs	r3, #1
 800cec4:	4093      	lsls	r3, r2
 800cec6:	608b      	str	r3, [r1, #8]
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 ff07 	bl	800dcdc <_Bfree>
 800cece:	69e3      	ldr	r3, [r4, #28]
 800ced0:	2200      	movs	r2, #0
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	1e3b      	subs	r3, r7, #0
 800ced6:	bfbb      	ittet	lt
 800ced8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cedc:	9303      	strlt	r3, [sp, #12]
 800cede:	2300      	movge	r3, #0
 800cee0:	2201      	movlt	r2, #1
 800cee2:	bfac      	ite	ge
 800cee4:	f8c8 3000 	strge.w	r3, [r8]
 800cee8:	f8c8 2000 	strlt.w	r2, [r8]
 800ceec:	4b9e      	ldr	r3, [pc, #632]	; (800d168 <_dtoa_r+0x2f0>)
 800ceee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cef2:	ea33 0308 	bics.w	r3, r3, r8
 800cef6:	d11b      	bne.n	800cf30 <_dtoa_r+0xb8>
 800cef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cefa:	f242 730f 	movw	r3, #9999	; 0x270f
 800cefe:	6013      	str	r3, [r2, #0]
 800cf00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cf04:	4333      	orrs	r3, r6
 800cf06:	f000 8593 	beq.w	800da30 <_dtoa_r+0xbb8>
 800cf0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf0c:	b963      	cbnz	r3, 800cf28 <_dtoa_r+0xb0>
 800cf0e:	4b97      	ldr	r3, [pc, #604]	; (800d16c <_dtoa_r+0x2f4>)
 800cf10:	e027      	b.n	800cf62 <_dtoa_r+0xea>
 800cf12:	4b97      	ldr	r3, [pc, #604]	; (800d170 <_dtoa_r+0x2f8>)
 800cf14:	9300      	str	r3, [sp, #0]
 800cf16:	3308      	adds	r3, #8
 800cf18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	9800      	ldr	r0, [sp, #0]
 800cf1e:	b013      	add	sp, #76	; 0x4c
 800cf20:	ecbd 8b04 	vpop	{d8-d9}
 800cf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf28:	4b90      	ldr	r3, [pc, #576]	; (800d16c <_dtoa_r+0x2f4>)
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	3303      	adds	r3, #3
 800cf2e:	e7f3      	b.n	800cf18 <_dtoa_r+0xa0>
 800cf30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf34:	2200      	movs	r2, #0
 800cf36:	ec51 0b17 	vmov	r0, r1, d7
 800cf3a:	eeb0 8a47 	vmov.f32	s16, s14
 800cf3e:	eef0 8a67 	vmov.f32	s17, s15
 800cf42:	2300      	movs	r3, #0
 800cf44:	f7f3 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf48:	4681      	mov	r9, r0
 800cf4a:	b160      	cbz	r0, 800cf66 <_dtoa_r+0xee>
 800cf4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf4e:	2301      	movs	r3, #1
 800cf50:	6013      	str	r3, [r2, #0]
 800cf52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f000 8568 	beq.w	800da2a <_dtoa_r+0xbb2>
 800cf5a:	4b86      	ldr	r3, [pc, #536]	; (800d174 <_dtoa_r+0x2fc>)
 800cf5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	9300      	str	r3, [sp, #0]
 800cf64:	e7da      	b.n	800cf1c <_dtoa_r+0xa4>
 800cf66:	aa10      	add	r2, sp, #64	; 0x40
 800cf68:	a911      	add	r1, sp, #68	; 0x44
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	eeb0 0a48 	vmov.f32	s0, s16
 800cf70:	eef0 0a68 	vmov.f32	s1, s17
 800cf74:	f001 f994 	bl	800e2a0 <__d2b>
 800cf78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	2d00      	cmp	r5, #0
 800cf80:	d07f      	beq.n	800d082 <_dtoa_r+0x20a>
 800cf82:	ee18 3a90 	vmov	r3, s17
 800cf86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cf8e:	ec51 0b18 	vmov	r0, r1, d8
 800cf92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	4b75      	ldr	r3, [pc, #468]	; (800d178 <_dtoa_r+0x300>)
 800cfa4:	f7f3 f970 	bl	8000288 <__aeabi_dsub>
 800cfa8:	a367      	add	r3, pc, #412	; (adr r3, 800d148 <_dtoa_r+0x2d0>)
 800cfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfae:	f7f3 fb23 	bl	80005f8 <__aeabi_dmul>
 800cfb2:	a367      	add	r3, pc, #412	; (adr r3, 800d150 <_dtoa_r+0x2d8>)
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f7f3 f968 	bl	800028c <__adddf3>
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	460f      	mov	r7, r1
 800cfc2:	f7f3 faaf 	bl	8000524 <__aeabi_i2d>
 800cfc6:	a364      	add	r3, pc, #400	; (adr r3, 800d158 <_dtoa_r+0x2e0>)
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	f7f3 fb14 	bl	80005f8 <__aeabi_dmul>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	f7f3 f958 	bl	800028c <__adddf3>
 800cfdc:	4606      	mov	r6, r0
 800cfde:	460f      	mov	r7, r1
 800cfe0:	f7f3 fdba 	bl	8000b58 <__aeabi_d2iz>
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4683      	mov	fp, r0
 800cfe8:	2300      	movs	r3, #0
 800cfea:	4630      	mov	r0, r6
 800cfec:	4639      	mov	r1, r7
 800cfee:	f7f3 fd75 	bl	8000adc <__aeabi_dcmplt>
 800cff2:	b148      	cbz	r0, 800d008 <_dtoa_r+0x190>
 800cff4:	4658      	mov	r0, fp
 800cff6:	f7f3 fa95 	bl	8000524 <__aeabi_i2d>
 800cffa:	4632      	mov	r2, r6
 800cffc:	463b      	mov	r3, r7
 800cffe:	f7f3 fd63 	bl	8000ac8 <__aeabi_dcmpeq>
 800d002:	b908      	cbnz	r0, 800d008 <_dtoa_r+0x190>
 800d004:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d008:	f1bb 0f16 	cmp.w	fp, #22
 800d00c:	d857      	bhi.n	800d0be <_dtoa_r+0x246>
 800d00e:	4b5b      	ldr	r3, [pc, #364]	; (800d17c <_dtoa_r+0x304>)
 800d010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	ec51 0b18 	vmov	r0, r1, d8
 800d01c:	f7f3 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800d020:	2800      	cmp	r0, #0
 800d022:	d04e      	beq.n	800d0c2 <_dtoa_r+0x24a>
 800d024:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d028:	2300      	movs	r3, #0
 800d02a:	930c      	str	r3, [sp, #48]	; 0x30
 800d02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d02e:	1b5b      	subs	r3, r3, r5
 800d030:	1e5a      	subs	r2, r3, #1
 800d032:	bf45      	ittet	mi
 800d034:	f1c3 0301 	rsbmi	r3, r3, #1
 800d038:	9305      	strmi	r3, [sp, #20]
 800d03a:	2300      	movpl	r3, #0
 800d03c:	2300      	movmi	r3, #0
 800d03e:	9206      	str	r2, [sp, #24]
 800d040:	bf54      	ite	pl
 800d042:	9305      	strpl	r3, [sp, #20]
 800d044:	9306      	strmi	r3, [sp, #24]
 800d046:	f1bb 0f00 	cmp.w	fp, #0
 800d04a:	db3c      	blt.n	800d0c6 <_dtoa_r+0x24e>
 800d04c:	9b06      	ldr	r3, [sp, #24]
 800d04e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d052:	445b      	add	r3, fp
 800d054:	9306      	str	r3, [sp, #24]
 800d056:	2300      	movs	r3, #0
 800d058:	9308      	str	r3, [sp, #32]
 800d05a:	9b07      	ldr	r3, [sp, #28]
 800d05c:	2b09      	cmp	r3, #9
 800d05e:	d868      	bhi.n	800d132 <_dtoa_r+0x2ba>
 800d060:	2b05      	cmp	r3, #5
 800d062:	bfc4      	itt	gt
 800d064:	3b04      	subgt	r3, #4
 800d066:	9307      	strgt	r3, [sp, #28]
 800d068:	9b07      	ldr	r3, [sp, #28]
 800d06a:	f1a3 0302 	sub.w	r3, r3, #2
 800d06e:	bfcc      	ite	gt
 800d070:	2500      	movgt	r5, #0
 800d072:	2501      	movle	r5, #1
 800d074:	2b03      	cmp	r3, #3
 800d076:	f200 8085 	bhi.w	800d184 <_dtoa_r+0x30c>
 800d07a:	e8df f003 	tbb	[pc, r3]
 800d07e:	3b2e      	.short	0x3b2e
 800d080:	5839      	.short	0x5839
 800d082:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d086:	441d      	add	r5, r3
 800d088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d08c:	2b20      	cmp	r3, #32
 800d08e:	bfc1      	itttt	gt
 800d090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d094:	fa08 f803 	lslgt.w	r8, r8, r3
 800d098:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d09c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d0a0:	bfd6      	itet	le
 800d0a2:	f1c3 0320 	rsble	r3, r3, #32
 800d0a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d0aa:	fa06 f003 	lslle.w	r0, r6, r3
 800d0ae:	f7f3 fa29 	bl	8000504 <__aeabi_ui2d>
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d0b8:	3d01      	subs	r5, #1
 800d0ba:	920e      	str	r2, [sp, #56]	; 0x38
 800d0bc:	e76f      	b.n	800cf9e <_dtoa_r+0x126>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e7b3      	b.n	800d02a <_dtoa_r+0x1b2>
 800d0c2:	900c      	str	r0, [sp, #48]	; 0x30
 800d0c4:	e7b2      	b.n	800d02c <_dtoa_r+0x1b4>
 800d0c6:	9b05      	ldr	r3, [sp, #20]
 800d0c8:	eba3 030b 	sub.w	r3, r3, fp
 800d0cc:	9305      	str	r3, [sp, #20]
 800d0ce:	f1cb 0300 	rsb	r3, fp, #0
 800d0d2:	9308      	str	r3, [sp, #32]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0d8:	e7bf      	b.n	800d05a <_dtoa_r+0x1e2>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dc52      	bgt.n	800d18a <_dtoa_r+0x312>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	9304      	str	r3, [sp, #16]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	920a      	str	r2, [sp, #40]	; 0x28
 800d0ee:	e00b      	b.n	800d108 <_dtoa_r+0x290>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e7f3      	b.n	800d0dc <_dtoa_r+0x264>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0fa:	445b      	add	r3, fp
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	3301      	adds	r3, #1
 800d100:	2b01      	cmp	r3, #1
 800d102:	9304      	str	r3, [sp, #16]
 800d104:	bfb8      	it	lt
 800d106:	2301      	movlt	r3, #1
 800d108:	69e0      	ldr	r0, [r4, #28]
 800d10a:	2100      	movs	r1, #0
 800d10c:	2204      	movs	r2, #4
 800d10e:	f102 0614 	add.w	r6, r2, #20
 800d112:	429e      	cmp	r6, r3
 800d114:	d93d      	bls.n	800d192 <_dtoa_r+0x31a>
 800d116:	6041      	str	r1, [r0, #4]
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 fd9f 	bl	800dc5c <_Balloc>
 800d11e:	9000      	str	r0, [sp, #0]
 800d120:	2800      	cmp	r0, #0
 800d122:	d139      	bne.n	800d198 <_dtoa_r+0x320>
 800d124:	4b16      	ldr	r3, [pc, #88]	; (800d180 <_dtoa_r+0x308>)
 800d126:	4602      	mov	r2, r0
 800d128:	f240 11af 	movw	r1, #431	; 0x1af
 800d12c:	e6bd      	b.n	800ceaa <_dtoa_r+0x32>
 800d12e:	2301      	movs	r3, #1
 800d130:	e7e1      	b.n	800d0f6 <_dtoa_r+0x27e>
 800d132:	2501      	movs	r5, #1
 800d134:	2300      	movs	r3, #0
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	9509      	str	r5, [sp, #36]	; 0x24
 800d13a:	f04f 33ff 	mov.w	r3, #4294967295
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	9304      	str	r3, [sp, #16]
 800d142:	2200      	movs	r2, #0
 800d144:	2312      	movs	r3, #18
 800d146:	e7d1      	b.n	800d0ec <_dtoa_r+0x274>
 800d148:	636f4361 	.word	0x636f4361
 800d14c:	3fd287a7 	.word	0x3fd287a7
 800d150:	8b60c8b3 	.word	0x8b60c8b3
 800d154:	3fc68a28 	.word	0x3fc68a28
 800d158:	509f79fb 	.word	0x509f79fb
 800d15c:	3fd34413 	.word	0x3fd34413
 800d160:	0800f722 	.word	0x0800f722
 800d164:	0800f739 	.word	0x0800f739
 800d168:	7ff00000 	.word	0x7ff00000
 800d16c:	0800f71e 	.word	0x0800f71e
 800d170:	0800f715 	.word	0x0800f715
 800d174:	0800f6f2 	.word	0x0800f6f2
 800d178:	3ff80000 	.word	0x3ff80000
 800d17c:	0800f828 	.word	0x0800f828
 800d180:	0800f791 	.word	0x0800f791
 800d184:	2301      	movs	r3, #1
 800d186:	9309      	str	r3, [sp, #36]	; 0x24
 800d188:	e7d7      	b.n	800d13a <_dtoa_r+0x2c2>
 800d18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	e7ba      	b.n	800d108 <_dtoa_r+0x290>
 800d192:	3101      	adds	r1, #1
 800d194:	0052      	lsls	r2, r2, #1
 800d196:	e7ba      	b.n	800d10e <_dtoa_r+0x296>
 800d198:	69e3      	ldr	r3, [r4, #28]
 800d19a:	9a00      	ldr	r2, [sp, #0]
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	9b04      	ldr	r3, [sp, #16]
 800d1a0:	2b0e      	cmp	r3, #14
 800d1a2:	f200 80a8 	bhi.w	800d2f6 <_dtoa_r+0x47e>
 800d1a6:	2d00      	cmp	r5, #0
 800d1a8:	f000 80a5 	beq.w	800d2f6 <_dtoa_r+0x47e>
 800d1ac:	f1bb 0f00 	cmp.w	fp, #0
 800d1b0:	dd38      	ble.n	800d224 <_dtoa_r+0x3ac>
 800d1b2:	4bc0      	ldr	r3, [pc, #768]	; (800d4b4 <_dtoa_r+0x63c>)
 800d1b4:	f00b 020f 	and.w	r2, fp, #15
 800d1b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d1c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d1c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d1c8:	d019      	beq.n	800d1fe <_dtoa_r+0x386>
 800d1ca:	4bbb      	ldr	r3, [pc, #748]	; (800d4b8 <_dtoa_r+0x640>)
 800d1cc:	ec51 0b18 	vmov	r0, r1, d8
 800d1d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d1d4:	f7f3 fb3a 	bl	800084c <__aeabi_ddiv>
 800d1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1dc:	f008 080f 	and.w	r8, r8, #15
 800d1e0:	2503      	movs	r5, #3
 800d1e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d4b8 <_dtoa_r+0x640>
 800d1e6:	f1b8 0f00 	cmp.w	r8, #0
 800d1ea:	d10a      	bne.n	800d202 <_dtoa_r+0x38a>
 800d1ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	463b      	mov	r3, r7
 800d1f4:	f7f3 fb2a 	bl	800084c <__aeabi_ddiv>
 800d1f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1fc:	e02b      	b.n	800d256 <_dtoa_r+0x3de>
 800d1fe:	2502      	movs	r5, #2
 800d200:	e7ef      	b.n	800d1e2 <_dtoa_r+0x36a>
 800d202:	f018 0f01 	tst.w	r8, #1
 800d206:	d008      	beq.n	800d21a <_dtoa_r+0x3a2>
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d210:	f7f3 f9f2 	bl	80005f8 <__aeabi_dmul>
 800d214:	3501      	adds	r5, #1
 800d216:	4606      	mov	r6, r0
 800d218:	460f      	mov	r7, r1
 800d21a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d21e:	f109 0908 	add.w	r9, r9, #8
 800d222:	e7e0      	b.n	800d1e6 <_dtoa_r+0x36e>
 800d224:	f000 809f 	beq.w	800d366 <_dtoa_r+0x4ee>
 800d228:	f1cb 0600 	rsb	r6, fp, #0
 800d22c:	4ba1      	ldr	r3, [pc, #644]	; (800d4b4 <_dtoa_r+0x63c>)
 800d22e:	4fa2      	ldr	r7, [pc, #648]	; (800d4b8 <_dtoa_r+0x640>)
 800d230:	f006 020f 	and.w	r2, r6, #15
 800d234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23c:	ec51 0b18 	vmov	r0, r1, d8
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d248:	1136      	asrs	r6, r6, #4
 800d24a:	2300      	movs	r3, #0
 800d24c:	2502      	movs	r5, #2
 800d24e:	2e00      	cmp	r6, #0
 800d250:	d17e      	bne.n	800d350 <_dtoa_r+0x4d8>
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1d0      	bne.n	800d1f8 <_dtoa_r+0x380>
 800d256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d258:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 8084 	beq.w	800d36a <_dtoa_r+0x4f2>
 800d262:	4b96      	ldr	r3, [pc, #600]	; (800d4bc <_dtoa_r+0x644>)
 800d264:	2200      	movs	r2, #0
 800d266:	4640      	mov	r0, r8
 800d268:	4649      	mov	r1, r9
 800d26a:	f7f3 fc37 	bl	8000adc <__aeabi_dcmplt>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d07b      	beq.n	800d36a <_dtoa_r+0x4f2>
 800d272:	9b04      	ldr	r3, [sp, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d078      	beq.n	800d36a <_dtoa_r+0x4f2>
 800d278:	9b01      	ldr	r3, [sp, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	dd39      	ble.n	800d2f2 <_dtoa_r+0x47a>
 800d27e:	4b90      	ldr	r3, [pc, #576]	; (800d4c0 <_dtoa_r+0x648>)
 800d280:	2200      	movs	r2, #0
 800d282:	4640      	mov	r0, r8
 800d284:	4649      	mov	r1, r9
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d28e:	9e01      	ldr	r6, [sp, #4]
 800d290:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d294:	3501      	adds	r5, #1
 800d296:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d29a:	4628      	mov	r0, r5
 800d29c:	f7f3 f942 	bl	8000524 <__aeabi_i2d>
 800d2a0:	4642      	mov	r2, r8
 800d2a2:	464b      	mov	r3, r9
 800d2a4:	f7f3 f9a8 	bl	80005f8 <__aeabi_dmul>
 800d2a8:	4b86      	ldr	r3, [pc, #536]	; (800d4c4 <_dtoa_r+0x64c>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f7f2 ffee 	bl	800028c <__adddf3>
 800d2b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2b8:	9303      	str	r3, [sp, #12]
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	d158      	bne.n	800d370 <_dtoa_r+0x4f8>
 800d2be:	4b82      	ldr	r3, [pc, #520]	; (800d4c8 <_dtoa_r+0x650>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	f7f2 ffdf 	bl	8000288 <__aeabi_dsub>
 800d2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2ce:	4680      	mov	r8, r0
 800d2d0:	4689      	mov	r9, r1
 800d2d2:	f7f3 fc21 	bl	8000b18 <__aeabi_dcmpgt>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	f040 8296 	bne.w	800d808 <_dtoa_r+0x990>
 800d2dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	f7f3 fbf8 	bl	8000adc <__aeabi_dcmplt>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	f040 8289 	bne.w	800d804 <_dtoa_r+0x98c>
 800d2f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d2f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f2c0 814e 	blt.w	800d59a <_dtoa_r+0x722>
 800d2fe:	f1bb 0f0e 	cmp.w	fp, #14
 800d302:	f300 814a 	bgt.w	800d59a <_dtoa_r+0x722>
 800d306:	4b6b      	ldr	r3, [pc, #428]	; (800d4b4 <_dtoa_r+0x63c>)
 800d308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d30c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	f280 80dc 	bge.w	800d4d0 <_dtoa_r+0x658>
 800d318:	9b04      	ldr	r3, [sp, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f300 80d8 	bgt.w	800d4d0 <_dtoa_r+0x658>
 800d320:	f040 826f 	bne.w	800d802 <_dtoa_r+0x98a>
 800d324:	4b68      	ldr	r3, [pc, #416]	; (800d4c8 <_dtoa_r+0x650>)
 800d326:	2200      	movs	r2, #0
 800d328:	4640      	mov	r0, r8
 800d32a:	4649      	mov	r1, r9
 800d32c:	f7f3 f964 	bl	80005f8 <__aeabi_dmul>
 800d330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d334:	f7f3 fbe6 	bl	8000b04 <__aeabi_dcmpge>
 800d338:	9e04      	ldr	r6, [sp, #16]
 800d33a:	4637      	mov	r7, r6
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f040 8245 	bne.w	800d7cc <_dtoa_r+0x954>
 800d342:	9d00      	ldr	r5, [sp, #0]
 800d344:	2331      	movs	r3, #49	; 0x31
 800d346:	f805 3b01 	strb.w	r3, [r5], #1
 800d34a:	f10b 0b01 	add.w	fp, fp, #1
 800d34e:	e241      	b.n	800d7d4 <_dtoa_r+0x95c>
 800d350:	07f2      	lsls	r2, r6, #31
 800d352:	d505      	bpl.n	800d360 <_dtoa_r+0x4e8>
 800d354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d358:	f7f3 f94e 	bl	80005f8 <__aeabi_dmul>
 800d35c:	3501      	adds	r5, #1
 800d35e:	2301      	movs	r3, #1
 800d360:	1076      	asrs	r6, r6, #1
 800d362:	3708      	adds	r7, #8
 800d364:	e773      	b.n	800d24e <_dtoa_r+0x3d6>
 800d366:	2502      	movs	r5, #2
 800d368:	e775      	b.n	800d256 <_dtoa_r+0x3de>
 800d36a:	9e04      	ldr	r6, [sp, #16]
 800d36c:	465f      	mov	r7, fp
 800d36e:	e792      	b.n	800d296 <_dtoa_r+0x41e>
 800d370:	9900      	ldr	r1, [sp, #0]
 800d372:	4b50      	ldr	r3, [pc, #320]	; (800d4b4 <_dtoa_r+0x63c>)
 800d374:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d378:	4431      	add	r1, r6
 800d37a:	9102      	str	r1, [sp, #8]
 800d37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d37e:	eeb0 9a47 	vmov.f32	s18, s14
 800d382:	eef0 9a67 	vmov.f32	s19, s15
 800d386:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d38a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d38e:	2900      	cmp	r1, #0
 800d390:	d044      	beq.n	800d41c <_dtoa_r+0x5a4>
 800d392:	494e      	ldr	r1, [pc, #312]	; (800d4cc <_dtoa_r+0x654>)
 800d394:	2000      	movs	r0, #0
 800d396:	f7f3 fa59 	bl	800084c <__aeabi_ddiv>
 800d39a:	ec53 2b19 	vmov	r2, r3, d9
 800d39e:	f7f2 ff73 	bl	8000288 <__aeabi_dsub>
 800d3a2:	9d00      	ldr	r5, [sp, #0]
 800d3a4:	ec41 0b19 	vmov	d9, r0, r1
 800d3a8:	4649      	mov	r1, r9
 800d3aa:	4640      	mov	r0, r8
 800d3ac:	f7f3 fbd4 	bl	8000b58 <__aeabi_d2iz>
 800d3b0:	4606      	mov	r6, r0
 800d3b2:	f7f3 f8b7 	bl	8000524 <__aeabi_i2d>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	f7f2 ff63 	bl	8000288 <__aeabi_dsub>
 800d3c2:	3630      	adds	r6, #48	; 0x30
 800d3c4:	f805 6b01 	strb.w	r6, [r5], #1
 800d3c8:	ec53 2b19 	vmov	r2, r3, d9
 800d3cc:	4680      	mov	r8, r0
 800d3ce:	4689      	mov	r9, r1
 800d3d0:	f7f3 fb84 	bl	8000adc <__aeabi_dcmplt>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d164      	bne.n	800d4a2 <_dtoa_r+0x62a>
 800d3d8:	4642      	mov	r2, r8
 800d3da:	464b      	mov	r3, r9
 800d3dc:	4937      	ldr	r1, [pc, #220]	; (800d4bc <_dtoa_r+0x644>)
 800d3de:	2000      	movs	r0, #0
 800d3e0:	f7f2 ff52 	bl	8000288 <__aeabi_dsub>
 800d3e4:	ec53 2b19 	vmov	r2, r3, d9
 800d3e8:	f7f3 fb78 	bl	8000adc <__aeabi_dcmplt>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	f040 80b6 	bne.w	800d55e <_dtoa_r+0x6e6>
 800d3f2:	9b02      	ldr	r3, [sp, #8]
 800d3f4:	429d      	cmp	r5, r3
 800d3f6:	f43f af7c 	beq.w	800d2f2 <_dtoa_r+0x47a>
 800d3fa:	4b31      	ldr	r3, [pc, #196]	; (800d4c0 <_dtoa_r+0x648>)
 800d3fc:	ec51 0b19 	vmov	r0, r1, d9
 800d400:	2200      	movs	r2, #0
 800d402:	f7f3 f8f9 	bl	80005f8 <__aeabi_dmul>
 800d406:	4b2e      	ldr	r3, [pc, #184]	; (800d4c0 <_dtoa_r+0x648>)
 800d408:	ec41 0b19 	vmov	d9, r0, r1
 800d40c:	2200      	movs	r2, #0
 800d40e:	4640      	mov	r0, r8
 800d410:	4649      	mov	r1, r9
 800d412:	f7f3 f8f1 	bl	80005f8 <__aeabi_dmul>
 800d416:	4680      	mov	r8, r0
 800d418:	4689      	mov	r9, r1
 800d41a:	e7c5      	b.n	800d3a8 <_dtoa_r+0x530>
 800d41c:	ec51 0b17 	vmov	r0, r1, d7
 800d420:	f7f3 f8ea 	bl	80005f8 <__aeabi_dmul>
 800d424:	9b02      	ldr	r3, [sp, #8]
 800d426:	9d00      	ldr	r5, [sp, #0]
 800d428:	930f      	str	r3, [sp, #60]	; 0x3c
 800d42a:	ec41 0b19 	vmov	d9, r0, r1
 800d42e:	4649      	mov	r1, r9
 800d430:	4640      	mov	r0, r8
 800d432:	f7f3 fb91 	bl	8000b58 <__aeabi_d2iz>
 800d436:	4606      	mov	r6, r0
 800d438:	f7f3 f874 	bl	8000524 <__aeabi_i2d>
 800d43c:	3630      	adds	r6, #48	; 0x30
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f2 ff1f 	bl	8000288 <__aeabi_dsub>
 800d44a:	f805 6b01 	strb.w	r6, [r5], #1
 800d44e:	9b02      	ldr	r3, [sp, #8]
 800d450:	429d      	cmp	r5, r3
 800d452:	4680      	mov	r8, r0
 800d454:	4689      	mov	r9, r1
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	d124      	bne.n	800d4a6 <_dtoa_r+0x62e>
 800d45c:	4b1b      	ldr	r3, [pc, #108]	; (800d4cc <_dtoa_r+0x654>)
 800d45e:	ec51 0b19 	vmov	r0, r1, d9
 800d462:	f7f2 ff13 	bl	800028c <__adddf3>
 800d466:	4602      	mov	r2, r0
 800d468:	460b      	mov	r3, r1
 800d46a:	4640      	mov	r0, r8
 800d46c:	4649      	mov	r1, r9
 800d46e:	f7f3 fb53 	bl	8000b18 <__aeabi_dcmpgt>
 800d472:	2800      	cmp	r0, #0
 800d474:	d173      	bne.n	800d55e <_dtoa_r+0x6e6>
 800d476:	ec53 2b19 	vmov	r2, r3, d9
 800d47a:	4914      	ldr	r1, [pc, #80]	; (800d4cc <_dtoa_r+0x654>)
 800d47c:	2000      	movs	r0, #0
 800d47e:	f7f2 ff03 	bl	8000288 <__aeabi_dsub>
 800d482:	4602      	mov	r2, r0
 800d484:	460b      	mov	r3, r1
 800d486:	4640      	mov	r0, r8
 800d488:	4649      	mov	r1, r9
 800d48a:	f7f3 fb27 	bl	8000adc <__aeabi_dcmplt>
 800d48e:	2800      	cmp	r0, #0
 800d490:	f43f af2f 	beq.w	800d2f2 <_dtoa_r+0x47a>
 800d494:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d496:	1e6b      	subs	r3, r5, #1
 800d498:	930f      	str	r3, [sp, #60]	; 0x3c
 800d49a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d49e:	2b30      	cmp	r3, #48	; 0x30
 800d4a0:	d0f8      	beq.n	800d494 <_dtoa_r+0x61c>
 800d4a2:	46bb      	mov	fp, r7
 800d4a4:	e04a      	b.n	800d53c <_dtoa_r+0x6c4>
 800d4a6:	4b06      	ldr	r3, [pc, #24]	; (800d4c0 <_dtoa_r+0x648>)
 800d4a8:	f7f3 f8a6 	bl	80005f8 <__aeabi_dmul>
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	4689      	mov	r9, r1
 800d4b0:	e7bd      	b.n	800d42e <_dtoa_r+0x5b6>
 800d4b2:	bf00      	nop
 800d4b4:	0800f828 	.word	0x0800f828
 800d4b8:	0800f800 	.word	0x0800f800
 800d4bc:	3ff00000 	.word	0x3ff00000
 800d4c0:	40240000 	.word	0x40240000
 800d4c4:	401c0000 	.word	0x401c0000
 800d4c8:	40140000 	.word	0x40140000
 800d4cc:	3fe00000 	.word	0x3fe00000
 800d4d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d4d4:	9d00      	ldr	r5, [sp, #0]
 800d4d6:	4642      	mov	r2, r8
 800d4d8:	464b      	mov	r3, r9
 800d4da:	4630      	mov	r0, r6
 800d4dc:	4639      	mov	r1, r7
 800d4de:	f7f3 f9b5 	bl	800084c <__aeabi_ddiv>
 800d4e2:	f7f3 fb39 	bl	8000b58 <__aeabi_d2iz>
 800d4e6:	9001      	str	r0, [sp, #4]
 800d4e8:	f7f3 f81c 	bl	8000524 <__aeabi_i2d>
 800d4ec:	4642      	mov	r2, r8
 800d4ee:	464b      	mov	r3, r9
 800d4f0:	f7f3 f882 	bl	80005f8 <__aeabi_dmul>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	f7f2 fec4 	bl	8000288 <__aeabi_dsub>
 800d500:	9e01      	ldr	r6, [sp, #4]
 800d502:	9f04      	ldr	r7, [sp, #16]
 800d504:	3630      	adds	r6, #48	; 0x30
 800d506:	f805 6b01 	strb.w	r6, [r5], #1
 800d50a:	9e00      	ldr	r6, [sp, #0]
 800d50c:	1bae      	subs	r6, r5, r6
 800d50e:	42b7      	cmp	r7, r6
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	d134      	bne.n	800d580 <_dtoa_r+0x708>
 800d516:	f7f2 feb9 	bl	800028c <__adddf3>
 800d51a:	4642      	mov	r2, r8
 800d51c:	464b      	mov	r3, r9
 800d51e:	4606      	mov	r6, r0
 800d520:	460f      	mov	r7, r1
 800d522:	f7f3 faf9 	bl	8000b18 <__aeabi_dcmpgt>
 800d526:	b9c8      	cbnz	r0, 800d55c <_dtoa_r+0x6e4>
 800d528:	4642      	mov	r2, r8
 800d52a:	464b      	mov	r3, r9
 800d52c:	4630      	mov	r0, r6
 800d52e:	4639      	mov	r1, r7
 800d530:	f7f3 faca 	bl	8000ac8 <__aeabi_dcmpeq>
 800d534:	b110      	cbz	r0, 800d53c <_dtoa_r+0x6c4>
 800d536:	9b01      	ldr	r3, [sp, #4]
 800d538:	07db      	lsls	r3, r3, #31
 800d53a:	d40f      	bmi.n	800d55c <_dtoa_r+0x6e4>
 800d53c:	4651      	mov	r1, sl
 800d53e:	4620      	mov	r0, r4
 800d540:	f000 fbcc 	bl	800dcdc <_Bfree>
 800d544:	2300      	movs	r3, #0
 800d546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d548:	702b      	strb	r3, [r5, #0]
 800d54a:	f10b 0301 	add.w	r3, fp, #1
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d552:	2b00      	cmp	r3, #0
 800d554:	f43f ace2 	beq.w	800cf1c <_dtoa_r+0xa4>
 800d558:	601d      	str	r5, [r3, #0]
 800d55a:	e4df      	b.n	800cf1c <_dtoa_r+0xa4>
 800d55c:	465f      	mov	r7, fp
 800d55e:	462b      	mov	r3, r5
 800d560:	461d      	mov	r5, r3
 800d562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d566:	2a39      	cmp	r2, #57	; 0x39
 800d568:	d106      	bne.n	800d578 <_dtoa_r+0x700>
 800d56a:	9a00      	ldr	r2, [sp, #0]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d1f7      	bne.n	800d560 <_dtoa_r+0x6e8>
 800d570:	9900      	ldr	r1, [sp, #0]
 800d572:	2230      	movs	r2, #48	; 0x30
 800d574:	3701      	adds	r7, #1
 800d576:	700a      	strb	r2, [r1, #0]
 800d578:	781a      	ldrb	r2, [r3, #0]
 800d57a:	3201      	adds	r2, #1
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	e790      	b.n	800d4a2 <_dtoa_r+0x62a>
 800d580:	4ba3      	ldr	r3, [pc, #652]	; (800d810 <_dtoa_r+0x998>)
 800d582:	2200      	movs	r2, #0
 800d584:	f7f3 f838 	bl	80005f8 <__aeabi_dmul>
 800d588:	2200      	movs	r2, #0
 800d58a:	2300      	movs	r3, #0
 800d58c:	4606      	mov	r6, r0
 800d58e:	460f      	mov	r7, r1
 800d590:	f7f3 fa9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d594:	2800      	cmp	r0, #0
 800d596:	d09e      	beq.n	800d4d6 <_dtoa_r+0x65e>
 800d598:	e7d0      	b.n	800d53c <_dtoa_r+0x6c4>
 800d59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d59c:	2a00      	cmp	r2, #0
 800d59e:	f000 80ca 	beq.w	800d736 <_dtoa_r+0x8be>
 800d5a2:	9a07      	ldr	r2, [sp, #28]
 800d5a4:	2a01      	cmp	r2, #1
 800d5a6:	f300 80ad 	bgt.w	800d704 <_dtoa_r+0x88c>
 800d5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	f000 80a5 	beq.w	800d6fc <_dtoa_r+0x884>
 800d5b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d5b6:	9e08      	ldr	r6, [sp, #32]
 800d5b8:	9d05      	ldr	r5, [sp, #20]
 800d5ba:	9a05      	ldr	r2, [sp, #20]
 800d5bc:	441a      	add	r2, r3
 800d5be:	9205      	str	r2, [sp, #20]
 800d5c0:	9a06      	ldr	r2, [sp, #24]
 800d5c2:	2101      	movs	r1, #1
 800d5c4:	441a      	add	r2, r3
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	9206      	str	r2, [sp, #24]
 800d5ca:	f000 fc3d 	bl	800de48 <__i2b>
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	b165      	cbz	r5, 800d5ec <_dtoa_r+0x774>
 800d5d2:	9b06      	ldr	r3, [sp, #24]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dd09      	ble.n	800d5ec <_dtoa_r+0x774>
 800d5d8:	42ab      	cmp	r3, r5
 800d5da:	9a05      	ldr	r2, [sp, #20]
 800d5dc:	bfa8      	it	ge
 800d5de:	462b      	movge	r3, r5
 800d5e0:	1ad2      	subs	r2, r2, r3
 800d5e2:	9205      	str	r2, [sp, #20]
 800d5e4:	9a06      	ldr	r2, [sp, #24]
 800d5e6:	1aed      	subs	r5, r5, r3
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	9306      	str	r3, [sp, #24]
 800d5ec:	9b08      	ldr	r3, [sp, #32]
 800d5ee:	b1f3      	cbz	r3, 800d62e <_dtoa_r+0x7b6>
 800d5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 80a3 	beq.w	800d73e <_dtoa_r+0x8c6>
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	dd10      	ble.n	800d61e <_dtoa_r+0x7a6>
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	4632      	mov	r2, r6
 800d600:	4620      	mov	r0, r4
 800d602:	f000 fce1 	bl	800dfc8 <__pow5mult>
 800d606:	4652      	mov	r2, sl
 800d608:	4601      	mov	r1, r0
 800d60a:	4607      	mov	r7, r0
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 fc31 	bl	800de74 <__multiply>
 800d612:	4651      	mov	r1, sl
 800d614:	4680      	mov	r8, r0
 800d616:	4620      	mov	r0, r4
 800d618:	f000 fb60 	bl	800dcdc <_Bfree>
 800d61c:	46c2      	mov	sl, r8
 800d61e:	9b08      	ldr	r3, [sp, #32]
 800d620:	1b9a      	subs	r2, r3, r6
 800d622:	d004      	beq.n	800d62e <_dtoa_r+0x7b6>
 800d624:	4651      	mov	r1, sl
 800d626:	4620      	mov	r0, r4
 800d628:	f000 fcce 	bl	800dfc8 <__pow5mult>
 800d62c:	4682      	mov	sl, r0
 800d62e:	2101      	movs	r1, #1
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fc09 	bl	800de48 <__i2b>
 800d636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d638:	2b00      	cmp	r3, #0
 800d63a:	4606      	mov	r6, r0
 800d63c:	f340 8081 	ble.w	800d742 <_dtoa_r+0x8ca>
 800d640:	461a      	mov	r2, r3
 800d642:	4601      	mov	r1, r0
 800d644:	4620      	mov	r0, r4
 800d646:	f000 fcbf 	bl	800dfc8 <__pow5mult>
 800d64a:	9b07      	ldr	r3, [sp, #28]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	4606      	mov	r6, r0
 800d650:	dd7a      	ble.n	800d748 <_dtoa_r+0x8d0>
 800d652:	f04f 0800 	mov.w	r8, #0
 800d656:	6933      	ldr	r3, [r6, #16]
 800d658:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d65c:	6918      	ldr	r0, [r3, #16]
 800d65e:	f000 fba5 	bl	800ddac <__hi0bits>
 800d662:	f1c0 0020 	rsb	r0, r0, #32
 800d666:	9b06      	ldr	r3, [sp, #24]
 800d668:	4418      	add	r0, r3
 800d66a:	f010 001f 	ands.w	r0, r0, #31
 800d66e:	f000 8094 	beq.w	800d79a <_dtoa_r+0x922>
 800d672:	f1c0 0320 	rsb	r3, r0, #32
 800d676:	2b04      	cmp	r3, #4
 800d678:	f340 8085 	ble.w	800d786 <_dtoa_r+0x90e>
 800d67c:	9b05      	ldr	r3, [sp, #20]
 800d67e:	f1c0 001c 	rsb	r0, r0, #28
 800d682:	4403      	add	r3, r0
 800d684:	9305      	str	r3, [sp, #20]
 800d686:	9b06      	ldr	r3, [sp, #24]
 800d688:	4403      	add	r3, r0
 800d68a:	4405      	add	r5, r0
 800d68c:	9306      	str	r3, [sp, #24]
 800d68e:	9b05      	ldr	r3, [sp, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	dd05      	ble.n	800d6a0 <_dtoa_r+0x828>
 800d694:	4651      	mov	r1, sl
 800d696:	461a      	mov	r2, r3
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 fcef 	bl	800e07c <__lshift>
 800d69e:	4682      	mov	sl, r0
 800d6a0:	9b06      	ldr	r3, [sp, #24]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	dd05      	ble.n	800d6b2 <_dtoa_r+0x83a>
 800d6a6:	4631      	mov	r1, r6
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 fce6 	bl	800e07c <__lshift>
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d072      	beq.n	800d79e <_dtoa_r+0x926>
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	4650      	mov	r0, sl
 800d6bc:	f000 fd4a 	bl	800e154 <__mcmp>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	da6c      	bge.n	800d79e <_dtoa_r+0x926>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4651      	mov	r1, sl
 800d6c8:	220a      	movs	r2, #10
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	f000 fb28 	bl	800dd20 <__multadd>
 800d6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d6d6:	4682      	mov	sl, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 81b0 	beq.w	800da3e <_dtoa_r+0xbc6>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	4639      	mov	r1, r7
 800d6e2:	220a      	movs	r2, #10
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f000 fb1b 	bl	800dd20 <__multadd>
 800d6ea:	9b01      	ldr	r3, [sp, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	4607      	mov	r7, r0
 800d6f0:	f300 8096 	bgt.w	800d820 <_dtoa_r+0x9a8>
 800d6f4:	9b07      	ldr	r3, [sp, #28]
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	dc59      	bgt.n	800d7ae <_dtoa_r+0x936>
 800d6fa:	e091      	b.n	800d820 <_dtoa_r+0x9a8>
 800d6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d702:	e758      	b.n	800d5b6 <_dtoa_r+0x73e>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	1e5e      	subs	r6, r3, #1
 800d708:	9b08      	ldr	r3, [sp, #32]
 800d70a:	42b3      	cmp	r3, r6
 800d70c:	bfbf      	itttt	lt
 800d70e:	9b08      	ldrlt	r3, [sp, #32]
 800d710:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d712:	9608      	strlt	r6, [sp, #32]
 800d714:	1af3      	sublt	r3, r6, r3
 800d716:	bfb4      	ite	lt
 800d718:	18d2      	addlt	r2, r2, r3
 800d71a:	1b9e      	subge	r6, r3, r6
 800d71c:	9b04      	ldr	r3, [sp, #16]
 800d71e:	bfbc      	itt	lt
 800d720:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d722:	2600      	movlt	r6, #0
 800d724:	2b00      	cmp	r3, #0
 800d726:	bfb7      	itett	lt
 800d728:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d72c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d730:	1a9d      	sublt	r5, r3, r2
 800d732:	2300      	movlt	r3, #0
 800d734:	e741      	b.n	800d5ba <_dtoa_r+0x742>
 800d736:	9e08      	ldr	r6, [sp, #32]
 800d738:	9d05      	ldr	r5, [sp, #20]
 800d73a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d73c:	e748      	b.n	800d5d0 <_dtoa_r+0x758>
 800d73e:	9a08      	ldr	r2, [sp, #32]
 800d740:	e770      	b.n	800d624 <_dtoa_r+0x7ac>
 800d742:	9b07      	ldr	r3, [sp, #28]
 800d744:	2b01      	cmp	r3, #1
 800d746:	dc19      	bgt.n	800d77c <_dtoa_r+0x904>
 800d748:	9b02      	ldr	r3, [sp, #8]
 800d74a:	b9bb      	cbnz	r3, 800d77c <_dtoa_r+0x904>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d752:	b99b      	cbnz	r3, 800d77c <_dtoa_r+0x904>
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d75a:	0d1b      	lsrs	r3, r3, #20
 800d75c:	051b      	lsls	r3, r3, #20
 800d75e:	b183      	cbz	r3, 800d782 <_dtoa_r+0x90a>
 800d760:	9b05      	ldr	r3, [sp, #20]
 800d762:	3301      	adds	r3, #1
 800d764:	9305      	str	r3, [sp, #20]
 800d766:	9b06      	ldr	r3, [sp, #24]
 800d768:	3301      	adds	r3, #1
 800d76a:	9306      	str	r3, [sp, #24]
 800d76c:	f04f 0801 	mov.w	r8, #1
 800d770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d772:	2b00      	cmp	r3, #0
 800d774:	f47f af6f 	bne.w	800d656 <_dtoa_r+0x7de>
 800d778:	2001      	movs	r0, #1
 800d77a:	e774      	b.n	800d666 <_dtoa_r+0x7ee>
 800d77c:	f04f 0800 	mov.w	r8, #0
 800d780:	e7f6      	b.n	800d770 <_dtoa_r+0x8f8>
 800d782:	4698      	mov	r8, r3
 800d784:	e7f4      	b.n	800d770 <_dtoa_r+0x8f8>
 800d786:	d082      	beq.n	800d68e <_dtoa_r+0x816>
 800d788:	9a05      	ldr	r2, [sp, #20]
 800d78a:	331c      	adds	r3, #28
 800d78c:	441a      	add	r2, r3
 800d78e:	9205      	str	r2, [sp, #20]
 800d790:	9a06      	ldr	r2, [sp, #24]
 800d792:	441a      	add	r2, r3
 800d794:	441d      	add	r5, r3
 800d796:	9206      	str	r2, [sp, #24]
 800d798:	e779      	b.n	800d68e <_dtoa_r+0x816>
 800d79a:	4603      	mov	r3, r0
 800d79c:	e7f4      	b.n	800d788 <_dtoa_r+0x910>
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	dc37      	bgt.n	800d814 <_dtoa_r+0x99c>
 800d7a4:	9b07      	ldr	r3, [sp, #28]
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	dd34      	ble.n	800d814 <_dtoa_r+0x99c>
 800d7aa:	9b04      	ldr	r3, [sp, #16]
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	9b01      	ldr	r3, [sp, #4]
 800d7b0:	b963      	cbnz	r3, 800d7cc <_dtoa_r+0x954>
 800d7b2:	4631      	mov	r1, r6
 800d7b4:	2205      	movs	r2, #5
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f000 fab2 	bl	800dd20 <__multadd>
 800d7bc:	4601      	mov	r1, r0
 800d7be:	4606      	mov	r6, r0
 800d7c0:	4650      	mov	r0, sl
 800d7c2:	f000 fcc7 	bl	800e154 <__mcmp>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	f73f adbb 	bgt.w	800d342 <_dtoa_r+0x4ca>
 800d7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ce:	9d00      	ldr	r5, [sp, #0]
 800d7d0:	ea6f 0b03 	mvn.w	fp, r3
 800d7d4:	f04f 0800 	mov.w	r8, #0
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f000 fa7e 	bl	800dcdc <_Bfree>
 800d7e0:	2f00      	cmp	r7, #0
 800d7e2:	f43f aeab 	beq.w	800d53c <_dtoa_r+0x6c4>
 800d7e6:	f1b8 0f00 	cmp.w	r8, #0
 800d7ea:	d005      	beq.n	800d7f8 <_dtoa_r+0x980>
 800d7ec:	45b8      	cmp	r8, r7
 800d7ee:	d003      	beq.n	800d7f8 <_dtoa_r+0x980>
 800d7f0:	4641      	mov	r1, r8
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f000 fa72 	bl	800dcdc <_Bfree>
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 fa6e 	bl	800dcdc <_Bfree>
 800d800:	e69c      	b.n	800d53c <_dtoa_r+0x6c4>
 800d802:	2600      	movs	r6, #0
 800d804:	4637      	mov	r7, r6
 800d806:	e7e1      	b.n	800d7cc <_dtoa_r+0x954>
 800d808:	46bb      	mov	fp, r7
 800d80a:	4637      	mov	r7, r6
 800d80c:	e599      	b.n	800d342 <_dtoa_r+0x4ca>
 800d80e:	bf00      	nop
 800d810:	40240000 	.word	0x40240000
 800d814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d816:	2b00      	cmp	r3, #0
 800d818:	f000 80c8 	beq.w	800d9ac <_dtoa_r+0xb34>
 800d81c:	9b04      	ldr	r3, [sp, #16]
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	2d00      	cmp	r5, #0
 800d822:	dd05      	ble.n	800d830 <_dtoa_r+0x9b8>
 800d824:	4639      	mov	r1, r7
 800d826:	462a      	mov	r2, r5
 800d828:	4620      	mov	r0, r4
 800d82a:	f000 fc27 	bl	800e07c <__lshift>
 800d82e:	4607      	mov	r7, r0
 800d830:	f1b8 0f00 	cmp.w	r8, #0
 800d834:	d05b      	beq.n	800d8ee <_dtoa_r+0xa76>
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	4620      	mov	r0, r4
 800d83a:	f000 fa0f 	bl	800dc5c <_Balloc>
 800d83e:	4605      	mov	r5, r0
 800d840:	b928      	cbnz	r0, 800d84e <_dtoa_r+0x9d6>
 800d842:	4b83      	ldr	r3, [pc, #524]	; (800da50 <_dtoa_r+0xbd8>)
 800d844:	4602      	mov	r2, r0
 800d846:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d84a:	f7ff bb2e 	b.w	800ceaa <_dtoa_r+0x32>
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	3202      	adds	r2, #2
 800d852:	0092      	lsls	r2, r2, #2
 800d854:	f107 010c 	add.w	r1, r7, #12
 800d858:	300c      	adds	r0, #12
 800d85a:	f7ff fa76 	bl	800cd4a <memcpy>
 800d85e:	2201      	movs	r2, #1
 800d860:	4629      	mov	r1, r5
 800d862:	4620      	mov	r0, r4
 800d864:	f000 fc0a 	bl	800e07c <__lshift>
 800d868:	9b00      	ldr	r3, [sp, #0]
 800d86a:	3301      	adds	r3, #1
 800d86c:	9304      	str	r3, [sp, #16]
 800d86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d872:	4413      	add	r3, r2
 800d874:	9308      	str	r3, [sp, #32]
 800d876:	9b02      	ldr	r3, [sp, #8]
 800d878:	f003 0301 	and.w	r3, r3, #1
 800d87c:	46b8      	mov	r8, r7
 800d87e:	9306      	str	r3, [sp, #24]
 800d880:	4607      	mov	r7, r0
 800d882:	9b04      	ldr	r3, [sp, #16]
 800d884:	4631      	mov	r1, r6
 800d886:	3b01      	subs	r3, #1
 800d888:	4650      	mov	r0, sl
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	f7ff fa6b 	bl	800cd66 <quorem>
 800d890:	4641      	mov	r1, r8
 800d892:	9002      	str	r0, [sp, #8]
 800d894:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d898:	4650      	mov	r0, sl
 800d89a:	f000 fc5b 	bl	800e154 <__mcmp>
 800d89e:	463a      	mov	r2, r7
 800d8a0:	9005      	str	r0, [sp, #20]
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f000 fc71 	bl	800e18c <__mdiff>
 800d8aa:	68c2      	ldr	r2, [r0, #12]
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	bb02      	cbnz	r2, 800d8f2 <_dtoa_r+0xa7a>
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4650      	mov	r0, sl
 800d8b4:	f000 fc4e 	bl	800e154 <__mcmp>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	4620      	mov	r0, r4
 800d8be:	9209      	str	r2, [sp, #36]	; 0x24
 800d8c0:	f000 fa0c 	bl	800dcdc <_Bfree>
 800d8c4:	9b07      	ldr	r3, [sp, #28]
 800d8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c8:	9d04      	ldr	r5, [sp, #16]
 800d8ca:	ea43 0102 	orr.w	r1, r3, r2
 800d8ce:	9b06      	ldr	r3, [sp, #24]
 800d8d0:	4319      	orrs	r1, r3
 800d8d2:	d110      	bne.n	800d8f6 <_dtoa_r+0xa7e>
 800d8d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d8d8:	d029      	beq.n	800d92e <_dtoa_r+0xab6>
 800d8da:	9b05      	ldr	r3, [sp, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	dd02      	ble.n	800d8e6 <_dtoa_r+0xa6e>
 800d8e0:	9b02      	ldr	r3, [sp, #8]
 800d8e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d8e6:	9b01      	ldr	r3, [sp, #4]
 800d8e8:	f883 9000 	strb.w	r9, [r3]
 800d8ec:	e774      	b.n	800d7d8 <_dtoa_r+0x960>
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	e7ba      	b.n	800d868 <_dtoa_r+0x9f0>
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	e7e1      	b.n	800d8ba <_dtoa_r+0xa42>
 800d8f6:	9b05      	ldr	r3, [sp, #20]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	db04      	blt.n	800d906 <_dtoa_r+0xa8e>
 800d8fc:	9907      	ldr	r1, [sp, #28]
 800d8fe:	430b      	orrs	r3, r1
 800d900:	9906      	ldr	r1, [sp, #24]
 800d902:	430b      	orrs	r3, r1
 800d904:	d120      	bne.n	800d948 <_dtoa_r+0xad0>
 800d906:	2a00      	cmp	r2, #0
 800d908:	dded      	ble.n	800d8e6 <_dtoa_r+0xa6e>
 800d90a:	4651      	mov	r1, sl
 800d90c:	2201      	movs	r2, #1
 800d90e:	4620      	mov	r0, r4
 800d910:	f000 fbb4 	bl	800e07c <__lshift>
 800d914:	4631      	mov	r1, r6
 800d916:	4682      	mov	sl, r0
 800d918:	f000 fc1c 	bl	800e154 <__mcmp>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	dc03      	bgt.n	800d928 <_dtoa_r+0xab0>
 800d920:	d1e1      	bne.n	800d8e6 <_dtoa_r+0xa6e>
 800d922:	f019 0f01 	tst.w	r9, #1
 800d926:	d0de      	beq.n	800d8e6 <_dtoa_r+0xa6e>
 800d928:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d92c:	d1d8      	bne.n	800d8e0 <_dtoa_r+0xa68>
 800d92e:	9a01      	ldr	r2, [sp, #4]
 800d930:	2339      	movs	r3, #57	; 0x39
 800d932:	7013      	strb	r3, [r2, #0]
 800d934:	462b      	mov	r3, r5
 800d936:	461d      	mov	r5, r3
 800d938:	3b01      	subs	r3, #1
 800d93a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d93e:	2a39      	cmp	r2, #57	; 0x39
 800d940:	d06c      	beq.n	800da1c <_dtoa_r+0xba4>
 800d942:	3201      	adds	r2, #1
 800d944:	701a      	strb	r2, [r3, #0]
 800d946:	e747      	b.n	800d7d8 <_dtoa_r+0x960>
 800d948:	2a00      	cmp	r2, #0
 800d94a:	dd07      	ble.n	800d95c <_dtoa_r+0xae4>
 800d94c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d950:	d0ed      	beq.n	800d92e <_dtoa_r+0xab6>
 800d952:	9a01      	ldr	r2, [sp, #4]
 800d954:	f109 0301 	add.w	r3, r9, #1
 800d958:	7013      	strb	r3, [r2, #0]
 800d95a:	e73d      	b.n	800d7d8 <_dtoa_r+0x960>
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	9a08      	ldr	r2, [sp, #32]
 800d960:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d964:	4293      	cmp	r3, r2
 800d966:	d043      	beq.n	800d9f0 <_dtoa_r+0xb78>
 800d968:	4651      	mov	r1, sl
 800d96a:	2300      	movs	r3, #0
 800d96c:	220a      	movs	r2, #10
 800d96e:	4620      	mov	r0, r4
 800d970:	f000 f9d6 	bl	800dd20 <__multadd>
 800d974:	45b8      	cmp	r8, r7
 800d976:	4682      	mov	sl, r0
 800d978:	f04f 0300 	mov.w	r3, #0
 800d97c:	f04f 020a 	mov.w	r2, #10
 800d980:	4641      	mov	r1, r8
 800d982:	4620      	mov	r0, r4
 800d984:	d107      	bne.n	800d996 <_dtoa_r+0xb1e>
 800d986:	f000 f9cb 	bl	800dd20 <__multadd>
 800d98a:	4680      	mov	r8, r0
 800d98c:	4607      	mov	r7, r0
 800d98e:	9b04      	ldr	r3, [sp, #16]
 800d990:	3301      	adds	r3, #1
 800d992:	9304      	str	r3, [sp, #16]
 800d994:	e775      	b.n	800d882 <_dtoa_r+0xa0a>
 800d996:	f000 f9c3 	bl	800dd20 <__multadd>
 800d99a:	4639      	mov	r1, r7
 800d99c:	4680      	mov	r8, r0
 800d99e:	2300      	movs	r3, #0
 800d9a0:	220a      	movs	r2, #10
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 f9bc 	bl	800dd20 <__multadd>
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	e7f0      	b.n	800d98e <_dtoa_r+0xb16>
 800d9ac:	9b04      	ldr	r3, [sp, #16]
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	9d00      	ldr	r5, [sp, #0]
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	f7ff f9d6 	bl	800cd66 <quorem>
 800d9ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d9be:	9b00      	ldr	r3, [sp, #0]
 800d9c0:	f805 9b01 	strb.w	r9, [r5], #1
 800d9c4:	1aea      	subs	r2, r5, r3
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	dd07      	ble.n	800d9dc <_dtoa_r+0xb64>
 800d9cc:	4651      	mov	r1, sl
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	220a      	movs	r2, #10
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f000 f9a4 	bl	800dd20 <__multadd>
 800d9d8:	4682      	mov	sl, r0
 800d9da:	e7ea      	b.n	800d9b2 <_dtoa_r+0xb3a>
 800d9dc:	9b01      	ldr	r3, [sp, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	bfc8      	it	gt
 800d9e2:	461d      	movgt	r5, r3
 800d9e4:	9b00      	ldr	r3, [sp, #0]
 800d9e6:	bfd8      	it	le
 800d9e8:	2501      	movle	r5, #1
 800d9ea:	441d      	add	r5, r3
 800d9ec:	f04f 0800 	mov.w	r8, #0
 800d9f0:	4651      	mov	r1, sl
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f000 fb41 	bl	800e07c <__lshift>
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	4682      	mov	sl, r0
 800d9fe:	f000 fba9 	bl	800e154 <__mcmp>
 800da02:	2800      	cmp	r0, #0
 800da04:	dc96      	bgt.n	800d934 <_dtoa_r+0xabc>
 800da06:	d102      	bne.n	800da0e <_dtoa_r+0xb96>
 800da08:	f019 0f01 	tst.w	r9, #1
 800da0c:	d192      	bne.n	800d934 <_dtoa_r+0xabc>
 800da0e:	462b      	mov	r3, r5
 800da10:	461d      	mov	r5, r3
 800da12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da16:	2a30      	cmp	r2, #48	; 0x30
 800da18:	d0fa      	beq.n	800da10 <_dtoa_r+0xb98>
 800da1a:	e6dd      	b.n	800d7d8 <_dtoa_r+0x960>
 800da1c:	9a00      	ldr	r2, [sp, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d189      	bne.n	800d936 <_dtoa_r+0xabe>
 800da22:	f10b 0b01 	add.w	fp, fp, #1
 800da26:	2331      	movs	r3, #49	; 0x31
 800da28:	e796      	b.n	800d958 <_dtoa_r+0xae0>
 800da2a:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <_dtoa_r+0xbdc>)
 800da2c:	f7ff ba99 	b.w	800cf62 <_dtoa_r+0xea>
 800da30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da32:	2b00      	cmp	r3, #0
 800da34:	f47f aa6d 	bne.w	800cf12 <_dtoa_r+0x9a>
 800da38:	4b07      	ldr	r3, [pc, #28]	; (800da58 <_dtoa_r+0xbe0>)
 800da3a:	f7ff ba92 	b.w	800cf62 <_dtoa_r+0xea>
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	dcb5      	bgt.n	800d9b0 <_dtoa_r+0xb38>
 800da44:	9b07      	ldr	r3, [sp, #28]
 800da46:	2b02      	cmp	r3, #2
 800da48:	f73f aeb1 	bgt.w	800d7ae <_dtoa_r+0x936>
 800da4c:	e7b0      	b.n	800d9b0 <_dtoa_r+0xb38>
 800da4e:	bf00      	nop
 800da50:	0800f791 	.word	0x0800f791
 800da54:	0800f6f1 	.word	0x0800f6f1
 800da58:	0800f715 	.word	0x0800f715

0800da5c <_free_r>:
 800da5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da5e:	2900      	cmp	r1, #0
 800da60:	d044      	beq.n	800daec <_free_r+0x90>
 800da62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da66:	9001      	str	r0, [sp, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f1a1 0404 	sub.w	r4, r1, #4
 800da6e:	bfb8      	it	lt
 800da70:	18e4      	addlt	r4, r4, r3
 800da72:	f000 f8e7 	bl	800dc44 <__malloc_lock>
 800da76:	4a1e      	ldr	r2, [pc, #120]	; (800daf0 <_free_r+0x94>)
 800da78:	9801      	ldr	r0, [sp, #4]
 800da7a:	6813      	ldr	r3, [r2, #0]
 800da7c:	b933      	cbnz	r3, 800da8c <_free_r+0x30>
 800da7e:	6063      	str	r3, [r4, #4]
 800da80:	6014      	str	r4, [r2, #0]
 800da82:	b003      	add	sp, #12
 800da84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da88:	f000 b8e2 	b.w	800dc50 <__malloc_unlock>
 800da8c:	42a3      	cmp	r3, r4
 800da8e:	d908      	bls.n	800daa2 <_free_r+0x46>
 800da90:	6825      	ldr	r5, [r4, #0]
 800da92:	1961      	adds	r1, r4, r5
 800da94:	428b      	cmp	r3, r1
 800da96:	bf01      	itttt	eq
 800da98:	6819      	ldreq	r1, [r3, #0]
 800da9a:	685b      	ldreq	r3, [r3, #4]
 800da9c:	1949      	addeq	r1, r1, r5
 800da9e:	6021      	streq	r1, [r4, #0]
 800daa0:	e7ed      	b.n	800da7e <_free_r+0x22>
 800daa2:	461a      	mov	r2, r3
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	b10b      	cbz	r3, 800daac <_free_r+0x50>
 800daa8:	42a3      	cmp	r3, r4
 800daaa:	d9fa      	bls.n	800daa2 <_free_r+0x46>
 800daac:	6811      	ldr	r1, [r2, #0]
 800daae:	1855      	adds	r5, r2, r1
 800dab0:	42a5      	cmp	r5, r4
 800dab2:	d10b      	bne.n	800dacc <_free_r+0x70>
 800dab4:	6824      	ldr	r4, [r4, #0]
 800dab6:	4421      	add	r1, r4
 800dab8:	1854      	adds	r4, r2, r1
 800daba:	42a3      	cmp	r3, r4
 800dabc:	6011      	str	r1, [r2, #0]
 800dabe:	d1e0      	bne.n	800da82 <_free_r+0x26>
 800dac0:	681c      	ldr	r4, [r3, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	6053      	str	r3, [r2, #4]
 800dac6:	440c      	add	r4, r1
 800dac8:	6014      	str	r4, [r2, #0]
 800daca:	e7da      	b.n	800da82 <_free_r+0x26>
 800dacc:	d902      	bls.n	800dad4 <_free_r+0x78>
 800dace:	230c      	movs	r3, #12
 800dad0:	6003      	str	r3, [r0, #0]
 800dad2:	e7d6      	b.n	800da82 <_free_r+0x26>
 800dad4:	6825      	ldr	r5, [r4, #0]
 800dad6:	1961      	adds	r1, r4, r5
 800dad8:	428b      	cmp	r3, r1
 800dada:	bf04      	itt	eq
 800dadc:	6819      	ldreq	r1, [r3, #0]
 800dade:	685b      	ldreq	r3, [r3, #4]
 800dae0:	6063      	str	r3, [r4, #4]
 800dae2:	bf04      	itt	eq
 800dae4:	1949      	addeq	r1, r1, r5
 800dae6:	6021      	streq	r1, [r4, #0]
 800dae8:	6054      	str	r4, [r2, #4]
 800daea:	e7ca      	b.n	800da82 <_free_r+0x26>
 800daec:	b003      	add	sp, #12
 800daee:	bd30      	pop	{r4, r5, pc}
 800daf0:	2000286c 	.word	0x2000286c

0800daf4 <malloc>:
 800daf4:	4b02      	ldr	r3, [pc, #8]	; (800db00 <malloc+0xc>)
 800daf6:	4601      	mov	r1, r0
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	f000 b823 	b.w	800db44 <_malloc_r>
 800dafe:	bf00      	nop
 800db00:	20000080 	.word	0x20000080

0800db04 <sbrk_aligned>:
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	4e0e      	ldr	r6, [pc, #56]	; (800db40 <sbrk_aligned+0x3c>)
 800db08:	460c      	mov	r4, r1
 800db0a:	6831      	ldr	r1, [r6, #0]
 800db0c:	4605      	mov	r5, r0
 800db0e:	b911      	cbnz	r1, 800db16 <sbrk_aligned+0x12>
 800db10:	f001 f808 	bl	800eb24 <_sbrk_r>
 800db14:	6030      	str	r0, [r6, #0]
 800db16:	4621      	mov	r1, r4
 800db18:	4628      	mov	r0, r5
 800db1a:	f001 f803 	bl	800eb24 <_sbrk_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	d00a      	beq.n	800db38 <sbrk_aligned+0x34>
 800db22:	1cc4      	adds	r4, r0, #3
 800db24:	f024 0403 	bic.w	r4, r4, #3
 800db28:	42a0      	cmp	r0, r4
 800db2a:	d007      	beq.n	800db3c <sbrk_aligned+0x38>
 800db2c:	1a21      	subs	r1, r4, r0
 800db2e:	4628      	mov	r0, r5
 800db30:	f000 fff8 	bl	800eb24 <_sbrk_r>
 800db34:	3001      	adds	r0, #1
 800db36:	d101      	bne.n	800db3c <sbrk_aligned+0x38>
 800db38:	f04f 34ff 	mov.w	r4, #4294967295
 800db3c:	4620      	mov	r0, r4
 800db3e:	bd70      	pop	{r4, r5, r6, pc}
 800db40:	20002870 	.word	0x20002870

0800db44 <_malloc_r>:
 800db44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db48:	1ccd      	adds	r5, r1, #3
 800db4a:	f025 0503 	bic.w	r5, r5, #3
 800db4e:	3508      	adds	r5, #8
 800db50:	2d0c      	cmp	r5, #12
 800db52:	bf38      	it	cc
 800db54:	250c      	movcc	r5, #12
 800db56:	2d00      	cmp	r5, #0
 800db58:	4607      	mov	r7, r0
 800db5a:	db01      	blt.n	800db60 <_malloc_r+0x1c>
 800db5c:	42a9      	cmp	r1, r5
 800db5e:	d905      	bls.n	800db6c <_malloc_r+0x28>
 800db60:	230c      	movs	r3, #12
 800db62:	603b      	str	r3, [r7, #0]
 800db64:	2600      	movs	r6, #0
 800db66:	4630      	mov	r0, r6
 800db68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dc40 <_malloc_r+0xfc>
 800db70:	f000 f868 	bl	800dc44 <__malloc_lock>
 800db74:	f8d8 3000 	ldr.w	r3, [r8]
 800db78:	461c      	mov	r4, r3
 800db7a:	bb5c      	cbnz	r4, 800dbd4 <_malloc_r+0x90>
 800db7c:	4629      	mov	r1, r5
 800db7e:	4638      	mov	r0, r7
 800db80:	f7ff ffc0 	bl	800db04 <sbrk_aligned>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	4604      	mov	r4, r0
 800db88:	d155      	bne.n	800dc36 <_malloc_r+0xf2>
 800db8a:	f8d8 4000 	ldr.w	r4, [r8]
 800db8e:	4626      	mov	r6, r4
 800db90:	2e00      	cmp	r6, #0
 800db92:	d145      	bne.n	800dc20 <_malloc_r+0xdc>
 800db94:	2c00      	cmp	r4, #0
 800db96:	d048      	beq.n	800dc2a <_malloc_r+0xe6>
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	4631      	mov	r1, r6
 800db9c:	4638      	mov	r0, r7
 800db9e:	eb04 0903 	add.w	r9, r4, r3
 800dba2:	f000 ffbf 	bl	800eb24 <_sbrk_r>
 800dba6:	4581      	cmp	r9, r0
 800dba8:	d13f      	bne.n	800dc2a <_malloc_r+0xe6>
 800dbaa:	6821      	ldr	r1, [r4, #0]
 800dbac:	1a6d      	subs	r5, r5, r1
 800dbae:	4629      	mov	r1, r5
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff ffa7 	bl	800db04 <sbrk_aligned>
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	d037      	beq.n	800dc2a <_malloc_r+0xe6>
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	442b      	add	r3, r5
 800dbbe:	6023      	str	r3, [r4, #0]
 800dbc0:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d038      	beq.n	800dc3a <_malloc_r+0xf6>
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	42a2      	cmp	r2, r4
 800dbcc:	d12b      	bne.n	800dc26 <_malloc_r+0xe2>
 800dbce:	2200      	movs	r2, #0
 800dbd0:	605a      	str	r2, [r3, #4]
 800dbd2:	e00f      	b.n	800dbf4 <_malloc_r+0xb0>
 800dbd4:	6822      	ldr	r2, [r4, #0]
 800dbd6:	1b52      	subs	r2, r2, r5
 800dbd8:	d41f      	bmi.n	800dc1a <_malloc_r+0xd6>
 800dbda:	2a0b      	cmp	r2, #11
 800dbdc:	d917      	bls.n	800dc0e <_malloc_r+0xca>
 800dbde:	1961      	adds	r1, r4, r5
 800dbe0:	42a3      	cmp	r3, r4
 800dbe2:	6025      	str	r5, [r4, #0]
 800dbe4:	bf18      	it	ne
 800dbe6:	6059      	strne	r1, [r3, #4]
 800dbe8:	6863      	ldr	r3, [r4, #4]
 800dbea:	bf08      	it	eq
 800dbec:	f8c8 1000 	streq.w	r1, [r8]
 800dbf0:	5162      	str	r2, [r4, r5]
 800dbf2:	604b      	str	r3, [r1, #4]
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	f104 060b 	add.w	r6, r4, #11
 800dbfa:	f000 f829 	bl	800dc50 <__malloc_unlock>
 800dbfe:	f026 0607 	bic.w	r6, r6, #7
 800dc02:	1d23      	adds	r3, r4, #4
 800dc04:	1af2      	subs	r2, r6, r3
 800dc06:	d0ae      	beq.n	800db66 <_malloc_r+0x22>
 800dc08:	1b9b      	subs	r3, r3, r6
 800dc0a:	50a3      	str	r3, [r4, r2]
 800dc0c:	e7ab      	b.n	800db66 <_malloc_r+0x22>
 800dc0e:	42a3      	cmp	r3, r4
 800dc10:	6862      	ldr	r2, [r4, #4]
 800dc12:	d1dd      	bne.n	800dbd0 <_malloc_r+0x8c>
 800dc14:	f8c8 2000 	str.w	r2, [r8]
 800dc18:	e7ec      	b.n	800dbf4 <_malloc_r+0xb0>
 800dc1a:	4623      	mov	r3, r4
 800dc1c:	6864      	ldr	r4, [r4, #4]
 800dc1e:	e7ac      	b.n	800db7a <_malloc_r+0x36>
 800dc20:	4634      	mov	r4, r6
 800dc22:	6876      	ldr	r6, [r6, #4]
 800dc24:	e7b4      	b.n	800db90 <_malloc_r+0x4c>
 800dc26:	4613      	mov	r3, r2
 800dc28:	e7cc      	b.n	800dbc4 <_malloc_r+0x80>
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	603b      	str	r3, [r7, #0]
 800dc2e:	4638      	mov	r0, r7
 800dc30:	f000 f80e 	bl	800dc50 <__malloc_unlock>
 800dc34:	e797      	b.n	800db66 <_malloc_r+0x22>
 800dc36:	6025      	str	r5, [r4, #0]
 800dc38:	e7dc      	b.n	800dbf4 <_malloc_r+0xb0>
 800dc3a:	605b      	str	r3, [r3, #4]
 800dc3c:	deff      	udf	#255	; 0xff
 800dc3e:	bf00      	nop
 800dc40:	2000286c 	.word	0x2000286c

0800dc44 <__malloc_lock>:
 800dc44:	4801      	ldr	r0, [pc, #4]	; (800dc4c <__malloc_lock+0x8>)
 800dc46:	f7ff b87e 	b.w	800cd46 <__retarget_lock_acquire_recursive>
 800dc4a:	bf00      	nop
 800dc4c:	20002868 	.word	0x20002868

0800dc50 <__malloc_unlock>:
 800dc50:	4801      	ldr	r0, [pc, #4]	; (800dc58 <__malloc_unlock+0x8>)
 800dc52:	f7ff b879 	b.w	800cd48 <__retarget_lock_release_recursive>
 800dc56:	bf00      	nop
 800dc58:	20002868 	.word	0x20002868

0800dc5c <_Balloc>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	69c6      	ldr	r6, [r0, #28]
 800dc60:	4604      	mov	r4, r0
 800dc62:	460d      	mov	r5, r1
 800dc64:	b976      	cbnz	r6, 800dc84 <_Balloc+0x28>
 800dc66:	2010      	movs	r0, #16
 800dc68:	f7ff ff44 	bl	800daf4 <malloc>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	61e0      	str	r0, [r4, #28]
 800dc70:	b920      	cbnz	r0, 800dc7c <_Balloc+0x20>
 800dc72:	4b18      	ldr	r3, [pc, #96]	; (800dcd4 <_Balloc+0x78>)
 800dc74:	4818      	ldr	r0, [pc, #96]	; (800dcd8 <_Balloc+0x7c>)
 800dc76:	216b      	movs	r1, #107	; 0x6b
 800dc78:	f000 ff64 	bl	800eb44 <__assert_func>
 800dc7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc80:	6006      	str	r6, [r0, #0]
 800dc82:	60c6      	str	r6, [r0, #12]
 800dc84:	69e6      	ldr	r6, [r4, #28]
 800dc86:	68f3      	ldr	r3, [r6, #12]
 800dc88:	b183      	cbz	r3, 800dcac <_Balloc+0x50>
 800dc8a:	69e3      	ldr	r3, [r4, #28]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc92:	b9b8      	cbnz	r0, 800dcc4 <_Balloc+0x68>
 800dc94:	2101      	movs	r1, #1
 800dc96:	fa01 f605 	lsl.w	r6, r1, r5
 800dc9a:	1d72      	adds	r2, r6, #5
 800dc9c:	0092      	lsls	r2, r2, #2
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f000 ff6e 	bl	800eb80 <_calloc_r>
 800dca4:	b160      	cbz	r0, 800dcc0 <_Balloc+0x64>
 800dca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcaa:	e00e      	b.n	800dcca <_Balloc+0x6e>
 800dcac:	2221      	movs	r2, #33	; 0x21
 800dcae:	2104      	movs	r1, #4
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f000 ff65 	bl	800eb80 <_calloc_r>
 800dcb6:	69e3      	ldr	r3, [r4, #28]
 800dcb8:	60f0      	str	r0, [r6, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e4      	bne.n	800dc8a <_Balloc+0x2e>
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
 800dcc4:	6802      	ldr	r2, [r0, #0]
 800dcc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcca:	2300      	movs	r3, #0
 800dccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcd0:	e7f7      	b.n	800dcc2 <_Balloc+0x66>
 800dcd2:	bf00      	nop
 800dcd4:	0800f722 	.word	0x0800f722
 800dcd8:	0800f7a2 	.word	0x0800f7a2

0800dcdc <_Bfree>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	69c6      	ldr	r6, [r0, #28]
 800dce0:	4605      	mov	r5, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	b976      	cbnz	r6, 800dd04 <_Bfree+0x28>
 800dce6:	2010      	movs	r0, #16
 800dce8:	f7ff ff04 	bl	800daf4 <malloc>
 800dcec:	4602      	mov	r2, r0
 800dcee:	61e8      	str	r0, [r5, #28]
 800dcf0:	b920      	cbnz	r0, 800dcfc <_Bfree+0x20>
 800dcf2:	4b09      	ldr	r3, [pc, #36]	; (800dd18 <_Bfree+0x3c>)
 800dcf4:	4809      	ldr	r0, [pc, #36]	; (800dd1c <_Bfree+0x40>)
 800dcf6:	218f      	movs	r1, #143	; 0x8f
 800dcf8:	f000 ff24 	bl	800eb44 <__assert_func>
 800dcfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd00:	6006      	str	r6, [r0, #0]
 800dd02:	60c6      	str	r6, [r0, #12]
 800dd04:	b13c      	cbz	r4, 800dd16 <_Bfree+0x3a>
 800dd06:	69eb      	ldr	r3, [r5, #28]
 800dd08:	6862      	ldr	r2, [r4, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd10:	6021      	str	r1, [r4, #0]
 800dd12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	0800f722 	.word	0x0800f722
 800dd1c:	0800f7a2 	.word	0x0800f7a2

0800dd20 <__multadd>:
 800dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd24:	690d      	ldr	r5, [r1, #16]
 800dd26:	4607      	mov	r7, r0
 800dd28:	460c      	mov	r4, r1
 800dd2a:	461e      	mov	r6, r3
 800dd2c:	f101 0c14 	add.w	ip, r1, #20
 800dd30:	2000      	movs	r0, #0
 800dd32:	f8dc 3000 	ldr.w	r3, [ip]
 800dd36:	b299      	uxth	r1, r3
 800dd38:	fb02 6101 	mla	r1, r2, r1, r6
 800dd3c:	0c1e      	lsrs	r6, r3, #16
 800dd3e:	0c0b      	lsrs	r3, r1, #16
 800dd40:	fb02 3306 	mla	r3, r2, r6, r3
 800dd44:	b289      	uxth	r1, r1
 800dd46:	3001      	adds	r0, #1
 800dd48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd4c:	4285      	cmp	r5, r0
 800dd4e:	f84c 1b04 	str.w	r1, [ip], #4
 800dd52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd56:	dcec      	bgt.n	800dd32 <__multadd+0x12>
 800dd58:	b30e      	cbz	r6, 800dd9e <__multadd+0x7e>
 800dd5a:	68a3      	ldr	r3, [r4, #8]
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dc19      	bgt.n	800dd94 <__multadd+0x74>
 800dd60:	6861      	ldr	r1, [r4, #4]
 800dd62:	4638      	mov	r0, r7
 800dd64:	3101      	adds	r1, #1
 800dd66:	f7ff ff79 	bl	800dc5c <_Balloc>
 800dd6a:	4680      	mov	r8, r0
 800dd6c:	b928      	cbnz	r0, 800dd7a <__multadd+0x5a>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	4b0c      	ldr	r3, [pc, #48]	; (800dda4 <__multadd+0x84>)
 800dd72:	480d      	ldr	r0, [pc, #52]	; (800dda8 <__multadd+0x88>)
 800dd74:	21ba      	movs	r1, #186	; 0xba
 800dd76:	f000 fee5 	bl	800eb44 <__assert_func>
 800dd7a:	6922      	ldr	r2, [r4, #16]
 800dd7c:	3202      	adds	r2, #2
 800dd7e:	f104 010c 	add.w	r1, r4, #12
 800dd82:	0092      	lsls	r2, r2, #2
 800dd84:	300c      	adds	r0, #12
 800dd86:	f7fe ffe0 	bl	800cd4a <memcpy>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff ffa5 	bl	800dcdc <_Bfree>
 800dd92:	4644      	mov	r4, r8
 800dd94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd98:	3501      	adds	r5, #1
 800dd9a:	615e      	str	r6, [r3, #20]
 800dd9c:	6125      	str	r5, [r4, #16]
 800dd9e:	4620      	mov	r0, r4
 800dda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda4:	0800f791 	.word	0x0800f791
 800dda8:	0800f7a2 	.word	0x0800f7a2

0800ddac <__hi0bits>:
 800ddac:	0c03      	lsrs	r3, r0, #16
 800ddae:	041b      	lsls	r3, r3, #16
 800ddb0:	b9d3      	cbnz	r3, 800dde8 <__hi0bits+0x3c>
 800ddb2:	0400      	lsls	r0, r0, #16
 800ddb4:	2310      	movs	r3, #16
 800ddb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddba:	bf04      	itt	eq
 800ddbc:	0200      	lsleq	r0, r0, #8
 800ddbe:	3308      	addeq	r3, #8
 800ddc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ddc4:	bf04      	itt	eq
 800ddc6:	0100      	lsleq	r0, r0, #4
 800ddc8:	3304      	addeq	r3, #4
 800ddca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddce:	bf04      	itt	eq
 800ddd0:	0080      	lsleq	r0, r0, #2
 800ddd2:	3302      	addeq	r3, #2
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	db05      	blt.n	800dde4 <__hi0bits+0x38>
 800ddd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dddc:	f103 0301 	add.w	r3, r3, #1
 800dde0:	bf08      	it	eq
 800dde2:	2320      	moveq	r3, #32
 800dde4:	4618      	mov	r0, r3
 800dde6:	4770      	bx	lr
 800dde8:	2300      	movs	r3, #0
 800ddea:	e7e4      	b.n	800ddb6 <__hi0bits+0xa>

0800ddec <__lo0bits>:
 800ddec:	6803      	ldr	r3, [r0, #0]
 800ddee:	f013 0207 	ands.w	r2, r3, #7
 800ddf2:	d00c      	beq.n	800de0e <__lo0bits+0x22>
 800ddf4:	07d9      	lsls	r1, r3, #31
 800ddf6:	d422      	bmi.n	800de3e <__lo0bits+0x52>
 800ddf8:	079a      	lsls	r2, r3, #30
 800ddfa:	bf49      	itett	mi
 800ddfc:	085b      	lsrmi	r3, r3, #1
 800ddfe:	089b      	lsrpl	r3, r3, #2
 800de00:	6003      	strmi	r3, [r0, #0]
 800de02:	2201      	movmi	r2, #1
 800de04:	bf5c      	itt	pl
 800de06:	6003      	strpl	r3, [r0, #0]
 800de08:	2202      	movpl	r2, #2
 800de0a:	4610      	mov	r0, r2
 800de0c:	4770      	bx	lr
 800de0e:	b299      	uxth	r1, r3
 800de10:	b909      	cbnz	r1, 800de16 <__lo0bits+0x2a>
 800de12:	0c1b      	lsrs	r3, r3, #16
 800de14:	2210      	movs	r2, #16
 800de16:	b2d9      	uxtb	r1, r3
 800de18:	b909      	cbnz	r1, 800de1e <__lo0bits+0x32>
 800de1a:	3208      	adds	r2, #8
 800de1c:	0a1b      	lsrs	r3, r3, #8
 800de1e:	0719      	lsls	r1, r3, #28
 800de20:	bf04      	itt	eq
 800de22:	091b      	lsreq	r3, r3, #4
 800de24:	3204      	addeq	r2, #4
 800de26:	0799      	lsls	r1, r3, #30
 800de28:	bf04      	itt	eq
 800de2a:	089b      	lsreq	r3, r3, #2
 800de2c:	3202      	addeq	r2, #2
 800de2e:	07d9      	lsls	r1, r3, #31
 800de30:	d403      	bmi.n	800de3a <__lo0bits+0x4e>
 800de32:	085b      	lsrs	r3, r3, #1
 800de34:	f102 0201 	add.w	r2, r2, #1
 800de38:	d003      	beq.n	800de42 <__lo0bits+0x56>
 800de3a:	6003      	str	r3, [r0, #0]
 800de3c:	e7e5      	b.n	800de0a <__lo0bits+0x1e>
 800de3e:	2200      	movs	r2, #0
 800de40:	e7e3      	b.n	800de0a <__lo0bits+0x1e>
 800de42:	2220      	movs	r2, #32
 800de44:	e7e1      	b.n	800de0a <__lo0bits+0x1e>
	...

0800de48 <__i2b>:
 800de48:	b510      	push	{r4, lr}
 800de4a:	460c      	mov	r4, r1
 800de4c:	2101      	movs	r1, #1
 800de4e:	f7ff ff05 	bl	800dc5c <_Balloc>
 800de52:	4602      	mov	r2, r0
 800de54:	b928      	cbnz	r0, 800de62 <__i2b+0x1a>
 800de56:	4b05      	ldr	r3, [pc, #20]	; (800de6c <__i2b+0x24>)
 800de58:	4805      	ldr	r0, [pc, #20]	; (800de70 <__i2b+0x28>)
 800de5a:	f240 1145 	movw	r1, #325	; 0x145
 800de5e:	f000 fe71 	bl	800eb44 <__assert_func>
 800de62:	2301      	movs	r3, #1
 800de64:	6144      	str	r4, [r0, #20]
 800de66:	6103      	str	r3, [r0, #16]
 800de68:	bd10      	pop	{r4, pc}
 800de6a:	bf00      	nop
 800de6c:	0800f791 	.word	0x0800f791
 800de70:	0800f7a2 	.word	0x0800f7a2

0800de74 <__multiply>:
 800de74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de78:	4691      	mov	r9, r2
 800de7a:	690a      	ldr	r2, [r1, #16]
 800de7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de80:	429a      	cmp	r2, r3
 800de82:	bfb8      	it	lt
 800de84:	460b      	movlt	r3, r1
 800de86:	460c      	mov	r4, r1
 800de88:	bfbc      	itt	lt
 800de8a:	464c      	movlt	r4, r9
 800de8c:	4699      	movlt	r9, r3
 800de8e:	6927      	ldr	r7, [r4, #16]
 800de90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de94:	68a3      	ldr	r3, [r4, #8]
 800de96:	6861      	ldr	r1, [r4, #4]
 800de98:	eb07 060a 	add.w	r6, r7, sl
 800de9c:	42b3      	cmp	r3, r6
 800de9e:	b085      	sub	sp, #20
 800dea0:	bfb8      	it	lt
 800dea2:	3101      	addlt	r1, #1
 800dea4:	f7ff feda 	bl	800dc5c <_Balloc>
 800dea8:	b930      	cbnz	r0, 800deb8 <__multiply+0x44>
 800deaa:	4602      	mov	r2, r0
 800deac:	4b44      	ldr	r3, [pc, #272]	; (800dfc0 <__multiply+0x14c>)
 800deae:	4845      	ldr	r0, [pc, #276]	; (800dfc4 <__multiply+0x150>)
 800deb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800deb4:	f000 fe46 	bl	800eb44 <__assert_func>
 800deb8:	f100 0514 	add.w	r5, r0, #20
 800debc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dec0:	462b      	mov	r3, r5
 800dec2:	2200      	movs	r2, #0
 800dec4:	4543      	cmp	r3, r8
 800dec6:	d321      	bcc.n	800df0c <__multiply+0x98>
 800dec8:	f104 0314 	add.w	r3, r4, #20
 800decc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ded0:	f109 0314 	add.w	r3, r9, #20
 800ded4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ded8:	9202      	str	r2, [sp, #8]
 800deda:	1b3a      	subs	r2, r7, r4
 800dedc:	3a15      	subs	r2, #21
 800dede:	f022 0203 	bic.w	r2, r2, #3
 800dee2:	3204      	adds	r2, #4
 800dee4:	f104 0115 	add.w	r1, r4, #21
 800dee8:	428f      	cmp	r7, r1
 800deea:	bf38      	it	cc
 800deec:	2204      	movcc	r2, #4
 800deee:	9201      	str	r2, [sp, #4]
 800def0:	9a02      	ldr	r2, [sp, #8]
 800def2:	9303      	str	r3, [sp, #12]
 800def4:	429a      	cmp	r2, r3
 800def6:	d80c      	bhi.n	800df12 <__multiply+0x9e>
 800def8:	2e00      	cmp	r6, #0
 800defa:	dd03      	ble.n	800df04 <__multiply+0x90>
 800defc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800df00:	2b00      	cmp	r3, #0
 800df02:	d05b      	beq.n	800dfbc <__multiply+0x148>
 800df04:	6106      	str	r6, [r0, #16]
 800df06:	b005      	add	sp, #20
 800df08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	f843 2b04 	str.w	r2, [r3], #4
 800df10:	e7d8      	b.n	800dec4 <__multiply+0x50>
 800df12:	f8b3 a000 	ldrh.w	sl, [r3]
 800df16:	f1ba 0f00 	cmp.w	sl, #0
 800df1a:	d024      	beq.n	800df66 <__multiply+0xf2>
 800df1c:	f104 0e14 	add.w	lr, r4, #20
 800df20:	46a9      	mov	r9, r5
 800df22:	f04f 0c00 	mov.w	ip, #0
 800df26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df2a:	f8d9 1000 	ldr.w	r1, [r9]
 800df2e:	fa1f fb82 	uxth.w	fp, r2
 800df32:	b289      	uxth	r1, r1
 800df34:	fb0a 110b 	mla	r1, sl, fp, r1
 800df38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df3c:	f8d9 2000 	ldr.w	r2, [r9]
 800df40:	4461      	add	r1, ip
 800df42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df46:	fb0a c20b 	mla	r2, sl, fp, ip
 800df4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df4e:	b289      	uxth	r1, r1
 800df50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df54:	4577      	cmp	r7, lr
 800df56:	f849 1b04 	str.w	r1, [r9], #4
 800df5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df5e:	d8e2      	bhi.n	800df26 <__multiply+0xb2>
 800df60:	9a01      	ldr	r2, [sp, #4]
 800df62:	f845 c002 	str.w	ip, [r5, r2]
 800df66:	9a03      	ldr	r2, [sp, #12]
 800df68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df6c:	3304      	adds	r3, #4
 800df6e:	f1b9 0f00 	cmp.w	r9, #0
 800df72:	d021      	beq.n	800dfb8 <__multiply+0x144>
 800df74:	6829      	ldr	r1, [r5, #0]
 800df76:	f104 0c14 	add.w	ip, r4, #20
 800df7a:	46ae      	mov	lr, r5
 800df7c:	f04f 0a00 	mov.w	sl, #0
 800df80:	f8bc b000 	ldrh.w	fp, [ip]
 800df84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df88:	fb09 220b 	mla	r2, r9, fp, r2
 800df8c:	4452      	add	r2, sl
 800df8e:	b289      	uxth	r1, r1
 800df90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df94:	f84e 1b04 	str.w	r1, [lr], #4
 800df98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfa0:	f8be 1000 	ldrh.w	r1, [lr]
 800dfa4:	fb09 110a 	mla	r1, r9, sl, r1
 800dfa8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dfac:	4567      	cmp	r7, ip
 800dfae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfb2:	d8e5      	bhi.n	800df80 <__multiply+0x10c>
 800dfb4:	9a01      	ldr	r2, [sp, #4]
 800dfb6:	50a9      	str	r1, [r5, r2]
 800dfb8:	3504      	adds	r5, #4
 800dfba:	e799      	b.n	800def0 <__multiply+0x7c>
 800dfbc:	3e01      	subs	r6, #1
 800dfbe:	e79b      	b.n	800def8 <__multiply+0x84>
 800dfc0:	0800f791 	.word	0x0800f791
 800dfc4:	0800f7a2 	.word	0x0800f7a2

0800dfc8 <__pow5mult>:
 800dfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfcc:	4615      	mov	r5, r2
 800dfce:	f012 0203 	ands.w	r2, r2, #3
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	460f      	mov	r7, r1
 800dfd6:	d007      	beq.n	800dfe8 <__pow5mult+0x20>
 800dfd8:	4c25      	ldr	r4, [pc, #148]	; (800e070 <__pow5mult+0xa8>)
 800dfda:	3a01      	subs	r2, #1
 800dfdc:	2300      	movs	r3, #0
 800dfde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfe2:	f7ff fe9d 	bl	800dd20 <__multadd>
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	10ad      	asrs	r5, r5, #2
 800dfea:	d03d      	beq.n	800e068 <__pow5mult+0xa0>
 800dfec:	69f4      	ldr	r4, [r6, #28]
 800dfee:	b97c      	cbnz	r4, 800e010 <__pow5mult+0x48>
 800dff0:	2010      	movs	r0, #16
 800dff2:	f7ff fd7f 	bl	800daf4 <malloc>
 800dff6:	4602      	mov	r2, r0
 800dff8:	61f0      	str	r0, [r6, #28]
 800dffa:	b928      	cbnz	r0, 800e008 <__pow5mult+0x40>
 800dffc:	4b1d      	ldr	r3, [pc, #116]	; (800e074 <__pow5mult+0xac>)
 800dffe:	481e      	ldr	r0, [pc, #120]	; (800e078 <__pow5mult+0xb0>)
 800e000:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e004:	f000 fd9e 	bl	800eb44 <__assert_func>
 800e008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e00c:	6004      	str	r4, [r0, #0]
 800e00e:	60c4      	str	r4, [r0, #12]
 800e010:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e018:	b94c      	cbnz	r4, 800e02e <__pow5mult+0x66>
 800e01a:	f240 2171 	movw	r1, #625	; 0x271
 800e01e:	4630      	mov	r0, r6
 800e020:	f7ff ff12 	bl	800de48 <__i2b>
 800e024:	2300      	movs	r3, #0
 800e026:	f8c8 0008 	str.w	r0, [r8, #8]
 800e02a:	4604      	mov	r4, r0
 800e02c:	6003      	str	r3, [r0, #0]
 800e02e:	f04f 0900 	mov.w	r9, #0
 800e032:	07eb      	lsls	r3, r5, #31
 800e034:	d50a      	bpl.n	800e04c <__pow5mult+0x84>
 800e036:	4639      	mov	r1, r7
 800e038:	4622      	mov	r2, r4
 800e03a:	4630      	mov	r0, r6
 800e03c:	f7ff ff1a 	bl	800de74 <__multiply>
 800e040:	4639      	mov	r1, r7
 800e042:	4680      	mov	r8, r0
 800e044:	4630      	mov	r0, r6
 800e046:	f7ff fe49 	bl	800dcdc <_Bfree>
 800e04a:	4647      	mov	r7, r8
 800e04c:	106d      	asrs	r5, r5, #1
 800e04e:	d00b      	beq.n	800e068 <__pow5mult+0xa0>
 800e050:	6820      	ldr	r0, [r4, #0]
 800e052:	b938      	cbnz	r0, 800e064 <__pow5mult+0x9c>
 800e054:	4622      	mov	r2, r4
 800e056:	4621      	mov	r1, r4
 800e058:	4630      	mov	r0, r6
 800e05a:	f7ff ff0b 	bl	800de74 <__multiply>
 800e05e:	6020      	str	r0, [r4, #0]
 800e060:	f8c0 9000 	str.w	r9, [r0]
 800e064:	4604      	mov	r4, r0
 800e066:	e7e4      	b.n	800e032 <__pow5mult+0x6a>
 800e068:	4638      	mov	r0, r7
 800e06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06e:	bf00      	nop
 800e070:	0800f8f0 	.word	0x0800f8f0
 800e074:	0800f722 	.word	0x0800f722
 800e078:	0800f7a2 	.word	0x0800f7a2

0800e07c <__lshift>:
 800e07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e080:	460c      	mov	r4, r1
 800e082:	6849      	ldr	r1, [r1, #4]
 800e084:	6923      	ldr	r3, [r4, #16]
 800e086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	4607      	mov	r7, r0
 800e08e:	4691      	mov	r9, r2
 800e090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e094:	f108 0601 	add.w	r6, r8, #1
 800e098:	42b3      	cmp	r3, r6
 800e09a:	db0b      	blt.n	800e0b4 <__lshift+0x38>
 800e09c:	4638      	mov	r0, r7
 800e09e:	f7ff fddd 	bl	800dc5c <_Balloc>
 800e0a2:	4605      	mov	r5, r0
 800e0a4:	b948      	cbnz	r0, 800e0ba <__lshift+0x3e>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	4b28      	ldr	r3, [pc, #160]	; (800e14c <__lshift+0xd0>)
 800e0aa:	4829      	ldr	r0, [pc, #164]	; (800e150 <__lshift+0xd4>)
 800e0ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e0b0:	f000 fd48 	bl	800eb44 <__assert_func>
 800e0b4:	3101      	adds	r1, #1
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	e7ee      	b.n	800e098 <__lshift+0x1c>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	f100 0114 	add.w	r1, r0, #20
 800e0c0:	f100 0210 	add.w	r2, r0, #16
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	4553      	cmp	r3, sl
 800e0c8:	db33      	blt.n	800e132 <__lshift+0xb6>
 800e0ca:	6920      	ldr	r0, [r4, #16]
 800e0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0d0:	f104 0314 	add.w	r3, r4, #20
 800e0d4:	f019 091f 	ands.w	r9, r9, #31
 800e0d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0e0:	d02b      	beq.n	800e13a <__lshift+0xbe>
 800e0e2:	f1c9 0e20 	rsb	lr, r9, #32
 800e0e6:	468a      	mov	sl, r1
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	6818      	ldr	r0, [r3, #0]
 800e0ec:	fa00 f009 	lsl.w	r0, r0, r9
 800e0f0:	4310      	orrs	r0, r2
 800e0f2:	f84a 0b04 	str.w	r0, [sl], #4
 800e0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0fa:	459c      	cmp	ip, r3
 800e0fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e100:	d8f3      	bhi.n	800e0ea <__lshift+0x6e>
 800e102:	ebac 0304 	sub.w	r3, ip, r4
 800e106:	3b15      	subs	r3, #21
 800e108:	f023 0303 	bic.w	r3, r3, #3
 800e10c:	3304      	adds	r3, #4
 800e10e:	f104 0015 	add.w	r0, r4, #21
 800e112:	4584      	cmp	ip, r0
 800e114:	bf38      	it	cc
 800e116:	2304      	movcc	r3, #4
 800e118:	50ca      	str	r2, [r1, r3]
 800e11a:	b10a      	cbz	r2, 800e120 <__lshift+0xa4>
 800e11c:	f108 0602 	add.w	r6, r8, #2
 800e120:	3e01      	subs	r6, #1
 800e122:	4638      	mov	r0, r7
 800e124:	612e      	str	r6, [r5, #16]
 800e126:	4621      	mov	r1, r4
 800e128:	f7ff fdd8 	bl	800dcdc <_Bfree>
 800e12c:	4628      	mov	r0, r5
 800e12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e132:	f842 0f04 	str.w	r0, [r2, #4]!
 800e136:	3301      	adds	r3, #1
 800e138:	e7c5      	b.n	800e0c6 <__lshift+0x4a>
 800e13a:	3904      	subs	r1, #4
 800e13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e140:	f841 2f04 	str.w	r2, [r1, #4]!
 800e144:	459c      	cmp	ip, r3
 800e146:	d8f9      	bhi.n	800e13c <__lshift+0xc0>
 800e148:	e7ea      	b.n	800e120 <__lshift+0xa4>
 800e14a:	bf00      	nop
 800e14c:	0800f791 	.word	0x0800f791
 800e150:	0800f7a2 	.word	0x0800f7a2

0800e154 <__mcmp>:
 800e154:	b530      	push	{r4, r5, lr}
 800e156:	6902      	ldr	r2, [r0, #16]
 800e158:	690c      	ldr	r4, [r1, #16]
 800e15a:	1b12      	subs	r2, r2, r4
 800e15c:	d10e      	bne.n	800e17c <__mcmp+0x28>
 800e15e:	f100 0314 	add.w	r3, r0, #20
 800e162:	3114      	adds	r1, #20
 800e164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e16c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e174:	42a5      	cmp	r5, r4
 800e176:	d003      	beq.n	800e180 <__mcmp+0x2c>
 800e178:	d305      	bcc.n	800e186 <__mcmp+0x32>
 800e17a:	2201      	movs	r2, #1
 800e17c:	4610      	mov	r0, r2
 800e17e:	bd30      	pop	{r4, r5, pc}
 800e180:	4283      	cmp	r3, r0
 800e182:	d3f3      	bcc.n	800e16c <__mcmp+0x18>
 800e184:	e7fa      	b.n	800e17c <__mcmp+0x28>
 800e186:	f04f 32ff 	mov.w	r2, #4294967295
 800e18a:	e7f7      	b.n	800e17c <__mcmp+0x28>

0800e18c <__mdiff>:
 800e18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e190:	460c      	mov	r4, r1
 800e192:	4606      	mov	r6, r0
 800e194:	4611      	mov	r1, r2
 800e196:	4620      	mov	r0, r4
 800e198:	4690      	mov	r8, r2
 800e19a:	f7ff ffdb 	bl	800e154 <__mcmp>
 800e19e:	1e05      	subs	r5, r0, #0
 800e1a0:	d110      	bne.n	800e1c4 <__mdiff+0x38>
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	f7ff fd59 	bl	800dc5c <_Balloc>
 800e1aa:	b930      	cbnz	r0, 800e1ba <__mdiff+0x2e>
 800e1ac:	4b3a      	ldr	r3, [pc, #232]	; (800e298 <__mdiff+0x10c>)
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	f240 2137 	movw	r1, #567	; 0x237
 800e1b4:	4839      	ldr	r0, [pc, #228]	; (800e29c <__mdiff+0x110>)
 800e1b6:	f000 fcc5 	bl	800eb44 <__assert_func>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	bfa4      	itt	ge
 800e1c6:	4643      	movge	r3, r8
 800e1c8:	46a0      	movge	r8, r4
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1d0:	bfa6      	itte	ge
 800e1d2:	461c      	movge	r4, r3
 800e1d4:	2500      	movge	r5, #0
 800e1d6:	2501      	movlt	r5, #1
 800e1d8:	f7ff fd40 	bl	800dc5c <_Balloc>
 800e1dc:	b920      	cbnz	r0, 800e1e8 <__mdiff+0x5c>
 800e1de:	4b2e      	ldr	r3, [pc, #184]	; (800e298 <__mdiff+0x10c>)
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	f240 2145 	movw	r1, #581	; 0x245
 800e1e6:	e7e5      	b.n	800e1b4 <__mdiff+0x28>
 800e1e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1ec:	6926      	ldr	r6, [r4, #16]
 800e1ee:	60c5      	str	r5, [r0, #12]
 800e1f0:	f104 0914 	add.w	r9, r4, #20
 800e1f4:	f108 0514 	add.w	r5, r8, #20
 800e1f8:	f100 0e14 	add.w	lr, r0, #20
 800e1fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e204:	f108 0210 	add.w	r2, r8, #16
 800e208:	46f2      	mov	sl, lr
 800e20a:	2100      	movs	r1, #0
 800e20c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e214:	fa11 f88b 	uxtah	r8, r1, fp
 800e218:	b299      	uxth	r1, r3
 800e21a:	0c1b      	lsrs	r3, r3, #16
 800e21c:	eba8 0801 	sub.w	r8, r8, r1
 800e220:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e224:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e228:	fa1f f888 	uxth.w	r8, r8
 800e22c:	1419      	asrs	r1, r3, #16
 800e22e:	454e      	cmp	r6, r9
 800e230:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e234:	f84a 3b04 	str.w	r3, [sl], #4
 800e238:	d8e8      	bhi.n	800e20c <__mdiff+0x80>
 800e23a:	1b33      	subs	r3, r6, r4
 800e23c:	3b15      	subs	r3, #21
 800e23e:	f023 0303 	bic.w	r3, r3, #3
 800e242:	3304      	adds	r3, #4
 800e244:	3415      	adds	r4, #21
 800e246:	42a6      	cmp	r6, r4
 800e248:	bf38      	it	cc
 800e24a:	2304      	movcc	r3, #4
 800e24c:	441d      	add	r5, r3
 800e24e:	4473      	add	r3, lr
 800e250:	469e      	mov	lr, r3
 800e252:	462e      	mov	r6, r5
 800e254:	4566      	cmp	r6, ip
 800e256:	d30e      	bcc.n	800e276 <__mdiff+0xea>
 800e258:	f10c 0203 	add.w	r2, ip, #3
 800e25c:	1b52      	subs	r2, r2, r5
 800e25e:	f022 0203 	bic.w	r2, r2, #3
 800e262:	3d03      	subs	r5, #3
 800e264:	45ac      	cmp	ip, r5
 800e266:	bf38      	it	cc
 800e268:	2200      	movcc	r2, #0
 800e26a:	4413      	add	r3, r2
 800e26c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e270:	b17a      	cbz	r2, 800e292 <__mdiff+0x106>
 800e272:	6107      	str	r7, [r0, #16]
 800e274:	e7a4      	b.n	800e1c0 <__mdiff+0x34>
 800e276:	f856 8b04 	ldr.w	r8, [r6], #4
 800e27a:	fa11 f288 	uxtah	r2, r1, r8
 800e27e:	1414      	asrs	r4, r2, #16
 800e280:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e284:	b292      	uxth	r2, r2
 800e286:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e28a:	f84e 2b04 	str.w	r2, [lr], #4
 800e28e:	1421      	asrs	r1, r4, #16
 800e290:	e7e0      	b.n	800e254 <__mdiff+0xc8>
 800e292:	3f01      	subs	r7, #1
 800e294:	e7ea      	b.n	800e26c <__mdiff+0xe0>
 800e296:	bf00      	nop
 800e298:	0800f791 	.word	0x0800f791
 800e29c:	0800f7a2 	.word	0x0800f7a2

0800e2a0 <__d2b>:
 800e2a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2a4:	460f      	mov	r7, r1
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	ec59 8b10 	vmov	r8, r9, d0
 800e2ac:	4616      	mov	r6, r2
 800e2ae:	f7ff fcd5 	bl	800dc5c <_Balloc>
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	b930      	cbnz	r0, 800e2c4 <__d2b+0x24>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	4b24      	ldr	r3, [pc, #144]	; (800e34c <__d2b+0xac>)
 800e2ba:	4825      	ldr	r0, [pc, #148]	; (800e350 <__d2b+0xb0>)
 800e2bc:	f240 310f 	movw	r1, #783	; 0x30f
 800e2c0:	f000 fc40 	bl	800eb44 <__assert_func>
 800e2c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e2c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2cc:	bb2d      	cbnz	r5, 800e31a <__d2b+0x7a>
 800e2ce:	9301      	str	r3, [sp, #4]
 800e2d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e2d4:	d026      	beq.n	800e324 <__d2b+0x84>
 800e2d6:	4668      	mov	r0, sp
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	f7ff fd87 	bl	800ddec <__lo0bits>
 800e2de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2e2:	b1e8      	cbz	r0, 800e320 <__d2b+0x80>
 800e2e4:	f1c0 0320 	rsb	r3, r0, #32
 800e2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e2ec:	430b      	orrs	r3, r1
 800e2ee:	40c2      	lsrs	r2, r0
 800e2f0:	6163      	str	r3, [r4, #20]
 800e2f2:	9201      	str	r2, [sp, #4]
 800e2f4:	9b01      	ldr	r3, [sp, #4]
 800e2f6:	61a3      	str	r3, [r4, #24]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	bf14      	ite	ne
 800e2fc:	2202      	movne	r2, #2
 800e2fe:	2201      	moveq	r2, #1
 800e300:	6122      	str	r2, [r4, #16]
 800e302:	b1bd      	cbz	r5, 800e334 <__d2b+0x94>
 800e304:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e308:	4405      	add	r5, r0
 800e30a:	603d      	str	r5, [r7, #0]
 800e30c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e310:	6030      	str	r0, [r6, #0]
 800e312:	4620      	mov	r0, r4
 800e314:	b003      	add	sp, #12
 800e316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e31e:	e7d6      	b.n	800e2ce <__d2b+0x2e>
 800e320:	6161      	str	r1, [r4, #20]
 800e322:	e7e7      	b.n	800e2f4 <__d2b+0x54>
 800e324:	a801      	add	r0, sp, #4
 800e326:	f7ff fd61 	bl	800ddec <__lo0bits>
 800e32a:	9b01      	ldr	r3, [sp, #4]
 800e32c:	6163      	str	r3, [r4, #20]
 800e32e:	3020      	adds	r0, #32
 800e330:	2201      	movs	r2, #1
 800e332:	e7e5      	b.n	800e300 <__d2b+0x60>
 800e334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e33c:	6038      	str	r0, [r7, #0]
 800e33e:	6918      	ldr	r0, [r3, #16]
 800e340:	f7ff fd34 	bl	800ddac <__hi0bits>
 800e344:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e348:	e7e2      	b.n	800e310 <__d2b+0x70>
 800e34a:	bf00      	nop
 800e34c:	0800f791 	.word	0x0800f791
 800e350:	0800f7a2 	.word	0x0800f7a2

0800e354 <__ssputs_r>:
 800e354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e358:	688e      	ldr	r6, [r1, #8]
 800e35a:	461f      	mov	r7, r3
 800e35c:	42be      	cmp	r6, r7
 800e35e:	680b      	ldr	r3, [r1, #0]
 800e360:	4682      	mov	sl, r0
 800e362:	460c      	mov	r4, r1
 800e364:	4690      	mov	r8, r2
 800e366:	d82c      	bhi.n	800e3c2 <__ssputs_r+0x6e>
 800e368:	898a      	ldrh	r2, [r1, #12]
 800e36a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e36e:	d026      	beq.n	800e3be <__ssputs_r+0x6a>
 800e370:	6965      	ldr	r5, [r4, #20]
 800e372:	6909      	ldr	r1, [r1, #16]
 800e374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e378:	eba3 0901 	sub.w	r9, r3, r1
 800e37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e380:	1c7b      	adds	r3, r7, #1
 800e382:	444b      	add	r3, r9
 800e384:	106d      	asrs	r5, r5, #1
 800e386:	429d      	cmp	r5, r3
 800e388:	bf38      	it	cc
 800e38a:	461d      	movcc	r5, r3
 800e38c:	0553      	lsls	r3, r2, #21
 800e38e:	d527      	bpl.n	800e3e0 <__ssputs_r+0x8c>
 800e390:	4629      	mov	r1, r5
 800e392:	f7ff fbd7 	bl	800db44 <_malloc_r>
 800e396:	4606      	mov	r6, r0
 800e398:	b360      	cbz	r0, 800e3f4 <__ssputs_r+0xa0>
 800e39a:	6921      	ldr	r1, [r4, #16]
 800e39c:	464a      	mov	r2, r9
 800e39e:	f7fe fcd4 	bl	800cd4a <memcpy>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3ac:	81a3      	strh	r3, [r4, #12]
 800e3ae:	6126      	str	r6, [r4, #16]
 800e3b0:	6165      	str	r5, [r4, #20]
 800e3b2:	444e      	add	r6, r9
 800e3b4:	eba5 0509 	sub.w	r5, r5, r9
 800e3b8:	6026      	str	r6, [r4, #0]
 800e3ba:	60a5      	str	r5, [r4, #8]
 800e3bc:	463e      	mov	r6, r7
 800e3be:	42be      	cmp	r6, r7
 800e3c0:	d900      	bls.n	800e3c4 <__ssputs_r+0x70>
 800e3c2:	463e      	mov	r6, r7
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	4641      	mov	r1, r8
 800e3ca:	f000 fb6f 	bl	800eaac <memmove>
 800e3ce:	68a3      	ldr	r3, [r4, #8]
 800e3d0:	1b9b      	subs	r3, r3, r6
 800e3d2:	60a3      	str	r3, [r4, #8]
 800e3d4:	6823      	ldr	r3, [r4, #0]
 800e3d6:	4433      	add	r3, r6
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	2000      	movs	r0, #0
 800e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e0:	462a      	mov	r2, r5
 800e3e2:	f000 fbf5 	bl	800ebd0 <_realloc_r>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d1e0      	bne.n	800e3ae <__ssputs_r+0x5a>
 800e3ec:	6921      	ldr	r1, [r4, #16]
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	f7ff fb34 	bl	800da5c <_free_r>
 800e3f4:	230c      	movs	r3, #12
 800e3f6:	f8ca 3000 	str.w	r3, [sl]
 800e3fa:	89a3      	ldrh	r3, [r4, #12]
 800e3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e400:	81a3      	strh	r3, [r4, #12]
 800e402:	f04f 30ff 	mov.w	r0, #4294967295
 800e406:	e7e9      	b.n	800e3dc <__ssputs_r+0x88>

0800e408 <_svfiprintf_r>:
 800e408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e40c:	4698      	mov	r8, r3
 800e40e:	898b      	ldrh	r3, [r1, #12]
 800e410:	061b      	lsls	r3, r3, #24
 800e412:	b09d      	sub	sp, #116	; 0x74
 800e414:	4607      	mov	r7, r0
 800e416:	460d      	mov	r5, r1
 800e418:	4614      	mov	r4, r2
 800e41a:	d50e      	bpl.n	800e43a <_svfiprintf_r+0x32>
 800e41c:	690b      	ldr	r3, [r1, #16]
 800e41e:	b963      	cbnz	r3, 800e43a <_svfiprintf_r+0x32>
 800e420:	2140      	movs	r1, #64	; 0x40
 800e422:	f7ff fb8f 	bl	800db44 <_malloc_r>
 800e426:	6028      	str	r0, [r5, #0]
 800e428:	6128      	str	r0, [r5, #16]
 800e42a:	b920      	cbnz	r0, 800e436 <_svfiprintf_r+0x2e>
 800e42c:	230c      	movs	r3, #12
 800e42e:	603b      	str	r3, [r7, #0]
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	e0d0      	b.n	800e5d8 <_svfiprintf_r+0x1d0>
 800e436:	2340      	movs	r3, #64	; 0x40
 800e438:	616b      	str	r3, [r5, #20]
 800e43a:	2300      	movs	r3, #0
 800e43c:	9309      	str	r3, [sp, #36]	; 0x24
 800e43e:	2320      	movs	r3, #32
 800e440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e444:	f8cd 800c 	str.w	r8, [sp, #12]
 800e448:	2330      	movs	r3, #48	; 0x30
 800e44a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e5f0 <_svfiprintf_r+0x1e8>
 800e44e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e452:	f04f 0901 	mov.w	r9, #1
 800e456:	4623      	mov	r3, r4
 800e458:	469a      	mov	sl, r3
 800e45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e45e:	b10a      	cbz	r2, 800e464 <_svfiprintf_r+0x5c>
 800e460:	2a25      	cmp	r2, #37	; 0x25
 800e462:	d1f9      	bne.n	800e458 <_svfiprintf_r+0x50>
 800e464:	ebba 0b04 	subs.w	fp, sl, r4
 800e468:	d00b      	beq.n	800e482 <_svfiprintf_r+0x7a>
 800e46a:	465b      	mov	r3, fp
 800e46c:	4622      	mov	r2, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	4638      	mov	r0, r7
 800e472:	f7ff ff6f 	bl	800e354 <__ssputs_r>
 800e476:	3001      	adds	r0, #1
 800e478:	f000 80a9 	beq.w	800e5ce <_svfiprintf_r+0x1c6>
 800e47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e47e:	445a      	add	r2, fp
 800e480:	9209      	str	r2, [sp, #36]	; 0x24
 800e482:	f89a 3000 	ldrb.w	r3, [sl]
 800e486:	2b00      	cmp	r3, #0
 800e488:	f000 80a1 	beq.w	800e5ce <_svfiprintf_r+0x1c6>
 800e48c:	2300      	movs	r3, #0
 800e48e:	f04f 32ff 	mov.w	r2, #4294967295
 800e492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e496:	f10a 0a01 	add.w	sl, sl, #1
 800e49a:	9304      	str	r3, [sp, #16]
 800e49c:	9307      	str	r3, [sp, #28]
 800e49e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4a2:	931a      	str	r3, [sp, #104]	; 0x68
 800e4a4:	4654      	mov	r4, sl
 800e4a6:	2205      	movs	r2, #5
 800e4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ac:	4850      	ldr	r0, [pc, #320]	; (800e5f0 <_svfiprintf_r+0x1e8>)
 800e4ae:	f7f1 fe8f 	bl	80001d0 <memchr>
 800e4b2:	9a04      	ldr	r2, [sp, #16]
 800e4b4:	b9d8      	cbnz	r0, 800e4ee <_svfiprintf_r+0xe6>
 800e4b6:	06d0      	lsls	r0, r2, #27
 800e4b8:	bf44      	itt	mi
 800e4ba:	2320      	movmi	r3, #32
 800e4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c0:	0711      	lsls	r1, r2, #28
 800e4c2:	bf44      	itt	mi
 800e4c4:	232b      	movmi	r3, #43	; 0x2b
 800e4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800e4d0:	d015      	beq.n	800e4fe <_svfiprintf_r+0xf6>
 800e4d2:	9a07      	ldr	r2, [sp, #28]
 800e4d4:	4654      	mov	r4, sl
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	f04f 0c0a 	mov.w	ip, #10
 800e4dc:	4621      	mov	r1, r4
 800e4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4e2:	3b30      	subs	r3, #48	; 0x30
 800e4e4:	2b09      	cmp	r3, #9
 800e4e6:	d94d      	bls.n	800e584 <_svfiprintf_r+0x17c>
 800e4e8:	b1b0      	cbz	r0, 800e518 <_svfiprintf_r+0x110>
 800e4ea:	9207      	str	r2, [sp, #28]
 800e4ec:	e014      	b.n	800e518 <_svfiprintf_r+0x110>
 800e4ee:	eba0 0308 	sub.w	r3, r0, r8
 800e4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	9304      	str	r3, [sp, #16]
 800e4fa:	46a2      	mov	sl, r4
 800e4fc:	e7d2      	b.n	800e4a4 <_svfiprintf_r+0x9c>
 800e4fe:	9b03      	ldr	r3, [sp, #12]
 800e500:	1d19      	adds	r1, r3, #4
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	9103      	str	r1, [sp, #12]
 800e506:	2b00      	cmp	r3, #0
 800e508:	bfbb      	ittet	lt
 800e50a:	425b      	neglt	r3, r3
 800e50c:	f042 0202 	orrlt.w	r2, r2, #2
 800e510:	9307      	strge	r3, [sp, #28]
 800e512:	9307      	strlt	r3, [sp, #28]
 800e514:	bfb8      	it	lt
 800e516:	9204      	strlt	r2, [sp, #16]
 800e518:	7823      	ldrb	r3, [r4, #0]
 800e51a:	2b2e      	cmp	r3, #46	; 0x2e
 800e51c:	d10c      	bne.n	800e538 <_svfiprintf_r+0x130>
 800e51e:	7863      	ldrb	r3, [r4, #1]
 800e520:	2b2a      	cmp	r3, #42	; 0x2a
 800e522:	d134      	bne.n	800e58e <_svfiprintf_r+0x186>
 800e524:	9b03      	ldr	r3, [sp, #12]
 800e526:	1d1a      	adds	r2, r3, #4
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	9203      	str	r2, [sp, #12]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	bfb8      	it	lt
 800e530:	f04f 33ff 	movlt.w	r3, #4294967295
 800e534:	3402      	adds	r4, #2
 800e536:	9305      	str	r3, [sp, #20]
 800e538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e600 <_svfiprintf_r+0x1f8>
 800e53c:	7821      	ldrb	r1, [r4, #0]
 800e53e:	2203      	movs	r2, #3
 800e540:	4650      	mov	r0, sl
 800e542:	f7f1 fe45 	bl	80001d0 <memchr>
 800e546:	b138      	cbz	r0, 800e558 <_svfiprintf_r+0x150>
 800e548:	9b04      	ldr	r3, [sp, #16]
 800e54a:	eba0 000a 	sub.w	r0, r0, sl
 800e54e:	2240      	movs	r2, #64	; 0x40
 800e550:	4082      	lsls	r2, r0
 800e552:	4313      	orrs	r3, r2
 800e554:	3401      	adds	r4, #1
 800e556:	9304      	str	r3, [sp, #16]
 800e558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55c:	4825      	ldr	r0, [pc, #148]	; (800e5f4 <_svfiprintf_r+0x1ec>)
 800e55e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e562:	2206      	movs	r2, #6
 800e564:	f7f1 fe34 	bl	80001d0 <memchr>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d038      	beq.n	800e5de <_svfiprintf_r+0x1d6>
 800e56c:	4b22      	ldr	r3, [pc, #136]	; (800e5f8 <_svfiprintf_r+0x1f0>)
 800e56e:	bb1b      	cbnz	r3, 800e5b8 <_svfiprintf_r+0x1b0>
 800e570:	9b03      	ldr	r3, [sp, #12]
 800e572:	3307      	adds	r3, #7
 800e574:	f023 0307 	bic.w	r3, r3, #7
 800e578:	3308      	adds	r3, #8
 800e57a:	9303      	str	r3, [sp, #12]
 800e57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57e:	4433      	add	r3, r6
 800e580:	9309      	str	r3, [sp, #36]	; 0x24
 800e582:	e768      	b.n	800e456 <_svfiprintf_r+0x4e>
 800e584:	fb0c 3202 	mla	r2, ip, r2, r3
 800e588:	460c      	mov	r4, r1
 800e58a:	2001      	movs	r0, #1
 800e58c:	e7a6      	b.n	800e4dc <_svfiprintf_r+0xd4>
 800e58e:	2300      	movs	r3, #0
 800e590:	3401      	adds	r4, #1
 800e592:	9305      	str	r3, [sp, #20]
 800e594:	4619      	mov	r1, r3
 800e596:	f04f 0c0a 	mov.w	ip, #10
 800e59a:	4620      	mov	r0, r4
 800e59c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5a0:	3a30      	subs	r2, #48	; 0x30
 800e5a2:	2a09      	cmp	r2, #9
 800e5a4:	d903      	bls.n	800e5ae <_svfiprintf_r+0x1a6>
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d0c6      	beq.n	800e538 <_svfiprintf_r+0x130>
 800e5aa:	9105      	str	r1, [sp, #20]
 800e5ac:	e7c4      	b.n	800e538 <_svfiprintf_r+0x130>
 800e5ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e7f0      	b.n	800e59a <_svfiprintf_r+0x192>
 800e5b8:	ab03      	add	r3, sp, #12
 800e5ba:	9300      	str	r3, [sp, #0]
 800e5bc:	462a      	mov	r2, r5
 800e5be:	4b0f      	ldr	r3, [pc, #60]	; (800e5fc <_svfiprintf_r+0x1f4>)
 800e5c0:	a904      	add	r1, sp, #16
 800e5c2:	4638      	mov	r0, r7
 800e5c4:	f7fd fd54 	bl	800c070 <_printf_float>
 800e5c8:	1c42      	adds	r2, r0, #1
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	d1d6      	bne.n	800e57c <_svfiprintf_r+0x174>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	065b      	lsls	r3, r3, #25
 800e5d2:	f53f af2d 	bmi.w	800e430 <_svfiprintf_r+0x28>
 800e5d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5d8:	b01d      	add	sp, #116	; 0x74
 800e5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5de:	ab03      	add	r3, sp, #12
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	462a      	mov	r2, r5
 800e5e4:	4b05      	ldr	r3, [pc, #20]	; (800e5fc <_svfiprintf_r+0x1f4>)
 800e5e6:	a904      	add	r1, sp, #16
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	f7fd ffe5 	bl	800c5b8 <_printf_i>
 800e5ee:	e7eb      	b.n	800e5c8 <_svfiprintf_r+0x1c0>
 800e5f0:	0800f8fc 	.word	0x0800f8fc
 800e5f4:	0800f906 	.word	0x0800f906
 800e5f8:	0800c071 	.word	0x0800c071
 800e5fc:	0800e355 	.word	0x0800e355
 800e600:	0800f902 	.word	0x0800f902

0800e604 <__sfputc_r>:
 800e604:	6893      	ldr	r3, [r2, #8]
 800e606:	3b01      	subs	r3, #1
 800e608:	2b00      	cmp	r3, #0
 800e60a:	b410      	push	{r4}
 800e60c:	6093      	str	r3, [r2, #8]
 800e60e:	da08      	bge.n	800e622 <__sfputc_r+0x1e>
 800e610:	6994      	ldr	r4, [r2, #24]
 800e612:	42a3      	cmp	r3, r4
 800e614:	db01      	blt.n	800e61a <__sfputc_r+0x16>
 800e616:	290a      	cmp	r1, #10
 800e618:	d103      	bne.n	800e622 <__sfputc_r+0x1e>
 800e61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e61e:	f7fe ba80 	b.w	800cb22 <__swbuf_r>
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	1c58      	adds	r0, r3, #1
 800e626:	6010      	str	r0, [r2, #0]
 800e628:	7019      	strb	r1, [r3, #0]
 800e62a:	4608      	mov	r0, r1
 800e62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <__sfputs_r>:
 800e632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e634:	4606      	mov	r6, r0
 800e636:	460f      	mov	r7, r1
 800e638:	4614      	mov	r4, r2
 800e63a:	18d5      	adds	r5, r2, r3
 800e63c:	42ac      	cmp	r4, r5
 800e63e:	d101      	bne.n	800e644 <__sfputs_r+0x12>
 800e640:	2000      	movs	r0, #0
 800e642:	e007      	b.n	800e654 <__sfputs_r+0x22>
 800e644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e648:	463a      	mov	r2, r7
 800e64a:	4630      	mov	r0, r6
 800e64c:	f7ff ffda 	bl	800e604 <__sfputc_r>
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	d1f3      	bne.n	800e63c <__sfputs_r+0xa>
 800e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e658 <_vfiprintf_r>:
 800e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	460d      	mov	r5, r1
 800e65e:	b09d      	sub	sp, #116	; 0x74
 800e660:	4614      	mov	r4, r2
 800e662:	4698      	mov	r8, r3
 800e664:	4606      	mov	r6, r0
 800e666:	b118      	cbz	r0, 800e670 <_vfiprintf_r+0x18>
 800e668:	6a03      	ldr	r3, [r0, #32]
 800e66a:	b90b      	cbnz	r3, 800e670 <_vfiprintf_r+0x18>
 800e66c:	f7fe f952 	bl	800c914 <__sinit>
 800e670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e672:	07d9      	lsls	r1, r3, #31
 800e674:	d405      	bmi.n	800e682 <_vfiprintf_r+0x2a>
 800e676:	89ab      	ldrh	r3, [r5, #12]
 800e678:	059a      	lsls	r2, r3, #22
 800e67a:	d402      	bmi.n	800e682 <_vfiprintf_r+0x2a>
 800e67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e67e:	f7fe fb62 	bl	800cd46 <__retarget_lock_acquire_recursive>
 800e682:	89ab      	ldrh	r3, [r5, #12]
 800e684:	071b      	lsls	r3, r3, #28
 800e686:	d501      	bpl.n	800e68c <_vfiprintf_r+0x34>
 800e688:	692b      	ldr	r3, [r5, #16]
 800e68a:	b99b      	cbnz	r3, 800e6b4 <_vfiprintf_r+0x5c>
 800e68c:	4629      	mov	r1, r5
 800e68e:	4630      	mov	r0, r6
 800e690:	f7fe fa84 	bl	800cb9c <__swsetup_r>
 800e694:	b170      	cbz	r0, 800e6b4 <_vfiprintf_r+0x5c>
 800e696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e698:	07dc      	lsls	r4, r3, #31
 800e69a:	d504      	bpl.n	800e6a6 <_vfiprintf_r+0x4e>
 800e69c:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a0:	b01d      	add	sp, #116	; 0x74
 800e6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a6:	89ab      	ldrh	r3, [r5, #12]
 800e6a8:	0598      	lsls	r0, r3, #22
 800e6aa:	d4f7      	bmi.n	800e69c <_vfiprintf_r+0x44>
 800e6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6ae:	f7fe fb4b 	bl	800cd48 <__retarget_lock_release_recursive>
 800e6b2:	e7f3      	b.n	800e69c <_vfiprintf_r+0x44>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b8:	2320      	movs	r3, #32
 800e6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6c2:	2330      	movs	r3, #48	; 0x30
 800e6c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e878 <_vfiprintf_r+0x220>
 800e6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6cc:	f04f 0901 	mov.w	r9, #1
 800e6d0:	4623      	mov	r3, r4
 800e6d2:	469a      	mov	sl, r3
 800e6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d8:	b10a      	cbz	r2, 800e6de <_vfiprintf_r+0x86>
 800e6da:	2a25      	cmp	r2, #37	; 0x25
 800e6dc:	d1f9      	bne.n	800e6d2 <_vfiprintf_r+0x7a>
 800e6de:	ebba 0b04 	subs.w	fp, sl, r4
 800e6e2:	d00b      	beq.n	800e6fc <_vfiprintf_r+0xa4>
 800e6e4:	465b      	mov	r3, fp
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	4629      	mov	r1, r5
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f7ff ffa1 	bl	800e632 <__sfputs_r>
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	f000 80a9 	beq.w	800e848 <_vfiprintf_r+0x1f0>
 800e6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6f8:	445a      	add	r2, fp
 800e6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 80a1 	beq.w	800e848 <_vfiprintf_r+0x1f0>
 800e706:	2300      	movs	r3, #0
 800e708:	f04f 32ff 	mov.w	r2, #4294967295
 800e70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e710:	f10a 0a01 	add.w	sl, sl, #1
 800e714:	9304      	str	r3, [sp, #16]
 800e716:	9307      	str	r3, [sp, #28]
 800e718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e71c:	931a      	str	r3, [sp, #104]	; 0x68
 800e71e:	4654      	mov	r4, sl
 800e720:	2205      	movs	r2, #5
 800e722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e726:	4854      	ldr	r0, [pc, #336]	; (800e878 <_vfiprintf_r+0x220>)
 800e728:	f7f1 fd52 	bl	80001d0 <memchr>
 800e72c:	9a04      	ldr	r2, [sp, #16]
 800e72e:	b9d8      	cbnz	r0, 800e768 <_vfiprintf_r+0x110>
 800e730:	06d1      	lsls	r1, r2, #27
 800e732:	bf44      	itt	mi
 800e734:	2320      	movmi	r3, #32
 800e736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e73a:	0713      	lsls	r3, r2, #28
 800e73c:	bf44      	itt	mi
 800e73e:	232b      	movmi	r3, #43	; 0x2b
 800e740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e744:	f89a 3000 	ldrb.w	r3, [sl]
 800e748:	2b2a      	cmp	r3, #42	; 0x2a
 800e74a:	d015      	beq.n	800e778 <_vfiprintf_r+0x120>
 800e74c:	9a07      	ldr	r2, [sp, #28]
 800e74e:	4654      	mov	r4, sl
 800e750:	2000      	movs	r0, #0
 800e752:	f04f 0c0a 	mov.w	ip, #10
 800e756:	4621      	mov	r1, r4
 800e758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e75c:	3b30      	subs	r3, #48	; 0x30
 800e75e:	2b09      	cmp	r3, #9
 800e760:	d94d      	bls.n	800e7fe <_vfiprintf_r+0x1a6>
 800e762:	b1b0      	cbz	r0, 800e792 <_vfiprintf_r+0x13a>
 800e764:	9207      	str	r2, [sp, #28]
 800e766:	e014      	b.n	800e792 <_vfiprintf_r+0x13a>
 800e768:	eba0 0308 	sub.w	r3, r0, r8
 800e76c:	fa09 f303 	lsl.w	r3, r9, r3
 800e770:	4313      	orrs	r3, r2
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	46a2      	mov	sl, r4
 800e776:	e7d2      	b.n	800e71e <_vfiprintf_r+0xc6>
 800e778:	9b03      	ldr	r3, [sp, #12]
 800e77a:	1d19      	adds	r1, r3, #4
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	9103      	str	r1, [sp, #12]
 800e780:	2b00      	cmp	r3, #0
 800e782:	bfbb      	ittet	lt
 800e784:	425b      	neglt	r3, r3
 800e786:	f042 0202 	orrlt.w	r2, r2, #2
 800e78a:	9307      	strge	r3, [sp, #28]
 800e78c:	9307      	strlt	r3, [sp, #28]
 800e78e:	bfb8      	it	lt
 800e790:	9204      	strlt	r2, [sp, #16]
 800e792:	7823      	ldrb	r3, [r4, #0]
 800e794:	2b2e      	cmp	r3, #46	; 0x2e
 800e796:	d10c      	bne.n	800e7b2 <_vfiprintf_r+0x15a>
 800e798:	7863      	ldrb	r3, [r4, #1]
 800e79a:	2b2a      	cmp	r3, #42	; 0x2a
 800e79c:	d134      	bne.n	800e808 <_vfiprintf_r+0x1b0>
 800e79e:	9b03      	ldr	r3, [sp, #12]
 800e7a0:	1d1a      	adds	r2, r3, #4
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	9203      	str	r2, [sp, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	bfb8      	it	lt
 800e7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7ae:	3402      	adds	r4, #2
 800e7b0:	9305      	str	r3, [sp, #20]
 800e7b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e888 <_vfiprintf_r+0x230>
 800e7b6:	7821      	ldrb	r1, [r4, #0]
 800e7b8:	2203      	movs	r2, #3
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	f7f1 fd08 	bl	80001d0 <memchr>
 800e7c0:	b138      	cbz	r0, 800e7d2 <_vfiprintf_r+0x17a>
 800e7c2:	9b04      	ldr	r3, [sp, #16]
 800e7c4:	eba0 000a 	sub.w	r0, r0, sl
 800e7c8:	2240      	movs	r2, #64	; 0x40
 800e7ca:	4082      	lsls	r2, r0
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	3401      	adds	r4, #1
 800e7d0:	9304      	str	r3, [sp, #16]
 800e7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7d6:	4829      	ldr	r0, [pc, #164]	; (800e87c <_vfiprintf_r+0x224>)
 800e7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7dc:	2206      	movs	r2, #6
 800e7de:	f7f1 fcf7 	bl	80001d0 <memchr>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d03f      	beq.n	800e866 <_vfiprintf_r+0x20e>
 800e7e6:	4b26      	ldr	r3, [pc, #152]	; (800e880 <_vfiprintf_r+0x228>)
 800e7e8:	bb1b      	cbnz	r3, 800e832 <_vfiprintf_r+0x1da>
 800e7ea:	9b03      	ldr	r3, [sp, #12]
 800e7ec:	3307      	adds	r3, #7
 800e7ee:	f023 0307 	bic.w	r3, r3, #7
 800e7f2:	3308      	adds	r3, #8
 800e7f4:	9303      	str	r3, [sp, #12]
 800e7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f8:	443b      	add	r3, r7
 800e7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e7fc:	e768      	b.n	800e6d0 <_vfiprintf_r+0x78>
 800e7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e802:	460c      	mov	r4, r1
 800e804:	2001      	movs	r0, #1
 800e806:	e7a6      	b.n	800e756 <_vfiprintf_r+0xfe>
 800e808:	2300      	movs	r3, #0
 800e80a:	3401      	adds	r4, #1
 800e80c:	9305      	str	r3, [sp, #20]
 800e80e:	4619      	mov	r1, r3
 800e810:	f04f 0c0a 	mov.w	ip, #10
 800e814:	4620      	mov	r0, r4
 800e816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e81a:	3a30      	subs	r2, #48	; 0x30
 800e81c:	2a09      	cmp	r2, #9
 800e81e:	d903      	bls.n	800e828 <_vfiprintf_r+0x1d0>
 800e820:	2b00      	cmp	r3, #0
 800e822:	d0c6      	beq.n	800e7b2 <_vfiprintf_r+0x15a>
 800e824:	9105      	str	r1, [sp, #20]
 800e826:	e7c4      	b.n	800e7b2 <_vfiprintf_r+0x15a>
 800e828:	fb0c 2101 	mla	r1, ip, r1, r2
 800e82c:	4604      	mov	r4, r0
 800e82e:	2301      	movs	r3, #1
 800e830:	e7f0      	b.n	800e814 <_vfiprintf_r+0x1bc>
 800e832:	ab03      	add	r3, sp, #12
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	462a      	mov	r2, r5
 800e838:	4b12      	ldr	r3, [pc, #72]	; (800e884 <_vfiprintf_r+0x22c>)
 800e83a:	a904      	add	r1, sp, #16
 800e83c:	4630      	mov	r0, r6
 800e83e:	f7fd fc17 	bl	800c070 <_printf_float>
 800e842:	4607      	mov	r7, r0
 800e844:	1c78      	adds	r0, r7, #1
 800e846:	d1d6      	bne.n	800e7f6 <_vfiprintf_r+0x19e>
 800e848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e84a:	07d9      	lsls	r1, r3, #31
 800e84c:	d405      	bmi.n	800e85a <_vfiprintf_r+0x202>
 800e84e:	89ab      	ldrh	r3, [r5, #12]
 800e850:	059a      	lsls	r2, r3, #22
 800e852:	d402      	bmi.n	800e85a <_vfiprintf_r+0x202>
 800e854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e856:	f7fe fa77 	bl	800cd48 <__retarget_lock_release_recursive>
 800e85a:	89ab      	ldrh	r3, [r5, #12]
 800e85c:	065b      	lsls	r3, r3, #25
 800e85e:	f53f af1d 	bmi.w	800e69c <_vfiprintf_r+0x44>
 800e862:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e864:	e71c      	b.n	800e6a0 <_vfiprintf_r+0x48>
 800e866:	ab03      	add	r3, sp, #12
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	462a      	mov	r2, r5
 800e86c:	4b05      	ldr	r3, [pc, #20]	; (800e884 <_vfiprintf_r+0x22c>)
 800e86e:	a904      	add	r1, sp, #16
 800e870:	4630      	mov	r0, r6
 800e872:	f7fd fea1 	bl	800c5b8 <_printf_i>
 800e876:	e7e4      	b.n	800e842 <_vfiprintf_r+0x1ea>
 800e878:	0800f8fc 	.word	0x0800f8fc
 800e87c:	0800f906 	.word	0x0800f906
 800e880:	0800c071 	.word	0x0800c071
 800e884:	0800e633 	.word	0x0800e633
 800e888:	0800f902 	.word	0x0800f902

0800e88c <__sflush_r>:
 800e88c:	898a      	ldrh	r2, [r1, #12]
 800e88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e892:	4605      	mov	r5, r0
 800e894:	0710      	lsls	r0, r2, #28
 800e896:	460c      	mov	r4, r1
 800e898:	d458      	bmi.n	800e94c <__sflush_r+0xc0>
 800e89a:	684b      	ldr	r3, [r1, #4]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dc05      	bgt.n	800e8ac <__sflush_r+0x20>
 800e8a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	dc02      	bgt.n	800e8ac <__sflush_r+0x20>
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8ae:	2e00      	cmp	r6, #0
 800e8b0:	d0f9      	beq.n	800e8a6 <__sflush_r+0x1a>
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e8b8:	682f      	ldr	r7, [r5, #0]
 800e8ba:	6a21      	ldr	r1, [r4, #32]
 800e8bc:	602b      	str	r3, [r5, #0]
 800e8be:	d032      	beq.n	800e926 <__sflush_r+0x9a>
 800e8c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e8c2:	89a3      	ldrh	r3, [r4, #12]
 800e8c4:	075a      	lsls	r2, r3, #29
 800e8c6:	d505      	bpl.n	800e8d4 <__sflush_r+0x48>
 800e8c8:	6863      	ldr	r3, [r4, #4]
 800e8ca:	1ac0      	subs	r0, r0, r3
 800e8cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8ce:	b10b      	cbz	r3, 800e8d4 <__sflush_r+0x48>
 800e8d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8d2:	1ac0      	subs	r0, r0, r3
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8da:	6a21      	ldr	r1, [r4, #32]
 800e8dc:	4628      	mov	r0, r5
 800e8de:	47b0      	blx	r6
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	89a3      	ldrh	r3, [r4, #12]
 800e8e4:	d106      	bne.n	800e8f4 <__sflush_r+0x68>
 800e8e6:	6829      	ldr	r1, [r5, #0]
 800e8e8:	291d      	cmp	r1, #29
 800e8ea:	d82b      	bhi.n	800e944 <__sflush_r+0xb8>
 800e8ec:	4a29      	ldr	r2, [pc, #164]	; (800e994 <__sflush_r+0x108>)
 800e8ee:	410a      	asrs	r2, r1
 800e8f0:	07d6      	lsls	r6, r2, #31
 800e8f2:	d427      	bmi.n	800e944 <__sflush_r+0xb8>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	6062      	str	r2, [r4, #4]
 800e8f8:	04d9      	lsls	r1, r3, #19
 800e8fa:	6922      	ldr	r2, [r4, #16]
 800e8fc:	6022      	str	r2, [r4, #0]
 800e8fe:	d504      	bpl.n	800e90a <__sflush_r+0x7e>
 800e900:	1c42      	adds	r2, r0, #1
 800e902:	d101      	bne.n	800e908 <__sflush_r+0x7c>
 800e904:	682b      	ldr	r3, [r5, #0]
 800e906:	b903      	cbnz	r3, 800e90a <__sflush_r+0x7e>
 800e908:	6560      	str	r0, [r4, #84]	; 0x54
 800e90a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e90c:	602f      	str	r7, [r5, #0]
 800e90e:	2900      	cmp	r1, #0
 800e910:	d0c9      	beq.n	800e8a6 <__sflush_r+0x1a>
 800e912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e916:	4299      	cmp	r1, r3
 800e918:	d002      	beq.n	800e920 <__sflush_r+0x94>
 800e91a:	4628      	mov	r0, r5
 800e91c:	f7ff f89e 	bl	800da5c <_free_r>
 800e920:	2000      	movs	r0, #0
 800e922:	6360      	str	r0, [r4, #52]	; 0x34
 800e924:	e7c0      	b.n	800e8a8 <__sflush_r+0x1c>
 800e926:	2301      	movs	r3, #1
 800e928:	4628      	mov	r0, r5
 800e92a:	47b0      	blx	r6
 800e92c:	1c41      	adds	r1, r0, #1
 800e92e:	d1c8      	bne.n	800e8c2 <__sflush_r+0x36>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d0c5      	beq.n	800e8c2 <__sflush_r+0x36>
 800e936:	2b1d      	cmp	r3, #29
 800e938:	d001      	beq.n	800e93e <__sflush_r+0xb2>
 800e93a:	2b16      	cmp	r3, #22
 800e93c:	d101      	bne.n	800e942 <__sflush_r+0xb6>
 800e93e:	602f      	str	r7, [r5, #0]
 800e940:	e7b1      	b.n	800e8a6 <__sflush_r+0x1a>
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e948:	81a3      	strh	r3, [r4, #12]
 800e94a:	e7ad      	b.n	800e8a8 <__sflush_r+0x1c>
 800e94c:	690f      	ldr	r7, [r1, #16]
 800e94e:	2f00      	cmp	r7, #0
 800e950:	d0a9      	beq.n	800e8a6 <__sflush_r+0x1a>
 800e952:	0793      	lsls	r3, r2, #30
 800e954:	680e      	ldr	r6, [r1, #0]
 800e956:	bf08      	it	eq
 800e958:	694b      	ldreq	r3, [r1, #20]
 800e95a:	600f      	str	r7, [r1, #0]
 800e95c:	bf18      	it	ne
 800e95e:	2300      	movne	r3, #0
 800e960:	eba6 0807 	sub.w	r8, r6, r7
 800e964:	608b      	str	r3, [r1, #8]
 800e966:	f1b8 0f00 	cmp.w	r8, #0
 800e96a:	dd9c      	ble.n	800e8a6 <__sflush_r+0x1a>
 800e96c:	6a21      	ldr	r1, [r4, #32]
 800e96e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e970:	4643      	mov	r3, r8
 800e972:	463a      	mov	r2, r7
 800e974:	4628      	mov	r0, r5
 800e976:	47b0      	blx	r6
 800e978:	2800      	cmp	r0, #0
 800e97a:	dc06      	bgt.n	800e98a <__sflush_r+0xfe>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e982:	81a3      	strh	r3, [r4, #12]
 800e984:	f04f 30ff 	mov.w	r0, #4294967295
 800e988:	e78e      	b.n	800e8a8 <__sflush_r+0x1c>
 800e98a:	4407      	add	r7, r0
 800e98c:	eba8 0800 	sub.w	r8, r8, r0
 800e990:	e7e9      	b.n	800e966 <__sflush_r+0xda>
 800e992:	bf00      	nop
 800e994:	dfbffffe 	.word	0xdfbffffe

0800e998 <_fflush_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	690b      	ldr	r3, [r1, #16]
 800e99c:	4605      	mov	r5, r0
 800e99e:	460c      	mov	r4, r1
 800e9a0:	b913      	cbnz	r3, 800e9a8 <_fflush_r+0x10>
 800e9a2:	2500      	movs	r5, #0
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}
 800e9a8:	b118      	cbz	r0, 800e9b2 <_fflush_r+0x1a>
 800e9aa:	6a03      	ldr	r3, [r0, #32]
 800e9ac:	b90b      	cbnz	r3, 800e9b2 <_fflush_r+0x1a>
 800e9ae:	f7fd ffb1 	bl	800c914 <__sinit>
 800e9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0f3      	beq.n	800e9a2 <_fflush_r+0xa>
 800e9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9bc:	07d0      	lsls	r0, r2, #31
 800e9be:	d404      	bmi.n	800e9ca <_fflush_r+0x32>
 800e9c0:	0599      	lsls	r1, r3, #22
 800e9c2:	d402      	bmi.n	800e9ca <_fflush_r+0x32>
 800e9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9c6:	f7fe f9be 	bl	800cd46 <__retarget_lock_acquire_recursive>
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	f7ff ff5d 	bl	800e88c <__sflush_r>
 800e9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9d4:	07da      	lsls	r2, r3, #31
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	d4e4      	bmi.n	800e9a4 <_fflush_r+0xc>
 800e9da:	89a3      	ldrh	r3, [r4, #12]
 800e9dc:	059b      	lsls	r3, r3, #22
 800e9de:	d4e1      	bmi.n	800e9a4 <_fflush_r+0xc>
 800e9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9e2:	f7fe f9b1 	bl	800cd48 <__retarget_lock_release_recursive>
 800e9e6:	e7dd      	b.n	800e9a4 <_fflush_r+0xc>

0800e9e8 <__swhatbuf_r>:
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f0:	2900      	cmp	r1, #0
 800e9f2:	b096      	sub	sp, #88	; 0x58
 800e9f4:	4615      	mov	r5, r2
 800e9f6:	461e      	mov	r6, r3
 800e9f8:	da0d      	bge.n	800ea16 <__swhatbuf_r+0x2e>
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ea00:	f04f 0100 	mov.w	r1, #0
 800ea04:	bf0c      	ite	eq
 800ea06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ea0a:	2340      	movne	r3, #64	; 0x40
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	6031      	str	r1, [r6, #0]
 800ea10:	602b      	str	r3, [r5, #0]
 800ea12:	b016      	add	sp, #88	; 0x58
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	466a      	mov	r2, sp
 800ea18:	f000 f862 	bl	800eae0 <_fstat_r>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	dbec      	blt.n	800e9fa <__swhatbuf_r+0x12>
 800ea20:	9901      	ldr	r1, [sp, #4]
 800ea22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ea26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ea2a:	4259      	negs	r1, r3
 800ea2c:	4159      	adcs	r1, r3
 800ea2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea32:	e7eb      	b.n	800ea0c <__swhatbuf_r+0x24>

0800ea34 <__smakebuf_r>:
 800ea34:	898b      	ldrh	r3, [r1, #12]
 800ea36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea38:	079d      	lsls	r5, r3, #30
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460c      	mov	r4, r1
 800ea3e:	d507      	bpl.n	800ea50 <__smakebuf_r+0x1c>
 800ea40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	6123      	str	r3, [r4, #16]
 800ea48:	2301      	movs	r3, #1
 800ea4a:	6163      	str	r3, [r4, #20]
 800ea4c:	b002      	add	sp, #8
 800ea4e:	bd70      	pop	{r4, r5, r6, pc}
 800ea50:	ab01      	add	r3, sp, #4
 800ea52:	466a      	mov	r2, sp
 800ea54:	f7ff ffc8 	bl	800e9e8 <__swhatbuf_r>
 800ea58:	9900      	ldr	r1, [sp, #0]
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7ff f871 	bl	800db44 <_malloc_r>
 800ea62:	b948      	cbnz	r0, 800ea78 <__smakebuf_r+0x44>
 800ea64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea68:	059a      	lsls	r2, r3, #22
 800ea6a:	d4ef      	bmi.n	800ea4c <__smakebuf_r+0x18>
 800ea6c:	f023 0303 	bic.w	r3, r3, #3
 800ea70:	f043 0302 	orr.w	r3, r3, #2
 800ea74:	81a3      	strh	r3, [r4, #12]
 800ea76:	e7e3      	b.n	800ea40 <__smakebuf_r+0xc>
 800ea78:	89a3      	ldrh	r3, [r4, #12]
 800ea7a:	6020      	str	r0, [r4, #0]
 800ea7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea80:	81a3      	strh	r3, [r4, #12]
 800ea82:	9b00      	ldr	r3, [sp, #0]
 800ea84:	6163      	str	r3, [r4, #20]
 800ea86:	9b01      	ldr	r3, [sp, #4]
 800ea88:	6120      	str	r0, [r4, #16]
 800ea8a:	b15b      	cbz	r3, 800eaa4 <__smakebuf_r+0x70>
 800ea8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea90:	4630      	mov	r0, r6
 800ea92:	f000 f837 	bl	800eb04 <_isatty_r>
 800ea96:	b128      	cbz	r0, 800eaa4 <__smakebuf_r+0x70>
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	f023 0303 	bic.w	r3, r3, #3
 800ea9e:	f043 0301 	orr.w	r3, r3, #1
 800eaa2:	81a3      	strh	r3, [r4, #12]
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	431d      	orrs	r5, r3
 800eaa8:	81a5      	strh	r5, [r4, #12]
 800eaaa:	e7cf      	b.n	800ea4c <__smakebuf_r+0x18>

0800eaac <memmove>:
 800eaac:	4288      	cmp	r0, r1
 800eaae:	b510      	push	{r4, lr}
 800eab0:	eb01 0402 	add.w	r4, r1, r2
 800eab4:	d902      	bls.n	800eabc <memmove+0x10>
 800eab6:	4284      	cmp	r4, r0
 800eab8:	4623      	mov	r3, r4
 800eaba:	d807      	bhi.n	800eacc <memmove+0x20>
 800eabc:	1e43      	subs	r3, r0, #1
 800eabe:	42a1      	cmp	r1, r4
 800eac0:	d008      	beq.n	800ead4 <memmove+0x28>
 800eac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eaca:	e7f8      	b.n	800eabe <memmove+0x12>
 800eacc:	4402      	add	r2, r0
 800eace:	4601      	mov	r1, r0
 800ead0:	428a      	cmp	r2, r1
 800ead2:	d100      	bne.n	800ead6 <memmove+0x2a>
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eade:	e7f7      	b.n	800ead0 <memmove+0x24>

0800eae0 <_fstat_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4d07      	ldr	r5, [pc, #28]	; (800eb00 <_fstat_r+0x20>)
 800eae4:	2300      	movs	r3, #0
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	4611      	mov	r1, r2
 800eaec:	602b      	str	r3, [r5, #0]
 800eaee:	f7f4 f978 	bl	8002de2 <_fstat>
 800eaf2:	1c43      	adds	r3, r0, #1
 800eaf4:	d102      	bne.n	800eafc <_fstat_r+0x1c>
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	b103      	cbz	r3, 800eafc <_fstat_r+0x1c>
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	bd38      	pop	{r3, r4, r5, pc}
 800eafe:	bf00      	nop
 800eb00:	20002864 	.word	0x20002864

0800eb04 <_isatty_r>:
 800eb04:	b538      	push	{r3, r4, r5, lr}
 800eb06:	4d06      	ldr	r5, [pc, #24]	; (800eb20 <_isatty_r+0x1c>)
 800eb08:	2300      	movs	r3, #0
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	4608      	mov	r0, r1
 800eb0e:	602b      	str	r3, [r5, #0]
 800eb10:	f7f4 f977 	bl	8002e02 <_isatty>
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	d102      	bne.n	800eb1e <_isatty_r+0x1a>
 800eb18:	682b      	ldr	r3, [r5, #0]
 800eb1a:	b103      	cbz	r3, 800eb1e <_isatty_r+0x1a>
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	20002864 	.word	0x20002864

0800eb24 <_sbrk_r>:
 800eb24:	b538      	push	{r3, r4, r5, lr}
 800eb26:	4d06      	ldr	r5, [pc, #24]	; (800eb40 <_sbrk_r+0x1c>)
 800eb28:	2300      	movs	r3, #0
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	4608      	mov	r0, r1
 800eb2e:	602b      	str	r3, [r5, #0]
 800eb30:	f7f4 f980 	bl	8002e34 <_sbrk>
 800eb34:	1c43      	adds	r3, r0, #1
 800eb36:	d102      	bne.n	800eb3e <_sbrk_r+0x1a>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	b103      	cbz	r3, 800eb3e <_sbrk_r+0x1a>
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	bd38      	pop	{r3, r4, r5, pc}
 800eb40:	20002864 	.word	0x20002864

0800eb44 <__assert_func>:
 800eb44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb46:	4614      	mov	r4, r2
 800eb48:	461a      	mov	r2, r3
 800eb4a:	4b09      	ldr	r3, [pc, #36]	; (800eb70 <__assert_func+0x2c>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4605      	mov	r5, r0
 800eb50:	68d8      	ldr	r0, [r3, #12]
 800eb52:	b14c      	cbz	r4, 800eb68 <__assert_func+0x24>
 800eb54:	4b07      	ldr	r3, [pc, #28]	; (800eb74 <__assert_func+0x30>)
 800eb56:	9100      	str	r1, [sp, #0]
 800eb58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb5c:	4906      	ldr	r1, [pc, #24]	; (800eb78 <__assert_func+0x34>)
 800eb5e:	462b      	mov	r3, r5
 800eb60:	f000 f872 	bl	800ec48 <fiprintf>
 800eb64:	f000 f882 	bl	800ec6c <abort>
 800eb68:	4b04      	ldr	r3, [pc, #16]	; (800eb7c <__assert_func+0x38>)
 800eb6a:	461c      	mov	r4, r3
 800eb6c:	e7f3      	b.n	800eb56 <__assert_func+0x12>
 800eb6e:	bf00      	nop
 800eb70:	20000080 	.word	0x20000080
 800eb74:	0800f917 	.word	0x0800f917
 800eb78:	0800f924 	.word	0x0800f924
 800eb7c:	0800f952 	.word	0x0800f952

0800eb80 <_calloc_r>:
 800eb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb82:	fba1 2402 	umull	r2, r4, r1, r2
 800eb86:	b94c      	cbnz	r4, 800eb9c <_calloc_r+0x1c>
 800eb88:	4611      	mov	r1, r2
 800eb8a:	9201      	str	r2, [sp, #4]
 800eb8c:	f7fe ffda 	bl	800db44 <_malloc_r>
 800eb90:	9a01      	ldr	r2, [sp, #4]
 800eb92:	4605      	mov	r5, r0
 800eb94:	b930      	cbnz	r0, 800eba4 <_calloc_r+0x24>
 800eb96:	4628      	mov	r0, r5
 800eb98:	b003      	add	sp, #12
 800eb9a:	bd30      	pop	{r4, r5, pc}
 800eb9c:	220c      	movs	r2, #12
 800eb9e:	6002      	str	r2, [r0, #0]
 800eba0:	2500      	movs	r5, #0
 800eba2:	e7f8      	b.n	800eb96 <_calloc_r+0x16>
 800eba4:	4621      	mov	r1, r4
 800eba6:	f7fe f851 	bl	800cc4c <memset>
 800ebaa:	e7f4      	b.n	800eb96 <_calloc_r+0x16>

0800ebac <__ascii_mbtowc>:
 800ebac:	b082      	sub	sp, #8
 800ebae:	b901      	cbnz	r1, 800ebb2 <__ascii_mbtowc+0x6>
 800ebb0:	a901      	add	r1, sp, #4
 800ebb2:	b142      	cbz	r2, 800ebc6 <__ascii_mbtowc+0x1a>
 800ebb4:	b14b      	cbz	r3, 800ebca <__ascii_mbtowc+0x1e>
 800ebb6:	7813      	ldrb	r3, [r2, #0]
 800ebb8:	600b      	str	r3, [r1, #0]
 800ebba:	7812      	ldrb	r2, [r2, #0]
 800ebbc:	1e10      	subs	r0, r2, #0
 800ebbe:	bf18      	it	ne
 800ebc0:	2001      	movne	r0, #1
 800ebc2:	b002      	add	sp, #8
 800ebc4:	4770      	bx	lr
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	e7fb      	b.n	800ebc2 <__ascii_mbtowc+0x16>
 800ebca:	f06f 0001 	mvn.w	r0, #1
 800ebce:	e7f8      	b.n	800ebc2 <__ascii_mbtowc+0x16>

0800ebd0 <_realloc_r>:
 800ebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4614      	mov	r4, r2
 800ebd8:	460e      	mov	r6, r1
 800ebda:	b921      	cbnz	r1, 800ebe6 <_realloc_r+0x16>
 800ebdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	f7fe bfaf 	b.w	800db44 <_malloc_r>
 800ebe6:	b92a      	cbnz	r2, 800ebf4 <_realloc_r+0x24>
 800ebe8:	f7fe ff38 	bl	800da5c <_free_r>
 800ebec:	4625      	mov	r5, r4
 800ebee:	4628      	mov	r0, r5
 800ebf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf4:	f000 f841 	bl	800ec7a <_malloc_usable_size_r>
 800ebf8:	4284      	cmp	r4, r0
 800ebfa:	4607      	mov	r7, r0
 800ebfc:	d802      	bhi.n	800ec04 <_realloc_r+0x34>
 800ebfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec02:	d812      	bhi.n	800ec2a <_realloc_r+0x5a>
 800ec04:	4621      	mov	r1, r4
 800ec06:	4640      	mov	r0, r8
 800ec08:	f7fe ff9c 	bl	800db44 <_malloc_r>
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d0ed      	beq.n	800ebee <_realloc_r+0x1e>
 800ec12:	42bc      	cmp	r4, r7
 800ec14:	4622      	mov	r2, r4
 800ec16:	4631      	mov	r1, r6
 800ec18:	bf28      	it	cs
 800ec1a:	463a      	movcs	r2, r7
 800ec1c:	f7fe f895 	bl	800cd4a <memcpy>
 800ec20:	4631      	mov	r1, r6
 800ec22:	4640      	mov	r0, r8
 800ec24:	f7fe ff1a 	bl	800da5c <_free_r>
 800ec28:	e7e1      	b.n	800ebee <_realloc_r+0x1e>
 800ec2a:	4635      	mov	r5, r6
 800ec2c:	e7df      	b.n	800ebee <_realloc_r+0x1e>

0800ec2e <__ascii_wctomb>:
 800ec2e:	b149      	cbz	r1, 800ec44 <__ascii_wctomb+0x16>
 800ec30:	2aff      	cmp	r2, #255	; 0xff
 800ec32:	bf85      	ittet	hi
 800ec34:	238a      	movhi	r3, #138	; 0x8a
 800ec36:	6003      	strhi	r3, [r0, #0]
 800ec38:	700a      	strbls	r2, [r1, #0]
 800ec3a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec3e:	bf98      	it	ls
 800ec40:	2001      	movls	r0, #1
 800ec42:	4770      	bx	lr
 800ec44:	4608      	mov	r0, r1
 800ec46:	4770      	bx	lr

0800ec48 <fiprintf>:
 800ec48:	b40e      	push	{r1, r2, r3}
 800ec4a:	b503      	push	{r0, r1, lr}
 800ec4c:	4601      	mov	r1, r0
 800ec4e:	ab03      	add	r3, sp, #12
 800ec50:	4805      	ldr	r0, [pc, #20]	; (800ec68 <fiprintf+0x20>)
 800ec52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec56:	6800      	ldr	r0, [r0, #0]
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	f7ff fcfd 	bl	800e658 <_vfiprintf_r>
 800ec5e:	b002      	add	sp, #8
 800ec60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec64:	b003      	add	sp, #12
 800ec66:	4770      	bx	lr
 800ec68:	20000080 	.word	0x20000080

0800ec6c <abort>:
 800ec6c:	b508      	push	{r3, lr}
 800ec6e:	2006      	movs	r0, #6
 800ec70:	f000 f834 	bl	800ecdc <raise>
 800ec74:	2001      	movs	r0, #1
 800ec76:	f7f4 f865 	bl	8002d44 <_exit>

0800ec7a <_malloc_usable_size_r>:
 800ec7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec7e:	1f18      	subs	r0, r3, #4
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	bfbc      	itt	lt
 800ec84:	580b      	ldrlt	r3, [r1, r0]
 800ec86:	18c0      	addlt	r0, r0, r3
 800ec88:	4770      	bx	lr

0800ec8a <_raise_r>:
 800ec8a:	291f      	cmp	r1, #31
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4604      	mov	r4, r0
 800ec90:	460d      	mov	r5, r1
 800ec92:	d904      	bls.n	800ec9e <_raise_r+0x14>
 800ec94:	2316      	movs	r3, #22
 800ec96:	6003      	str	r3, [r0, #0]
 800ec98:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9c:	bd38      	pop	{r3, r4, r5, pc}
 800ec9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eca0:	b112      	cbz	r2, 800eca8 <_raise_r+0x1e>
 800eca2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eca6:	b94b      	cbnz	r3, 800ecbc <_raise_r+0x32>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f000 f831 	bl	800ed10 <_getpid_r>
 800ecae:	462a      	mov	r2, r5
 800ecb0:	4601      	mov	r1, r0
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecb8:	f000 b818 	b.w	800ecec <_kill_r>
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d00a      	beq.n	800ecd6 <_raise_r+0x4c>
 800ecc0:	1c59      	adds	r1, r3, #1
 800ecc2:	d103      	bne.n	800eccc <_raise_r+0x42>
 800ecc4:	2316      	movs	r3, #22
 800ecc6:	6003      	str	r3, [r0, #0]
 800ecc8:	2001      	movs	r0, #1
 800ecca:	e7e7      	b.n	800ec9c <_raise_r+0x12>
 800eccc:	2400      	movs	r4, #0
 800ecce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	4798      	blx	r3
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e7e0      	b.n	800ec9c <_raise_r+0x12>
	...

0800ecdc <raise>:
 800ecdc:	4b02      	ldr	r3, [pc, #8]	; (800ece8 <raise+0xc>)
 800ecde:	4601      	mov	r1, r0
 800ece0:	6818      	ldr	r0, [r3, #0]
 800ece2:	f7ff bfd2 	b.w	800ec8a <_raise_r>
 800ece6:	bf00      	nop
 800ece8:	20000080 	.word	0x20000080

0800ecec <_kill_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4d07      	ldr	r5, [pc, #28]	; (800ed0c <_kill_r+0x20>)
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	4608      	mov	r0, r1
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	602b      	str	r3, [r5, #0]
 800ecfa:	f7f4 f813 	bl	8002d24 <_kill>
 800ecfe:	1c43      	adds	r3, r0, #1
 800ed00:	d102      	bne.n	800ed08 <_kill_r+0x1c>
 800ed02:	682b      	ldr	r3, [r5, #0]
 800ed04:	b103      	cbz	r3, 800ed08 <_kill_r+0x1c>
 800ed06:	6023      	str	r3, [r4, #0]
 800ed08:	bd38      	pop	{r3, r4, r5, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20002864 	.word	0x20002864

0800ed10 <_getpid_r>:
 800ed10:	f7f4 b800 	b.w	8002d14 <_getpid>
 800ed14:	0000      	movs	r0, r0
	...

0800ed18 <floor>:
 800ed18:	ec51 0b10 	vmov	r0, r1, d0
 800ed1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ed20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed24:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ed28:	2e13      	cmp	r6, #19
 800ed2a:	ee10 5a10 	vmov	r5, s0
 800ed2e:	ee10 8a10 	vmov	r8, s0
 800ed32:	460c      	mov	r4, r1
 800ed34:	dc31      	bgt.n	800ed9a <floor+0x82>
 800ed36:	2e00      	cmp	r6, #0
 800ed38:	da14      	bge.n	800ed64 <floor+0x4c>
 800ed3a:	a333      	add	r3, pc, #204	; (adr r3, 800ee08 <floor+0xf0>)
 800ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed40:	f7f1 faa4 	bl	800028c <__adddf3>
 800ed44:	2200      	movs	r2, #0
 800ed46:	2300      	movs	r3, #0
 800ed48:	f7f1 fee6 	bl	8000b18 <__aeabi_dcmpgt>
 800ed4c:	b138      	cbz	r0, 800ed5e <floor+0x46>
 800ed4e:	2c00      	cmp	r4, #0
 800ed50:	da53      	bge.n	800edfa <floor+0xe2>
 800ed52:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ed56:	4325      	orrs	r5, r4
 800ed58:	d052      	beq.n	800ee00 <floor+0xe8>
 800ed5a:	4c2d      	ldr	r4, [pc, #180]	; (800ee10 <floor+0xf8>)
 800ed5c:	2500      	movs	r5, #0
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4628      	mov	r0, r5
 800ed62:	e024      	b.n	800edae <floor+0x96>
 800ed64:	4f2b      	ldr	r7, [pc, #172]	; (800ee14 <floor+0xfc>)
 800ed66:	4137      	asrs	r7, r6
 800ed68:	ea01 0307 	and.w	r3, r1, r7
 800ed6c:	4303      	orrs	r3, r0
 800ed6e:	d01e      	beq.n	800edae <floor+0x96>
 800ed70:	a325      	add	r3, pc, #148	; (adr r3, 800ee08 <floor+0xf0>)
 800ed72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed76:	f7f1 fa89 	bl	800028c <__adddf3>
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f7f1 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d0eb      	beq.n	800ed5e <floor+0x46>
 800ed86:	2c00      	cmp	r4, #0
 800ed88:	bfbe      	ittt	lt
 800ed8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ed8e:	4133      	asrlt	r3, r6
 800ed90:	18e4      	addlt	r4, r4, r3
 800ed92:	ea24 0407 	bic.w	r4, r4, r7
 800ed96:	2500      	movs	r5, #0
 800ed98:	e7e1      	b.n	800ed5e <floor+0x46>
 800ed9a:	2e33      	cmp	r6, #51	; 0x33
 800ed9c:	dd0b      	ble.n	800edb6 <floor+0x9e>
 800ed9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eda2:	d104      	bne.n	800edae <floor+0x96>
 800eda4:	ee10 2a10 	vmov	r2, s0
 800eda8:	460b      	mov	r3, r1
 800edaa:	f7f1 fa6f 	bl	800028c <__adddf3>
 800edae:	ec41 0b10 	vmov	d0, r0, r1
 800edb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800edba:	f04f 37ff 	mov.w	r7, #4294967295
 800edbe:	40df      	lsrs	r7, r3
 800edc0:	4238      	tst	r0, r7
 800edc2:	d0f4      	beq.n	800edae <floor+0x96>
 800edc4:	a310      	add	r3, pc, #64	; (adr r3, 800ee08 <floor+0xf0>)
 800edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edca:	f7f1 fa5f 	bl	800028c <__adddf3>
 800edce:	2200      	movs	r2, #0
 800edd0:	2300      	movs	r3, #0
 800edd2:	f7f1 fea1 	bl	8000b18 <__aeabi_dcmpgt>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0c1      	beq.n	800ed5e <floor+0x46>
 800edda:	2c00      	cmp	r4, #0
 800eddc:	da0a      	bge.n	800edf4 <floor+0xdc>
 800edde:	2e14      	cmp	r6, #20
 800ede0:	d101      	bne.n	800ede6 <floor+0xce>
 800ede2:	3401      	adds	r4, #1
 800ede4:	e006      	b.n	800edf4 <floor+0xdc>
 800ede6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800edea:	2301      	movs	r3, #1
 800edec:	40b3      	lsls	r3, r6
 800edee:	441d      	add	r5, r3
 800edf0:	45a8      	cmp	r8, r5
 800edf2:	d8f6      	bhi.n	800ede2 <floor+0xca>
 800edf4:	ea25 0507 	bic.w	r5, r5, r7
 800edf8:	e7b1      	b.n	800ed5e <floor+0x46>
 800edfa:	2500      	movs	r5, #0
 800edfc:	462c      	mov	r4, r5
 800edfe:	e7ae      	b.n	800ed5e <floor+0x46>
 800ee00:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ee04:	e7ab      	b.n	800ed5e <floor+0x46>
 800ee06:	bf00      	nop
 800ee08:	8800759c 	.word	0x8800759c
 800ee0c:	7e37e43c 	.word	0x7e37e43c
 800ee10:	bff00000 	.word	0xbff00000
 800ee14:	000fffff 	.word	0x000fffff

0800ee18 <_init>:
 800ee18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1a:	bf00      	nop
 800ee1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee1e:	bc08      	pop	{r3}
 800ee20:	469e      	mov	lr, r3
 800ee22:	4770      	bx	lr

0800ee24 <_fini>:
 800ee24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee26:	bf00      	nop
 800ee28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee2a:	bc08      	pop	{r3}
 800ee2c:	469e      	mov	lr, r3
 800ee2e:	4770      	bx	lr
