
rocket_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  08015148  08015148  00025148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015dd0  08015dd0  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08015dd0  08015dd0  00025dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dd8  08015dd8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dd8  08015dd8  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ddc  08015ddc  00025ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08015de0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030208  2**0
                  CONTENTS
 10 .bss          00003534  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000373c  2000373c  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c49e  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000442f  00000000  00000000  0004c719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001918  00000000  00000000  00050b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001367  00000000  00000000  00052460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026ad3  00000000  00000000  000537c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002179f  00000000  00000000  0007a29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5375  00000000  00000000  0009ba39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000818c  00000000  00000000  00170db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00178f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015130 	.word	0x08015130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08015130 	.word	0x08015130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <CS_Select>:
#define nRF24_TEST_ADDR  "nRF24"


HAL_StatusTypeDef hal_result;
void CS_Select (void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <CS_Select+0x14>)
 8000ffa:	f005 f817 	bl	800602c <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020400 	.word	0x40020400

08001008 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <CS_UnSelect+0x14>)
 8001012:	f005 f80b 	bl	800602c <HAL_GPIO_WritePin>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020400 	.word	0x40020400

08001020 <CE_Enable>:


void CE_Enable (void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <CE_Enable+0x14>)
 800102a:	f004 ffff 	bl	800602c <HAL_GPIO_WritePin>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020400 	.word	0x40020400

08001038 <CE_Disable>:

void CE_Disable (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <CE_Disable+0x14>)
 8001042:	f004 fff3 	bl	800602c <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020400 	.word	0x40020400

08001050 <nrf24_WriteReg>:

// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	460a      	mov	r2, r1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	4613      	mov	r3, r2
 800105e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	b2db      	uxtb	r3, r3
 8001068:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800106e:	f7ff ffbf 	bl	8000ff0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	2202      	movs	r2, #2
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <nrf24_WriteReg+0x40>)
 800107e:	f008 fd90 	bl	8009ba2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001082:	f7ff ffc1 	bl	8001008 <CS_UnSelect>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200010a8 	.word	0x200010a8

08001094 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f043 0320 	orr.w	r3, r3, #32
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010ac:	f7ff ffa0 	bl	8000ff0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80010b0:	f107 0114 	add.w	r1, r7, #20
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <nrf24_WriteRegMulti+0x48>)
 80010ba:	f008 fd72 	bl	8009ba2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <nrf24_WriteRegMulti+0x48>)
 80010ca:	f008 fd6a 	bl	8009ba2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010ce:	f7ff ff9b 	bl	8001008 <CS_UnSelect>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200010a8 	.word	0x200010a8

080010e0 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010ee:	f7ff ff7f 	bl	8000ff0 <CS_Select>

	hal_result = HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80010f2:	1df9      	adds	r1, r7, #7
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	2201      	movs	r2, #1
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <nrf24_ReadReg+0x4c>)
 80010fa:	f008 fd52 	bl	8009ba2 <HAL_SPI_Transmit>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <nrf24_ReadReg+0x50>)
 8001104:	701a      	strb	r2, [r3, #0]
	hal_result = HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001106:	f107 010f 	add.w	r1, r7, #15
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	2201      	movs	r2, #1
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <nrf24_ReadReg+0x4c>)
 8001110:	f008 fe8a 	bl	8009e28 <HAL_SPI_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <nrf24_ReadReg+0x50>)
 800111a:	701a      	strb	r2, [r3, #0]

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800111c:	f7ff ff74 	bl	8001008 <CS_UnSelect>

	return data;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200010a8 	.word	0x200010a8
 8001130:	20000224 	.word	0x20000224

08001134 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800113e:	f7ff ff57 	bl	8000ff0 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8001142:	1df9      	adds	r1, r7, #7
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	2201      	movs	r2, #1
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <nrfsendCmd+0x28>)
 800114a:	f008 fd2a 	bl	8009ba2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800114e:	f7ff ff5b 	bl	8001008 <CS_UnSelect>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200010a8 	.word	0x200010a8

08001160 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b07      	cmp	r3, #7
 800116e:	d104      	bne.n	800117a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8001170:	2100      	movs	r1, #0
 8001172:	2007      	movs	r0, #7
 8001174:	f7ff ff6c 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001178:	e090      	b.n	800129c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b17      	cmp	r3, #23
 800117e:	d104      	bne.n	800118a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001180:	2111      	movs	r1, #17
 8001182:	2017      	movs	r0, #23
 8001184:	f7ff ff64 	bl	8001050 <nrf24_WriteReg>
}
 8001188:	e088      	b.n	800129c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800118a:	2108      	movs	r1, #8
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff5f 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001192:	213f      	movs	r1, #63	; 0x3f
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff ff5b 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800119a:	2103      	movs	r1, #3
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ff57 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80011a2:	2103      	movs	r1, #3
 80011a4:	2003      	movs	r0, #3
 80011a6:	f7ff ff53 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x00);
 80011aa:	2100      	movs	r1, #0
 80011ac:	2004      	movs	r0, #4
 80011ae:	f7ff ff4f 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80011b2:	2102      	movs	r1, #2
 80011b4:	2005      	movs	r0, #5
 80011b6:	f7ff ff4b 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80011ba:	210e      	movs	r1, #14
 80011bc:	2006      	movs	r0, #6
 80011be:	f7ff ff47 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80011c2:	2100      	movs	r1, #0
 80011c4:	2007      	movs	r0, #7
 80011c6:	f7ff ff43 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80011ca:	2100      	movs	r1, #0
 80011cc:	2008      	movs	r0, #8
 80011ce:	f7ff ff3f 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2009      	movs	r0, #9
 80011d6:	f7ff ff3b 	bl	8001050 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80011da:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <nrf24_reset+0x144>)
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e4:	6018      	str	r0, [r3, #0]
 80011e6:	3304      	adds	r3, #4
 80011e8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2205      	movs	r2, #5
 80011f0:	4619      	mov	r1, r3
 80011f2:	200a      	movs	r0, #10
 80011f4:	f7ff ff4e 	bl	8001094 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <nrf24_reset+0x148>)
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001202:	6018      	str	r0, [r3, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	2205      	movs	r2, #5
 800120e:	4619      	mov	r1, r3
 8001210:	200b      	movs	r0, #11
 8001212:	f7ff ff3f 	bl	8001094 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001216:	21c3      	movs	r1, #195	; 0xc3
 8001218:	200c      	movs	r0, #12
 800121a:	f7ff ff19 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800121e:	21c4      	movs	r1, #196	; 0xc4
 8001220:	200d      	movs	r0, #13
 8001222:	f7ff ff15 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001226:	21c5      	movs	r1, #197	; 0xc5
 8001228:	200e      	movs	r0, #14
 800122a:	f7ff ff11 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800122e:	21c6      	movs	r1, #198	; 0xc6
 8001230:	200f      	movs	r0, #15
 8001232:	f7ff ff0d 	bl	8001050 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001236:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <nrf24_reset+0x144>)
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001240:	6018      	str	r0, [r3, #0]
 8001242:	3304      	adds	r3, #4
 8001244:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	2205      	movs	r2, #5
 800124c:	4619      	mov	r1, r3
 800124e:	2010      	movs	r0, #16
 8001250:	f7ff ff20 	bl	8001094 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001254:	2100      	movs	r1, #0
 8001256:	2011      	movs	r0, #17
 8001258:	f7ff fefa 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800125c:	2100      	movs	r1, #0
 800125e:	2012      	movs	r0, #18
 8001260:	f7ff fef6 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001264:	2100      	movs	r1, #0
 8001266:	2013      	movs	r0, #19
 8001268:	f7ff fef2 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800126c:	2100      	movs	r1, #0
 800126e:	2014      	movs	r0, #20
 8001270:	f7ff feee 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8001274:	2100      	movs	r1, #0
 8001276:	2015      	movs	r0, #21
 8001278:	f7ff feea 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800127c:	2100      	movs	r1, #0
 800127e:	2016      	movs	r0, #22
 8001280:	f7ff fee6 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001284:	2111      	movs	r1, #17
 8001286:	2017      	movs	r0, #23
 8001288:	f7ff fee2 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	201c      	movs	r0, #28
 8001290:	f7ff fede 	bl	8001050 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001294:	2100      	movs	r1, #0
 8001296:	201d      	movs	r0, #29
 8001298:	f7ff feda 	bl	8001050 <nrf24_WriteReg>
}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08015148 	.word	0x08015148
 80012a8:	08015150 	.word	0x08015150

080012ac <NRF24_Init>:




void NRF24_Init (void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80012b0:	f7ff fec2 	bl	8001038 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff53 	bl	8001160 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80012ba:	2100      	movs	r1, #0
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fec7 	bl	8001050 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80012c2:	2100      	movs	r1, #0
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fec3 	bl	8001050 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80012ca:	2100      	movs	r1, #0
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff febf 	bl	8001050 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80012d2:	2103      	movs	r1, #3
 80012d4:	2003      	movs	r0, #3
 80012d6:	f7ff febb 	bl	8001050 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80012da:	2100      	movs	r1, #0
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff feb7 	bl	8001050 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80012e2:	2100      	movs	r1, #0
 80012e4:	2005      	movs	r0, #5
 80012e6:	f7ff feb3 	bl	8001050 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0C);   // Power= 0db, data rate = 2Mbps
 80012ea:	210c      	movs	r1, #12
 80012ec:	2006      	movs	r0, #6
 80012ee:	f7ff feaf 	bl	8001050 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80012f2:	f7ff fe95 	bl	8001020 <CE_Enable>

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <NRF24_TxRxMode>:
	// Enable the chip after configuring the device
	CE_Enable();
}

void NRF24_TxRxMode (uint8_t *TxAddress, uint8_t *RxAddress, uint8_t channel)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	4613      	mov	r3, r2
 8001306:	71fb      	strb	r3, [r7, #7]
	// disable the chip before configuring the device
	CE_Disable();
 8001308:	f7ff fe96 	bl	8001038 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	4619      	mov	r1, r3
 8001310:	2005      	movs	r0, #5
 8001312:	f7ff fe9d 	bl	8001050 <nrf24_WriteReg>

	//TX Setup
	nrf24_WriteRegMulti(TX_ADDR, TxAddress, 5);  // Write the TX address
 8001316:	2205      	movs	r2, #5
 8001318:	68f9      	ldr	r1, [r7, #12]
 800131a:	2010      	movs	r0, #16
 800131c:	f7ff feba 	bl	8001094 <nrf24_WriteRegMulti>

	nrf24_WriteReg (SETUP_RETR, 0x33);
 8001320:	2133      	movs	r1, #51	; 0x33
 8001322:	2004      	movs	r0, #4
 8001324:	f7ff fe94 	bl	8001050 <nrf24_WriteReg>

	//RX Setup
	uint8_t en_rxaddr = 0x3F;
 8001328:	233f      	movs	r3, #63	; 0x3f
 800132a:	75fb      	strb	r3, [r7, #23]
		//en_rxaddr = en_rxaddr | (1<<1);
		nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	4619      	mov	r1, r3
 8001330:	2002      	movs	r0, #2
 8001332:	f7ff fe8d 	bl	8001050 <nrf24_WriteReg>
		 * Pipe 1 ADDR = 0xAABBCCDD11
		 * Pipe 2 ADDR = 0xAABBCCDD22
		 * Pipe 3 ADDR = 0xAABBCCDD33
		 *
		 */
		nrf24_WriteRegMulti(RX_ADDR_P1, RxAddress, 5);  // Write the Pipe1 address
 8001336:	2205      	movs	r2, #5
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	200b      	movs	r0, #11
 800133c:	f7ff feaa 	bl	8001094 <nrf24_WriteRegMulti>
		//nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address

		nrf24_WriteReg (RX_PW_P0, 32);   // 32 bit payload size for pipe 2
 8001340:	2120      	movs	r1, #32
 8001342:	2011      	movs	r0, #17
 8001344:	f7ff fe84 	bl	8001050 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P1, 32);
 8001348:	2120      	movs	r1, #32
 800134a:	2012      	movs	r0, #18
 800134c:	f7ff fe80 	bl	8001050 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P2, 32);
 8001350:	2120      	movs	r1, #32
 8001352:	2013      	movs	r0, #19
 8001354:	f7ff fe7c 	bl	8001050 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P3, 32);
 8001358:	2120      	movs	r1, #32
 800135a:	2014      	movs	r0, #20
 800135c:	f7ff fe78 	bl	8001050 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P4, 32);
 8001360:	2120      	movs	r1, #32
 8001362:	2015      	movs	r0, #21
 8001364:	f7ff fe74 	bl	8001050 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P5, 32);
 8001368:	2120      	movs	r1, #32
 800136a:	2016      	movs	r0, #22
 800136c:	f7ff fe70 	bl	8001050 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001370:	f7ff fe56 	bl	8001020 <CE_Enable>
	flush_tx_fifo();
 8001374:	f000 f89a 	bl	80014ac <flush_tx_fifo>
}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <NRF24_TxMode>:

void NRF24_TxMode (void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001386:	f7ff fe57 	bl	8001038 <CE_Disable>

	// power up the device
	uint8_t config = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<3);   // write 1 in EN_CRC to enable CRC
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<2);   // write 1 in CRCO to set encoding scheme CRC to 2 bytes
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	71fb      	strb	r3, [r7, #7]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4619      	mov	r1, r3
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fe50 	bl	8001050 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013b0:	f7ff fe36 	bl	8001020 <CE_Enable>
	flush_tx_fifo();
 80013b4:	f000 f87a 	bl	80014ac <flush_tx_fifo>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <NRF24_RxMode>:

void NRF24_RxMode (void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80013c6:	f7ff fe37 	bl	8001038 <CE_Disable>

	// power up the device in Rx mode
	uint8_t config = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<1) | (1<<0);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f043 0303 	orr.w	r3, r3, #3
 80013d4:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<3);   // write 1 in EN_CRC to enable CRC
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<2);   // write 1 in CRCO to set encoding scheme CRC to 2 bytes
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	71fb      	strb	r3, [r7, #7]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe30 	bl	8001050 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe16 	bl	8001020 <CE_Enable>
	flush_rx_fifo();
 80013f4:	f000 f86a 	bl	80014cc <flush_rx_fifo>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <NRF24_Transmit>:

// transmit the data
uint8_t NRF24_Transmit (uint8_t *data)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	737b      	strb	r3, [r7, #13]
	// select the device
	CS_Select();
 800140c:	f7ff fdf0 	bl	8000ff0 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	737b      	strb	r3, [r7, #13]
	hal_result = HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001414:	f107 010d 	add.w	r1, r7, #13
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	2201      	movs	r2, #1
 800141c:	4821      	ldr	r0, [pc, #132]	; (80014a4 <NRF24_Transmit+0xa4>)
 800141e:	f008 fbc0 	bl	8009ba2 <HAL_SPI_Transmit>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <NRF24_Transmit+0xa8>)
 8001428:	701a      	strb	r2, [r3, #0]

	// send the payload
	hal_result = HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	2220      	movs	r2, #32
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <NRF24_Transmit+0xa4>)
 8001434:	f008 fbb5 	bl	8009ba2 <HAL_SPI_Transmit>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <NRF24_Transmit+0xa8>)
 800143e:	701a      	strb	r2, [r3, #0]

	// Unselect the device
	CS_UnSelect();
 8001440:	f7ff fde2 	bl	8001008 <CS_UnSelect>

	HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f003 fe79 	bl	800513c <HAL_Delay>

	uint8_t status = nrf24_ReadReg(STATUS);
 800144a:	2007      	movs	r0, #7
 800144c:	f7ff fe48 	bl	80010e0 <nrf24_ReadReg>
 8001450:	4603      	mov	r3, r0
 8001452:	73fb      	strb	r3, [r7, #15]
		if (status & (1 << 4)) {
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <NRF24_Transmit+0x74>
			status = (status | (1 << 4)); // Actually not needed because this bit is already set, but reset is done by writing 1
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	73fb      	strb	r3, [r7, #15]
			nrf24_WriteReg(STATUS, status);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	4619      	mov	r1, r3
 800146a:	2007      	movs	r0, #7
 800146c:	f7ff fdf0 	bl	8001050 <nrf24_WriteReg>
			flush_tx_fifo();
 8001470:	f000 f81c 	bl	80014ac <flush_tx_fifo>
		}

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8001474:	2017      	movs	r0, #23
 8001476:	f7ff fe33 	bl	80010e0 <nrf24_ReadReg>
 800147a:	4603      	mov	r3, r0
 800147c:	73bb      	strb	r3, [r7, #14]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <NRF24_Transmit+0x9a>
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d103      	bne.n	800149a <NRF24_Transmit+0x9a>
	{
		flush_tx_fifo();
 8001492:	f000 f80b 	bl	80014ac <flush_tx_fifo>
		return 1;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <NRF24_Transmit+0x9c>
	}

	return 0;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200010a8 	.word	0x200010a8
 80014a8:	20000224 	.word	0x20000224

080014ac <flush_tx_fifo>:

void flush_tx_fifo() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	uint8_t cmdtosend = FLUSH_TX;
 80014b2:	23e1      	movs	r3, #225	; 0xe1
 80014b4:	71fb      	strb	r3, [r7, #7]
	nrfsendCmd(cmdtosend);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe3b 	bl	8001134 <nrfsendCmd>
	// reset FIFO_STATUS
	nrf24_reset (FIFO_STATUS);
 80014be:	2017      	movs	r0, #23
 80014c0:	f7ff fe4e 	bl	8001160 <nrf24_reset>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <flush_rx_fifo>:

void flush_rx_fifo() {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	uint8_t cmdtosend = FLUSH_RX;
 80014d2:	23e2      	movs	r3, #226	; 0xe2
 80014d4:	71fb      	strb	r3, [r7, #7]
	nrfsendCmd(cmdtosend);
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe2b 	bl	8001134 <nrfsendCmd>
	// reset FIFO_STATUS
	nrf24_reset (FIFO_STATUS);
 80014de:	2017      	movs	r0, #23
 80014e0:	f7ff fe3e 	bl	8001160 <nrf24_reset>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <isDataAvailable>:
	nrfsendCmd(cmdtosend);
}


uint8_t isDataAvailable ()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	uint8_t fifo = nrf24_ReadReg(FIFO_STATUS);
 80014f2:	2017      	movs	r0, #23
 80014f4:	f7ff fdf4 	bl	80010e0 <nrf24_ReadReg>
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 80014fc:	2007      	movs	r0, #7
 80014fe:	f7ff fdef 	bl	80010e0 <nrf24_ReadReg>
 8001502:	4603      	mov	r3, r0
 8001504:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fdea 	bl	80010e0 <nrf24_ReadReg>
 800150c:	4603      	mov	r3, r0
 800150e:	717b      	strb	r3, [r7, #5]

	if ((status&(1<<6)))
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <isDataAvailable+0x3a>
	{
		nrf24_WriteReg(STATUS, (1<<6)); // Clear receive fifo bit
 800151a:	2140      	movs	r1, #64	; 0x40
 800151c:	2007      	movs	r0, #7
 800151e:	f7ff fd97 	bl	8001050 <nrf24_WriteReg>
		return 1;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <isDataAvailable+0x3c>
	}

	return 0;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <NRF24_Receive>:

void NRF24_Receive (uint8_t *data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 800153c:	f7ff fd58 	bl	8000ff0 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8001540:	2361      	movs	r3, #97	; 0x61
 8001542:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001544:	f107 010f 	add.w	r1, r7, #15
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	2201      	movs	r2, #1
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <NRF24_Receive+0x50>)
 800154e:	f008 fb28 	bl	8009ba2 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	2220      	movs	r2, #32
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <NRF24_Receive+0x50>)
 800155c:	f008 fc64 	bl	8009e28 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8001560:	f7ff fd52 	bl	8001008 <CS_UnSelect>

	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f003 fde9 	bl	800513c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800156a:	23e2      	movs	r3, #226	; 0xe2
 800156c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fddf 	bl	8001134 <nrfsendCmd>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200010a8 	.word	0x200010a8

08001584 <readRegisters>:

HAL_StatusTypeDef bmp5_hal_result;


BMP5_INTF_RET_TYPE readRegisters(uint8_t regAddress, uint8_t* dataBuffer, uint32_t numBytes, void* interfacePtr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
    // Make sure the number of bytes is valid
    if(numBytes == 0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <readRegisters+0x1c>
    {
        return BMP5_E_COM_FAIL;
 800159a:	f06f 0301 	mvn.w	r3, #1
 800159e:	e021      	b.n	80015e4 <readRegisters+0x60>
    }

    // Start transmission
    HAL_GPIO_WritePin(BMP581_CSN_PORT, BMP581_CSN_PIN, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <readRegisters+0x68>)
 80015a6:	f004 fd41 	bl	800602c <HAL_GPIO_WritePin>

    // Read all requested bytes
    bmp5_hal_result = HAL_SPI_Transmit(BMP5_SPI, &regAddress, 1, 100);
 80015aa:	f107 010f 	add.w	r1, r7, #15
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	2201      	movs	r2, #1
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <readRegisters+0x6c>)
 80015b4:	f008 faf5 	bl	8009ba2 <HAL_SPI_Transmit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <readRegisters+0x70>)
 80015be:	701a      	strb	r2, [r3, #0]
    bmp5_hal_result = HAL_SPI_Receive(BMP5_SPI, dataBuffer, numBytes, 1000);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <readRegisters+0x6c>)
 80015cc:	f008 fc2c 	bl	8009e28 <HAL_SPI_Receive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <readRegisters+0x70>)
 80015d6:	701a      	strb	r2, [r3, #0]

    // End transmission
    HAL_GPIO_WritePin(BMP581_CSN_PORT, BMP581_CSN_PIN, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2110      	movs	r1, #16
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <readRegisters+0x68>)
 80015de:	f004 fd25 	bl	800602c <HAL_GPIO_WritePin>

    return BMP5_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020800 	.word	0x40020800
 80015f0:	20001050 	.word	0x20001050
 80015f4:	20000254 	.word	0x20000254

080015f8 <writeRegisters>:

BMP5_INTF_RET_TYPE writeRegisters(uint8_t regAddress, const uint8_t* dataBuffer, uint32_t numBytes, void* interfacePtr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
    // Make sure the number of bytes is valid
    if(numBytes == 0)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <writeRegisters+0x1c>
    {
        return BMP5_E_COM_FAIL;
 800160e:	f06f 0301 	mvn.w	r3, #1
 8001612:	e019      	b.n	8001648 <writeRegisters+0x50>
    }

    // Begin transmission
    HAL_GPIO_WritePin(BMP581_CSN_PORT, BMP581_CSN_PIN, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2110      	movs	r1, #16
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <writeRegisters+0x58>)
 800161a:	f004 fd07 	bl	800602c <HAL_GPIO_WritePin>

    // Write all the data
    HAL_SPI_Transmit(BMP5_SPI, &regAddress, 1, 100);
 800161e:	f107 010f 	add.w	r1, r7, #15
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	2201      	movs	r2, #1
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <writeRegisters+0x5c>)
 8001628:	f008 fabb 	bl	8009ba2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(BMP5_SPI, dataBuffer, numBytes, 1000);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	b29a      	uxth	r2, r3
 8001630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <writeRegisters+0x5c>)
 8001638:	f008 fab3 	bl	8009ba2 <HAL_SPI_Transmit>

    // End transmission
    HAL_GPIO_WritePin(BMP581_CSN_PORT, BMP581_CSN_PIN, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2110      	movs	r1, #16
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <writeRegisters+0x58>)
 8001642:	f004 fcf3 	bl	800602c <HAL_GPIO_WritePin>

    return BMP5_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40020800 	.word	0x40020800
 8001654:	20001050 	.word	0x20001050

08001658 <usDelay>:

void usDelay(uint32_t period, void* interfacePtr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
    HAL_Delay(period);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f003 fd6a 	bl	800513c <HAL_Delay>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <begin>:

int8_t begin()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
    // Variable to track errors returned by API calls
    int8_t err = BMP5_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	71fb      	strb	r3, [r7, #7]

    // Initialize the sensor
    err = init();
 800167a:	f000 f82b 	bl	80016d4 <init>
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
    if(err != BMP5_OK)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <begin+0x20>
    {
        return err;
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	e00f      	b.n	80016b0 <begin+0x40>
    }

    // Enable both pressure and temperature sensors
    err = enablePress(BMP5_ENABLE);
 8001690:	2001      	movs	r0, #1
 8001692:	f000 f869 	bl	8001768 <enablePress>
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    if(err != BMP5_OK)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <begin+0x38>
    {
        return err;
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	e003      	b.n	80016b0 <begin+0x40>
    }

    // Set to normal mode
    return setMode(BMP5_POWERMODE_NORMAL);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f000 f84b 	bl	8001744 <setMode>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <beginSPI>:

int8_t beginSPI()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    // Set up chip select pin
    HAL_GPIO_WritePin(BMP581_CSN_PORT, BMP581_CSN_PIN, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	2110      	movs	r1, #16
 80016c0:	4803      	ldr	r0, [pc, #12]	; (80016d0 <beginSPI+0x18>)
 80016c2:	f004 fcb3 	bl	800602c <HAL_GPIO_WritePin>

    // Initialize sensor
    return begin();
 80016c6:	f7ff ffd3 	bl	8001670 <begin>
 80016ca:	4603      	mov	r3, r0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40020800 	.word	0x40020800

080016d4 <init>:

int8_t init()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
    // Variable to track errors returned by API calls
    int8_t err = BMP5_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]

    // Initialize config values
    osrOdrConfig = (struct bmp5_osr_odr_press_config){0,0,0,0};
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
    fifo = (struct bmp5_fifo){0,0,0,0,0,0,0,0,0};
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <init+0x5c>)
 80016e6:	461a      	mov	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	6053      	str	r3, [r2, #4]
 80016ee:	6093      	str	r3, [r2, #8]
 80016f0:	60d3      	str	r3, [r2, #12]

    // Set helper function pointers
    sensor.read = readRegisters;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <init+0x60>)
 80016f4:	4a10      	ldr	r2, [pc, #64]	; (8001738 <init+0x64>)
 80016f6:	609a      	str	r2, [r3, #8]
    sensor.write = writeRegisters;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <init+0x60>)
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <init+0x68>)
 80016fc:	60da      	str	r2, [r3, #12]
    sensor.delay_us = usDelay;
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <init+0x60>)
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <init+0x6c>)
 8001702:	611a      	str	r2, [r3, #16]
    //sensor.intf_ptr = &interfaceData;

    // Reset the sensor
    err = bmp5_soft_reset(&sensor);
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <init+0x60>)
 8001706:	f00a fb0a 	bl	800bd1e <bmp5_soft_reset>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
    if(err != BMP5_OK)
 800170e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <init+0x48>
    {
        return err;
 8001716:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800171a:	e003      	b.n	8001724 <init+0x50>
    }

    // Initialize the sensor
    return bmp5_init(&sensor);
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <init+0x60>)
 800171e:	f00a fa23 	bl	800bb68 <bmp5_init>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000240 	.word	0x20000240
 8001730:	20000244 	.word	0x20000244
 8001734:	20000228 	.word	0x20000228
 8001738:	08001585 	.word	0x08001585
 800173c:	080015f9 	.word	0x080015f9
 8001740:	08001659 	.word	0x08001659

08001744 <setMode>:

int8_t setMode(enum bmp5_powermode mode)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
    return bmp5_set_power_mode(mode, &sensor);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <setMode+0x20>)
 8001752:	4618      	mov	r0, r3
 8001754:	f00a fb7a 	bl	800be4c <bmp5_set_power_mode>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000228 	.word	0x20000228

08001768 <enablePress>:
{
    return bmp5_get_power_mode(mode, &sensor);
}

int8_t enablePress(uint8_t pressEnable)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
    osrOdrConfig.press_en = pressEnable;
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <enablePress+0x24>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	7093      	strb	r3, [r2, #2]
    return bmp5_set_osr_odr_press_config(&osrOdrConfig, &sensor);
 8001778:	4905      	ldr	r1, [pc, #20]	; (8001790 <enablePress+0x28>)
 800177a:	4804      	ldr	r0, [pc, #16]	; (800178c <enablePress+0x24>)
 800177c:	f00a fc50 	bl	800c020 <bmp5_set_osr_odr_press_config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000240 	.word	0x20000240
 8001790:	20000228 	.word	0x20000228

08001794 <getSensorData>:

int8_t getSensorData(struct bmp5_sensor_data* data)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    return bmp5_get_sensor_data(data, &osrOdrConfig, &sensor);
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <getSensorData+0x1c>)
 800179e:	4905      	ldr	r1, [pc, #20]	; (80017b4 <getSensorData+0x20>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f00a fba3 	bl	800beec <bmp5_get_sensor_data>
 80017a6:	4603      	mov	r3, r0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000228 	.word	0x20000228
 80017b4:	20000240 	.word	0x20000240

080017b8 <calcAltitude>:
    kalman_old = kalman_value;

    return kalman_value;
}

float calcAltitude(float pressure) {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0a01 	vstr	s0, [r7, #4]
    float A = pressure / 101325;
 80017c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017c6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001850 <calcAltitude+0x98>
 80017ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ce:	edc7 7a05 	vstr	s15, [r7, #20]
    float B = 1 / 5.25588;
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <calcAltitude+0x9c>)
 80017d4:	613b      	str	r3, [r7, #16]
    float C = pow(A, B);
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7fe feb6 	bl	8000548 <__aeabi_f2d>
 80017dc:	4604      	mov	r4, r0
 80017de:	460d      	mov	r5, r1
 80017e0:	6938      	ldr	r0, [r7, #16]
 80017e2:	f7fe feb1 	bl	8000548 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	ec43 2b11 	vmov	d1, r2, r3
 80017ee:	ec45 4b10 	vmov	d0, r4, r5
 80017f2:	f012 fce5 	bl	80141c0 <pow>
 80017f6:	ec53 2b10 	vmov	r2, r3, d0
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff f9f3 	bl	8000be8 <__aeabi_d2f>
 8001802:	4603      	mov	r3, r0
 8001804:	60fb      	str	r3, [r7, #12]
    C = 1.0 - C;
 8001806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001812:	edc7 7a03 	vstr	s15, [r7, #12]
    C = C / 0.0000225577;
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7fe fe96 	bl	8000548 <__aeabi_f2d>
 800181c:	a30a      	add	r3, pc, #40	; (adr r3, 8001848 <calcAltitude+0x90>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7ff f813 	bl	800084c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9db 	bl	8000be8 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	60fb      	str	r3, [r7, #12]
    return C;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	ee07 3a90 	vmov	s15, r3
}
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	bf00      	nop
 8001848:	572255df 	.word	0x572255df
 800184c:	3ef7a749 	.word	0x3ef7a749
 8001850:	47c5e680 	.word	0x47c5e680
 8001854:	3e42d454 	.word	0x3e42d454

08001858 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	4619      	mov	r1, r3
 8001866:	2007      	movs	r0, #7
 8001868:	f000 fd00 	bl	800226c <bno055_writeData>
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4619      	mov	r1, r3
 8001882:	203d      	movs	r0, #61	; 0x3d
 8001884:	f000 fcf2 	bl	800226c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800188e:	2013      	movs	r0, #19
 8001890:	f000 fce0 	bl	8002254 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001894:	e002      	b.n	800189c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001896:	2007      	movs	r0, #7
 8001898:	f000 fcdc 	bl	8002254 <bno055_delay>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ffe3 	bl	8001874 <bno055_setOperationMode>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80018b6:	200c      	movs	r0, #12
 80018b8:	f7ff ffdc 	bl	8001874 <bno055_setOperationMode>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80018c4:	2120      	movs	r1, #32
 80018c6:	203f      	movs	r0, #63	; 0x3f
 80018c8:	f000 fcd0 	bl	800226c <bno055_writeData>
  bno055_delay(700);
 80018cc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80018d0:	f000 fcc0 	bl	8002254 <bno055_delay>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  bno055_reset();
 80018de:	f7ff ffef 	bl	80018c0 <bno055_reset>

  uint8_t id = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 fda9 	bl	8002444 <bno055_readData>
  if (id != BNO055_ID) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2ba0      	cmp	r3, #160	; 0xa0
 80018f6:	d004      	beq.n	8001902 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <bno055_setup+0x4c>)
 80018fe:	f00f fe25 	bl	801154c <iprintf>
  }
  bno055_setPage(0);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff ffa8 	bl	8001858 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001908:	2100      	movs	r1, #0
 800190a:	203f      	movs	r0, #63	; 0x3f
 800190c:	f000 fcae 	bl	800226c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001910:	f7ff ffc8 	bl	80018a4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001914:	200a      	movs	r0, #10
 8001916:	f000 fc9d 	bl	8002254 <bno055_delay>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	08015158 	.word	0x08015158

08001928 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b09e      	sub	sp, #120	; 0x78
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff ff8e 	bl	8001858 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800193c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001940:	2b20      	cmp	r3, #32
 8001942:	d108      	bne.n	8001956 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001944:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800194c:	2208      	movs	r2, #8
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fd78 	bl	8002444 <bno055_readData>
 8001954:	e007      	b.n	8001966 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001956:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800195a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800195e:	2206      	movs	r2, #6
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fd6f 	bl	8002444 <bno055_readData>

  double scale = 1;
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <bno055_getVector+0x270>)
 800196c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001974:	2b0e      	cmp	r3, #14
 8001976:	d109      	bne.n	800198c <bno055_getVector+0x64>
    scale = magScale;
 8001978:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <bno055_getVector+0x274>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdc1 	bl	8000504 <__aeabi_ui2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800198a:	e03e      	b.n	8001a0a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800198c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001990:	2b08      	cmp	r3, #8
 8001992:	d007      	beq.n	80019a4 <bno055_getVector+0x7c>
 8001994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001998:	2b28      	cmp	r3, #40	; 0x28
 800199a:	d003      	beq.n	80019a4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800199c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019a0:	2b2e      	cmp	r3, #46	; 0x2e
 80019a2:	d109      	bne.n	80019b8 <bno055_getVector+0x90>
    scale = accelScale;
 80019a4:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <bno055_getVector+0x278>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdab 	bl	8000504 <__aeabi_ui2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80019b6:	e028      	b.n	8001a0a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80019b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019bc:	2b14      	cmp	r3, #20
 80019be:	d109      	bne.n	80019d4 <bno055_getVector+0xac>
    scale = angularRateScale;
 80019c0:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <bno055_getVector+0x27c>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd9d 	bl	8000504 <__aeabi_ui2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80019d2:	e01a      	b.n	8001a0a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80019d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d8:	2b1a      	cmp	r3, #26
 80019da:	d109      	bne.n	80019f0 <bno055_getVector+0xc8>
    scale = eulerScale;
 80019dc:	4b72      	ldr	r3, [pc, #456]	; (8001ba8 <bno055_getVector+0x280>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd8f 	bl	8000504 <__aeabi_ui2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80019ee:	e00c      	b.n	8001a0a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80019f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f4:	2b20      	cmp	r3, #32
 80019f6:	d108      	bne.n	8001a0a <bno055_getVector+0xe2>
    scale = quaScale;
 80019f8:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <bno055_getVector+0x284>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd81 	bl	8000504 <__aeabi_ui2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0e:	2220      	movs	r2, #32
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00f ff00 	bl	8011818 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d150      	bne.n	8001ac2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001a20:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	b21a      	sxth	r2, r3
 8001a28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd76 	bl	8000524 <__aeabi_i2d>
 8001a38:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a3c:	f7fe ff06 	bl	800084c <__aeabi_ddiv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001a48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd62 	bl	8000524 <__aeabi_i2d>
 8001a60:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a64:	f7fe fef2 	bl	800084c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001a70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd4e 	bl	8000524 <__aeabi_i2d>
 8001a88:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a8c:	f7fe fede 	bl	800084c <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001a98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd3a 	bl	8000524 <__aeabi_i2d>
 8001ab0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ab4:	f7fe feca 	bl	800084c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001ac0:	e03b      	b.n	8001b3a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001ac2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd25 	bl	8000524 <__aeabi_i2d>
 8001ada:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ade:	f7fe feb5 	bl	800084c <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001aea:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd11 	bl	8000524 <__aeabi_i2d>
 8001b02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b06:	f7fe fea1 	bl	800084c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001b12:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fcfd 	bl	8000524 <__aeabi_i2d>
 8001b2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b2e:	f7fe fe8d 	bl	800084c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001b3a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001b3e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b4e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b52:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001b56:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b5e:	ec49 8b14 	vmov	d4, r8, r9
 8001b62:	ec45 4b15 	vmov	d5, r4, r5
 8001b66:	ec41 0b16 	vmov	d6, r0, r1
 8001b6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b6e:	eeb0 0a44 	vmov.f32	s0, s8
 8001b72:	eef0 0a64 	vmov.f32	s1, s9
 8001b76:	eeb0 1a45 	vmov.f32	s2, s10
 8001b7a:	eef0 1a65 	vmov.f32	s3, s11
 8001b7e:	eeb0 2a46 	vmov.f32	s4, s12
 8001b82:	eef0 2a66 	vmov.f32	s5, s13
 8001b86:	eeb0 3a47 	vmov.f32	s6, s14
 8001b8a:	eef0 3a67 	vmov.f32	s7, s15
 8001b8e:	3778      	adds	r7, #120	; 0x78
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b96:	bf00      	nop
 8001b98:	3ff00000 	.word	0x3ff00000
 8001b9c:	20000006 	.word	0x20000006
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000002 	.word	0x20000002
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	20000008 	.word	0x20000008

08001bb0 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bb4:	b090      	sub	sp, #64	; 0x40
 8001bb6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8001bb8:	2014      	movs	r0, #20
 8001bba:	f7ff feb5 	bl	8001928 <bno055_getVector>
 8001bbe:	eeb0 4a40 	vmov.f32	s8, s0
 8001bc2:	eef0 4a60 	vmov.f32	s9, s1
 8001bc6:	eeb0 5a41 	vmov.f32	s10, s2
 8001bca:	eef0 5a61 	vmov.f32	s11, s3
 8001bce:	eeb0 6a42 	vmov.f32	s12, s4
 8001bd2:	eef0 6a62 	vmov.f32	s13, s5
 8001bd6:	eeb0 7a43 	vmov.f32	s14, s6
 8001bda:	eef0 7a63 	vmov.f32	s15, s7
 8001bde:	ed87 4b08 	vstr	d4, [r7, #32]
 8001be2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001be6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001bea:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001bee:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001bf6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bfe:	ec49 8b14 	vmov	d4, r8, r9
 8001c02:	ec45 4b15 	vmov	d5, r4, r5
 8001c06:	ec41 0b16 	vmov	d6, r0, r1
 8001c0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c0e:	eeb0 0a44 	vmov.f32	s0, s8
 8001c12:	eef0 0a64 	vmov.f32	s1, s9
 8001c16:	eeb0 1a45 	vmov.f32	s2, s10
 8001c1a:	eef0 1a65 	vmov.f32	s3, s11
 8001c1e:	eeb0 2a46 	vmov.f32	s4, s12
 8001c22:	eef0 2a66 	vmov.f32	s5, s13
 8001c26:	eeb0 3a47 	vmov.f32	s6, s14
 8001c2a:	eef0 3a67 	vmov.f32	s7, s15
 8001c2e:	3740      	adds	r7, #64	; 0x40
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001c36 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8001c36:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c3a:	b090      	sub	sp, #64	; 0x40
 8001c3c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001c3e:	201a      	movs	r0, #26
 8001c40:	f7ff fe72 	bl	8001928 <bno055_getVector>
 8001c44:	eeb0 4a40 	vmov.f32	s8, s0
 8001c48:	eef0 4a60 	vmov.f32	s9, s1
 8001c4c:	eeb0 5a41 	vmov.f32	s10, s2
 8001c50:	eef0 5a61 	vmov.f32	s11, s3
 8001c54:	eeb0 6a42 	vmov.f32	s12, s4
 8001c58:	eef0 6a62 	vmov.f32	s13, s5
 8001c5c:	eeb0 7a43 	vmov.f32	s14, s6
 8001c60:	eef0 7a63 	vmov.f32	s15, s7
 8001c64:	ed87 4b08 	vstr	d4, [r7, #32]
 8001c68:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001c6c:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001c70:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001c74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c78:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001c7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c84:	ec49 8b14 	vmov	d4, r8, r9
 8001c88:	ec45 4b15 	vmov	d5, r4, r5
 8001c8c:	ec41 0b16 	vmov	d6, r0, r1
 8001c90:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c94:	eeb0 0a44 	vmov.f32	s0, s8
 8001c98:	eef0 0a64 	vmov.f32	s1, s9
 8001c9c:	eeb0 1a45 	vmov.f32	s2, s10
 8001ca0:	eef0 1a65 	vmov.f32	s3, s11
 8001ca4:	eeb0 2a46 	vmov.f32	s4, s12
 8001ca8:	eef0 2a66 	vmov.f32	s5, s13
 8001cac:	eeb0 3a47 	vmov.f32	s6, s14
 8001cb0:	eef0 3a67 	vmov.f32	s7, s15
 8001cb4:	3740      	adds	r7, #64	; 0x40
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001cbc <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 8001cbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cc0:	b090      	sub	sp, #64	; 0x40
 8001cc2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 8001cc4:	2028      	movs	r0, #40	; 0x28
 8001cc6:	f7ff fe2f 	bl	8001928 <bno055_getVector>
 8001cca:	eeb0 4a40 	vmov.f32	s8, s0
 8001cce:	eef0 4a60 	vmov.f32	s9, s1
 8001cd2:	eeb0 5a41 	vmov.f32	s10, s2
 8001cd6:	eef0 5a61 	vmov.f32	s11, s3
 8001cda:	eeb0 6a42 	vmov.f32	s12, s4
 8001cde:	eef0 6a62 	vmov.f32	s13, s5
 8001ce2:	eeb0 7a43 	vmov.f32	s14, s6
 8001ce6:	eef0 7a63 	vmov.f32	s15, s7
 8001cea:	ed87 4b08 	vstr	d4, [r7, #32]
 8001cee:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001cf2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001cf6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001cfa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001d02:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d06:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d0a:	ec49 8b14 	vmov	d4, r8, r9
 8001d0e:	ec45 4b15 	vmov	d5, r4, r5
 8001d12:	ec41 0b16 	vmov	d6, r0, r1
 8001d16:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d1a:	eeb0 0a44 	vmov.f32	s0, s8
 8001d1e:	eef0 0a64 	vmov.f32	s1, s9
 8001d22:	eeb0 1a45 	vmov.f32	s2, s10
 8001d26:	eef0 1a65 	vmov.f32	s3, s11
 8001d2a:	eeb0 2a46 	vmov.f32	s4, s12
 8001d2e:	eef0 2a66 	vmov.f32	s5, s13
 8001d32:	eeb0 3a47 	vmov.f32	s6, s14
 8001d36:	eef0 3a67 	vmov.f32	s7, s15
 8001d3a:	3740      	adds	r7, #64	; 0x40
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001d42 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001d42:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d46:	b090      	sub	sp, #64	; 0x40
 8001d48:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001d4a:	2020      	movs	r0, #32
 8001d4c:	f7ff fdec 	bl	8001928 <bno055_getVector>
 8001d50:	eeb0 4a40 	vmov.f32	s8, s0
 8001d54:	eef0 4a60 	vmov.f32	s9, s1
 8001d58:	eeb0 5a41 	vmov.f32	s10, s2
 8001d5c:	eef0 5a61 	vmov.f32	s11, s3
 8001d60:	eeb0 6a42 	vmov.f32	s12, s4
 8001d64:	eef0 6a62 	vmov.f32	s13, s5
 8001d68:	eeb0 7a43 	vmov.f32	s14, s6
 8001d6c:	eef0 7a63 	vmov.f32	s15, s7
 8001d70:	ed87 4b08 	vstr	d4, [r7, #32]
 8001d74:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001d78:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001d7c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d84:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001d88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d90:	ec49 8b14 	vmov	d4, r8, r9
 8001d94:	ec45 4b15 	vmov	d5, r4, r5
 8001d98:	ec41 0b16 	vmov	d6, r0, r1
 8001d9c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001da0:	eeb0 0a44 	vmov.f32	s0, s8
 8001da4:	eef0 0a64 	vmov.f32	s1, s9
 8001da8:	eeb0 1a45 	vmov.f32	s2, s10
 8001dac:	eef0 1a65 	vmov.f32	s3, s11
 8001db0:	eeb0 2a46 	vmov.f32	s4, s12
 8001db4:	eef0 2a66 	vmov.f32	s5, s13
 8001db8:	eeb0 3a47 	vmov.f32	s6, s14
 8001dbc:	eef0 3a67 	vmov.f32	s7, s15
 8001dc0:	3740      	adds	r7, #64	; 0x40
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001dc8 <colir_one_init>:
uint32_t current_address;
uint16_t log_buf_counter = 0;

W25QXX_result_t res;

void colir_one_init(SPI_HandleTypeDef *hspi) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	if(hspi->State != HAL_SPI_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d002      	beq.n	8001de2 <colir_one_init+0x1a>
		HAL_SPI_Init(hspi);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f007 fe2f 	bl	8009a40 <HAL_SPI_Init>

	res = w25qxx_init(&w25qxx, hspi, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <colir_one_init+0xac>)
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <colir_one_init+0xb0>)
 8001dea:	f002 ff26 	bl	8004c3a <w25qxx_init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <colir_one_init+0xb4>)
 8001df4:	701a      	strb	r2, [r3, #0]

	sectors = w25qxx.block_count * w25qxx.sectors_in_block;
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <colir_one_init+0xb0>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <colir_one_init+0xb0>)
 8001dfc:	69d2      	ldr	r2, [r2, #28]
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <colir_one_init+0xb8>)
 8001e04:	6013      	str	r3, [r2, #0]
	flash_size = w25qxx.block_count * w25qxx.block_size;
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <colir_one_init+0xb0>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <colir_one_init+0xb0>)
 8001e0c:	6912      	ldr	r2, [r2, #16]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <colir_one_init+0xbc>)
 8001e14:	6013      	str	r3, [r2, #0]
	//w25qxx_chip_erase(&w25qxx);
	w25qxx_read(&w25qxx, 0, (uint8_t*)&config_buf, sizeof(config_buf));
 8001e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <colir_one_init+0xc0>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4816      	ldr	r0, [pc, #88]	; (8001e78 <colir_one_init+0xb0>)
 8001e20:	f002 ff8c 	bl	8004d3c <w25qxx_read>

	logs_config = (flash_config*)config_buf;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <colir_one_init+0xc4>)
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <colir_one_init+0xc0>)
 8001e28:	601a      	str	r2, [r3, #0]
	if(logs_config->last_log == 0 || logs_config->last_log == 255){
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <colir_one_init+0xc4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <colir_one_init+0x7a>
 8001e36:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <colir_one_init+0xc4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d111      	bne.n	8001e66 <colir_one_init+0x9e>
		logs_config->last_log = 0;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <colir_one_init+0xc4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		logs_config->last_address = CONFIG_SIZE;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <colir_one_init+0xc4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e54:	601a      	str	r2, [r3, #0]
		memset(&logs_config->log_address, 0, sizeof(logs_config->log_address));
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <colir_one_init+0xc4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00f fcd9 	bl	8011818 <memset>
	}

	HAL_SPI_DeInit(hspi);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 fe73 	bl	8009b52 <HAL_SPI_DeInit>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	20000258 	.word	0x20000258
 8001e7c:	20000eb2 	.word	0x20000eb2
 8001e80:	20000280 	.word	0x20000280
 8001e84:	20000284 	.word	0x20000284
 8001e88:	200006a8 	.word	0x200006a8
 8001e8c:	20000ea8 	.word	0x20000ea8

08001e90 <log_data>:

void log_data(char cmd[]){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	memcpy(&log_buf[log_buf_counter], cmd, sizeof(log_buf[log_buf_counter]));
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <log_data+0x170>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	015b      	lsls	r3, r3, #5
 8001e9e:	4a59      	ldr	r2, [pc, #356]	; (8002004 <log_data+0x174>)
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00f fdd1 	bl	8011a4e <memcpy>
	log_buf_counter++;
 8001eac:	4b54      	ldr	r3, [pc, #336]	; (8002000 <log_data+0x170>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b52      	ldr	r3, [pc, #328]	; (8002000 <log_data+0x170>)
 8001eb6:	801a      	strh	r2, [r3, #0]
	if(log_buf_counter >= LOG_BUF_SIZE){
 8001eb8:	4b51      	ldr	r3, [pc, #324]	; (8002000 <log_data+0x170>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	2b1f      	cmp	r3, #31
 8001ebe:	f240 809a 	bls.w	8001ff6 <log_data+0x166>
		if(w25qxx.spiHandle->State != HAL_SPI_STATE_READY)
 8001ec2:	4b51      	ldr	r3, [pc, #324]	; (8002008 <log_data+0x178>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d004      	beq.n	8001eda <log_data+0x4a>
			HAL_SPI_Init(w25qxx.spiHandle);
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <log_data+0x178>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f007 fdb3 	bl	8009a40 <HAL_SPI_Init>

		log_buf_counter = 0;
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <log_data+0x170>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]

		current_address = logs_config->last_address;
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <log_data+0x17c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <log_data+0x180>)
 8001ee8:	6013      	str	r3, [r2, #0]
		//logs_config->last_address = current_address;

		res = w25qxx_erase(&w25qxx, current_address, sizeof(log_buf));
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <log_data+0x180>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4844      	ldr	r0, [pc, #272]	; (8002008 <log_data+0x178>)
 8001ef6:	f002 fff8 	bl	8004eea <w25qxx_erase>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <log_data+0x184>)
 8001f00:	701a      	strb	r2, [r3, #0]
		HAL_Delay(35);
 8001f02:	2023      	movs	r0, #35	; 0x23
 8001f04:	f003 f91a 	bl	800513c <HAL_Delay>
		res = w25qxx_write(&w25qxx, current_address, (uint8_t*)&log_buf, sizeof(log_buf));
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <log_data+0x180>)
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f10:	4a3c      	ldr	r2, [pc, #240]	; (8002004 <log_data+0x174>)
 8001f12:	483d      	ldr	r0, [pc, #244]	; (8002008 <log_data+0x178>)
 8001f14:	f002 ff52 	bl	8004dbc <w25qxx_write>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <log_data+0x184>)
 8001f1e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(35);
 8001f20:	2023      	movs	r0, #35	; 0x23
 8001f22:	f003 f90b 	bl	800513c <HAL_Delay>
		w25qxx_read(&w25qxx, current_address, (uint8_t*)&log_buf, sizeof(log_buf));
 8001f26:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <log_data+0x180>)
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2e:	4a35      	ldr	r2, [pc, #212]	; (8002004 <log_data+0x174>)
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <log_data+0x178>)
 8001f32:	f002 ff03 	bl	8004d3c <w25qxx_read>

		if(current_log == 255){
 8001f36:	4b38      	ldr	r3, [pc, #224]	; (8002018 <log_data+0x188>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d114      	bne.n	8001f68 <log_data+0xd8>
			current_log = logs_config->last_log + 1;
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <log_data+0x17c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <log_data+0x188>)
 8001f4c:	701a      	strb	r2, [r3, #0]
			if(current_log >= 32)
 8001f4e:	4b32      	ldr	r3, [pc, #200]	; (8002018 <log_data+0x188>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b1f      	cmp	r3, #31
 8001f54:	d902      	bls.n	8001f5c <log_data+0xcc>
				current_log = 1;
 8001f56:	4b30      	ldr	r3, [pc, #192]	; (8002018 <log_data+0x188>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
			logs_config->last_log = current_log;
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <log_data+0x17c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <log_data+0x188>)
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		}

		current_address += PAGE_SIZE;
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <log_data+0x180>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f70:	4a27      	ldr	r2, [pc, #156]	; (8002010 <log_data+0x180>)
 8001f72:	6013      	str	r3, [r2, #0]
		logs_config->last_address = current_address;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <log_data+0x17c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <log_data+0x180>)
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	601a      	str	r2, [r3, #0]
		logs_config->log_address[current_log - 1] = current_address;
 8001f7e:	4b23      	ldr	r3, [pc, #140]	; (800200c <log_data+0x17c>)
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <log_data+0x188>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	4a21      	ldr	r2, [pc, #132]	; (8002010 <log_data+0x180>)
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	605a      	str	r2, [r3, #4]

		res = w25qxx_erase(&w25qxx, 0, sizeof(config_buf));
 8001f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f96:	2100      	movs	r1, #0
 8001f98:	481b      	ldr	r0, [pc, #108]	; (8002008 <log_data+0x178>)
 8001f9a:	f002 ffa6 	bl	8004eea <w25qxx_erase>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <log_data+0x184>)
 8001fa4:	701a      	strb	r2, [r3, #0]
		if(res == W25QXX_Ok){
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <log_data+0x184>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11e      	bne.n	8001fec <log_data+0x15c>

			memcpy(&config_buf, (uint8_t*)logs_config, sizeof(config_buf));
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <log_data+0x17c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	; (800201c <log_data+0x18c>)
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f00f fd46 	bl	8011a4e <memcpy>
			res = w25qxx_write(&w25qxx, 0, (uint8_t*)&config_buf, sizeof(config_buf));
 8001fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <log_data+0x18c>)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	480f      	ldr	r0, [pc, #60]	; (8002008 <log_data+0x178>)
 8001fcc:	f002 fef6 	bl	8004dbc <w25qxx_write>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <log_data+0x184>)
 8001fd6:	701a      	strb	r2, [r3, #0]
			HAL_Delay(35);
 8001fd8:	2023      	movs	r0, #35	; 0x23
 8001fda:	f003 f8af 	bl	800513c <HAL_Delay>
			w25qxx_read(&w25qxx, 0, (uint8_t*)&config_buf, sizeof(config_buf));
 8001fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <log_data+0x18c>)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4808      	ldr	r0, [pc, #32]	; (8002008 <log_data+0x178>)
 8001fe8:	f002 fea8 	bl	8004d3c <w25qxx_read>
		}

		HAL_SPI_DeInit(w25qxx.spiHandle);
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <log_data+0x178>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f007 fdae 	bl	8009b52 <HAL_SPI_DeInit>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000eb0 	.word	0x20000eb0
 8002004:	200002a8 	.word	0x200002a8
 8002008:	20000258 	.word	0x20000258
 800200c:	20000ea8 	.word	0x20000ea8
 8002010:	20000eac 	.word	0x20000eac
 8002014:	20000eb2 	.word	0x20000eb2
 8002018:	2000000a 	.word	0x2000000a
 800201c:	200006a8 	.word	0x200006a8

08002020 <read_logs_to_sd>:

FRESULT FR_Status;
char end_of_the_line[2] = "\n";

void read_logs_to_sd(){
 8002020:	b580      	push	{r7, lr}
 8002022:	b094      	sub	sp, #80	; 0x50
 8002024:	af00      	add	r7, sp, #0
	FR_Status = f_mount(&SDFatFS, SDPath, 1);
 8002026:	2201      	movs	r2, #1
 8002028:	4950      	ldr	r1, [pc, #320]	; (800216c <read_logs_to_sd+0x14c>)
 800202a:	4851      	ldr	r0, [pc, #324]	; (8002170 <read_logs_to_sd+0x150>)
 800202c:	f00c fde2 	bl	800ebf4 <f_mount>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <read_logs_to_sd+0x154>)
 8002036:	701a      	strb	r2, [r3, #0]
	if(FR_Status == FR_OK){
 8002038:	4b4e      	ldr	r3, [pc, #312]	; (8002174 <read_logs_to_sd+0x154>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f040 8091 	bne.w	8002164 <read_logs_to_sd+0x144>
		DIR dir;
		uint32_t lastAddress = CONFIG_SIZE;
 8002042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002046:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t currentReadAdress = CONFIG_SIZE;
 8002048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800204c:	643b      	str	r3, [r7, #64]	; 0x40
		FR_Status = f_opendir(&dir, SDPath);
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4946      	ldr	r1, [pc, #280]	; (800216c <read_logs_to_sd+0x14c>)
 8002052:	4618      	mov	r0, r3
 8002054:	f00d fb18 	bl	800f688 <f_opendir>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <read_logs_to_sd+0x154>)
 800205e:	701a      	strb	r2, [r3, #0]
		if(FR_Status == FR_OK) {
 8002060:	4b44      	ldr	r3, [pc, #272]	; (8002174 <read_logs_to_sd+0x154>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d178      	bne.n	800215a <read_logs_to_sd+0x13a>
			if(w25qxx.spiHandle->State != HAL_SPI_STATE_READY)
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <read_logs_to_sd+0x158>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d004      	beq.n	8002080 <read_logs_to_sd+0x60>
				HAL_SPI_Init(w25qxx.spiHandle);
 8002076:	4b40      	ldr	r3, [pc, #256]	; (8002178 <read_logs_to_sd+0x158>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f007 fce0 	bl	8009a40 <HAL_SPI_Init>

			for(uint8_t i = 1; i <= logs_config->last_log; i++){
 8002080:	2301      	movs	r3, #1
 8002082:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002086:	e05b      	b.n	8002140 <read_logs_to_sd+0x120>
				if(i < logs_config->last_log)
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <read_logs_to_sd+0x15c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002090:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8002094:	429a      	cmp	r2, r3
 8002096:	d208      	bcs.n	80020aa <read_logs_to_sd+0x8a>
					lastAddress = logs_config->log_address[i];
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <read_logs_to_sd+0x15c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a8:	e003      	b.n	80020b2 <read_logs_to_sd+0x92>
				else
					lastAddress = logs_config->last_address;
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <read_logs_to_sd+0x15c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	64fb      	str	r3, [r7, #76]	; 0x4c

				char fileName[8];
				memset(&fileName, 0, sizeof(fileName));
 80020b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020b6:	2208      	movs	r2, #8
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00f fbac 	bl	8011818 <memset>
				sprintf(fileName, "%d.txt", i);
 80020c0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80020c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020c8:	492d      	ldr	r1, [pc, #180]	; (8002180 <read_logs_to_sd+0x160>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00f faac 	bl	8011628 <siprintf>
				FR_Status = f_open(&SDFile, fileName, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80020d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d4:	220b      	movs	r2, #11
 80020d6:	4619      	mov	r1, r3
 80020d8:	482a      	ldr	r0, [pc, #168]	; (8002184 <read_logs_to_sd+0x164>)
 80020da:	f00c fdd1 	bl	800ec80 <f_open>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <read_logs_to_sd+0x154>)
 80020e4:	701a      	strb	r2, [r3, #0]
				if(FR_Status == FR_OK){
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <read_logs_to_sd+0x154>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d123      	bne.n	8002136 <read_logs_to_sd+0x116>
					currentReadAdress = logs_config->log_address[i - 1];
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <read_logs_to_sd+0x15c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80020f6:	3b01      	subs	r3, #1
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
					for(uint32_t address = currentReadAdress; address < lastAddress; address += LOG_SIZE){
 8002100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
 8002104:	e010      	b.n	8002128 <read_logs_to_sd+0x108>
						w25qxx_read(&w25qxx, address, (uint8_t*)&buf, sizeof(buf));
 8002106:	2320      	movs	r3, #32
 8002108:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <read_logs_to_sd+0x168>)
 800210a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800210c:	481a      	ldr	r0, [pc, #104]	; (8002178 <read_logs_to_sd+0x158>)
 800210e:	f002 fe15 	bl	8004d3c <w25qxx_read>
						f_puts(&buf, &SDFile);
 8002112:	491c      	ldr	r1, [pc, #112]	; (8002184 <read_logs_to_sd+0x164>)
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <read_logs_to_sd+0x168>)
 8002116:	f00d fbeb 	bl	800f8f0 <f_puts>
						f_puts(&end_of_the_line, &SDFile);
 800211a:	491a      	ldr	r1, [pc, #104]	; (8002184 <read_logs_to_sd+0x164>)
 800211c:	481b      	ldr	r0, [pc, #108]	; (800218c <read_logs_to_sd+0x16c>)
 800211e:	f00d fbe7 	bl	800f8f0 <f_puts>
					for(uint32_t address = currentReadAdress; address < lastAddress; address += LOG_SIZE){
 8002122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002124:	3320      	adds	r3, #32
 8002126:	647b      	str	r3, [r7, #68]	; 0x44
 8002128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212c:	429a      	cmp	r2, r3
 800212e:	d3ea      	bcc.n	8002106 <read_logs_to_sd+0xe6>
					}
					f_close(&SDFile);
 8002130:	4814      	ldr	r0, [pc, #80]	; (8002184 <read_logs_to_sd+0x164>)
 8002132:	f00d fa7f 	bl	800f634 <f_close>
			for(uint8_t i = 1; i <= logs_config->last_log; i++){
 8002136:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800213a:	3301      	adds	r3, #1
 800213c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <read_logs_to_sd+0x15c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002148:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800214c:	429a      	cmp	r2, r3
 800214e:	d99b      	bls.n	8002088 <read_logs_to_sd+0x68>
				}
			}
			HAL_SPI_DeInit(w25qxx.spiHandle);
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <read_logs_to_sd+0x158>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f007 fcfc 	bl	8009b52 <HAL_SPI_DeInit>
		}
		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	4804      	ldr	r0, [pc, #16]	; (8002170 <read_logs_to_sd+0x150>)
 8002160:	f00c fd48 	bl	800ebf4 <f_mount>
	}
}
 8002164:	bf00      	nop
 8002166:	3750      	adds	r7, #80	; 0x50
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20001550 	.word	0x20001550
 8002170:	20001554 	.word	0x20001554
 8002174:	20000eb3 	.word	0x20000eb3
 8002178:	20000258 	.word	0x20000258
 800217c:	20000ea8 	.word	0x20000ea8
 8002180:	08015194 	.word	0x08015194
 8002184:	2000258c 	.word	0x2000258c
 8002188:	20000288 	.word	0x20000288
 800218c:	2000000c 	.word	0x2000000c

08002190 <reset_logs>:

void reset_logs(){
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
	if(w25qxx.spiHandle->State != HAL_SPI_STATE_READY)
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <reset_logs+0x80>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d004      	beq.n	80021ac <reset_logs+0x1c>
		HAL_SPI_Init(w25qxx.spiHandle);
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <reset_logs+0x80>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f007 fc4a 	bl	8009a40 <HAL_SPI_Init>

	w25qxx_chip_erase(&w25qxx);
 80021ac:	4818      	ldr	r0, [pc, #96]	; (8002210 <reset_logs+0x80>)
 80021ae:	f002 fefc 	bl	8004faa <w25qxx_chip_erase>
	w25qxx_read(&w25qxx, 0, (uint8_t*)&config_buf, sizeof(config_buf));
 80021b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b6:	4a17      	ldr	r2, [pc, #92]	; (8002214 <reset_logs+0x84>)
 80021b8:	2100      	movs	r1, #0
 80021ba:	4815      	ldr	r0, [pc, #84]	; (8002210 <reset_logs+0x80>)
 80021bc:	f002 fdbe 	bl	8004d3c <w25qxx_read>

	logs_config = (flash_config*)config_buf;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <reset_logs+0x88>)
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <reset_logs+0x84>)
 80021c4:	601a      	str	r2, [r3, #0]
	if(logs_config->last_log == 0 || logs_config->last_log == 255){
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <reset_logs+0x88>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <reset_logs+0x4e>
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <reset_logs+0x88>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d111      	bne.n	8002202 <reset_logs+0x72>
		logs_config->last_log = 0;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <reset_logs+0x88>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		logs_config->last_address = CONFIG_SIZE;
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <reset_logs+0x88>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f0:	601a      	str	r2, [r3, #0]
		memset(&logs_config->log_address, 0, sizeof(logs_config->log_address));
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <reset_logs+0x88>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3304      	adds	r3, #4
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f00f fb0b 	bl	8011818 <memset>
	}
	HAL_SPI_DeInit(w25qxx.spiHandle);
 8002202:	4b03      	ldr	r3, [pc, #12]	; (8002210 <reset_logs+0x80>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f007 fca3 	bl	8009b52 <HAL_SPI_DeInit>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000258 	.word	0x20000258
 8002214:	200006a8 	.word	0x200006a8
 8002218:	20000ea8 	.word	0x20000ea8

0800221c <get_logs_config>:

flash_config* get_logs_config() {
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	return logs_config;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <get_logs_config+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000ea8 	.word	0x20000ea8

08002234 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <bno055_assignI2C+0x1c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000eb4 	.word	0x20000eb4

08002254 <bno055_delay>:

void bno055_delay(int time) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 ff6c 	bl	800513c <HAL_Delay>
#endif
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af02      	add	r7, sp, #8
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	4613      	mov	r3, r2
 800227a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	733b      	strb	r3, [r7, #12]
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002284:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <bno055_writeData+0x184>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	f107 020c 	add.w	r2, r7, #12
 800228c:	230a      	movs	r3, #10
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2302      	movs	r3, #2
 8002292:	2150      	movs	r1, #80	; 0x50
 8002294:	f004 f858 	bl	8006348 <HAL_I2C_Master_Transmit>
 8002298:	4603      	mov	r3, r0
 800229a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a0 	beq.w	80023e4 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d103      	bne.n	80022b2 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80022aa:	4852      	ldr	r0, [pc, #328]	; (80023f4 <bno055_writeData+0x188>)
 80022ac:	f00f f9b4 	bl	8011618 <puts>
 80022b0:	e012      	b.n	80022d8 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d103      	bne.n	80022c0 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80022b8:	484f      	ldr	r0, [pc, #316]	; (80023f8 <bno055_writeData+0x18c>)
 80022ba:	f00f f9ad 	bl	8011618 <puts>
 80022be:	e00b      	b.n	80022d8 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d103      	bne.n	80022ce <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80022c6:	484d      	ldr	r0, [pc, #308]	; (80023fc <bno055_writeData+0x190>)
 80022c8:	f00f f9a6 	bl	8011618 <puts>
 80022cc:	e004      	b.n	80022d8 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	4619      	mov	r1, r3
 80022d2:	484b      	ldr	r0, [pc, #300]	; (8002400 <bno055_writeData+0x194>)
 80022d4:	f00f f93a 	bl	801154c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <bno055_writeData+0x184>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 ffcb 	bl	8007278 <HAL_I2C_GetError>
 80022e2:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07e      	beq.n	80023e8 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d103      	bne.n	80022f8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80022f0:	4844      	ldr	r0, [pc, #272]	; (8002404 <bno055_writeData+0x198>)
 80022f2:	f00f f991 	bl	8011618 <puts>
 80022f6:	e021      	b.n	800233c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d103      	bne.n	8002306 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80022fe:	4842      	ldr	r0, [pc, #264]	; (8002408 <bno055_writeData+0x19c>)
 8002300:	f00f f98a 	bl	8011618 <puts>
 8002304:	e01a      	b.n	800233c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d103      	bne.n	8002314 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 800230c:	483f      	ldr	r0, [pc, #252]	; (800240c <bno055_writeData+0x1a0>)
 800230e:	f00f f983 	bl	8011618 <puts>
 8002312:	e013      	b.n	800233c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d103      	bne.n	8002322 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800231a:	483d      	ldr	r0, [pc, #244]	; (8002410 <bno055_writeData+0x1a4>)
 800231c:	f00f f97c 	bl	8011618 <puts>
 8002320:	e00c      	b.n	800233c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b10      	cmp	r3, #16
 8002326:	d103      	bne.n	8002330 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002328:	483a      	ldr	r0, [pc, #232]	; (8002414 <bno055_writeData+0x1a8>)
 800232a:	f00f f975 	bl	8011618 <puts>
 800232e:	e005      	b.n	800233c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b20      	cmp	r3, #32
 8002334:	d102      	bne.n	800233c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002336:	4838      	ldr	r0, [pc, #224]	; (8002418 <bno055_writeData+0x1ac>)
 8002338:	f00f f96e 	bl	8011618 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 800233c:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <bno055_writeData+0x184>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f004 ff8b 	bl	800725c <HAL_I2C_GetState>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002350:	4832      	ldr	r0, [pc, #200]	; (800241c <bno055_writeData+0x1b0>)
 8002352:	f00f f961 	bl	8011618 <puts>
 8002356:	e048      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b20      	cmp	r3, #32
 800235c:	d103      	bne.n	8002366 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800235e:	482f      	ldr	r0, [pc, #188]	; (800241c <bno055_writeData+0x1b0>)
 8002360:	f00f f95a 	bl	8011618 <puts>
 8002364:	e041      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b24      	cmp	r3, #36	; 0x24
 800236a:	d103      	bne.n	8002374 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 800236c:	482c      	ldr	r0, [pc, #176]	; (8002420 <bno055_writeData+0x1b4>)
 800236e:	f00f f953 	bl	8011618 <puts>
 8002372:	e03a      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b21      	cmp	r3, #33	; 0x21
 8002378:	d103      	bne.n	8002382 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800237a:	482a      	ldr	r0, [pc, #168]	; (8002424 <bno055_writeData+0x1b8>)
 800237c:	f00f f94c 	bl	8011618 <puts>
 8002380:	e033      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	2b22      	cmp	r3, #34	; 0x22
 8002386:	d103      	bne.n	8002390 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002388:	4827      	ldr	r0, [pc, #156]	; (8002428 <bno055_writeData+0x1bc>)
 800238a:	f00f f945 	bl	8011618 <puts>
 800238e:	e02c      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b28      	cmp	r3, #40	; 0x28
 8002394:	d103      	bne.n	800239e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002396:	4825      	ldr	r0, [pc, #148]	; (800242c <bno055_writeData+0x1c0>)
 8002398:	f00f f93e 	bl	8011618 <puts>
 800239c:	e025      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b29      	cmp	r3, #41	; 0x29
 80023a2:	d103      	bne.n	80023ac <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80023a4:	4822      	ldr	r0, [pc, #136]	; (8002430 <bno055_writeData+0x1c4>)
 80023a6:	f00f f937 	bl	8011618 <puts>
 80023aa:	e01e      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b2a      	cmp	r3, #42	; 0x2a
 80023b0:	d103      	bne.n	80023ba <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80023b2:	4820      	ldr	r0, [pc, #128]	; (8002434 <bno055_writeData+0x1c8>)
 80023b4:	f00f f930 	bl	8011618 <puts>
 80023b8:	e017      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b60      	cmp	r3, #96	; 0x60
 80023be:	d103      	bne.n	80023c8 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80023c0:	481d      	ldr	r0, [pc, #116]	; (8002438 <bno055_writeData+0x1cc>)
 80023c2:	f00f f929 	bl	8011618 <puts>
 80023c6:	e010      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2ba0      	cmp	r3, #160	; 0xa0
 80023cc:	d103      	bne.n	80023d6 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80023ce:	481b      	ldr	r0, [pc, #108]	; (800243c <bno055_writeData+0x1d0>)
 80023d0:	f00f f922 	bl	8011618 <puts>
 80023d4:	e009      	b.n	80023ea <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2be0      	cmp	r3, #224	; 0xe0
 80023da:	d106      	bne.n	80023ea <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80023dc:	4818      	ldr	r0, [pc, #96]	; (8002440 <bno055_writeData+0x1d4>)
 80023de:	f00f f91b 	bl	8011618 <puts>
 80023e2:	e002      	b.n	80023ea <bno055_writeData+0x17e>
    return;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <bno055_writeData+0x17e>
    return;
 80023e8:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000eb4 	.word	0x20000eb4
 80023f4:	0801519c 	.word	0x0801519c
 80023f8:	080151c0 	.word	0x080151c0
 80023fc:	080151e8 	.word	0x080151e8
 8002400:	0801520c 	.word	0x0801520c
 8002404:	08015224 	.word	0x08015224
 8002408:	08015238 	.word	0x08015238
 800240c:	0801524c 	.word	0x0801524c
 8002410:	08015260 	.word	0x08015260
 8002414:	08015274 	.word	0x08015274
 8002418:	08015288 	.word	0x08015288
 800241c:	080152a0 	.word	0x080152a0
 8002420:	080152b8 	.word	0x080152b8
 8002424:	080152cc 	.word	0x080152cc
 8002428:	080152e4 	.word	0x080152e4
 800242c:	080152fc 	.word	0x080152fc
 8002430:	08015314 	.word	0x08015314
 8002434:	08015334 	.word	0x08015334
 8002438:	08015354 	.word	0x08015354
 800243c:	0801536c 	.word	0x0801536c
 8002440:	08015384 	.word	0x08015384

08002444 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af02      	add	r7, sp, #8
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <bno055_readData+0x40>)
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	1dfa      	adds	r2, r7, #7
 800245a:	2364      	movs	r3, #100	; 0x64
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2301      	movs	r3, #1
 8002460:	2150      	movs	r1, #80	; 0x50
 8002462:	f003 ff71 	bl	8006348 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <bno055_readData+0x40>)
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	b29b      	uxth	r3, r3
 800246e:	2264      	movs	r2, #100	; 0x64
 8002470:	9200      	str	r2, [sp, #0]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	2150      	movs	r1, #80	; 0x50
 8002476:	f004 f865 	bl	8006544 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000eb4 	.word	0x20000eb4

08002488 <ParseReceivedCommand>:
float apogee = 0;

colir_one_rocket_state rState;

void ParseReceivedCommand(char cmd[], uint8_t payloadSize)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
	if(cmd[0] == '\0')
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80cf 	beq.w	800263c <ParseReceivedCommand+0x1b4>
		return;

	cmdSymbol = cmd[0];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	4b68      	ldr	r3, [pc, #416]	; (8002644 <ParseReceivedCommand+0x1bc>)
 80024a4:	701a      	strb	r2, [r3, #0]
	int cmdCounter = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
	int cmdParamCounter = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
	for(uint8_t i = 2; i < payloadSize; i++){
 80024ae:	2302      	movs	r3, #2
 80024b0:	77fb      	strb	r3, [r7, #31]
 80024b2:	e020      	b.n	80024f6 <ParseReceivedCommand+0x6e>
		if(cmd[i] == ' '){
 80024b4:	7ffb      	ldrb	r3, [r7, #31]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d105      	bne.n	80024cc <ParseReceivedCommand+0x44>
			cmdCounter++;
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	3301      	adds	r3, #1
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
			cmdParamCounter = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	e011      	b.n	80024f0 <ParseReceivedCommand+0x68>
		}
		else{
			cmdParams[cmdCounter][cmdParamCounter] = cmd[i];
 80024cc:	7ffb      	ldrb	r3, [r7, #31]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	7818      	ldrb	r0, [r3, #0]
 80024d4:	495c      	ldr	r1, [pc, #368]	; (8002648 <ParseReceivedCommand+0x1c0>)
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	18ca      	adds	r2, r1, r3
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	4413      	add	r3, r2
 80024e6:	4602      	mov	r2, r0
 80024e8:	701a      	strb	r2, [r3, #0]
			cmdParamCounter++;
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	3301      	adds	r3, #1
 80024ee:	623b      	str	r3, [r7, #32]
	for(uint8_t i = 2; i < payloadSize; i++){
 80024f0:	7ffb      	ldrb	r3, [r7, #31]
 80024f2:	3301      	adds	r3, #1
 80024f4:	77fb      	strb	r3, [r7, #31]
 80024f6:	7ffa      	ldrb	r2, [r7, #31]
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3da      	bcc.n	80024b4 <ParseReceivedCommand+0x2c>
		}
	}

	if(cmdSymbol == 's'){ //format like "s {servoNumber} {servoAngle} {servoNumber} {servoAngle}"
 80024fe:	4b51      	ldr	r3, [pc, #324]	; (8002644 <ParseReceivedCommand+0x1bc>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b73      	cmp	r3, #115	; 0x73
 8002504:	d123      	bne.n	800254e <ParseReceivedCommand+0xc6>
		int servoNumber = atoi(cmdParams[0]);
 8002506:	4850      	ldr	r0, [pc, #320]	; (8002648 <ParseReceivedCommand+0x1c0>)
 8002508:	f00d fb38 	bl	800fb7c <atoi>
 800250c:	6178      	str	r0, [r7, #20]
		int servoAngle = atoi(cmdParams[1]);
 800250e:	484f      	ldr	r0, [pc, #316]	; (800264c <ParseReceivedCommand+0x1c4>)
 8002510:	f00d fb34 	bl	800fb7c <atoi>
 8002514:	6138      	str	r0, [r7, #16]

		HAL_I2C_DeInit(&hi2c2);
 8002516:	484e      	ldr	r0, [pc, #312]	; (8002650 <ParseReceivedCommand+0x1c8>)
 8002518:	f003 fee6 	bl	80062e8 <HAL_I2C_DeInit>
		MX_I2C2_Init();
 800251c:	f000 fd72 	bl	8003004 <MX_I2C2_Init>

		  PCA9685_Init(&hi2c2);
 8002520:	484b      	ldr	r0, [pc, #300]	; (8002650 <ParseReceivedCommand+0x1c8>)
 8002522:	f001 fe59 	bl	80041d8 <PCA9685_Init>
		  PCA9685_SetPwmFrequency(50);
 8002526:	2032      	movs	r0, #50	; 0x32
 8002528:	f001 fcda 	bl	8003ee0 <PCA9685_SetPwmFrequency>

		PCA9685_STATUS servoAngleStatus = PCA9685_SetServoAngle(servoNumber - 1, servoAngle);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	ee07 2a90 	vmov	s15, r2
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	eeb0 0a67 	vmov.f32	s0, s15
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fdec 	bl	8004120 <PCA9685_SetServoAngle>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e072      	b.n	8002634 <ParseReceivedCommand+0x1ac>
			servoNumber = atoi(cmdParams[2]);
			servoAngle = atoi(cmdParams[3]);
			PCA9685_SetServoAngle(servoNumber - 1, servoAngle);
		}*/
	}
	else if(cmdSymbol == 'l'){ //format like "s {servoNumber} {servoAngle}"
 800254e:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <ParseReceivedCommand+0x1bc>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b6c      	cmp	r3, #108	; 0x6c
 8002554:	d10d      	bne.n	8002572 <ParseReceivedCommand+0xea>
		int lighterNumber = atoi(cmdParams[0]);
 8002556:	483c      	ldr	r0, [pc, #240]	; (8002648 <ParseReceivedCommand+0x1c0>)
 8002558:	f00d fb10 	bl	800fb7c <atoi>
 800255c:	61b8      	str	r0, [r7, #24]
		write_logs = 1;
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <ParseReceivedCommand+0x1cc>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
		rState = COLIRONE_CRUISE;
 8002564:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <ParseReceivedCommand+0x1d0>)
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
		FigherLighter(lighterNumber);
 800256a:	69b8      	ldr	r0, [r7, #24]
 800256c:	f000 f880 	bl	8002670 <FigherLighter>
 8002570:	e060      	b.n	8002634 <ParseReceivedCommand+0x1ac>
	}
	else if(cmdSymbol == 'w' && cmdParams[0][0] == 'e'){
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <ParseReceivedCommand+0x1bc>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b77      	cmp	r3, #119	; 0x77
 8002578:	d107      	bne.n	800258a <ParseReceivedCommand+0x102>
 800257a:	4b33      	ldr	r3, [pc, #204]	; (8002648 <ParseReceivedCommand+0x1c0>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b65      	cmp	r3, #101	; 0x65
 8002580:	d103      	bne.n	800258a <ParseReceivedCommand+0x102>
		write_logs= 1;
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <ParseReceivedCommand+0x1cc>)
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
 8002588:	e054      	b.n	8002634 <ParseReceivedCommand+0x1ac>
	}
	else if(cmdSymbol == 'w' && cmdParams[0][0] == 'd'){
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <ParseReceivedCommand+0x1bc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b77      	cmp	r3, #119	; 0x77
 8002590:	d107      	bne.n	80025a2 <ParseReceivedCommand+0x11a>
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <ParseReceivedCommand+0x1c0>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d103      	bne.n	80025a2 <ParseReceivedCommand+0x11a>
		write_logs= 0;
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <ParseReceivedCommand+0x1cc>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	e048      	b.n	8002634 <ParseReceivedCommand+0x1ac>
	}
	else if(cmdSymbol == 'w' && cmdParams[0][0] == 's'){
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <ParseReceivedCommand+0x1bc>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b77      	cmp	r3, #119	; 0x77
 80025a8:	d110      	bne.n	80025cc <ParseReceivedCommand+0x144>
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <ParseReceivedCommand+0x1c0>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b73      	cmp	r3, #115	; 0x73
 80025b0:	d10c      	bne.n	80025cc <ParseReceivedCommand+0x144>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2104      	movs	r1, #4
 80025b6:	4829      	ldr	r0, [pc, #164]	; (800265c <ParseReceivedCommand+0x1d4>)
 80025b8:	f003 fd38 	bl	800602c <HAL_GPIO_WritePin>
		read_logs_to_sd();
 80025bc:	f7ff fd30 	bl	8002020 <read_logs_to_sd>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2104      	movs	r1, #4
 80025c4:	4825      	ldr	r0, [pc, #148]	; (800265c <ParseReceivedCommand+0x1d4>)
 80025c6:	f003 fd31 	bl	800602c <HAL_GPIO_WritePin>
 80025ca:	e033      	b.n	8002634 <ParseReceivedCommand+0x1ac>
	}
	else if(cmdSymbol == 'r' && cmdParams[0][0] == 'a'){
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <ParseReceivedCommand+0x1bc>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b72      	cmp	r3, #114	; 0x72
 80025d2:	d11f      	bne.n	8002614 <ParseReceivedCommand+0x18c>
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <ParseReceivedCommand+0x1c0>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b61      	cmp	r3, #97	; 0x61
 80025da:	d11b      	bne.n	8002614 <ParseReceivedCommand+0x18c>
		HAL_SPI_Init(&hspi1);
 80025dc:	4820      	ldr	r0, [pc, #128]	; (8002660 <ParseReceivedCommand+0x1d8>)
 80025de:	f007 fa2f 	bl	8009a40 <HAL_SPI_Init>
		int8_t err = getSensorData(&bmpData);
 80025e2:	4820      	ldr	r0, [pc, #128]	; (8002664 <ParseReceivedCommand+0x1dc>)
 80025e4:	f7ff f8d6 	bl	8001794 <getSensorData>
 80025e8:	4603      	mov	r3, r0
 80025ea:	77bb      	strb	r3, [r7, #30]
		zeroAltitude = calcAltitude(bmpData.pressure);
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <ParseReceivedCommand+0x1dc>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	eeb0 0a67 	vmov.f32	s0, s15
 80025f6:	f7ff f8df 	bl	80017b8 <calcAltitude>
 80025fa:	eef0 7a40 	vmov.f32	s15, s0
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <ParseReceivedCommand+0x1e0>)
 8002600:	edc3 7a00 	vstr	s15, [r3]
		apogee = 0;
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <ParseReceivedCommand+0x1e4>)
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
		HAL_SPI_DeInit(&hspi1);
 800260c:	4814      	ldr	r0, [pc, #80]	; (8002660 <ParseReceivedCommand+0x1d8>)
 800260e:	f007 faa0 	bl	8009b52 <HAL_SPI_DeInit>
	else if(cmdSymbol == 'r' && cmdParams[0][0] == 'a'){
 8002612:	e00f      	b.n	8002634 <ParseReceivedCommand+0x1ac>
	}
	else if(cmdSymbol == 'r' && cmdParams[0][0] == 'l'){
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <ParseReceivedCommand+0x1bc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b72      	cmp	r3, #114	; 0x72
 800261a:	d10b      	bne.n	8002634 <ParseReceivedCommand+0x1ac>
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <ParseReceivedCommand+0x1c0>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b6c      	cmp	r3, #108	; 0x6c
 8002622:	d107      	bne.n	8002634 <ParseReceivedCommand+0x1ac>
		HAL_SPI_Init(&hspi1);
 8002624:	480e      	ldr	r0, [pc, #56]	; (8002660 <ParseReceivedCommand+0x1d8>)
 8002626:	f007 fa0b 	bl	8009a40 <HAL_SPI_Init>
		reset_logs();
 800262a:	f7ff fdb1 	bl	8002190 <reset_logs>
		HAL_SPI_DeInit(&hspi1);
 800262e:	480c      	ldr	r0, [pc, #48]	; (8002660 <ParseReceivedCommand+0x1d8>)
 8002630:	f007 fa8f 	bl	8009b52 <HAL_SPI_DeInit>
	}
	LogData(cmd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f83b 	bl	80026b0 <LogData>
 800263a:	e000      	b.n	800263e <ParseReceivedCommand+0x1b6>
		return;
 800263c:	bf00      	nop
}
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20001248 	.word	0x20001248
 8002648:	2000124c 	.word	0x2000124c
 800264c:	20001252 	.word	0x20001252
 8002650:	20000eb8 	.word	0x20000eb8
 8002654:	20001270 	.word	0x20001270
 8002658:	20001500 	.word	0x20001500
 800265c:	40021000 	.word	0x40021000
 8002660:	20001050 	.word	0x20001050
 8002664:	200014f4 	.word	0x200014f4
 8002668:	200014f0 	.word	0x200014f0
 800266c:	200014fc 	.word	0x200014fc

08002670 <FigherLighter>:

void FigherLighter(uint8_t lighterNumber){
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	uint16_t pinNumber = 0 | (1<<(6+lighterNumber));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	3306      	adds	r3, #6
 800267e:	2201      	movs	r2, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, pinNumber, GPIO_PIN_SET);
 8002686:	89fb      	ldrh	r3, [r7, #14]
 8002688:	2201      	movs	r2, #1
 800268a:	4619      	mov	r1, r3
 800268c:	4807      	ldr	r0, [pc, #28]	; (80026ac <FigherLighter+0x3c>)
 800268e:	f003 fccd 	bl	800602c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8002692:	200f      	movs	r0, #15
 8002694:	f002 fd52 	bl	800513c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, pinNumber, GPIO_PIN_RESET);
 8002698:	89fb      	ldrh	r3, [r7, #14]
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	4803      	ldr	r0, [pc, #12]	; (80026ac <FigherLighter+0x3c>)
 80026a0:	f003 fcc4 	bl	800602c <HAL_GPIO_WritePin>
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000

080026b0 <LogData>:

void LogData(char data[]){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	if(write_logs == 1)
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <LogData+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <LogData+0x16>
		log_data(data);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fbe5 	bl	8001e90 <log_data>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20001270 	.word	0x20001270

080026d4 <HAL_UARTEx_RxEventCallback>:
/*
 * UART buffer handler based on the DMA receive function, every implementation is valid,
 * as long as you pass a sufficiently long receive buffer to the library.
 * */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
    oldPos = newPos; //keep track of the last position in the buffer
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_UARTEx_RxEventCallback+0xb0>)
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 80026e6:	801a      	strh	r2, [r3, #0]
    if(oldPos + Size > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	4413      	add	r3, r2
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f6:	dd22      	ble.n	800273e <HAL_UARTEx_RxEventCallback+0x6a>

        uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002700:	81fb      	strh	r3, [r7, #14]
        memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_UARTEx_RxEventCallback+0xb8>)
 800270a:	4413      	add	r3, r2
 800270c:	89fa      	ldrh	r2, [r7, #14]
 800270e:	4920      	ldr	r1, [pc, #128]	; (8002790 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002710:	4618      	mov	r0, r3
 8002712:	f00f f99c 	bl	8011a4e <memcpy>

        oldPos = 0;  // point to the start of the buffer
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002718:	2200      	movs	r2, #0
 800271a:	801a      	strh	r2, [r3, #0]
        memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (Size-datatocopy));  // copy the remaining data
 800271c:	89fb      	ldrh	r3, [r7, #14]
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002720:	1899      	adds	r1, r3, r2
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	461a      	mov	r2, r3
 800272a:	4818      	ldr	r0, [pc, #96]	; (800278c <HAL_UARTEx_RxEventCallback+0xb8>)
 800272c:	f00f f98f 	bl	8011a4e <memcpy>
        newPos = (Size-datatocopy);  // update the position
 8002730:	887a      	ldrh	r2, [r7, #2]
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_UARTEx_RxEventCallback+0xb0>)
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	e010      	b.n	8002760 <HAL_UARTEx_RxEventCallback+0x8c>
    }
    else{
        memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, Size); //copy received data to the buffer
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_UARTEx_RxEventCallback+0xb8>)
 8002746:	4413      	add	r3, r2
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	4911      	ldr	r1, [pc, #68]	; (8002790 <HAL_UARTEx_RxEventCallback+0xbc>)
 800274c:	4618      	mov	r0, r3
 800274e:	f00f f97e 	bl	8011a4e <memcpy>
        newPos = Size+oldPos; //update buffer position
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_UARTEx_RxEventCallback+0xb4>)
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	4413      	add	r3, r2
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_UARTEx_RxEventCallback+0xb0>)
 800275e:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer, RxBuffer_SIZE); //re-enable the DMA interrupt
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	490b      	ldr	r1, [pc, #44]	; (8002790 <HAL_UARTEx_RxEventCallback+0xbc>)
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <HAL_UARTEx_RxEventCallback+0xc0>)
 8002766:	f007 ffb9 	bl	800a6dc <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT); //disable the half transfer interrupt
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_UARTEx_RxEventCallback+0xc4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_UARTEx_RxEventCallback+0xc4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20001274 	.word	0x20001274
 8002788:	20001272 	.word	0x20001272
 800278c:	200012b8 	.word	0x200012b8
 8002790:	20001278 	.word	0x20001278
 8002794:	20001100 	.word	0x20001100
 8002798:	20001148 	.word	0x20001148
 800279c:	00000000 	.word	0x00000000

080027a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a4:	b0c0      	sub	sp, #256	; 0x100
 80027a6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027a8:	f002 fc56 	bl	8005058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ac:	f000 fbc0 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b0:	f000 fd52 	bl	8003258 <MX_GPIO_Init>
  MX_DMA_Init();
 80027b4:	f000 fd0a 	bl	80031cc <MX_DMA_Init>
  MX_I2C2_Init();
 80027b8:	f000 fc24 	bl	8003004 <MX_I2C2_Init>
  MX_SPI3_Init();
 80027bc:	f000 fca6 	bl	800310c <MX_SPI3_Init>
  MX_SDIO_SD_Init();
 80027c0:	f000 fc4e 	bl	8003060 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80027c4:	f009 fe76 	bl	800c4b4 <MX_FATFS_Init>
  MX_SPI1_Init();
 80027c8:	f000 fc6a 	bl	80030a0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80027cc:	f000 fcd4 	bl	8003178 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	4926      	ldr	r1, [pc, #152]	; (800286c <main+0xcc>)
 80027d4:	4826      	ldr	r0, [pc, #152]	; (8002870 <main+0xd0>)
 80027d6:	f007 ff81 	bl	800a6dc <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <main+0xd4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <main+0xd4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0208 	bic.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]

  //HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80027ea:	2201      	movs	r2, #1
 80027ec:	2104      	movs	r1, #4
 80027ee:	4822      	ldr	r0, [pc, #136]	; (8002878 <main+0xd8>)
 80027f0:	f003 fc1c 	bl	800602c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80027f4:	2201      	movs	r2, #1
 80027f6:	2108      	movs	r1, #8
 80027f8:	481f      	ldr	r0, [pc, #124]	; (8002878 <main+0xd8>)
 80027fa:	f003 fc17 	bl	800602c <HAL_GPIO_WritePin>

  colir_one_init(&hspi1);
 80027fe:	481f      	ldr	r0, [pc, #124]	; (800287c <main+0xdc>)
 8002800:	f7ff fae2 	bl	8001dc8 <colir_one_init>
  HAL_Delay(100);
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	f002 fc99 	bl	800513c <HAL_Delay>

  read_logs_to_sd();
 800280a:	f7ff fc09 	bl	8002020 <read_logs_to_sd>

  NRF24_Init();
 800280e:	f7fe fd4d 	bl	80012ac <NRF24_Init>
  NRF24_TxRxMode(TxAddress, RxAddress, 76);
 8002812:	224c      	movs	r2, #76	; 0x4c
 8002814:	491a      	ldr	r1, [pc, #104]	; (8002880 <main+0xe0>)
 8002816:	481b      	ldr	r0, [pc, #108]	; (8002884 <main+0xe4>)
 8002818:	f7fe fd6f 	bl	80012fa <NRF24_TxRxMode>
  NRF24_RxMode();
 800281c:	f7fe fdd0 	bl	80013c0 <NRF24_RxMode>

  bno055_assignI2C(&hi2c2);
 8002820:	4819      	ldr	r0, [pc, #100]	; (8002888 <main+0xe8>)
 8002822:	f7ff fd07 	bl	8002234 <bno055_assignI2C>
  bno055_setup();
 8002826:	f7ff f857 	bl	80018d8 <bno055_setup>
  bno055_setOperationModeNDOF();
 800282a:	f7ff f842 	bl	80018b2 <bno055_setOperationModeNDOF>

  PCA9685_Init(&hi2c2);
 800282e:	4816      	ldr	r0, [pc, #88]	; (8002888 <main+0xe8>)
 8002830:	f001 fcd2 	bl	80041d8 <PCA9685_Init>
  PCA9685_SetPwmFrequency(50);
 8002834:	2032      	movs	r0, #50	; 0x32
 8002836:	f001 fb53 	bl	8003ee0 <PCA9685_SetPwmFrequency>

  PCA9685_SetServoAngle(0, 90);
 800283a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800288c <main+0xec>
 800283e:	2000      	movs	r0, #0
 8002840:	f001 fc6e 	bl	8004120 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(1, 87);
 8002844:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002890 <main+0xf0>
 8002848:	2001      	movs	r0, #1
 800284a:	f001 fc69 	bl	8004120 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(2, 83);
 800284e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002894 <main+0xf4>
 8002852:	2002      	movs	r0, #2
 8002854:	f001 fc64 	bl	8004120 <PCA9685_SetServoAngle>
  PCA9685_SetServoAngle(3, 84);
 8002858:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002898 <main+0xf8>
 800285c:	2003      	movs	r0, #3
 800285e:	f001 fc5f 	bl	8004120 <PCA9685_SetServoAngle>

  //PCA9685_SetServoAngle(7, 90);

  HAL_SPI_Init(&hspi1);
 8002862:	4806      	ldr	r0, [pc, #24]	; (800287c <main+0xdc>)
 8002864:	f007 f8ec 	bl	8009a40 <HAL_SPI_Init>
  while(beginSPI() != BMP5_OK)
 8002868:	e01c      	b.n	80028a4 <main+0x104>
 800286a:	bf00      	nop
 800286c:	20001278 	.word	0x20001278
 8002870:	20001100 	.word	0x20001100
 8002874:	20001148 	.word	0x20001148
 8002878:	40021000 	.word	0x40021000
 800287c:	20001050 	.word	0x20001050
 8002880:	20000018 	.word	0x20000018
 8002884:	20000010 	.word	0x20000010
 8002888:	20000eb8 	.word	0x20000eb8
 800288c:	42b40000 	.word	0x42b40000
 8002890:	42ae0000 	.word	0x42ae0000
 8002894:	42a60000 	.word	0x42a60000
 8002898:	42a80000 	.word	0x42a80000
  {
    // Wait a bit to see if connection is established
    HAL_Delay(1000);
 800289c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a0:	f002 fc4c 	bl	800513c <HAL_Delay>
  while(beginSPI() != BMP5_OK)
 80028a4:	f7fe ff08 	bl	80016b8 <beginSPI>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f6      	bne.n	800289c <main+0xfc>
  }
  HAL_Delay(1000);
 80028ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028b2:	f002 fc43 	bl	800513c <HAL_Delay>
  int8_t err = getSensorData(&bmpData);
 80028b6:	48d0      	ldr	r0, [pc, #832]	; (8002bf8 <main+0x458>)
 80028b8:	f7fe ff6c 	bl	8001794 <getSensorData>
 80028bc:	4603      	mov	r3, r0
 80028be:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  zeroAltitude = calcAltitude(bmpData.pressure);
 80028c2:	4bcd      	ldr	r3, [pc, #820]	; (8002bf8 <main+0x458>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	eeb0 0a67 	vmov.f32	s0, s15
 80028cc:	f7fe ff74 	bl	80017b8 <calcAltitude>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	4bc9      	ldr	r3, [pc, #804]	; (8002bfc <main+0x45c>)
 80028d6:	edc3 7a00 	vstr	s15, [r3]
  HAL_SPI_DeInit(&hspi1);
 80028da:	48c9      	ldr	r0, [pc, #804]	; (8002c00 <main+0x460>)
 80028dc:	f007 f939 	bl	8009b52 <HAL_SPI_DeInit>

  rState = COLIRONE_READY_TO_LAUNCH;
 80028e0:	4bc8      	ldr	r3, [pc, #800]	; (8002c04 <main+0x464>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2104      	movs	r1, #4
 80028ea:	48c7      	ldr	r0, [pc, #796]	; (8002c08 <main+0x468>)
 80028ec:	f003 fb9e 	bl	800602c <HAL_GPIO_WritePin>

  uint32_t lastRxMode = HAL_GetTick();
 80028f0:	f002 fc18 	bl	8005124 <HAL_GetTick>
 80028f4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  uint32_t lastTimestamp = HAL_GetTick();
 80028f8:	f002 fc14 	bl	8005124 <HAL_GetTick>
 80028fc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  bool rxMode = false;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  float VBatt;
  float lastAltitude = 0;
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  float verticalVelocity = 0;
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  float altitude = 0;
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  flash_config* logsConfig = get_logs_config();
 800291e:	f7ff fc7d 	bl	800221c <get_logs_config>
 8002922:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

  double latitude = 0, longitude = 0;
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	uint32_t timestamp = HAL_GetTick();
 800293e:	f002 fbf1 	bl	8005124 <HAL_GetTick>
 8002942:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	bno055_vector_t orientation = bno055_getVectorEuler();
 8002946:	f7ff f976 	bl	8001c36 <bno055_getVectorEuler>
 800294a:	eeb0 4a40 	vmov.f32	s8, s0
 800294e:	eef0 4a60 	vmov.f32	s9, s1
 8002952:	eeb0 5a41 	vmov.f32	s10, s2
 8002956:	eef0 5a61 	vmov.f32	s11, s3
 800295a:	eeb0 6a42 	vmov.f32	s12, s4
 800295e:	eef0 6a62 	vmov.f32	s13, s5
 8002962:	eeb0 7a43 	vmov.f32	s14, s6
 8002966:	eef0 7a63 	vmov.f32	s15, s7
 800296a:	ed87 4b08 	vstr	d4, [r7, #32]
 800296e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002972:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002976:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	bno055_vector_t linearAccel = bno055_getVectorLinearAccel();
 800297a:	f7ff f99f 	bl	8001cbc <bno055_getVectorLinearAccel>
 800297e:	eeb0 4a40 	vmov.f32	s8, s0
 8002982:	eef0 4a60 	vmov.f32	s9, s1
 8002986:	eeb0 5a41 	vmov.f32	s10, s2
 800298a:	eef0 5a61 	vmov.f32	s11, s3
 800298e:	eeb0 6a42 	vmov.f32	s12, s4
 8002992:	eef0 6a62 	vmov.f32	s13, s5
 8002996:	eeb0 7a43 	vmov.f32	s14, s6
 800299a:	eef0 7a63 	vmov.f32	s15, s7
 800299e:	ed87 4b10 	vstr	d4, [r7, #64]	; 0x40
 80029a2:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
 80029a6:	ed87 6b14 	vstr	d6, [r7, #80]	; 0x50
 80029aa:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	bno055_vector_t quaternion = bno055_getVectorQuaternion();
 80029ae:	f7ff f9c8 	bl	8001d42 <bno055_getVectorQuaternion>
 80029b2:	eeb0 4a40 	vmov.f32	s8, s0
 80029b6:	eef0 4a60 	vmov.f32	s9, s1
 80029ba:	eeb0 5a41 	vmov.f32	s10, s2
 80029be:	eef0 5a61 	vmov.f32	s11, s3
 80029c2:	eeb0 6a42 	vmov.f32	s12, s4
 80029c6:	eef0 6a62 	vmov.f32	s13, s5
 80029ca:	eeb0 7a43 	vmov.f32	s14, s6
 80029ce:	eef0 7a63 	vmov.f32	s15, s7
 80029d2:	ed87 4b18 	vstr	d4, [r7, #96]	; 0x60
 80029d6:	ed87 5b1a 	vstr	d5, [r7, #104]	; 0x68
 80029da:	ed87 6b1c 	vstr	d6, [r7, #112]	; 0x70
 80029de:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	bno055_vector_t gyro = bno055_getVectorGyroscope();
 80029e2:	f7ff f8e5 	bl	8001bb0 <bno055_getVectorGyroscope>
 80029e6:	eeb0 4a40 	vmov.f32	s8, s0
 80029ea:	eef0 4a60 	vmov.f32	s9, s1
 80029ee:	eeb0 5a41 	vmov.f32	s10, s2
 80029f2:	eef0 5a61 	vmov.f32	s11, s3
 80029f6:	eeb0 6a42 	vmov.f32	s12, s4
 80029fa:	eef0 6a62 	vmov.f32	s13, s5
 80029fe:	eeb0 7a43 	vmov.f32	s14, s6
 8002a02:	eef0 7a63 	vmov.f32	s15, s7
 8002a06:	ed87 4b20 	vstr	d4, [r7, #128]	; 0x80
 8002a0a:	ed87 5b22 	vstr	d5, [r7, #136]	; 0x88
 8002a0e:	ed87 6b24 	vstr	d6, [r7, #144]	; 0x90
 8002a12:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
	logsConfig = get_logs_config();
 8002a16:	f7ff fc01 	bl	800221c <get_logs_config>
 8002a1a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	HAL_SPI_Init(&hspi1);
 8002a1e:	4878      	ldr	r0, [pc, #480]	; (8002c00 <main+0x460>)
 8002a20:	f007 f80e 	bl	8009a40 <HAL_SPI_Init>
	int8_t err = getSensorData(&bmpData);
 8002a24:	4874      	ldr	r0, [pc, #464]	; (8002bf8 <main+0x458>)
 8002a26:	f7fe feb5 	bl	8001794 <getSensorData>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	HAL_SPI_DeInit(&hspi1);
 8002a30:	4873      	ldr	r0, [pc, #460]	; (8002c00 <main+0x460>)
 8002a32:	f007 f88e 	bl	8009b52 <HAL_SPI_DeInit>
	if(bmpData.pressure > 10000){
 8002a36:	4b70      	ldr	r3, [pc, #448]	; (8002bf8 <main+0x458>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002c0c <main+0x46c>
 8002a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	dd71      	ble.n	8002b2e <main+0x38e>
		altitude = calcAltitude(bmpData.pressure) - zeroAltitude;
 8002a4a:	4b6b      	ldr	r3, [pc, #428]	; (8002bf8 <main+0x458>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	eeb0 0a67 	vmov.f32	s0, s15
 8002a54:	f7fe feb0 	bl	80017b8 <calcAltitude>
 8002a58:	eeb0 7a40 	vmov.f32	s14, s0
 8002a5c:	4b67      	ldr	r3, [pc, #412]	; (8002bfc <main+0x45c>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a66:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
		if(altitude > apogee)
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <main+0x470>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	dd03      	ble.n	8002a86 <main+0x2e6>
			apogee = altitude;
 8002a7e:	4a64      	ldr	r2, [pc, #400]	; (8002c10 <main+0x470>)
 8002a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a84:	6013      	str	r3, [r2, #0]

		float deltaT = timestamp - lastTimestamp;
 8002a86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
		if(deltaT != 0)
 8002a9c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002aa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	d00f      	beq.n	8002aca <main+0x32a>
			verticalVelocity = (altitude - lastAltitude) / (deltaT / 1000);
 8002aaa:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002aae:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002ab2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ab6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002aba:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8002c14 <main+0x474>
 8002abe:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac6:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

		lastAltitude = altitude;
 8002aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		lastTimestamp = timestamp;
 8002ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

		if(verticalVelocity < -3 && altitude > 5 && altitude < 150 && (rState == COLIRONE_CRUISE || rState == COLIRONE_SHUTES_DEPLOYED)){
 8002ada:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002ade:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8002ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	d520      	bpl.n	8002b2e <main+0x38e>
 8002aec:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002af0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	dd17      	ble.n	8002b2e <main+0x38e>
 8002afe:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002b02:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002c18 <main+0x478>
 8002b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0e:	d50e      	bpl.n	8002b2e <main+0x38e>
 8002b10:	4b3c      	ldr	r3, [pc, #240]	; (8002c04 <main+0x464>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d003      	beq.n	8002b20 <main+0x380>
 8002b18:	4b3a      	ldr	r3, [pc, #232]	; (8002c04 <main+0x464>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b10      	cmp	r3, #16
 8002b1e:	d106      	bne.n	8002b2e <main+0x38e>
			rState = COLIRONE_SHUTES_DEPLOYED;
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <main+0x464>)
 8002b22:	2210      	movs	r2, #16
 8002b24:	701a      	strb	r2, [r3, #0]
			ParseReceivedCommand("s 8 90", 32);
 8002b26:	2120      	movs	r1, #32
 8002b28:	483c      	ldr	r0, [pc, #240]	; (8002c1c <main+0x47c>)
 8002b2a:	f7ff fcad 	bl	8002488 <ParseReceivedCommand>
		}
	}

	VBatt = (value_adc * 2 / 4095) * 7.4;
 8002b2e:	4b3c      	ldr	r3, [pc, #240]	; (8002c20 <main+0x480>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	005a      	lsls	r2, r3, #1
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <main+0x484>)
 8002b36:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	0852      	lsrs	r2, r2, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	0adb      	lsrs	r3, r3, #11
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fcde 	bl	8000504 <__aeabi_ui2d>
 8002b48:	a329      	add	r3, pc, #164	; (adr r3, 8002bf0 <main+0x450>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd53 	bl	80005f8 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f845 	bl	8000be8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	nmea_parse(&myData, DataBuffer);
 8002b64:	4930      	ldr	r1, [pc, #192]	; (8002c28 <main+0x488>)
 8002b66:	4831      	ldr	r0, [pc, #196]	; (8002c2c <main+0x48c>)
 8002b68:	f001 f862 	bl	8003c30 <nmea_parse>
	latitude = myData.latitude;
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <main+0x48c>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	longitude = myData.longitude;
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <main+0x48c>)
 8002b78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b7c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	if(longitude > 1000)
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <main+0x490>)
 8002b86:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002b8a:	f7fd ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <main+0x40a>
		longitude = longitude / 1000;
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <main+0x490>)
 8002b9a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002b9e:	f7fd fe55 	bl	800084c <__aeabi_ddiv>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	if(myData.lonSide == 'W')
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <main+0x48c>)
 8002bac:	7e1b      	ldrb	r3, [r3, #24]
 8002bae:	2b57      	cmp	r3, #87	; 0x57
 8002bb0:	d10b      	bne.n	8002bca <main+0x42a>
		longitude = -longitude;
 8002bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bc6:	ed87 7b2e 	vstr	d7, [r7, #184]	; 0xb8
	if(myData.latSide == 'S')
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <main+0x48c>)
 8002bcc:	7a1b      	ldrb	r3, [r3, #8]
 8002bce:	2b53      	cmp	r3, #83	; 0x53
 8002bd0:	d130      	bne.n	8002c34 <main+0x494>
		latitude = -latitude;
 8002bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	ed97 7b00 	vldr	d7, [r7]
 8002be6:	ed87 7b30 	vstr	d7, [r7, #192]	; 0xc0
 8002bea:	e023      	b.n	8002c34 <main+0x494>
 8002bec:	f3af 8000 	nop.w
 8002bf0:	9999999a 	.word	0x9999999a
 8002bf4:	401d9999 	.word	0x401d9999
 8002bf8:	200014f4 	.word	0x200014f4
 8002bfc:	200014f0 	.word	0x200014f0
 8002c00:	20001050 	.word	0x20001050
 8002c04:	20001500 	.word	0x20001500
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	461c4000 	.word	0x461c4000
 8002c10:	200014fc 	.word	0x200014fc
 8002c14:	447a0000 	.word	0x447a0000
 8002c18:	43160000 	.word	0x43160000
 8002c1c:	0801539c 	.word	0x0801539c
 8002c20:	2000126c 	.word	0x2000126c
 8002c24:	00100101 	.word	0x00100101
 8002c28:	200012b8 	.word	0x200012b8
 8002c2c:	200014b8 	.word	0x200014b8
 8002c30:	408f4000 	.word	0x408f4000
	//ParseReceivedCommand("s 8 90", 32);
	HAL_Delay(10);
 8002c34:	200a      	movs	r0, #10
 8002c36:	f002 fa81 	bl	800513c <HAL_Delay>
	if(!rxMode){
 8002c3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 812b 	beq.w	8002ea0 <main+0x700>
		NRF24_TxMode();
 8002c4a:	f7fe fb99 	bl	8001380 <NRF24_TxMode>
		memset(&TxData, 0, sizeof(TxData));
 8002c4e:	2220      	movs	r2, #32
 8002c50:	2100      	movs	r1, #0
 8002c52:	48a9      	ldr	r0, [pc, #676]	; (8002ef8 <main+0x758>)
 8002c54:	f00e fde0 	bl	8011818 <memset>
		sprintf(TxData, "p %d %f %f %d", timestamp, latitude, longitude, myData.satelliteCount);
 8002c58:	4ba8      	ldr	r3, [pc, #672]	; (8002efc <main+0x75c>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	9304      	str	r3, [sp, #16]
 8002c5e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002c62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c66:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002c6a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c72:	49a3      	ldr	r1, [pc, #652]	; (8002f00 <main+0x760>)
 8002c74:	48a0      	ldr	r0, [pc, #640]	; (8002ef8 <main+0x758>)
 8002c76:	f00e fcd7 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002c7a:	489f      	ldr	r0, [pc, #636]	; (8002ef8 <main+0x758>)
 8002c7c:	f7fe fbc0 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002c80:	489d      	ldr	r0, [pc, #628]	; (8002ef8 <main+0x758>)
 8002c82:	f7ff fd15 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002c86:	200f      	movs	r0, #15
 8002c88:	f002 fa58 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4899      	ldr	r0, [pc, #612]	; (8002ef8 <main+0x758>)
 8002c92:	f00e fdc1 	bl	8011818 <memset>
		sprintf(TxData, "h %d %.2f", timestamp, altitude);
 8002c96:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8002c9a:	f7fd fc55 	bl	8000548 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ca6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002caa:	4996      	ldr	r1, [pc, #600]	; (8002f04 <main+0x764>)
 8002cac:	4892      	ldr	r0, [pc, #584]	; (8002ef8 <main+0x758>)
 8002cae:	f00e fcbb 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002cb2:	4891      	ldr	r0, [pc, #580]	; (8002ef8 <main+0x758>)
 8002cb4:	f7fe fba4 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002cb8:	488f      	ldr	r0, [pc, #572]	; (8002ef8 <main+0x758>)
 8002cba:	f7ff fcf9 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002cbe:	200f      	movs	r0, #15
 8002cc0:	f002 fa3c 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	488b      	ldr	r0, [pc, #556]	; (8002ef8 <main+0x758>)
 8002cca:	f00e fda5 	bl	8011818 <memset>
		sprintf(TxData, "v %d %.2f", timestamp, verticalVelocity);
 8002cce:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002cd2:	f7fd fc39 	bl	8000548 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	e9cd 2300 	strd	r2, r3, [sp]
 8002cde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ce2:	4989      	ldr	r1, [pc, #548]	; (8002f08 <main+0x768>)
 8002ce4:	4884      	ldr	r0, [pc, #528]	; (8002ef8 <main+0x758>)
 8002ce6:	f00e fc9f 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002cea:	4883      	ldr	r0, [pc, #524]	; (8002ef8 <main+0x758>)
 8002cec:	f7fe fb88 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002cf0:	4881      	ldr	r0, [pc, #516]	; (8002ef8 <main+0x758>)
 8002cf2:	f7ff fcdd 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002cf6:	200f      	movs	r0, #15
 8002cf8:	f002 fa20 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	2100      	movs	r1, #0
 8002d00:	487d      	ldr	r0, [pc, #500]	; (8002ef8 <main+0x758>)
 8002d02:	f00e fd89 	bl	8011818 <memset>
		sprintf(TxData, "o %d %.2f %.2f %.2f", timestamp, -orientation.x, -orientation.y, -orientation.z);
 8002d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d0a:	4692      	mov	sl, r2
 8002d0c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002d10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d14:	61ba      	str	r2, [r7, #24]
 8002d16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d20:	613a      	str	r2, [r7, #16]
 8002d22:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d30:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d38:	e9cd ab00 	strd	sl, fp, [sp]
 8002d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d40:	4972      	ldr	r1, [pc, #456]	; (8002f0c <main+0x76c>)
 8002d42:	486d      	ldr	r0, [pc, #436]	; (8002ef8 <main+0x758>)
 8002d44:	f00e fc70 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002d48:	486b      	ldr	r0, [pc, #428]	; (8002ef8 <main+0x758>)
 8002d4a:	f7fe fb59 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002d4e:	486a      	ldr	r0, [pc, #424]	; (8002ef8 <main+0x758>)
 8002d50:	f7ff fcae 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002d54:	200f      	movs	r0, #15
 8002d56:	f002 f9f1 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4866      	ldr	r0, [pc, #408]	; (8002ef8 <main+0x758>)
 8002d60:	f00e fd5a 	bl	8011818 <memset>
		sprintf(TxData, "g %d %.2f %.2f %.2f", timestamp, gyro.x, gyro.y, gyro.z);
 8002d64:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002d68:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d6c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002d70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d78:	e9cd 0100 	strd	r0, r1, [sp]
 8002d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d80:	4963      	ldr	r1, [pc, #396]	; (8002f10 <main+0x770>)
 8002d82:	485d      	ldr	r0, [pc, #372]	; (8002ef8 <main+0x758>)
 8002d84:	f00e fc50 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002d88:	485b      	ldr	r0, [pc, #364]	; (8002ef8 <main+0x758>)
 8002d8a:	f7fe fb39 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002d8e:	485a      	ldr	r0, [pc, #360]	; (8002ef8 <main+0x758>)
 8002d90:	f7ff fc8e 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002d94:	200f      	movs	r0, #15
 8002d96:	f002 f9d1 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4856      	ldr	r0, [pc, #344]	; (8002ef8 <main+0x758>)
 8002da0:	f00e fd3a 	bl	8011818 <memset>
		sprintf(TxData, "a %d %.2f %.2f %.2f", timestamp, linearAccel.x, linearAccel.y, linearAccel.z);
 8002da4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002da8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002dac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002db4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002db8:	e9cd 0100 	strd	r0, r1, [sp]
 8002dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dc0:	4954      	ldr	r1, [pc, #336]	; (8002f14 <main+0x774>)
 8002dc2:	484d      	ldr	r0, [pc, #308]	; (8002ef8 <main+0x758>)
 8002dc4:	f00e fc30 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002dc8:	484b      	ldr	r0, [pc, #300]	; (8002ef8 <main+0x758>)
 8002dca:	f7fe fb19 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002dce:	484a      	ldr	r0, [pc, #296]	; (8002ef8 <main+0x758>)
 8002dd0:	f7ff fc6e 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002dd4:	200f      	movs	r0, #15
 8002dd6:	f002 f9b1 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002dda:	2220      	movs	r2, #32
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4846      	ldr	r0, [pc, #280]	; (8002ef8 <main+0x758>)
 8002de0:	f00e fd1a 	bl	8011818 <memset>
		sprintf(TxData, "q %d %.2f %.2f %.2f %.2f", timestamp, quaternion.x, quaternion.y, quaternion.z, quaternion.w);
 8002de4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002de8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002df0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002df4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002dfc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e00:	e9cd 4500 	strd	r4, r5, [sp]
 8002e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e08:	4943      	ldr	r1, [pc, #268]	; (8002f18 <main+0x778>)
 8002e0a:	483b      	ldr	r0, [pc, #236]	; (8002ef8 <main+0x758>)
 8002e0c:	f00e fc0c 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002e10:	4839      	ldr	r0, [pc, #228]	; (8002ef8 <main+0x758>)
 8002e12:	f7fe faf5 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002e16:	4838      	ldr	r0, [pc, #224]	; (8002ef8 <main+0x758>)
 8002e18:	f7ff fc4a 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002e1c:	200f      	movs	r0, #15
 8002e1e:	f002 f98d 	bl	800513c <HAL_Delay>
		memset(&TxData, 0, sizeof(TxData));
 8002e22:	2220      	movs	r2, #32
 8002e24:	2100      	movs	r1, #0
 8002e26:	4834      	ldr	r0, [pc, #208]	; (8002ef8 <main+0x758>)
 8002e28:	f00e fcf6 	bl	8011818 <memset>
		sprintf(TxData, "s %d %d %d %d", timestamp, write_logs, rState, logsConfig->last_log);
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <main+0x77c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <main+0x780>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	9200      	str	r2, [sp, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e4a:	4936      	ldr	r1, [pc, #216]	; (8002f24 <main+0x784>)
 8002e4c:	482a      	ldr	r0, [pc, #168]	; (8002ef8 <main+0x758>)
 8002e4e:	f00e fbeb 	bl	8011628 <siprintf>
		NRF24_Transmit(TxData);
 8002e52:	4829      	ldr	r0, [pc, #164]	; (8002ef8 <main+0x758>)
 8002e54:	f7fe fad4 	bl	8001400 <NRF24_Transmit>
		LogData(TxData);
 8002e58:	4827      	ldr	r0, [pc, #156]	; (8002ef8 <main+0x758>)
 8002e5a:	f7ff fc29 	bl	80026b0 <LogData>

		HAL_Delay(15);
 8002e5e:	200f      	movs	r0, #15
 8002e60:	f002 f96c 	bl	800513c <HAL_Delay>
		if(timestamp - lastRxMode > 500){
 8002e64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e72:	d93c      	bls.n	8002eee <main+0x74e>
			memset(&TxData, 0, sizeof(TxData));
 8002e74:	2220      	movs	r2, #32
 8002e76:	2100      	movs	r1, #0
 8002e78:	481f      	ldr	r0, [pc, #124]	; (8002ef8 <main+0x758>)
 8002e7a:	f00e fccd 	bl	8011818 <memset>
			sprintf(TxData, "c");
 8002e7e:	492a      	ldr	r1, [pc, #168]	; (8002f28 <main+0x788>)
 8002e80:	481d      	ldr	r0, [pc, #116]	; (8002ef8 <main+0x758>)
 8002e82:	f00e fbd1 	bl	8011628 <siprintf>
			NRF24_Transmit(TxData);
 8002e86:	481c      	ldr	r0, [pc, #112]	; (8002ef8 <main+0x758>)
 8002e88:	f7fe faba 	bl	8001400 <NRF24_Transmit>
			rxMode = true;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			NRF24_RxMode();
 8002e92:	f7fe fa95 	bl	80013c0 <NRF24_RxMode>
			lastRxMode = HAL_GetTick();
 8002e96:	f002 f945 	bl	8005124 <HAL_GetTick>
 8002e9a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8002e9e:	e026      	b.n	8002eee <main+0x74e>
		}
	}
	else{
		if (isDataAvailable() == 1)
 8002ea0:	f7fe fb24 	bl	80014ec <isDataAvailable>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d113      	bne.n	8002ed2 <main+0x732>
		{
			memset(&RxData, 0, sizeof(RxData));
 8002eaa:	2220      	movs	r2, #32
 8002eac:	2100      	movs	r1, #0
 8002eae:	481f      	ldr	r0, [pc, #124]	; (8002f2c <main+0x78c>)
 8002eb0:	f00e fcb2 	bl	8011818 <memset>
			NRF24_Receive(RxData);
 8002eb4:	481d      	ldr	r0, [pc, #116]	; (8002f2c <main+0x78c>)
 8002eb6:	f7fe fb3b 	bl	8001530 <NRF24_Receive>
			rxMode = false;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			lastRxMode = HAL_GetTick();
 8002ec0:	f002 f930 	bl	8005124 <HAL_GetTick>
 8002ec4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
			ParseReceivedCommand(RxData, sizeof(RxData));
 8002ec8:	2120      	movs	r1, #32
 8002eca:	4818      	ldr	r0, [pc, #96]	; (8002f2c <main+0x78c>)
 8002ecc:	f7ff fadc 	bl	8002488 <ParseReceivedCommand>
 8002ed0:	e00d      	b.n	8002eee <main+0x74e>
		}
		else if(timestamp - lastRxMode > 250){
 8002ed2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2bfa      	cmp	r3, #250	; 0xfa
 8002ede:	d906      	bls.n	8002eee <main+0x74e>
			rxMode = false;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			lastRxMode = HAL_GetTick();
 8002ee6:	f002 f91d 	bl	8005124 <HAL_GetTick>
 8002eea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		}
	}

	HAL_Delay(70);
 8002eee:	2046      	movs	r0, #70	; 0x46
 8002ef0:	f002 f924 	bl	800513c <HAL_Delay>
  {
 8002ef4:	e523      	b.n	800293e <main+0x19e>
 8002ef6:	bf00      	nop
 8002ef8:	20001208 	.word	0x20001208
 8002efc:	200014b8 	.word	0x200014b8
 8002f00:	080153a4 	.word	0x080153a4
 8002f04:	080153b4 	.word	0x080153b4
 8002f08:	080153c0 	.word	0x080153c0
 8002f0c:	080153cc 	.word	0x080153cc
 8002f10:	080153e0 	.word	0x080153e0
 8002f14:	080153f4 	.word	0x080153f4
 8002f18:	08015408 	.word	0x08015408
 8002f1c:	20001270 	.word	0x20001270
 8002f20:	20001500 	.word	0x20001500
 8002f24:	08015424 	.word	0x08015424
 8002f28:	08015434 	.word	0x08015434
 8002f2c:	20001228 	.word	0x20001228

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b094      	sub	sp, #80	; 0x50
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 0320 	add.w	r3, r7, #32
 8002f3a:	2230      	movs	r2, #48	; 0x30
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f00e fc6a 	bl	8011818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <SystemClock_Config+0xcc>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <SystemClock_Config+0xcc>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <SystemClock_Config+0xcc>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f70:	2300      	movs	r3, #0
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <SystemClock_Config+0xd0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <SystemClock_Config+0xd0>)
 8002f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b1f      	ldr	r3, [pc, #124]	; (8003000 <SystemClock_Config+0xd0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f94:	2310      	movs	r3, #16
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002fa4:	2350      	movs	r3, #80	; 0x50
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fac:	2304      	movs	r3, #4
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb0:	f107 0320 	add.w	r3, r7, #32
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 fe6f 	bl	8007c98 <HAL_RCC_OscConfig>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fc0:	f000 fa20 	bl	8003404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc4:	230f      	movs	r3, #15
 8002fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002fd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 f8d0 	bl	8008188 <HAL_RCC_ClockConfig>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002fee:	f000 fa09 	bl	8003404 <Error_Handler>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	3750      	adds	r7, #80	; 0x50
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40007000 	.word	0x40007000

08003004 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <MX_I2C2_Init+0x50>)
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <MX_I2C2_Init+0x54>)
 800300c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <MX_I2C2_Init+0x50>)
 8003010:	4a12      	ldr	r2, [pc, #72]	; (800305c <MX_I2C2_Init+0x58>)
 8003012:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <MX_I2C2_Init+0x50>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <MX_I2C2_Init+0x50>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <MX_I2C2_Init+0x50>)
 8003022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003026:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <MX_I2C2_Init+0x50>)
 800302a:	2200      	movs	r2, #0
 800302c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800302e:	4b09      	ldr	r3, [pc, #36]	; (8003054 <MX_I2C2_Init+0x50>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <MX_I2C2_Init+0x50>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <MX_I2C2_Init+0x50>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003040:	4804      	ldr	r0, [pc, #16]	; (8003054 <MX_I2C2_Init+0x50>)
 8003042:	f003 f80d 	bl	8006060 <HAL_I2C_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800304c:	f000 f9da 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000eb8 	.word	0x20000eb8
 8003058:	40005800 	.word	0x40005800
 800305c:	000186a0 	.word	0x000186a0

08003060 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <MX_SDIO_SD_Init+0x3c>)
 8003068:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 800307e:	2200      	movs	r2, #0
 8003080:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 8003084:	2200      	movs	r2, #0
 8003086:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <MX_SDIO_SD_Init+0x38>)
 800308a:	2204      	movs	r2, #4
 800308c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	20000f0c 	.word	0x20000f0c
 800309c:	40012c00 	.word	0x40012c00

080030a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <MX_SPI1_Init+0x64>)
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <MX_SPI1_Init+0x68>)
 80030a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <MX_SPI1_Init+0x64>)
 80030ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <MX_SPI1_Init+0x64>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <MX_SPI1_Init+0x64>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <MX_SPI1_Init+0x64>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_SPI1_Init+0x64>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <MX_SPI1_Init+0x64>)
 80030cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_SPI1_Init+0x64>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <MX_SPI1_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_SPI1_Init+0x64>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <MX_SPI1_Init+0x64>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <MX_SPI1_Init+0x64>)
 80030ec:	220a      	movs	r2, #10
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030f0:	4804      	ldr	r0, [pc, #16]	; (8003104 <MX_SPI1_Init+0x64>)
 80030f2:	f006 fca5 	bl	8009a40 <HAL_SPI_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030fc:	f000 f982 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20001050 	.word	0x20001050
 8003108:	40013000 	.word	0x40013000

0800310c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003110:	4b17      	ldr	r3, [pc, #92]	; (8003170 <MX_SPI3_Init+0x64>)
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <MX_SPI3_Init+0x68>)
 8003114:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <MX_SPI3_Init+0x64>)
 8003118:	f44f 7282 	mov.w	r2, #260	; 0x104
 800311c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <MX_SPI3_Init+0x64>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <MX_SPI3_Init+0x64>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <MX_SPI3_Init+0x64>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <MX_SPI3_Init+0x64>)
 8003132:	2200      	movs	r2, #0
 8003134:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <MX_SPI3_Init+0x64>)
 8003138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_SPI3_Init+0x64>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <MX_SPI3_Init+0x64>)
 8003146:	2200      	movs	r2, #0
 8003148:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <MX_SPI3_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <MX_SPI3_Init+0x64>)
 8003152:	2200      	movs	r2, #0
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <MX_SPI3_Init+0x64>)
 8003158:	220a      	movs	r2, #10
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <MX_SPI3_Init+0x64>)
 800315e:	f006 fc6f 	bl	8009a40 <HAL_SPI_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003168:	f000 f94c 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	200010a8 	.word	0x200010a8
 8003174:	40003c00 	.word	0x40003c00

08003178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <MX_USART2_UART_Init+0x50>)
 8003180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 8003184:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 800319e:	220c      	movs	r2, #12
 80031a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031ae:	4805      	ldr	r0, [pc, #20]	; (80031c4 <MX_USART2_UART_Init+0x4c>)
 80031b0:	f007 fa44 	bl	800a63c <HAL_UART_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031ba:	f000 f923 	bl	8003404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20001100 	.word	0x20001100
 80031c8:	40004400 	.word	0x40004400

080031cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <MX_DMA_Init+0x88>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <MX_DMA_Init+0x88>)
 80031dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <MX_DMA_Init+0x88>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <MX_DMA_Init+0x88>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a17      	ldr	r2, [pc, #92]	; (8003254 <MX_DMA_Init+0x88>)
 80031f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <MX_DMA_Init+0x88>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2010      	movs	r0, #16
 8003210:	f002 f893 	bl	800533a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003214:	2010      	movs	r0, #16
 8003216:	f002 f8ac 	bl	8005372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800321a:	2200      	movs	r2, #0
 800321c:	2100      	movs	r1, #0
 800321e:	2011      	movs	r0, #17
 8003220:	f002 f88b 	bl	800533a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003224:	2011      	movs	r0, #17
 8003226:	f002 f8a4 	bl	8005372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	203b      	movs	r0, #59	; 0x3b
 8003230:	f002 f883 	bl	800533a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003234:	203b      	movs	r0, #59	; 0x3b
 8003236:	f002 f89c 	bl	8005372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2100      	movs	r1, #0
 800323e:	2045      	movs	r0, #69	; 0x45
 8003240:	f002 f87b 	bl	800533a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003244:	2045      	movs	r0, #69	; 0x45
 8003246:	f002 f894 	bl	8005372 <HAL_NVIC_EnableIRQ>

}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08c      	sub	sp, #48	; 0x30
 800325c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
 800326c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	4b5f      	ldr	r3, [pc, #380]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a5e      	ldr	r2, [pc, #376]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b5c      	ldr	r3, [pc, #368]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a57      	ldr	r2, [pc, #348]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <MX_GPIO_Init+0x198>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a50      	ldr	r2, [pc, #320]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a49      	ldr	r2, [pc, #292]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b40      	ldr	r3, [pc, #256]	; (80033f0 <MX_GPIO_Init+0x198>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <MX_GPIO_Init+0x198>)
 8003304:	f043 0308 	orr.w	r3, r3, #8
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <MX_GPIO_Init+0x198>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	607b      	str	r3, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8003316:	2200      	movs	r2, #0
 8003318:	f641 718c 	movw	r1, #8076	; 0x1f8c
 800331c:	4835      	ldr	r0, [pc, #212]	; (80033f4 <MX_GPIO_Init+0x19c>)
 800331e:	f002 fe85 	bl	800602c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003322:	2200      	movs	r2, #0
 8003324:	2110      	movs	r1, #16
 8003326:	4834      	ldr	r0, [pc, #208]	; (80033f8 <MX_GPIO_Init+0x1a0>)
 8003328:	f002 fe80 	bl	800602c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800332c:	2201      	movs	r2, #1
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	4832      	ldr	r0, [pc, #200]	; (80033fc <MX_GPIO_Init+0x1a4>)
 8003332:	f002 fe7b 	bl	800602c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8003336:	2200      	movs	r2, #0
 8003338:	21c0      	movs	r1, #192	; 0xc0
 800333a:	4831      	ldr	r0, [pc, #196]	; (8003400 <MX_GPIO_Init+0x1a8>)
 800333c:	f002 fe76 	bl	800602c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8
                           PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8003340:	f641 738c 	movw	r3, #8076	; 0x1f8c
 8003344:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003346:	2301      	movs	r3, #1
 8003348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	2300      	movs	r3, #0
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4826      	ldr	r0, [pc, #152]	; (80033f4 <MX_GPIO_Init+0x19c>)
 800335a:	f002 fbb7 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800335e:	2310      	movs	r3, #16
 8003360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003362:	2301      	movs	r3, #1
 8003364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	4820      	ldr	r0, [pc, #128]	; (80033f8 <MX_GPIO_Init+0x1a0>)
 8003376:	f002 fba9 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003380:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800338a:	f107 031c 	add.w	r3, r7, #28
 800338e:	4619      	mov	r1, r3
 8003390:	481a      	ldr	r0, [pc, #104]	; (80033fc <MX_GPIO_Init+0x1a4>)
 8003392:	f002 fb9b 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800339e:	2302      	movs	r3, #2
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	4813      	ldr	r0, [pc, #76]	; (80033f8 <MX_GPIO_Init+0x1a0>)
 80033aa:	f002 fb8f 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <MX_GPIO_Init+0x1a4>)
 80033c6:	f002 fb81 	bl	8005acc <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80033ca:	23c0      	movs	r3, #192	; 0xc0
 80033cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ce:	2301      	movs	r3, #1
 80033d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	4619      	mov	r1, r3
 80033e0:	4807      	ldr	r0, [pc, #28]	; (8003400 <MX_GPIO_Init+0x1a8>)
 80033e2:	f002 fb73 	bl	8005acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033e6:	bf00      	nop
 80033e8:	3730      	adds	r7, #48	; 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40020800 	.word	0x40020800
 80033fc:	40020c00 	.word	0x40020c00
 8003400:	40020400 	.word	0x40020400

08003404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003408:	b672      	cpsid	i
}
 800340a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800340c:	e7fe      	b.n	800340c <Error_Handler+0x8>

0800340e <gps_checksum>:


char *data[15];

int gps_checksum(char *nmea_data)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fc ff2a 	bl	8000270 <strlen>
 800341c:	4603      	mov	r3, r0
 800341e:	2b04      	cmp	r3, #4
 8003420:	d801      	bhi.n	8003426 <gps_checksum+0x18>
 8003422:	2300      	movs	r3, #0
 8003424:	e038      	b.n	8003498 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fc ff22 	bl	8000270 <strlen>
 800342c:	4603      	mov	r3, r0
 800342e:	3b04      	subs	r3, #4
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fc ff19 	bl	8000270 <strlen>
 800343e:	4603      	mov	r3, r0
 8003440:	3b03      	subs	r3, #3
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	e00a      	b.n	800346a <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4053      	eors	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	3301      	adds	r3, #1
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fc ff00 	bl	8000270 <strlen>
 8003470:	4603      	mov	r3, r0
 8003472:	1f5a      	subs	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d8ec      	bhi.n	8003454 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	2210      	movs	r2, #16
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f00d fb30 	bl	8010ae8 <strtol>
 8003488:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	429a      	cmp	r2, r3
 8003490:	d101      	bne.n	8003496 <gps_checksum+0x88>
        return 1;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003496:	2300      	movs	r3, #0
    }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b0b7      	sub	sp, #220	; 0xdc
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80034b0:	f107 0320 	add.w	r3, r7, #32
 80034b4:	2264      	movs	r2, #100	; 0x64
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00e f9ad 	bl	8011818 <memset>
    char *marker = strtok(inputString, ",");
 80034be:	49c2      	ldr	r1, [pc, #776]	; (80037c8 <nmea_GPGGA+0x328>)
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f00e f9c3 	bl	801184c <strtok>
 80034c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80034ca:	e027      	b.n	800351c <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80034cc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80034d0:	f7fc fece 	bl	8000270 <strlen>
 80034d4:	4603      	mov	r3, r0
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80034dc:	1c63      	adds	r3, r4, #1
 80034de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034e2:	4610      	mov	r0, r2
 80034e4:	f00c fb4e 	bl	800fb84 <malloc>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	00a3      	lsls	r3, r4, #2
 80034ee:	33d8      	adds	r3, #216	; 0xd8
 80034f0:	443b      	add	r3, r7
 80034f2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80034f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034fa:	3b01      	subs	r3, #1
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	33d8      	adds	r3, #216	; 0xd8
 8003500:	443b      	add	r3, r7
 8003502:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003506:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800350a:	4618      	mov	r0, r3
 800350c:	f00e fa97 	bl	8011a3e <strcpy>
        marker = strtok(NULL, ",");
 8003510:	49ad      	ldr	r1, [pc, #692]	; (80037c8 <nmea_GPGGA+0x328>)
 8003512:	2000      	movs	r0, #0
 8003514:	f00e f99a 	bl	801184c <strtok>
 8003518:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800351c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1d3      	bne.n	80034cc <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8003524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	332c      	adds	r3, #44	; 0x2c
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f00e fa7e 	bl	8011a3e <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003542:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003546:	2b53      	cmp	r3, #83	; 0x53
 8003548:	d004      	beq.n	8003554 <nmea_GPGGA+0xb4>
 800354a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800354e:	2b4e      	cmp	r3, #78	; 0x4e
 8003550:	f040 8159 	bne.w	8003806 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800355a:	e010      	b.n	800357e <nmea_GPGGA+0xde>
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003562:	4413      	add	r3, r2
 8003564:	7819      	ldrb	r1, [r3, #0]
 8003566:	f107 021c 	add.w	r2, r7, #28
 800356a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800356e:	4413      	add	r3, r2
 8003570:	460a      	mov	r2, r1
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003578:	3301      	adds	r3, #1
 800357a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800357e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003582:	2b01      	cmp	r3, #1
 8003584:	ddea      	ble.n	800355c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800358c:	e011      	b.n	80035b2 <nmea_GPGGA+0x112>
 800358e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003590:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003594:	3302      	adds	r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	7819      	ldrb	r1, [r3, #0]
 800359a:	f107 0214 	add.w	r2, r7, #20
 800359e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035a2:	4413      	add	r3, r2
 80035a4:	460a      	mov	r2, r1
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035ac:	3301      	adds	r3, #1
 80035ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	dde9      	ble.n	800358e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	220a      	movs	r2, #10
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f00d fa90 	bl	8010ae8 <strtol>
 80035c8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f00d f9a0 	bl	8010918 <strtof>
 80035d8:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80035dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e8:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80035ec:	ed9f 6a77 	vldr	s12, [pc, #476]	; 80037cc <nmea_GPGGA+0x32c>
 80035f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f8:	ee17 0a90 	vmov	r0, s15
 80035fc:	f7fc ffa4 	bl	8000548 <__aeabi_f2d>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800360e:	e010      	b.n	8003632 <nmea_GPGGA+0x192>
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003616:	4413      	add	r3, r2
 8003618:	7819      	ldrb	r1, [r3, #0]
 800361a:	f107 0210 	add.w	r2, r7, #16
 800361e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003622:	4413      	add	r3, r2
 8003624:	460a      	mov	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800362c:	3301      	adds	r3, #1
 800362e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003636:	2b02      	cmp	r3, #2
 8003638:	ddea      	ble.n	8003610 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003640:	e011      	b.n	8003666 <nmea_GPGGA+0x1c6>
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003648:	3303      	adds	r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	7819      	ldrb	r1, [r3, #0]
 800364e:	f107 0208 	add.w	r2, r7, #8
 8003652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003656:	4413      	add	r3, r2
 8003658:	460a      	mov	r2, r1
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003660:	3301      	adds	r3, #1
 8003662:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003666:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800366a:	2b05      	cmp	r3, #5
 800366c:	dde9      	ble.n	8003642 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	220a      	movs	r2, #10
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f00d fa36 	bl	8010ae8 <strtol>
 800367c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003680:	f107 0308 	add.w	r3, r7, #8
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f00d f946 	bl	8010918 <strtof>
 800368c:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80036a0:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 80037cc <nmea_GPGGA+0x32c>
 80036a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	ee17 0a90 	vmov	r0, s15
 80036b0:	f7fc ff4a 	bl	8000548 <__aeabi_f2d>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80036c8:	f7fd f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d176      	bne.n	80037c0 <nmea_GPGGA+0x320>
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80036de:	f7fd f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d16b      	bne.n	80037c0 <nmea_GPGGA+0x320>
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <nmea_GPGGA+0x330>)
 80036ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80036f2:	f7fd f9f3 	bl	8000adc <__aeabi_dcmplt>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d061      	beq.n	80037c0 <nmea_GPGGA+0x320>
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <nmea_GPGGA+0x334>)
 8003702:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003706:	f7fd f9e9 	bl	8000adc <__aeabi_dcmplt>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d057      	beq.n	80037c0 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003716:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8003720:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003728:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8003732:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003736:	2100      	movs	r1, #0
 8003738:	4618      	mov	r0, r3
 800373a:	f00d f8ed 	bl	8010918 <strtof>
 800373e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003742:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d102      	bne.n	8003756 <nmea_GPGGA+0x2b6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	e001      	b.n	800375a <nmea_GPGGA+0x2ba>
 8003756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	220a      	movs	r2, #10
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f00d f9bf 	bl	8010ae8 <strtol>
 800376a:	4602      	mov	r2, r0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	220a      	movs	r2, #10
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f00d f9b6 	bl	8010ae8 <strtol>
 800377c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003784:	2b00      	cmp	r3, #0
 8003786:	bfcc      	ite	gt
 8003788:	2301      	movgt	r3, #1
 800378a:	2300      	movle	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8003794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f00d f8bd 	bl	8010918 <strtof>
 800379e:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80037a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80037a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d102      	bne.n	80037b6 <nmea_GPGGA+0x316>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	e001      	b.n	80037ba <nmea_GPGGA+0x31a>
 80037b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80037be:	e022      	b.n	8003806 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80037c6:	e016      	b.n	80037f6 <nmea_GPGGA+0x356>
 80037c8:	08015438 	.word	0x08015438
 80037cc:	42700000 	.word	0x42700000
 80037d0:	40568000 	.word	0x40568000
 80037d4:	40668000 	.word	0x40668000
 80037d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	33d8      	adds	r3, #216	; 0xd8
 80037e0:	443b      	add	r3, r7
 80037e2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f00c f9d4 	bl	800fb94 <free>
 80037ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037f0:	3301      	adds	r3, #1
 80037f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80037f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037fe:	429a      	cmp	r2, r3
 8003800:	dbea      	blt.n	80037d8 <nmea_GPGGA+0x338>
            return 0;
 8003802:	2300      	movs	r3, #0
 8003804:	e019      	b.n	800383a <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800380c:	e00e      	b.n	800382c <nmea_GPGGA+0x38c>
 800380e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	33d8      	adds	r3, #216	; 0xd8
 8003816:	443b      	add	r3, r7
 8003818:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800381c:	4618      	mov	r0, r3
 800381e:	f00c f9b9 	bl	800fb94 <free>
 8003822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003826:	3301      	adds	r3, #1
 8003828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800382c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003834:	429a      	cmp	r2, r3
 8003836:	dbea      	blt.n	800380e <nmea_GPGGA+0x36e>
    return 1;
 8003838:	2301      	movs	r3, #1
}
 800383a:	4618      	mov	r0, r3
 800383c:	37dc      	adds	r7, #220	; 0xdc
 800383e:	46bd      	mov	sp, r7
 8003840:	bd90      	pop	{r4, r7, pc}
 8003842:	bf00      	nop

08003844 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b0a3      	sub	sp, #140	; 0x8c
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	2264      	movs	r2, #100	; 0x64
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f00d ffdb 	bl	8011818 <memset>
    char *marker = strtok(inputString, ",");
 8003862:	493b      	ldr	r1, [pc, #236]	; (8003950 <nmea_GPGSA+0x10c>)
 8003864:	6838      	ldr	r0, [r7, #0]
 8003866:	f00d fff1 	bl	801184c <strtok>
 800386a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 800386e:	e027      	b.n	80038c0 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003870:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8003874:	f7fc fcfc 	bl	8000270 <strlen>
 8003878:	4603      	mov	r3, r0
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8003880:	1c63      	adds	r3, r4, #1
 8003882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003886:	4610      	mov	r0, r2
 8003888:	f00c f97c 	bl	800fb84 <malloc>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	00a3      	lsls	r3, r4, #2
 8003892:	3388      	adds	r3, #136	; 0x88
 8003894:	443b      	add	r3, r7
 8003896:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 800389a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389e:	3b01      	subs	r3, #1
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	3388      	adds	r3, #136	; 0x88
 80038a4:	443b      	add	r3, r7
 80038a6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80038aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80038ae:	4618      	mov	r0, r3
 80038b0:	f00e f8c5 	bl	8011a3e <strcpy>
        marker = strtok(NULL, ",");
 80038b4:	4926      	ldr	r1, [pc, #152]	; (8003950 <nmea_GPGSA+0x10c>)
 80038b6:	2000      	movs	r0, #0
 80038b8:	f00d ffc8 	bl	801184c <strtok>
 80038bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80038c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1d3      	bne.n	8003870 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	220a      	movs	r2, #10
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f00d f90a 	bl	8010ae8 <strtol>
 80038d4:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80038d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d8:	2b01      	cmp	r3, #1
 80038da:	bfcc      	ite	gt
 80038dc:	2301      	movgt	r3, #1
 80038de:	2300      	movle	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 80038ec:	2303      	movs	r3, #3
 80038ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80038f0:	e00e      	b.n	8003910 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80038f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	3388      	adds	r3, #136	; 0x88
 80038f8:	443b      	add	r3, r7
 80038fa:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003906:	3301      	adds	r3, #1
 8003908:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800390a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800390c:	3301      	adds	r3, #1
 800390e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003912:	2b0e      	cmp	r3, #14
 8003914:	dded      	ble.n	80038f2 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 800391c:	2300      	movs	r3, #0
 800391e:	677b      	str	r3, [r7, #116]	; 0x74
 8003920:	e00b      	b.n	800393a <nmea_GPGSA+0xf6>
 8003922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	3388      	adds	r3, #136	; 0x88
 8003928:	443b      	add	r3, r7
 800392a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800392e:	4618      	mov	r0, r3
 8003930:	f00c f930 	bl	800fb94 <free>
 8003934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003936:	3301      	adds	r3, #1
 8003938:	677b      	str	r3, [r7, #116]	; 0x74
 800393a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800393c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003940:	429a      	cmp	r2, r3
 8003942:	dbee      	blt.n	8003922 <nmea_GPGSA+0xde>
    return 1;
 8003944:	2301      	movs	r3, #1
}
 8003946:	4618      	mov	r0, r3
 8003948:	378c      	adds	r7, #140	; 0x8c
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	bf00      	nop
 8003950:	08015438 	.word	0x08015438

08003954 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b0b7      	sub	sp, #220	; 0xdc
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8003964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003968:	2264      	movs	r2, #100	; 0x64
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f00d ff53 	bl	8011818 <memset>
    char *marker = strtok(inputString, ",");
 8003972:	49ad      	ldr	r1, [pc, #692]	; (8003c28 <nmea_GPGLL+0x2d4>)
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f00d ff69 	bl	801184c <strtok>
 800397a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 800397e:	e027      	b.n	80039d0 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003980:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003984:	f7fc fc74 	bl	8000270 <strlen>
 8003988:	4603      	mov	r3, r0
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8003990:	1c63      	adds	r3, r4, #1
 8003992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003996:	4610      	mov	r0, r2
 8003998:	f00c f8f4 	bl	800fb84 <malloc>
 800399c:	4603      	mov	r3, r0
 800399e:	461a      	mov	r2, r3
 80039a0:	00a3      	lsls	r3, r4, #2
 80039a2:	33d8      	adds	r3, #216	; 0xd8
 80039a4:	443b      	add	r3, r7
 80039a6:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 80039aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ae:	3b01      	subs	r3, #1
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	33d8      	adds	r3, #216	; 0xd8
 80039b4:	443b      	add	r3, r7
 80039b6:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80039ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80039be:	4618      	mov	r0, r3
 80039c0:	f00e f83d 	bl	8011a3e <strcpy>
        marker = strtok(NULL, ",");
 80039c4:	4998      	ldr	r1, [pc, #608]	; (8003c28 <nmea_GPGLL+0x2d4>)
 80039c6:	2000      	movs	r0, #0
 80039c8:	f00d ff40 	bl	801184c <strtok>
 80039cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80039d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1d3      	bne.n	8003980 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 80039e0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80039e4:	2b53      	cmp	r3, #83	; 0x53
 80039e6:	d004      	beq.n	80039f2 <nmea_GPGLL+0x9e>
 80039e8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80039ec:	2b4e      	cmp	r3, #78	; 0x4e
 80039ee:	f040 8116 	bne.w	8003c1e <nmea_GPGLL+0x2ca>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 80039f2:	2300      	movs	r3, #0
 80039f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039f8:	e010      	b.n	8003a1c <nmea_GPGLL+0xc8>
 80039fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a00:	4413      	add	r3, r2
 8003a02:	7819      	ldrb	r1, [r3, #0]
 8003a04:	f107 0220 	add.w	r2, r7, #32
 8003a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a0c:	4413      	add	r3, r2
 8003a0e:	460a      	mov	r2, r1
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a16:	3301      	adds	r3, #1
 8003a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	ddea      	ble.n	80039fa <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a2a:	e011      	b.n	8003a50 <nmea_GPGLL+0xfc>
 8003a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a32:	3302      	adds	r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	7819      	ldrb	r1, [r3, #0]
 8003a38:	f107 0218 	add.w	r2, r7, #24
 8003a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a40:	4413      	add	r3, r2
 8003a42:	460a      	mov	r2, r1
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	dde9      	ble.n	8003a2c <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003a58:	f107 0320 	add.w	r3, r7, #32
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00d f841 	bl	8010ae8 <strtol>
 8003a66:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003a6a:	f107 0318 	add.w	r3, r7, #24
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f00c ff51 	bl	8010918 <strtof>
 8003a76:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a86:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8003a8a:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8003c2c <nmea_GPGLL+0x2d8>
 8003a8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a96:	ee17 0a90 	vmov	r0, s15
 8003a9a:	f7fc fd55 	bl	8000548 <__aeabi_f2d>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ab4:	e010      	b.n	8003ad8 <nmea_GPGLL+0x184>
 8003ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003abc:	4413      	add	r3, r2
 8003abe:	7819      	ldrb	r1, [r3, #0]
 8003ac0:	f107 0214 	add.w	r2, r7, #20
 8003ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac8:	4413      	add	r3, r2
 8003aca:	460a      	mov	r2, r1
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	ddea      	ble.n	8003ab6 <nmea_GPGLL+0x162>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ae6:	e011      	b.n	8003b0c <nmea_GPGLL+0x1b8>
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aee:	3303      	adds	r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	7819      	ldrb	r1, [r3, #0]
 8003af4:	f107 020c 	add.w	r2, r7, #12
 8003af8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003afc:	4413      	add	r3, r2
 8003afe:	460a      	mov	r2, r1
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b06:	3301      	adds	r3, #1
 8003b08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	dde9      	ble.n	8003ae8 <nmea_GPGLL+0x194>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	220a      	movs	r2, #10
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f00c ffe3 	bl	8010ae8 <strtol>
 8003b22:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00c fef3 	bl	8010918 <strtof>
 8003b32:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b42:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8003b46:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8003c2c <nmea_GPGLL+0x2d8>
 8003b4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b52:	ee17 0a90 	vmov	r0, s15
 8003b56:	f7fc fcf7 	bl	8000548 <__aeabi_f2d>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 8003b62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <nmea_GPGLL+0x23a>
 8003b6a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b76:	d00a      	beq.n	8003b8e <nmea_GPGLL+0x23a>
 8003b78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d006      	beq.n	8003b8e <nmea_GPGLL+0x23a>
 8003b80:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003b84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8c:	d11a      	bne.n	8003bc4 <nmea_GPGLL+0x270>
            for(int i = 0; i<counter; i++) free(values[i]);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b94:	e00e      	b.n	8003bb4 <nmea_GPGLL+0x260>
 8003b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	33d8      	adds	r3, #216	; 0xd8
 8003b9e:	443b      	add	r3, r7
 8003ba0:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f00b fff5 	bl	800fb94 <free>
 8003baa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	dbea      	blt.n	8003b96 <nmea_GPGLL+0x242>
            return 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e02d      	b.n	8003c20 <nmea_GPGLL+0x2cc>
        }
        else{
            gps_data->latitude = lat_deg;
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8003bca:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003bd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8003bde:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003be6:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003bee:	e00e      	b.n	8003c0e <nmea_GPGLL+0x2ba>
 8003bf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	33d8      	adds	r3, #216	; 0xd8
 8003bf8:	443b      	add	r3, r7
 8003bfa:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00b ffc8 	bl	800fb94 <free>
 8003c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c16:	429a      	cmp	r2, r3
 8003c18:	dbea      	blt.n	8003bf0 <nmea_GPGLL+0x29c>
            return 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <nmea_GPGLL+0x2cc>
        }
    }
    else return 0;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	37dc      	adds	r7, #220	; 0xdc
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}
 8003c28:	08015438 	.word	0x08015438
 8003c2c:	42700000 	.word	0x42700000

08003c30 <nmea_parse>:

void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003c3a:	223c      	movs	r2, #60	; 0x3c
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4850      	ldr	r0, [pc, #320]	; (8003d80 <nmea_parse+0x150>)
 8003c40:	f00d fdea 	bl	8011818 <memset>
    char * token = strtok(buffer, "$");
 8003c44:	494f      	ldr	r1, [pc, #316]	; (8003d84 <nmea_parse+0x154>)
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f00d fe00 	bl	801184c <strtok>
 8003c4c:	61f8      	str	r0, [r7, #28]
    int cnt = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
    while(token !=NULL){
 8003c52:	e01d      	b.n	8003c90 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003c54:	69f8      	ldr	r0, [r7, #28]
 8003c56:	f7fc fb0b 	bl	8000270 <strlen>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	69bc      	ldr	r4, [r7, #24]
 8003c60:	1c63      	adds	r3, r4, #1
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	4610      	mov	r0, r2
 8003c66:	f00b ff8d 	bl	800fb84 <malloc>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b44      	ldr	r3, [pc, #272]	; (8003d80 <nmea_parse+0x150>)
 8003c70:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	4a41      	ldr	r2, [pc, #260]	; (8003d80 <nmea_parse+0x150>)
 8003c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f00d fedc 	bl	8011a3e <strcpy>
        token = strtok(NULL, "$");
 8003c86:	493f      	ldr	r1, [pc, #252]	; (8003d84 <nmea_parse+0x154>)
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f00d fddf 	bl	801184c <strtok>
 8003c8e:	61f8      	str	r0, [r7, #28]
    while(token !=NULL){
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1de      	bne.n	8003c54 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	e052      	b.n	8003d42 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8003c9c:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <nmea_parse+0x150>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	4938      	ldr	r1, [pc, #224]	; (8003d88 <nmea_parse+0x158>)
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f00d fe2c 	bl	8011904 <strstr>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <nmea_parse+0x10c>
 8003cb2:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <nmea_parse+0x150>)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fba7 	bl	800340e <gps_checksum>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03a      	beq.n	8003d3c <nmea_parse+0x10c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8003cc6:	4a2e      	ldr	r2, [pc, #184]	; (8003d80 <nmea_parse+0x150>)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	492f      	ldr	r1, [pc, #188]	; (8003d8c <nmea_parse+0x15c>)
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00d fe17 	bl	8011904 <strstr>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <nmea_parse+0xbe>
               nmea_GPGLL(gps_data, data[i]);
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <nmea_parse+0x150>)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe34 	bl	8003954 <nmea_GPGLL>
 8003cec:	e026      	b.n	8003d3c <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <nmea_parse+0x150>)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	4926      	ldr	r1, [pc, #152]	; (8003d90 <nmea_parse+0x160>)
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f00d fe03 	bl	8011904 <strstr>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <nmea_parse+0x150>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fd98 	bl	8003844 <nmea_GPGSA>
 8003d14:	e012      	b.n	8003d3c <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GPGGA")!=NULL){
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <nmea_parse+0x150>)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	491d      	ldr	r1, [pc, #116]	; (8003d94 <nmea_parse+0x164>)
 8003d20:	4618      	mov	r0, r3
 8003d22:	f00d fdef 	bl	8011904 <strstr>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <nmea_parse+0x150>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fbb2 	bl	80034a0 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	dba8      	blt.n	8003c9c <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) {
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e00e      	b.n	8003d6e <nmea_parse+0x13e>
    	int a = sizeof(data);
 8003d50:	233c      	movs	r3, #60	; 0x3c
 8003d52:	60fb      	str	r3, [r7, #12]
    	if(i < sizeof(data) - 1)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b3a      	cmp	r3, #58	; 0x3a
 8003d58:	d806      	bhi.n	8003d68 <nmea_parse+0x138>
    		free(data[i]);
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <nmea_parse+0x150>)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f00b ff16 	bl	800fb94 <free>
    for(int i = 0; i<cnt; i++) {
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	dbec      	blt.n	8003d50 <nmea_parse+0x120>
    }


}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	3724      	adds	r7, #36	; 0x24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}
 8003d80:	20001504 	.word	0x20001504
 8003d84:	0801543c 	.word	0x0801543c
 8003d88:	08015440 	.word	0x08015440
 8003d8c:	08015444 	.word	0x08015444
 8003d90:	0801544c 	.word	0x0801544c
 8003d94:	08015454 	.word	0x08015454

08003d98 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
 8003da2:	460b      	mov	r3, r1
 8003da4:	71bb      	strb	r3, [r7, #6]
 8003da6:	4613      	mov	r3, r2
 8003da8:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8003daa:	797b      	ldrb	r3, [r7, #5]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <PCA9685_SetBit+0x1c>
 8003db0:	2301      	movs	r3, #1
 8003db2:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <PCA9685_SetBit+0xb0>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	230a      	movs	r3, #10
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	f107 030f 	add.w	r3, r7, #15
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2301      	movs	r3, #1
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	f002 fee5 	bl	8006b9c <HAL_I2C_Mem_Read>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e031      	b.n	8003e40 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8003ddc:	79bb      	ldrb	r3, [r7, #6]
 8003dde:	2201      	movs	r2, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	b25b      	sxtb	r3, r3
 8003de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dea:	b25b      	sxtb	r3, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	b25a      	sxtb	r2, r3
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	b25b      	sxtb	r3, r3
 8003df4:	4013      	ands	r3, r2
 8003df6:	b25b      	sxtb	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8003dfc:	797b      	ldrb	r3, [r7, #5]
 8003dfe:	f003 0201 	and.w	r2, r3, #1
 8003e02:	79bb      	ldrb	r3, [r7, #6]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	b25a      	sxtb	r2, r3
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <PCA9685_SetBit+0xb0>)
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	230a      	movs	r3, #10
 8003e20:	9302      	str	r3, [sp, #8]
 8003e22:	2301      	movs	r3, #1
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	f107 030f 	add.w	r3, r7, #15
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	f002 fdba 	bl	80069a8 <HAL_I2C_Mem_Write>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20001540 	.word	0x20001540

08003e4c <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8003e52:	2306      	movs	r3, #6
 8003e54:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <PCA9685_SoftwareReset+0x30>)
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	1dfa      	adds	r2, r7, #7
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2301      	movs	r3, #1
 8003e62:	2100      	movs	r1, #0
 8003e64:	f002 fa70 	bl	8006348 <HAL_I2C_Master_Transmit>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e000      	b.n	8003e74 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8003e72:	2301      	movs	r3, #1
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20001540 	.word	0x20001540

08003e80 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2104      	movs	r1, #4
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7ff ff81 	bl	8003d98 <PCA9685_SetBit>
 8003e96:	4603      	mov	r3, r0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	461a      	mov	r2, r3
 8003eae:	2107      	movs	r1, #7
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7ff ff71 	bl	8003d98 <PCA9685_SetBit>
 8003eb6:	4603      	mov	r3, r0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2105      	movs	r1, #5
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7ff ff61 	bl	8003d98 <PCA9685_SetBit>
 8003ed6:	4603      	mov	r3, r0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af04      	add	r7, sp, #16
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d902      	bls.n	8003efa <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	72fb      	strb	r3, [r7, #11]
 8003ef8:	e046      	b.n	8003f88 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	2b18      	cmp	r3, #24
 8003efe:	d802      	bhi.n	8003f06 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8003f00:	23ff      	movs	r3, #255	; 0xff
 8003f02:	72fb      	strb	r3, [r7, #11]
 8003f04:	e040      	b.n	8003f88 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	ee07 3a90 	vmov	s15, r3
 8003f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f10:	ee17 0a90 	vmov	r0, s15
 8003f14:	f7fc fb18 	bl	8000548 <__aeabi_f2d>
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <PCA9685_SetPwmFrequency+0xe8>)
 8003f1e:	f7fc fb6b 	bl	80005f8 <__aeabi_dmul>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	a126      	add	r1, pc, #152	; (adr r1, 8003fc0 <PCA9685_SetPwmFrequency+0xe0>)
 8003f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f2c:	f7fc fc8e 	bl	800084c <__aeabi_ddiv>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <PCA9685_SetPwmFrequency+0xec>)
 8003f3e:	f7fc f9a3 	bl	8000288 <__aeabi_dsub>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fc fe4d 	bl	8000be8 <__aeabi_d2f>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7fc faf8 	bl	8000548 <__aeabi_f2d>
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <PCA9685_SetPwmFrequency+0xf0>)
 8003f5e:	f7fc f995 	bl	800028c <__adddf3>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	ec43 2b17 	vmov	d7, r2, r3
 8003f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f6e:	eef0 0a67 	vmov.f32	s1, s15
 8003f72:	f010 f9a1 	bl	80142b8 <floor>
 8003f76:	ec53 2b10 	vmov	r2, r3, d0
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fc fe13 	bl	8000ba8 <__aeabi_d2uiz>
 8003f82:	4603      	mov	r3, r0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f7ff ff79 	bl	8003e80 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <PCA9685_SetPwmFrequency+0xf4>)
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	230a      	movs	r3, #10
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	2301      	movs	r3, #1
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	f107 030b 	add.w	r3, r7, #11
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	22fe      	movs	r2, #254	; 0xfe
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	f002 fcff 	bl	80069a8 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7ff ff68 	bl	8003e80 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f7ff ff75 	bl	8003ea0 <PCA9685_RestartMode>
	return PCA9685_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	00000000 	.word	0x00000000
 8003fc4:	4177d784 	.word	0x4177d784
 8003fc8:	40b00000 	.word	0x40b00000
 8003fcc:	3ff00000 	.word	0x3ff00000
 8003fd0:	3fe00000 	.word	0x3fe00000
 8003fd4:	20001540 	.word	0x20001540

08003fd8 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af04      	add	r7, sp, #16
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	80bb      	strh	r3, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	3306      	adds	r3, #6
 8003ff2:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8003ff4:	88bb      	ldrh	r3, [r7, #4]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8003ffa:	88bb      	ldrh	r3, [r7, #4]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	b2db      	uxtb	r3, r3
 8004002:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	b29b      	uxth	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	72fb      	strb	r3, [r7, #11]

	/*if(pca9685_i2c->State != HAL_I2C_STATE_READY){
		HAL_I2C_DeInit(pca9685_i2c);
		HAL_I2C_Init(pca9685_i2c);
	}*/
	while(HAL_I2C_IsDeviceReady(pca9685_i2c, PCA9685_ADDRESS, 64, 50)!= HAL_OK);
 8004014:	bf00      	nop
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <PCA9685_SetPwm+0x88>)
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	2332      	movs	r3, #50	; 0x32
 800401c:	2240      	movs	r2, #64	; 0x40
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	f002 ffee 	bl	8007000 <HAL_I2C_IsDeviceReady>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f5      	bne.n	8004016 <PCA9685_SetPwm+0x3e>
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10);
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <PCA9685_SetPwm+0x88>)
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	b29a      	uxth	r2, r3
 8004032:	230a      	movs	r3, #10
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	2304      	movs	r3, #4
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	f107 0308 	add.w	r3, r7, #8
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2301      	movs	r3, #1
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	f002 fcb0 	bl	80069a8 <HAL_I2C_Mem_Write>
 8004048:	4603      	mov	r3, r0
 800404a:	73bb      	strb	r3, [r7, #14]
	if(status != HAL_OK)
 800404c:	7bbb      	ldrb	r3, [r7, #14]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <PCA9685_SetPwm+0x7e>
	{
		return PCA9685_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <PCA9685_SetPwm+0x80>
	}

	return PCA9685_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20001540 	.word	0x20001540

08004064 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
 800406e:	460b      	mov	r3, r1
 8004070:	80bb      	strh	r3, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8004076:	88bb      	ldrh	r3, [r7, #4]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d302      	bcc.n	8004084 <PCA9685_SetPin+0x20>
 800407e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004082:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8004084:	79bb      	ldrb	r3, [r7, #6]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d025      	beq.n	80040d6 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 800408a:	88bb      	ldrh	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	2200      	movs	r2, #0
 8004094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff9d 	bl	8003fd8 <PCA9685_SetPwm>
 800409e:	4603      	mov	r3, r0
 80040a0:	e03a      	b.n	8004118 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 80040a2:	88bb      	ldrh	r3, [r7, #4]
 80040a4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff8f 	bl	8003fd8 <PCA9685_SetPwm>
 80040ba:	4603      	mov	r3, r0
 80040bc:	e02c      	b.n	8004118 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 80040be:	88bb      	ldrh	r3, [r7, #4]
 80040c0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80040c4:	330f      	adds	r3, #15
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff ff83 	bl	8003fd8 <PCA9685_SetPwm>
 80040d2:	4603      	mov	r3, r0
 80040d4:	e020      	b.n	8004118 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 80040d6:	88bb      	ldrh	r3, [r7, #4]
 80040d8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff75 	bl	8003fd8 <PCA9685_SetPwm>
 80040ee:	4603      	mov	r3, r0
 80040f0:	e012      	b.n	8004118 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 80040f2:	88bb      	ldrh	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d108      	bne.n	800410a <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff69 	bl	8003fd8 <PCA9685_SetPwm>
 8004106:	4603      	mov	r3, r0
 8004108:	e006      	b.n	8004118 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 800410a:	88ba      	ldrh	r2, [r7, #4]
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff61 	bl	8003fd8 <PCA9685_SetPwm>
 8004116:	4603      	mov	r3, r0
    }
  }
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	ed87 0a00 	vstr	s0, [r7]
 800412c:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 800412e:	edd7 7a00 	vldr	s15, [r7]
 8004132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	d502      	bpl.n	8004142 <PCA9685_SetServoAngle+0x22>
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8004142:	edd7 7a00 	vldr	s15, [r7]
 8004146:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80041c8 <PCA9685_SetServoAngle+0xa8>
 800414a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004152:	dd01      	ble.n	8004158 <PCA9685_SetServoAngle+0x38>
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <PCA9685_SetServoAngle+0xac>)
 8004156:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	f7fc f9f5 	bl	8000548 <__aeabi_f2d>
 800415e:	a318      	add	r3, pc, #96	; (adr r3, 80041c0 <PCA9685_SetServoAngle+0xa0>)
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f7fc fa48 	bl	80005f8 <__aeabi_dmul>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <PCA9685_SetServoAngle+0xb0>)
 8004176:	f7fc fb69 	bl	800084c <__aeabi_ddiv>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <PCA9685_SetServoAngle+0xb4>)
 8004188:	f7fc f880 	bl	800028c <__adddf3>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	f7fc fd28 	bl	8000be8 <__aeabi_d2f>
 8004198:	4603      	mov	r3, r0
 800419a:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 800419c:	edd7 7a03 	vldr	s15, [r7, #12]
 80041a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a4:	ee17 3a90 	vmov	r3, s15
 80041a8:	b299      	uxth	r1, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2200      	movs	r2, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff58 	bl	8004064 <PCA9685_SetPin>
 80041b4:	4603      	mov	r3, r0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	00000000 	.word	0x00000000
 80041c4:	40786000 	.word	0x40786000
 80041c8:	43340000 	.word	0x43340000
 80041cc:	43340000 	.word	0x43340000
 80041d0:	40668000 	.word	0x40668000
 80041d4:	405b8000 	.word	0x405b8000

080041d8 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 80041e0:	4a07      	ldr	r2, [pc, #28]	; (8004200 <PCA9685_Init+0x28>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 80041e6:	f7ff fe31 	bl	8003e4c <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 80041ea:	2030      	movs	r0, #48	; 0x30
 80041ec:	f7ff fe78 	bl	8003ee0 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 80041f0:	2001      	movs	r0, #1
 80041f2:	f7ff fe65 	bl	8003ec0 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20001540 	.word	0x20001540

08004204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_MspInit+0x4c>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <HAL_MspInit+0x4c>)
 8004214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004218:	6453      	str	r3, [r2, #68]	; 0x44
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <HAL_MspInit+0x4c>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004222:	607b      	str	r3, [r7, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_MspInit+0x4c>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_MspInit+0x4c>)
 8004230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004234:	6413      	str	r3, [r2, #64]	; 0x40
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <HAL_MspInit+0x4c>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800

08004254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08a      	sub	sp, #40	; 0x28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425c:	f107 0314 	add.w	r3, r7, #20
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a19      	ldr	r2, [pc, #100]	; (80042d8 <HAL_I2C_MspInit+0x84>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d12c      	bne.n	80042d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <HAL_I2C_MspInit+0x88>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_I2C_MspInit+0x88>)
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_I2C_MspInit+0x88>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004292:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004298:	2312      	movs	r3, #18
 800429a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a0:	2303      	movs	r3, #3
 80042a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80042a4:	2304      	movs	r3, #4
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4619      	mov	r1, r3
 80042ae:	480c      	ldr	r0, [pc, #48]	; (80042e0 <HAL_I2C_MspInit+0x8c>)
 80042b0:	f001 fc0c 	bl	8005acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <HAL_I2C_MspInit+0x88>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <HAL_I2C_MspInit+0x88>)
 80042be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042c2:	6413      	str	r3, [r2, #64]	; 0x40
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_I2C_MspInit+0x88>)
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042d0:	bf00      	nop
 80042d2:	3728      	adds	r7, #40	; 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40005800 	.word	0x40005800
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40020400 	.word	0x40020400

080042e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <HAL_I2C_MspDeInit+0x3c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10f      	bne.n	8004316 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_I2C_MspDeInit+0x40>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a0a      	ldr	r2, [pc, #40]	; (8004324 <HAL_I2C_MspDeInit+0x40>)
 80042fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004306:	4808      	ldr	r0, [pc, #32]	; (8004328 <HAL_I2C_MspDeInit+0x44>)
 8004308:	f001 fd7c 	bl	8005e04 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800430c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004310:	4805      	ldr	r0, [pc, #20]	; (8004328 <HAL_I2C_MspDeInit+0x44>)
 8004312:	f001 fd77 	bl	8005e04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40005800 	.word	0x40005800
 8004324:	40023800 	.word	0x40023800
 8004328:	40020400 	.word	0x40020400

0800432c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004334:	f107 0314 	add.w	r3, r7, #20
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a70      	ldr	r2, [pc, #448]	; (800450c <HAL_SD_MspInit+0x1e0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	f040 80da 	bne.w	8004504 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
 8004354:	4b6e      	ldr	r3, [pc, #440]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	4a6d      	ldr	r2, [pc, #436]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 800435a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800435e:	6453      	str	r3, [r2, #68]	; 0x44
 8004360:	4b6b      	ldr	r3, [pc, #428]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	4b67      	ldr	r3, [pc, #412]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6313      	str	r3, [r2, #48]	; 0x30
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
 800438c:	4b60      	ldr	r3, [pc, #384]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	4a5f      	ldr	r2, [pc, #380]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 8004392:	f043 0308 	orr.w	r3, r3, #8
 8004396:	6313      	str	r3, [r2, #48]	; 0x30
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_SD_MspInit+0x1e4>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b2:	2303      	movs	r3, #3
 80043b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80043b6:	230c      	movs	r3, #12
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ba:	f107 0314 	add.w	r3, r7, #20
 80043be:	4619      	mov	r1, r3
 80043c0:	4854      	ldr	r0, [pc, #336]	; (8004514 <HAL_SD_MspInit+0x1e8>)
 80043c2:	f001 fb83 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043cc:	2302      	movs	r3, #2
 80043ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d4:	2303      	movs	r3, #3
 80043d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80043d8:	230c      	movs	r3, #12
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043dc:	f107 0314 	add.w	r3, r7, #20
 80043e0:	4619      	mov	r1, r3
 80043e2:	484c      	ldr	r0, [pc, #304]	; (8004514 <HAL_SD_MspInit+0x1e8>)
 80043e4:	f001 fb72 	bl	8005acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043e8:	2304      	movs	r3, #4
 80043ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043f0:	2301      	movs	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f4:	2303      	movs	r3, #3
 80043f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80043f8:	230c      	movs	r3, #12
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4619      	mov	r1, r3
 8004402:	4845      	ldr	r0, [pc, #276]	; (8004518 <HAL_SD_MspInit+0x1ec>)
 8004404:	f001 fb62 	bl	8005acc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004408:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800440a:	4a45      	ldr	r2, [pc, #276]	; (8004520 <HAL_SD_MspInit+0x1f4>)
 800440c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800440e:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004410:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004414:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004416:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004428:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800442a:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800442c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004430:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004432:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004434:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004438:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800443c:	2220      	movs	r2, #32
 800443e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004440:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004442:	2200      	movs	r2, #0
 8004444:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004446:	4b35      	ldr	r3, [pc, #212]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004448:	2204      	movs	r2, #4
 800444a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800444c:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800444e:	2203      	movs	r2, #3
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004454:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800445a:	4b30      	ldr	r3, [pc, #192]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800445c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004462:	482e      	ldr	r0, [pc, #184]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004464:	f000 ffa0 	bl	80053a8 <HAL_DMA_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800446e:	f7fe ffc9 	bl	8003404 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_SD_MspInit+0x1f0>)
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
 8004478:	4a28      	ldr	r2, [pc, #160]	; (800451c <HAL_SD_MspInit+0x1f0>)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <HAL_SD_MspInit+0x1fc>)
 8004482:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 8004486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800448a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800448c:	4b25      	ldr	r3, [pc, #148]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 800448e:	2240      	movs	r2, #64	; 0x40
 8004490:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 8004494:	2200      	movs	r2, #0
 8004496:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004498:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 800449a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800449e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044a6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ae:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80044b0:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044b2:	2220      	movs	r2, #32
 80044b4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044be:	2204      	movs	r2, #4
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80044c2:	4b18      	ldr	r3, [pc, #96]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044c4:	2203      	movs	r2, #3
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80044d8:	4812      	ldr	r0, [pc, #72]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044da:	f000 ff65 	bl	80053a8 <HAL_DMA_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80044e4:	f7fe ff8e 	bl	8003404 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0e      	ldr	r2, [pc, #56]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80044ee:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <HAL_SD_MspInit+0x1f8>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	2031      	movs	r0, #49	; 0x31
 80044fa:	f000 ff1e 	bl	800533a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80044fe:	2031      	movs	r0, #49	; 0x31
 8004500:	f000 ff37 	bl	8005372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004504:	bf00      	nop
 8004506:	3728      	adds	r7, #40	; 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40023800 	.word	0x40023800
 8004514:	40020800 	.word	0x40020800
 8004518:	40020c00 	.word	0x40020c00
 800451c:	20000f90 	.word	0x20000f90
 8004520:	40026458 	.word	0x40026458
 8004524:	20000ff0 	.word	0x20000ff0
 8004528:	400264a0 	.word	0x400264a0

0800452c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	; 0x30
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004534:	f107 031c 	add.w	r3, r7, #28
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_SPI_MspInit+0xe8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d12c      	bne.n	80045a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <HAL_SPI_MspInit+0xec>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4a30      	ldr	r2, [pc, #192]	; (8004618 <HAL_SPI_MspInit+0xec>)
 8004558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800455c:	6453      	str	r3, [r2, #68]	; 0x44
 800455e:	4b2e      	ldr	r3, [pc, #184]	; (8004618 <HAL_SPI_MspInit+0xec>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <HAL_SPI_MspInit+0xec>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	4a29      	ldr	r2, [pc, #164]	; (8004618 <HAL_SPI_MspInit+0xec>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6313      	str	r3, [r2, #48]	; 0x30
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_SPI_MspInit+0xec>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004586:	23e0      	movs	r3, #224	; 0xe0
 8004588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458a:	2302      	movs	r3, #2
 800458c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004592:	2303      	movs	r3, #3
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004596:	2305      	movs	r3, #5
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800459a:	f107 031c 	add.w	r3, r7, #28
 800459e:	4619      	mov	r1, r3
 80045a0:	481e      	ldr	r0, [pc, #120]	; (800461c <HAL_SPI_MspInit+0xf0>)
 80045a2:	f001 fa93 	bl	8005acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80045a6:	e030      	b.n	800460a <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <HAL_SPI_MspInit+0xf4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d12b      	bne.n	800460a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_SPI_MspInit+0xec>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_SPI_MspInit+0xec>)
 80045bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <HAL_SPI_MspInit+0xec>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_SPI_MspInit+0xec>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <HAL_SPI_MspInit+0xec>)
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_SPI_MspInit+0xec>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80045ea:	2338      	movs	r3, #56	; 0x38
 80045ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ee:	2302      	movs	r3, #2
 80045f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f6:	2303      	movs	r3, #3
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80045fa:	2306      	movs	r3, #6
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fe:	f107 031c 	add.w	r3, r7, #28
 8004602:	4619      	mov	r1, r3
 8004604:	4807      	ldr	r0, [pc, #28]	; (8004624 <HAL_SPI_MspInit+0xf8>)
 8004606:	f001 fa61 	bl	8005acc <HAL_GPIO_Init>
}
 800460a:	bf00      	nop
 800460c:	3730      	adds	r7, #48	; 0x30
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40013000 	.word	0x40013000
 8004618:	40023800 	.word	0x40023800
 800461c:	40020000 	.word	0x40020000
 8004620:	40003c00 	.word	0x40003c00
 8004624:	40020400 	.word	0x40020400

08004628 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <HAL_SPI_MspDeInit+0x50>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10a      	bne.n	8004650 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <HAL_SPI_MspDeInit+0x54>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	4a0f      	ldr	r2, [pc, #60]	; (800467c <HAL_SPI_MspDeInit+0x54>)
 8004640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004644:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8004646:	21e0      	movs	r1, #224	; 0xe0
 8004648:	480d      	ldr	r0, [pc, #52]	; (8004680 <HAL_SPI_MspDeInit+0x58>)
 800464a:	f001 fbdb 	bl	8005e04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800464e:	e00e      	b.n	800466e <HAL_SPI_MspDeInit+0x46>
  else if(hspi->Instance==SPI3)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <HAL_SPI_MspDeInit+0x5c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d109      	bne.n	800466e <HAL_SPI_MspDeInit+0x46>
    __HAL_RCC_SPI3_CLK_DISABLE();
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_SPI_MspDeInit+0x54>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <HAL_SPI_MspDeInit+0x54>)
 8004660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8004666:	2138      	movs	r1, #56	; 0x38
 8004668:	4807      	ldr	r0, [pc, #28]	; (8004688 <HAL_SPI_MspDeInit+0x60>)
 800466a:	f001 fbcb 	bl	8005e04 <HAL_GPIO_DeInit>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40013000 	.word	0x40013000
 800467c:	40023800 	.word	0x40023800
 8004680:	40020000 	.word	0x40020000
 8004684:	40003c00 	.word	0x40003c00
 8004688:	40020400 	.word	0x40020400

0800468c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	60da      	str	r2, [r3, #12]
 80046a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a47      	ldr	r2, [pc, #284]	; (80047c8 <HAL_UART_MspInit+0x13c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	f040 8088 	bne.w	80047c0 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046b0:	2300      	movs	r3, #0
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_UART_MspInit+0x140>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	4a44      	ldr	r2, [pc, #272]	; (80047cc <HAL_UART_MspInit+0x140>)
 80046ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046be:	6413      	str	r3, [r2, #64]	; 0x40
 80046c0:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_UART_MspInit+0x140>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <HAL_UART_MspInit+0x140>)
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	4a3d      	ldr	r2, [pc, #244]	; (80047cc <HAL_UART_MspInit+0x140>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6313      	str	r3, [r2, #48]	; 0x30
 80046dc:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_UART_MspInit+0x140>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046e8:	230c      	movs	r3, #12
 80046ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ec:	2302      	movs	r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f4:	2303      	movs	r3, #3
 80046f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046f8:	2307      	movs	r3, #7
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	4619      	mov	r1, r3
 8004702:	4833      	ldr	r0, [pc, #204]	; (80047d0 <HAL_UART_MspInit+0x144>)
 8004704:	f001 f9e2 	bl	8005acc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004708:	4b32      	ldr	r3, [pc, #200]	; (80047d4 <HAL_UART_MspInit+0x148>)
 800470a:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_UART_MspInit+0x14c>)
 800470c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004710:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004714:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004716:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004718:	2200      	movs	r2, #0
 800471a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_UART_MspInit+0x148>)
 800471e:	2200      	movs	r2, #0
 8004720:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004722:	4b2c      	ldr	r3, [pc, #176]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004728:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_UART_MspInit+0x148>)
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004730:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004732:	2200      	movs	r2, #0
 8004734:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004736:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004738:	2200      	movs	r2, #0
 800473a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_UART_MspInit+0x148>)
 800473e:	2200      	movs	r2, #0
 8004740:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004742:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004744:	2200      	movs	r2, #0
 8004746:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004748:	4822      	ldr	r0, [pc, #136]	; (80047d4 <HAL_UART_MspInit+0x148>)
 800474a:	f000 fe2d 	bl	80053a8 <HAL_DMA_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004754:	f7fe fe56 	bl	8003404 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_UART_MspInit+0x148>)
 800475c:	63da      	str	r2, [r3, #60]	; 0x3c
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_UART_MspInit+0x148>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004764:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_UART_MspInit+0x150>)
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <HAL_UART_MspInit+0x154>)
 8004768:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_UART_MspInit+0x150>)
 800476c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004770:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <HAL_UART_MspInit+0x150>)
 8004774:	2240      	movs	r2, #64	; 0x40
 8004776:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004778:	4b18      	ldr	r3, [pc, #96]	; (80047dc <HAL_UART_MspInit+0x150>)
 800477a:	2200      	movs	r2, #0
 800477c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800477e:	4b17      	ldr	r3, [pc, #92]	; (80047dc <HAL_UART_MspInit+0x150>)
 8004780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004784:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <HAL_UART_MspInit+0x150>)
 8004788:	2200      	movs	r2, #0
 800478a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <HAL_UART_MspInit+0x150>)
 800478e:	2200      	movs	r2, #0
 8004790:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_UART_MspInit+0x150>)
 8004794:	2200      	movs	r2, #0
 8004796:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004798:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_UART_MspInit+0x150>)
 800479a:	2200      	movs	r2, #0
 800479c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_UART_MspInit+0x150>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047a4:	480d      	ldr	r0, [pc, #52]	; (80047dc <HAL_UART_MspInit+0x150>)
 80047a6:	f000 fdff 	bl	80053a8 <HAL_DMA_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80047b0:	f7fe fe28 	bl	8003404 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <HAL_UART_MspInit+0x150>)
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
 80047ba:	4a08      	ldr	r2, [pc, #32]	; (80047dc <HAL_UART_MspInit+0x150>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047c0:	bf00      	nop
 80047c2:	3728      	adds	r7, #40	; 0x28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40004400 	.word	0x40004400
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40020000 	.word	0x40020000
 80047d4:	20001148 	.word	0x20001148
 80047d8:	40026088 	.word	0x40026088
 80047dc:	200011a8 	.word	0x200011a8
 80047e0:	400260a0 	.word	0x400260a0

080047e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047e8:	e7fe      	b.n	80047e8 <NMI_Handler+0x4>

080047ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ea:	b480      	push	{r7}
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ee:	e7fe      	b.n	80047ee <HardFault_Handler+0x4>

080047f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047f4:	e7fe      	b.n	80047f4 <MemManage_Handler+0x4>

080047f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047f6:	b480      	push	{r7}
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047fa:	e7fe      	b.n	80047fa <BusFault_Handler+0x4>

080047fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004800:	e7fe      	b.n	8004800 <UsageFault_Handler+0x4>

08004802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004830:	f000 fc64 	bl	80050fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004834:	bf00      	nop
 8004836:	bd80      	pop	{r7, pc}

08004838 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800483c:	4802      	ldr	r0, [pc, #8]	; (8004848 <DMA1_Stream5_IRQHandler+0x10>)
 800483e:	f000 fedb 	bl	80055f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20001148 	.word	0x20001148

0800484c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004850:	4802      	ldr	r0, [pc, #8]	; (800485c <DMA1_Stream6_IRQHandler+0x10>)
 8004852:	f000 fed1 	bl	80055f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	200011a8 	.word	0x200011a8

08004860 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004864:	4802      	ldr	r0, [pc, #8]	; (8004870 <SDIO_IRQHandler+0x10>)
 8004866:	f004 fad3 	bl	8008e10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000f0c 	.word	0x20000f0c

08004874 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004878:	4802      	ldr	r0, [pc, #8]	; (8004884 <DMA2_Stream3_IRQHandler+0x10>)
 800487a:	f000 febd 	bl	80055f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000f90 	.word	0x20000f90

08004888 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <DMA2_Stream6_IRQHandler+0x10>)
 800488e:	f000 feb3 	bl	80055f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000ff0 	.word	0x20000ff0

0800489c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return 1;
 80048a0:	2301      	movs	r3, #1
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_kill>:

int _kill(int pid, int sig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048b6:	f00d f895 	bl	80119e4 <__errno>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2216      	movs	r2, #22
 80048be:	601a      	str	r2, [r3, #0]
  return -1;
 80048c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_exit>:

void _exit (int status)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048d4:	f04f 31ff 	mov.w	r1, #4294967295
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ffe7 	bl	80048ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80048de:	e7fe      	b.n	80048de <_exit+0x12>

080048e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e00a      	b.n	8004908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048f2:	f3af 8000 	nop.w
 80048f6:	4601      	mov	r1, r0
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	60ba      	str	r2, [r7, #8]
 80048fe:	b2ca      	uxtb	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	dbf0      	blt.n	80048f2 <_read+0x12>
  }

  return len;
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e009      	b.n	8004940 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	60ba      	str	r2, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	dbf1      	blt.n	800492c <_write+0x12>
  }
  return len;
 8004948:	687b      	ldr	r3, [r7, #4]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_close>:

int _close(int file)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800497a:	605a      	str	r2, [r3, #4]
  return 0;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <_isatty>:

int _isatty(int file)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004992:	2301      	movs	r3, #1
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <_sbrk+0x5c>)
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <_sbrk+0x60>)
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <_sbrk+0x64>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <_sbrk+0x64>)
 80049da:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <_sbrk+0x68>)
 80049dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <_sbrk+0x64>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d207      	bcs.n	80049fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049ec:	f00c fffa 	bl	80119e4 <__errno>
 80049f0:	4603      	mov	r3, r0
 80049f2:	220c      	movs	r2, #12
 80049f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	e009      	b.n	8004a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <_sbrk+0x64>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <_sbrk+0x64>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <_sbrk+0x64>)
 8004a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20020000 	.word	0x20020000
 8004a1c:	00000800 	.word	0x00000800
 8004a20:	20001544 	.word	0x20001544
 8004a24:	20003740 	.word	0x20003740

08004a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <SystemInit+0x20>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	4a05      	ldr	r2, [pc, #20]	; (8004a48 <SystemInit+0x20>)
 8004a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <cs_on>:
 * @brief  Enables CS (driving it low) of the W25Qxx
 *
 * @param  W25Qxx handle
 * @retval None
 */
static inline void cs_on(W25QXX_HandleTypeDef *w25qxx) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(w25qxx->cs_port, w25qxx->cs_pin, GPIO_PIN_RESET);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6858      	ldr	r0, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	891b      	ldrh	r3, [r3, #8]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f001 fae4 	bl	800602c <HAL_GPIO_WritePin>
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <cs_off>:
 * @brief  Disables CS (driving it high) of the W25Qxx
 *
 * @param  W25Qxx handle
 * @retval None
 */
static inline void cs_off(W25QXX_HandleTypeDef *w25qxx) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(w25qxx->cs_port, w25qxx->cs_pin, GPIO_PIN_SET);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6858      	ldr	r0, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	891b      	ldrh	r3, [r3, #8]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f001 fad4 	bl	800602c <HAL_GPIO_WritePin>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <w25qxx_transmit>:
 * @param  W25Qxx handle
 * @param  Pointer to buffer with data to transmit
 * @param  Length (in bytes) of data to be transmitted
 * @retval None
 */
W25QXX_result_t w25qxx_transmit(W25QXX_HandleTypeDef *w25qxx, uint8_t *buf, uint32_t len) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
    W25QXX_result_t ret = W25QXX_Err;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75fb      	strb	r3, [r7, #23]
    if (HAL_SPI_Transmit(w25qxx->spiHandle, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	f005 f87a 	bl	8009ba2 <HAL_SPI_Transmit>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <w25qxx_transmit+0x2c>
        ret = W25QXX_Ok;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <w25qxx_receive>:

/*
 * Receive data from w25qxx
 */
W25QXX_result_t w25qxx_receive(W25QXX_HandleTypeDef *w25qxx, uint8_t *buf, uint32_t len) {
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	607a      	str	r2, [r7, #4]
    W25QXX_result_t ret = W25QXX_Err;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    if (HAL_SPI_Receive(w25qxx->spiHandle, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	f04f 33ff 	mov.w	r3, #4294967295
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	f005 f9a2 	bl	8009e28 <HAL_SPI_Receive>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <w25qxx_receive+0x2c>
        ret = W25QXX_Ok;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <w25qxx_read_id>:

uint32_t w25qxx_read_id(W25QXX_HandleTypeDef *w25qxx) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
    uint32_t ret = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
    uint8_t buf[3];
    cs_on(w25qxx);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ffa1 	bl	8004a4c <cs_on>
    buf[0] = W25QXX_GET_ID;
 8004b0a:	239f      	movs	r3, #159	; 0x9f
 8004b0c:	723b      	strb	r3, [r7, #8]
    if (w25qxx_transmit(w25qxx, buf, 1) == W25QXX_Ok) {
 8004b0e:	f107 0308 	add.w	r3, r7, #8
 8004b12:	2201      	movs	r2, #1
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ffb8 	bl	8004a8c <w25qxx_transmit>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d111      	bne.n	8004b46 <w25qxx_read_id+0x4e>
        if (w25qxx_receive(w25qxx, buf, 3) == W25QXX_Ok) {
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	2203      	movs	r2, #3
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff ffc9 	bl	8004ac2 <w25qxx_receive>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d107      	bne.n	8004b46 <w25qxx_read_id+0x4e>
            ret = (uint32_t) ((buf[0] << 16) | (buf[1] << 8) | (buf[2]));
 8004b36:	7a3b      	ldrb	r3, [r7, #8]
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	7a7b      	ldrb	r3, [r7, #9]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	7aba      	ldrb	r2, [r7, #10]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
        }
    }
    cs_off(w25qxx);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff90 	bl	8004a6c <cs_off>
    return ret;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <w25qxx_get_status>:

uint8_t w25qxx_get_status(W25QXX_HandleTypeDef *w25qxx) {
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
    uint8_t ret = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
    uint8_t buf = W25QXX_READ_REGISTER_1;
 8004b62:	2305      	movs	r3, #5
 8004b64:	73bb      	strb	r3, [r7, #14]
    cs_on(w25qxx);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ff70 	bl	8004a4c <cs_on>
    if (w25qxx_transmit(w25qxx, &buf, 1) == W25QXX_Ok) {
 8004b6c:	f107 030e 	add.w	r3, r7, #14
 8004b70:	2201      	movs	r2, #1
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ff89 	bl	8004a8c <w25qxx_transmit>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <w25qxx_get_status+0x42>
        if (w25qxx_receive(w25qxx, &buf, 1) == W25QXX_Ok) {
 8004b80:	f107 030e 	add.w	r3, r7, #14
 8004b84:	2201      	movs	r2, #1
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff ff9a 	bl	8004ac2 <w25qxx_receive>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <w25qxx_get_status+0x42>
            ret = buf;
 8004b94:	7bbb      	ldrb	r3, [r7, #14]
 8004b96:	73fb      	strb	r3, [r7, #15]
        }
    }
    cs_off(w25qxx);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff67 	bl	8004a6c <cs_off>
    return ret;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <w25qxx_write_enable>:

W25QXX_result_t w25qxx_write_enable(W25QXX_HandleTypeDef *w25qxx) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    W25_DBG("w25qxx_write_enable");
    W25QXX_result_t ret = W25QXX_Err;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
    uint8_t buf[1];
    cs_on(w25qxx);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff49 	bl	8004a4c <cs_on>
    buf[0] = W25QXX_WRITE_ENABLE;
 8004bba:	2306      	movs	r3, #6
 8004bbc:	733b      	strb	r3, [r7, #12]
    if (w25qxx_transmit(w25qxx, buf, 1) == W25QXX_Ok) {
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7ff ff60 	bl	8004a8c <w25qxx_transmit>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <w25qxx_write_enable+0x2e>
        ret = W25QXX_Ok;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
    }
    cs_off(w25qxx);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff48 	bl	8004a6c <cs_off>
    return ret;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <w25qxx_wait_for_ready>:

W25QXX_result_t w25qxx_wait_for_ready(W25QXX_HandleTypeDef *w25qxx, uint32_t timeout) {
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
    W25QXX_result_t ret = W25QXX_Ok;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	75fb      	strb	r3, [r7, #23]
    uint32_t begin = HAL_GetTick();
 8004bf4:	f000 fa96 	bl	8005124 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]
    uint32_t now = HAL_GetTick();
 8004bfa:	f000 fa93 	bl	8005124 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]
    while ((now - begin <= timeout) && (w25qxx_get_status(w25qxx) && 0x01 == 0x01)) {
 8004c00:	e002      	b.n	8004c08 <w25qxx_wait_for_ready+0x22>
        now = HAL_GetTick();
 8004c02:	f000 fa8f 	bl	8005124 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]
    while ((now - begin <= timeout) && (w25qxx_get_status(w25qxx) && 0x01 == 0x01)) {
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d305      	bcc.n	8004c20 <w25qxx_wait_for_ready+0x3a>
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff9e 	bl	8004b56 <w25qxx_get_status>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <w25qxx_wait_for_ready+0x1c>
    }
    if (now - begin == timeout)
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d101      	bne.n	8004c30 <w25qxx_wait_for_ready+0x4a>
        ret = W25QXX_Timeout;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	75fb      	strb	r3, [r7, #23]
    return ret;
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <w25qxx_init>:
#ifdef W25QXX_QSPI
W25QXX_result_t w25qxx_init(W25QXX_HandleTypeDef *w25qxx, QSPI_HandleTypeDef *qhspi) {

}
#else
W25QXX_result_t w25qxx_init(W25QXX_HandleTypeDef *w25qxx, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin) {
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	807b      	strh	r3, [r7, #2]

    W25QXX_result_t result = W25QXX_Ok;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]

    W25_DBG("w25qxx_init");

    w25qxx->spiHandle = hspi;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	601a      	str	r2, [r3, #0]
    w25qxx->cs_port = cs_port;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	605a      	str	r2, [r3, #4]
    w25qxx->cs_pin = cs_pin;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	887a      	ldrh	r2, [r7, #2]
 8004c5c:	811a      	strh	r2, [r3, #8]

    cs_off(w25qxx);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff ff04 	bl	8004a6c <cs_off>

    uint32_t id = w25qxx_read_id(w25qxx);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff ff47 	bl	8004af8 <w25qxx_read_id>
 8004c6a:	6138      	str	r0, [r7, #16]
    if (id) {
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d055      	beq.n	8004d1e <w25qxx_init+0xe4>
        w25qxx->manufacturer_id = (uint8_t) (id >> 16);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	729a      	strb	r2, [r3, #10]
        w25qxx->device_id = (uint16_t) (id & 0xFFFF);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	819a      	strh	r2, [r3, #12]

        switch (w25qxx->manufacturer_id) {
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	7a9b      	ldrb	r3, [r3, #10]
 8004c88:	2bc8      	cmp	r3, #200	; 0xc8
 8004c8a:	d002      	beq.n	8004c92 <w25qxx_init+0x58>
 8004c8c:	2bef      	cmp	r3, #239	; 0xef
 8004c8e:	d021      	beq.n	8004cd4 <w25qxx_init+0x9a>
 8004c90:	e042      	b.n	8004d18 <w25qxx_init+0xde>
        case W25QXX_MANUFACTURER_GIGADEVICE:

            w25qxx->block_size = 0x10000;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c98:	611a      	str	r2, [r3, #16]
            w25qxx->sector_size = 0x1000;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ca0:	619a      	str	r2, [r3, #24]
            w25qxx->sectors_in_block = 0x10;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	61da      	str	r2, [r3, #28]
            w25qxx->page_size = 0x100;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cae:	621a      	str	r2, [r3, #32]
            w25qxx->pages_in_sector = 0x10;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

            switch (w25qxx->device_id) {
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	899b      	ldrh	r3, [r3, #12]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f246 0317 	movw	r3, #24599	; 0x6017
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d104      	bne.n	8004cce <w25qxx_init+0x94>
            case 0x6017:
                w25qxx->block_count = 0x80;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	615a      	str	r2, [r3, #20]
                break;
 8004cca:	bf00      	nop
            default:
                W25_DBG("Unknown Giga Device device");
                result = W25QXX_Err;
            }

            break;
 8004ccc:	e029      	b.n	8004d22 <w25qxx_init+0xe8>
                result = W25QXX_Err;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
            break;
 8004cd2:	e026      	b.n	8004d22 <w25qxx_init+0xe8>
        case W25QXX_MANUFACTURER_WINBOND:

            w25qxx->block_size = 0x10000;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cda:	611a      	str	r2, [r3, #16]
            w25qxx->sector_size = 0x1000;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ce2:	619a      	str	r2, [r3, #24]
            w25qxx->sectors_in_block = 0x10;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	61da      	str	r2, [r3, #28]
            w25qxx->page_size = 0x100;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cf0:	621a      	str	r2, [r3, #32]
            w25qxx->pages_in_sector = 0x10;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24

            switch (w25qxx->device_id) {
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	899b      	ldrh	r3, [r3, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f244 0317 	movw	r3, #16407	; 0x4017
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d105      	bne.n	8004d12 <w25qxx_init+0xd8>
            case 0x4017:
                w25qxx->block_count = 0x100;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0c:	615a      	str	r2, [r3, #20]
                break;
 8004d0e:	bf00      	nop
            default:
                W25_DBG("Unknown Winbond device");
                result = W25QXX_Err;
            }

            break;
 8004d10:	e007      	b.n	8004d22 <w25qxx_init+0xe8>
                result = W25QXX_Err;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
            break;
 8004d16:	e004      	b.n	8004d22 <w25qxx_init+0xe8>
        default:
            W25_DBG("Unknown manufacturer");
            result = W25QXX_Err;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
 8004d1c:	e001      	b.n	8004d22 <w25qxx_init+0xe8>
        }
    } else {
        result = W25QXX_Err;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
    }

    if (result == W25QXX_Err) {
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d104      	bne.n	8004d32 <w25qxx_init+0xf8>
        // Zero the handle so it is clear initialization failed!
        memset(w25qxx, 0, sizeof(W25QXX_HandleTypeDef));
 8004d28:	2228      	movs	r2, #40	; 0x28
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f00c fd73 	bl	8011818 <memset>
    }

    return result;
 8004d32:	7dfb      	ldrb	r3, [r7, #23]

}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <w25qxx_read>:
#endif

W25QXX_result_t w25qxx_read(W25QXX_HandleTypeDef *w25qxx, uint32_t address, uint8_t *buf, uint32_t len) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]

    W25_DBG("w25qxx_read - address: 0x%08lx, lengh: 0x%04lx", address, len);

    // Transmit buffer holding command and address
    uint8_t tx[4] = {
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	753b      	strb	r3, [r7, #20]
    W25QXX_READ_DATA, (uint8_t) (address >> 16), (uint8_t) (address >> 8), (uint8_t) (address), };
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	b2db      	uxtb	r3, r3
    uint8_t tx[4] = {
 8004d54:	757b      	strb	r3, [r7, #21]
    W25QXX_READ_DATA, (uint8_t) (address >> 16), (uint8_t) (address >> 8), (uint8_t) (address), };
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	b2db      	uxtb	r3, r3
    uint8_t tx[4] = {
 8004d5c:	75bb      	strb	r3, [r7, #22]
    W25QXX_READ_DATA, (uint8_t) (address >> 16), (uint8_t) (address >> 8), (uint8_t) (address), };
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	b2db      	uxtb	r3, r3
    uint8_t tx[4] = {
 8004d62:	75fb      	strb	r3, [r7, #23]

    // First wait for device to get ready
    if (w25qxx_wait_for_ready(w25qxx, HAL_MAX_DELAY) != W25QXX_Ok) {
 8004d64:	f04f 31ff 	mov.w	r1, #4294967295
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff ff3c 	bl	8004be6 <w25qxx_wait_for_ready>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <w25qxx_read+0x3c>
        return W25QXX_Err;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e01d      	b.n	8004db4 <w25qxx_read+0x78>
    }

    cs_on(w25qxx);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fe67 	bl	8004a4c <cs_on>
    if (w25qxx_transmit(w25qxx, tx, 4) == W25QXX_Ok) { // size will always be fixed
 8004d7e:	f107 0314 	add.w	r3, r7, #20
 8004d82:	2204      	movs	r2, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fe80 	bl	8004a8c <w25qxx_transmit>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <w25qxx_read+0x70>
        if (w25qxx_receive(w25qxx, buf, len) != W25QXX_Ok) {
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fe93 	bl	8004ac2 <w25qxx_receive>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <w25qxx_read+0x70>
            cs_off(w25qxx);
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f7ff fe62 	bl	8004a6c <cs_off>
            return W25QXX_Err;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e003      	b.n	8004db4 <w25qxx_read+0x78>
        }
    }
    cs_off(w25qxx);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fe5d 	bl	8004a6c <cs_off>

    return W25QXX_Ok;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <w25qxx_write>:

W25QXX_result_t w25qxx_write(W25QXX_HandleTypeDef *w25qxx, uint32_t address, uint8_t *buf, uint32_t len) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]

    W25_DBG("w25qxx_write - address 0x%08lx len 0x%04lx", address, len);

    // Let's determine the pages
    uint32_t first_page = address / w25qxx->page_size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	61fb      	str	r3, [r7, #28]
    uint32_t last_page = (address + len - 1) / w25qxx->page_size;
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4413      	add	r3, r2
 8004ddc:	1e5a      	subs	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	61bb      	str	r3, [r7, #24]

    W25_DBG("w25qxx_write %lu pages from %lu to %lu", 1 + last_page - first_page, first_page, last_page);

    uint32_t buffer_offset = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t start_address = address;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28

    for (uint32_t page = first_page; page <= last_page; ++page) {
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	e070      	b.n	8004ed8 <w25qxx_write+0x11c>

        uint32_t write_len = w25qxx->page_size - (start_address & (w25qxx->page_size - 1));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	1e59      	subs	r1, r3, #1
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	400b      	ands	r3, r1
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
        write_len = len > write_len ? write_len : len;
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bf28      	it	cs
 8004e10:	4613      	movcs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

        W25_DBG("w25qxx_write: handling page %lu start_address = 0x%08lx buffer_offset = 0x%08lx len = %04lx", page, start_address, buffer_offset, write_len);

        // First wait for device to get ready
        if (w25qxx_wait_for_ready(w25qxx, HAL_MAX_DELAY) != W25QXX_Ok) {
 8004e14:	f04f 31ff 	mov.w	r1, #4294967295
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fee4 	bl	8004be6 <w25qxx_wait_for_ready>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <w25qxx_write+0x6c>
            return W25QXX_Err;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e05c      	b.n	8004ee2 <w25qxx_write+0x126>
        }

        uint8_t retryCount = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        while(w25qxx_write_enable(w25qxx) != W25QXX_Ok && retryCount < 100){
 8004e2e:	e007      	b.n	8004e40 <w25qxx_write+0x84>
        	HAL_Delay(1);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f000 f983 	bl	800513c <HAL_Delay>
        	retryCount++;
 8004e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        while(w25qxx_write_enable(w25qxx) != W25QXX_Ok && retryCount < 100){
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff feb1 	bl	8004ba8 <w25qxx_write_enable>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <w25qxx_write+0x98>
 8004e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e50:	2b63      	cmp	r3, #99	; 0x63
 8004e52:	d9ed      	bls.n	8004e30 <w25qxx_write+0x74>
        }

        if (w25qxx_write_enable(w25qxx) == W25QXX_Ok) {
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff fea7 	bl	8004ba8 <w25qxx_write_enable>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d12c      	bne.n	8004eba <w25qxx_write+0xfe>

            uint8_t tx[4] = {
 8004e60:	2302      	movs	r3, #2
 8004e62:	743b      	strb	r3, [r7, #16]
            W25QXX_PAGE_PROGRAM, (uint8_t) (start_address >> 16), (uint8_t) (start_address >> 8), (uint8_t) (start_address), };
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	0c1b      	lsrs	r3, r3, #16
 8004e68:	b2db      	uxtb	r3, r3
            uint8_t tx[4] = {
 8004e6a:	747b      	strb	r3, [r7, #17]
            W25QXX_PAGE_PROGRAM, (uint8_t) (start_address >> 16), (uint8_t) (start_address >> 8), (uint8_t) (start_address), };
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	0a1b      	lsrs	r3, r3, #8
 8004e70:	b2db      	uxtb	r3, r3
            uint8_t tx[4] = {
 8004e72:	74bb      	strb	r3, [r7, #18]
            W25QXX_PAGE_PROGRAM, (uint8_t) (start_address >> 16), (uint8_t) (start_address >> 8), (uint8_t) (start_address), };
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	b2db      	uxtb	r3, r3
            uint8_t tx[4] = {
 8004e78:	74fb      	strb	r3, [r7, #19]

            cs_on(w25qxx);
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff fde6 	bl	8004a4c <cs_on>
            if (w25qxx_transmit(w25qxx, tx, 4) == W25QXX_Ok) { // size will always be fixed
 8004e80:	f107 0310 	add.w	r3, r7, #16
 8004e84:	2204      	movs	r2, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff fdff 	bl	8004a8c <w25qxx_transmit>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10f      	bne.n	8004eb4 <w25qxx_write+0xf8>
                // Now write the buffer
                if (w25qxx_transmit(w25qxx, buf + buffer_offset, write_len) != W25QXX_Ok) {
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	4413      	add	r3, r2
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff fdf4 	bl	8004a8c <w25qxx_transmit>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d004      	beq.n	8004eb4 <w25qxx_write+0xf8>
                    cs_off(w25qxx);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff fdde 	bl	8004a6c <cs_off>
                    return W25QXX_Err;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e016      	b.n	8004ee2 <w25qxx_write+0x126>
                }
            }
            cs_off(w25qxx);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fdd9 	bl	8004a6c <cs_off>
        }
        start_address += write_len;
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	62bb      	str	r3, [r7, #40]	; 0x28
        buffer_offset += write_len;
 8004ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        len -= write_len;
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	603b      	str	r3, [r7, #0]
    for (uint32_t page = first_page; page <= last_page; ++page) {
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d98a      	bls.n	8004df6 <w25qxx_write+0x3a>
    }

    return W25QXX_Ok;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3730      	adds	r7, #48	; 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <w25qxx_erase>:

W25QXX_result_t w25qxx_erase(W25QXX_HandleTypeDef *w25qxx, uint32_t address, uint32_t len) {
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b08a      	sub	sp, #40	; 0x28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]

    W25_DBG("w25qxx_erase, address = 0x%08lx len = 0x%04lx", address, len);

    W25QXX_result_t ret = W25QXX_Ok;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Let's determine the sector start
    uint32_t first_sector = address / w25qxx->sector_size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f06:	61fb      	str	r3, [r7, #28]
    uint32_t last_sector = (address + len - 1) / w25qxx->sector_size;
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	61bb      	str	r3, [r7, #24]

    W25_DBG("w25qxx_erase: first sector: 0x%04lx", first_sector);W25_DBG("w25qxx_erase: last sector : 0x%04lx", last_sector);

    for (uint32_t sector = first_sector; sector <= last_sector; ++sector) {
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	e03a      	b.n	8004f96 <w25qxx_erase+0xac>

        W25_DBG("Erasing sector %lu, starting at: 0x%08lx", sector, sector * w25qxx->sector_size);

        // First we have to ensure the device is not busy
        if (w25qxx_wait_for_ready(w25qxx, HAL_MAX_DELAY) == W25QXX_Ok) {
 8004f20:	f04f 31ff 	mov.w	r1, #4294967295
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff fe5e 	bl	8004be6 <w25qxx_wait_for_ready>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d12c      	bne.n	8004f8a <w25qxx_erase+0xa0>
            if (w25qxx_write_enable(w25qxx) == W25QXX_Ok) {
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fe39 	bl	8004ba8 <w25qxx_write_enable>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d129      	bne.n	8004f90 <w25qxx_erase+0xa6>

                uint32_t sector_start_address = sector * w25qxx->sector_size;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]

                uint8_t tx[4] = {
 8004f48:	2320      	movs	r3, #32
 8004f4a:	743b      	strb	r3, [r7, #16]
                W25QXX_SECTOR_ERASE, (uint8_t) (sector_start_address >> 16), (uint8_t) (sector_start_address >> 8), (uint8_t) (sector_start_address), };
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	0c1b      	lsrs	r3, r3, #16
 8004f50:	b2db      	uxtb	r3, r3
                uint8_t tx[4] = {
 8004f52:	747b      	strb	r3, [r7, #17]
                W25QXX_SECTOR_ERASE, (uint8_t) (sector_start_address >> 16), (uint8_t) (sector_start_address >> 8), (uint8_t) (sector_start_address), };
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	b2db      	uxtb	r3, r3
                uint8_t tx[4] = {
 8004f5a:	74bb      	strb	r3, [r7, #18]
                W25QXX_SECTOR_ERASE, (uint8_t) (sector_start_address >> 16), (uint8_t) (sector_start_address >> 8), (uint8_t) (sector_start_address), };
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	b2db      	uxtb	r3, r3
                uint8_t tx[4] = {
 8004f60:	74fb      	strb	r3, [r7, #19]

                cs_on(w25qxx);
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fd72 	bl	8004a4c <cs_on>
                if (w25qxx_transmit(w25qxx, tx, 4) != W25QXX_Ok) {
 8004f68:	f107 0310 	add.w	r3, r7, #16
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff fd8b 	bl	8004a8c <w25qxx_transmit>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <w25qxx_erase+0x98>
                    ret = W25QXX_Err;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                cs_off(w25qxx);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fd72 	bl	8004a6c <cs_off>
 8004f88:	e002      	b.n	8004f90 <w25qxx_erase+0xa6>
            }
        } else {
            ret = W25QXX_Timeout;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint32_t sector = first_sector; sector <= last_sector; ++sector) {
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	3301      	adds	r3, #1
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d9c0      	bls.n	8004f20 <w25qxx_erase+0x36>
        }

    }

    return ret;
 8004f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3728      	adds	r7, #40	; 0x28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <w25qxx_chip_erase>:

W25QXX_result_t w25qxx_chip_erase(W25QXX_HandleTypeDef *w25qxx) {
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
    if (w25qxx_write_enable(w25qxx) == W25QXX_Ok) {
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fdf8 	bl	8004ba8 <w25qxx_write_enable>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11d      	bne.n	8004ffa <w25qxx_chip_erase+0x50>
        uint8_t tx[1] = {
 8004fbe:	23c7      	movs	r3, #199	; 0xc7
 8004fc0:	733b      	strb	r3, [r7, #12]
        W25QXX_CHIP_ERASE };
        cs_on(w25qxx);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fd42 	bl	8004a4c <cs_on>
        if (w25qxx_transmit(w25qxx, tx, 1) != W25QXX_Ok) {
 8004fc8:	f107 030c 	add.w	r3, r7, #12
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fd5b 	bl	8004a8c <w25qxx_transmit>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <w25qxx_chip_erase+0x36>
            return W25QXX_Err;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e00d      	b.n	8004ffc <w25qxx_chip_erase+0x52>
        }
        cs_off(w25qxx);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff fd43 	bl	8004a6c <cs_off>
        if (w25qxx_wait_for_ready(w25qxx, HAL_MAX_DELAY) != W25QXX_Ok) {
 8004fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fdfb 	bl	8004be6 <w25qxx_wait_for_ready>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <w25qxx_chip_erase+0x50>
            return W25QXX_Err;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <w25qxx_chip_erase+0x52>
        }
    }
    return W25QXX_Ok;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800503c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005008:	f7ff fd0e 	bl	8004a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800500c:	480c      	ldr	r0, [pc, #48]	; (8005040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800500e:	490d      	ldr	r1, [pc, #52]	; (8005044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005010:	4a0d      	ldr	r2, [pc, #52]	; (8005048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005014:	e002      	b.n	800501c <LoopCopyDataInit>

08005016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800501a:	3304      	adds	r3, #4

0800501c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800501c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800501e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005020:	d3f9      	bcc.n	8005016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005024:	4c0a      	ldr	r4, [pc, #40]	; (8005050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005028:	e001      	b.n	800502e <LoopFillZerobss>

0800502a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800502a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800502c:	3204      	adds	r2, #4

0800502e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800502e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005030:	d3fb      	bcc.n	800502a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005032:	f00c fcdd 	bl	80119f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005036:	f7fd fbb3 	bl	80027a0 <main>
  bx  lr    
 800503a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800503c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005044:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005048:	08015de0 	.word	0x08015de0
  ldr r2, =_sbss
 800504c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005050:	2000373c 	.word	0x2000373c

08005054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005054:	e7fe      	b.n	8005054 <ADC_IRQHandler>
	...

08005058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <HAL_Init+0x40>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <HAL_Init+0x40>)
 8005062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_Init+0x40>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <HAL_Init+0x40>)
 800506e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_Init+0x40>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a07      	ldr	r2, [pc, #28]	; (8005098 <HAL_Init+0x40>)
 800507a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005080:	2003      	movs	r0, #3
 8005082:	f000 f94f 	bl	8005324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005086:	200f      	movs	r0, #15
 8005088:	f000 f808 	bl	800509c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800508c:	f7ff f8ba 	bl	8004204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023c00 	.word	0x40023c00

0800509c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_InitTick+0x54>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_InitTick+0x58>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	4619      	mov	r1, r3
 80050ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f967 	bl	800538e <HAL_SYSTICK_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e00e      	b.n	80050e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d80a      	bhi.n	80050e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050d0:	2200      	movs	r2, #0
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	f000 f92f 	bl	800533a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050dc:	4a06      	ldr	r2, [pc, #24]	; (80050f8 <HAL_InitTick+0x5c>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20000020 	.word	0x20000020
 80050f4:	20000028 	.word	0x20000028
 80050f8:	20000024 	.word	0x20000024

080050fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_IncTick+0x20>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_IncTick+0x24>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4413      	add	r3, r2
 800510c:	4a04      	ldr	r2, [pc, #16]	; (8005120 <HAL_IncTick+0x24>)
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000028 	.word	0x20000028
 8005120:	20001548 	.word	0x20001548

08005124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return uwTick;
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <HAL_GetTick+0x14>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20001548 	.word	0x20001548

0800513c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7ff ffee 	bl	8005124 <HAL_GetTick>
 8005148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d005      	beq.n	8005162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_Delay+0x44>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005162:	bf00      	nop
 8005164:	f7ff ffde 	bl	8005124 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	429a      	cmp	r2, r3
 8005172:	d8f7      	bhi.n	8005164 <HAL_Delay+0x28>
  {
  }
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000028 	.word	0x20000028

08005184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051a0:	4013      	ands	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051b6:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <__NVIC_SetPriorityGrouping+0x44>)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	60d3      	str	r3, [r2, #12]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <__NVIC_GetPriorityGrouping+0x18>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	0a1b      	lsrs	r3, r3, #8
 80051d6:	f003 0307 	and.w	r3, r3, #7
}
 80051da:	4618      	mov	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	db0b      	blt.n	8005212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	f003 021f 	and.w	r2, r3, #31
 8005200:	4907      	ldr	r1, [pc, #28]	; (8005220 <__NVIC_EnableIRQ+0x38>)
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2001      	movs	r0, #1
 800520a:	fa00 f202 	lsl.w	r2, r0, r2
 800520e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e100 	.word	0xe000e100

08005224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005234:	2b00      	cmp	r3, #0
 8005236:	db0a      	blt.n	800524e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	b2da      	uxtb	r2, r3
 800523c:	490c      	ldr	r1, [pc, #48]	; (8005270 <__NVIC_SetPriority+0x4c>)
 800523e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	440b      	add	r3, r1
 8005248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800524c:	e00a      	b.n	8005264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4908      	ldr	r1, [pc, #32]	; (8005274 <__NVIC_SetPriority+0x50>)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	3b04      	subs	r3, #4
 800525c:	0112      	lsls	r2, r2, #4
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	440b      	add	r3, r1
 8005262:	761a      	strb	r2, [r3, #24]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	e000e100 	.word	0xe000e100
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f1c3 0307 	rsb	r3, r3, #7
 8005292:	2b04      	cmp	r3, #4
 8005294:	bf28      	it	cs
 8005296:	2304      	movcs	r3, #4
 8005298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	3304      	adds	r3, #4
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d902      	bls.n	80052a8 <NVIC_EncodePriority+0x30>
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3b03      	subs	r3, #3
 80052a6:	e000      	b.n	80052aa <NVIC_EncodePriority+0x32>
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052ac:	f04f 32ff 	mov.w	r2, #4294967295
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	401a      	ands	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052c0:	f04f 31ff 	mov.w	r1, #4294967295
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ca:	43d9      	mvns	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d0:	4313      	orrs	r3, r2
         );
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052f0:	d301      	bcc.n	80052f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00f      	b.n	8005316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <SysTick_Config+0x40>)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052fe:	210f      	movs	r1, #15
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	f7ff ff8e 	bl	8005224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <SysTick_Config+0x40>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800530e:	4b04      	ldr	r3, [pc, #16]	; (8005320 <SysTick_Config+0x40>)
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	e000e010 	.word	0xe000e010

08005324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ff29 	bl	8005184 <__NVIC_SetPriorityGrouping>
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	4603      	mov	r3, r0
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800534c:	f7ff ff3e 	bl	80051cc <__NVIC_GetPriorityGrouping>
 8005350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7ff ff8e 	bl	8005278 <NVIC_EncodePriority>
 800535c:	4602      	mov	r2, r0
 800535e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff ff5d 	bl	8005224 <__NVIC_SetPriority>
}
 800536a:	bf00      	nop
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	4603      	mov	r3, r0
 800537a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800537c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff31 	bl	80051e8 <__NVIC_EnableIRQ>
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff ffa2 	bl	80052e0 <SysTick_Config>
 800539c:	4603      	mov	r3, r0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053b4:	f7ff feb6 	bl	8005124 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e099      	b.n	80054f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e4:	e00f      	b.n	8005406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e6:	f7ff fe9d 	bl	8005124 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d908      	bls.n	8005406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2203      	movs	r2, #3
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e078      	b.n	80054f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e8      	bne.n	80053e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4b38      	ldr	r3, [pc, #224]	; (8005500 <HAL_DMA_Init+0x158>)
 8005420:	4013      	ands	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800543e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800544a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	2b04      	cmp	r3, #4
 800545e:	d107      	bne.n	8005470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	4313      	orrs	r3, r2
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0307 	bic.w	r3, r3, #7
 8005486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b04      	cmp	r3, #4
 8005498:	d117      	bne.n	80054ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa91 	bl	80059d4 <DMA_CheckFifoParam>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2240      	movs	r2, #64	; 0x40
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054c6:	2301      	movs	r3, #1
 80054c8:	e016      	b.n	80054f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa48 	bl	8005968 <DMA_CalcBaseAndBitshift>
 80054d8:	4603      	mov	r3, r0
 80054da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e0:	223f      	movs	r2, #63	; 0x3f
 80054e2:	409a      	lsls	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	f010803f 	.word	0xf010803f

08005504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_DMA_Start_IT+0x26>
 8005526:	2302      	movs	r3, #2
 8005528:	e040      	b.n	80055ac <HAL_DMA_Start_IT+0xa8>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d12f      	bne.n	800559e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 f9da 	bl	800590c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555c:	223f      	movs	r2, #63	; 0x3f
 800555e:	409a      	lsls	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0216 	orr.w	r2, r2, #22
 8005572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0208 	orr.w	r2, r2, #8
 800558a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e005      	b.n	80055aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
 80055a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d004      	beq.n	80055d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e00c      	b.n	80055ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2205      	movs	r2, #5
 80055d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005604:	4b8e      	ldr	r3, [pc, #568]	; (8005840 <HAL_DMA_IRQHandler+0x248>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a8e      	ldr	r2, [pc, #568]	; (8005844 <HAL_DMA_IRQHandler+0x24c>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0a9b      	lsrs	r3, r3, #10
 8005610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	2208      	movs	r2, #8
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01a      	beq.n	8005664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d013      	beq.n	8005664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0204 	bic.w	r2, r2, #4
 800564a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005650:	2208      	movs	r2, #8
 8005652:	409a      	lsls	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	2201      	movs	r2, #1
 800566a:	409a      	lsls	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d012      	beq.n	800569a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005686:	2201      	movs	r2, #1
 8005688:	409a      	lsls	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f043 0202 	orr.w	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	2204      	movs	r2, #4
 80056a0:	409a      	lsls	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d012      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	2204      	movs	r2, #4
 80056be:	409a      	lsls	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c8:	f043 0204 	orr.w	r2, r3, #4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d4:	2210      	movs	r2, #16
 80056d6:	409a      	lsls	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d043      	beq.n	8005768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03c      	beq.n	8005768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f2:	2210      	movs	r2, #16
 80056f4:	409a      	lsls	r2, r3
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d018      	beq.n	800573a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d108      	bne.n	8005728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d024      	beq.n	8005768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	e01f      	b.n	8005768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	4798      	blx	r3
 8005738:	e016      	b.n	8005768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d107      	bne.n	8005758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0208 	bic.w	r2, r2, #8
 8005756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576c:	2220      	movs	r2, #32
 800576e:	409a      	lsls	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 808f 	beq.w	8005898 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8087 	beq.w	8005898 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	2220      	movs	r2, #32
 8005790:	409a      	lsls	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d136      	bne.n	8005810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0216 	bic.w	r2, r2, #22
 80057b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <HAL_DMA_IRQHandler+0x1da>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0208 	bic.w	r2, r2, #8
 80057e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e6:	223f      	movs	r2, #63	; 0x3f
 80057e8:	409a      	lsls	r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	2b00      	cmp	r3, #0
 8005804:	d07e      	beq.n	8005904 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
        }
        return;
 800580e:	e079      	b.n	8005904 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01d      	beq.n	800585a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	2b00      	cmp	r3, #0
 8005832:	d031      	beq.n	8005898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
 800583c:	e02c      	b.n	8005898 <HAL_DMA_IRQHandler+0x2a0>
 800583e:	bf00      	nop
 8005840:	20000020 	.word	0x20000020
 8005844:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d023      	beq.n	8005898 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
 8005858:	e01e      	b.n	8005898 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0210 	bic.w	r2, r2, #16
 8005876:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	2b00      	cmp	r3, #0
 800589e:	d032      	beq.n	8005906 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d022      	beq.n	80058f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2205      	movs	r2, #5
 80058b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d307      	bcc.n	80058e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f2      	bne.n	80058c4 <HAL_DMA_IRQHandler+0x2cc>
 80058de:	e000      	b.n	80058e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
 8005902:	e000      	b.n	8005906 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005904:	bf00      	nop
    }
  }
}
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005928:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b40      	cmp	r3, #64	; 0x40
 8005938:	d108      	bne.n	800594c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800594a:	e007      	b.n	800595c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	3b10      	subs	r3, #16
 8005978:	4a14      	ldr	r2, [pc, #80]	; (80059cc <DMA_CalcBaseAndBitshift+0x64>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005982:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <DMA_CalcBaseAndBitshift+0x68>)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b03      	cmp	r3, #3
 8005994:	d909      	bls.n	80059aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	1d1a      	adds	r2, r3, #4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	659a      	str	r2, [r3, #88]	; 0x58
 80059a8:	e007      	b.n	80059ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	aaaaaaab 	.word	0xaaaaaaab
 80059d0:	080154bc 	.word	0x080154bc

080059d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d11f      	bne.n	8005a2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d856      	bhi.n	8005aa2 <DMA_CheckFifoParam+0xce>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <DMA_CheckFifoParam+0x28>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1f 	.word	0x08005a1f
 8005a04:	08005a0d 	.word	0x08005a0d
 8005a08:	08005aa3 	.word	0x08005aa3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d046      	beq.n	8005aa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a1c:	e043      	b.n	8005aa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a26:	d140      	bne.n	8005aaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2c:	e03d      	b.n	8005aaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a36:	d121      	bne.n	8005a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d837      	bhi.n	8005aae <DMA_CheckFifoParam+0xda>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <DMA_CheckFifoParam+0x70>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a5b 	.word	0x08005a5b
 8005a4c:	08005a55 	.word	0x08005a55
 8005a50:	08005a6d 	.word	0x08005a6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
      break;
 8005a58:	e030      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d025      	beq.n	8005ab2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a6a:	e022      	b.n	8005ab2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a74:	d11f      	bne.n	8005ab6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a7a:	e01c      	b.n	8005ab6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d903      	bls.n	8005a8a <DMA_CheckFifoParam+0xb6>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d003      	beq.n	8005a90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a88:	e018      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8e:	e015      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00e      	beq.n	8005aba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa0:	e00b      	b.n	8005aba <DMA_CheckFifoParam+0xe6>
      break;
 8005aa2:	bf00      	nop
 8005aa4:	e00a      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      break;
 8005aa6:	bf00      	nop
 8005aa8:	e008      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      break;
 8005aaa:	bf00      	nop
 8005aac:	e006      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e004      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e002      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      break;   
 8005ab6:	bf00      	nop
 8005ab8:	e000      	b.n	8005abc <DMA_CheckFifoParam+0xe8>
      break;
 8005aba:	bf00      	nop
    }
  } 
  
  return status; 
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop

08005acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	e16b      	b.n	8005dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ae8:	2201      	movs	r2, #1
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4013      	ands	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	f040 815a 	bne.w	8005dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d005      	beq.n	8005b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d130      	bne.n	8005b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	2203      	movs	r2, #3
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b54:	2201      	movs	r2, #1
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4013      	ands	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	f003 0201 	and.w	r2, r3, #1
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d017      	beq.n	8005bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	2203      	movs	r2, #3
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d123      	bne.n	8005c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	08da      	lsrs	r2, r3, #3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3208      	adds	r2, #8
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	220f      	movs	r2, #15
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	08da      	lsrs	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3208      	adds	r2, #8
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 0203 	and.w	r2, r3, #3
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80b4 	beq.w	8005dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4b60      	ldr	r3, [pc, #384]	; (8005dd8 <HAL_GPIO_Init+0x30c>)
 8005c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5a:	4a5f      	ldr	r2, [pc, #380]	; (8005dd8 <HAL_GPIO_Init+0x30c>)
 8005c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c60:	6453      	str	r3, [r2, #68]	; 0x44
 8005c62:	4b5d      	ldr	r3, [pc, #372]	; (8005dd8 <HAL_GPIO_Init+0x30c>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c6e:	4a5b      	ldr	r2, [pc, #364]	; (8005ddc <HAL_GPIO_Init+0x310>)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	3302      	adds	r3, #2
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	220f      	movs	r2, #15
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4013      	ands	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a52      	ldr	r2, [pc, #328]	; (8005de0 <HAL_GPIO_Init+0x314>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02b      	beq.n	8005cf2 <HAL_GPIO_Init+0x226>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a51      	ldr	r2, [pc, #324]	; (8005de4 <HAL_GPIO_Init+0x318>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d025      	beq.n	8005cee <HAL_GPIO_Init+0x222>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a50      	ldr	r2, [pc, #320]	; (8005de8 <HAL_GPIO_Init+0x31c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01f      	beq.n	8005cea <HAL_GPIO_Init+0x21e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a4f      	ldr	r2, [pc, #316]	; (8005dec <HAL_GPIO_Init+0x320>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d019      	beq.n	8005ce6 <HAL_GPIO_Init+0x21a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a4e      	ldr	r2, [pc, #312]	; (8005df0 <HAL_GPIO_Init+0x324>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d013      	beq.n	8005ce2 <HAL_GPIO_Init+0x216>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a4d      	ldr	r2, [pc, #308]	; (8005df4 <HAL_GPIO_Init+0x328>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00d      	beq.n	8005cde <HAL_GPIO_Init+0x212>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a4c      	ldr	r2, [pc, #304]	; (8005df8 <HAL_GPIO_Init+0x32c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <HAL_GPIO_Init+0x20e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a4b      	ldr	r2, [pc, #300]	; (8005dfc <HAL_GPIO_Init+0x330>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_GPIO_Init+0x20a>
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	e00e      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	e00c      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005cda:	2306      	movs	r3, #6
 8005cdc:	e00a      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005cde:	2305      	movs	r3, #5
 8005ce0:	e008      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	e006      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e004      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e002      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <HAL_GPIO_Init+0x228>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f002 0203 	and.w	r2, r2, #3
 8005cfa:	0092      	lsls	r2, r2, #2
 8005cfc:	4093      	lsls	r3, r2
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d04:	4935      	ldr	r1, [pc, #212]	; (8005ddc <HAL_GPIO_Init+0x310>)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d12:	4b3b      	ldr	r3, [pc, #236]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d36:	4a32      	ldr	r2, [pc, #200]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d3c:	4b30      	ldr	r3, [pc, #192]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d60:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d8a:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005db4:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <HAL_GPIO_Init+0x334>)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	f67f ae90 	bls.w	8005ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	3724      	adds	r7, #36	; 0x24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40013800 	.word	0x40013800
 8005de0:	40020000 	.word	0x40020000
 8005de4:	40020400 	.word	0x40020400
 8005de8:	40020800 	.word	0x40020800
 8005dec:	40020c00 	.word	0x40020c00
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40021400 	.word	0x40021400
 8005df8:	40021800 	.word	0x40021800
 8005dfc:	40021c00 	.word	0x40021c00
 8005e00:	40013c00 	.word	0x40013c00

08005e04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e0cd      	b.n	8005fbc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e20:	2201      	movs	r2, #1
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	f040 80bd 	bne.w	8005fb6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005e3c:	4a65      	ldr	r2, [pc, #404]	; (8005fd4 <HAL_GPIO_DeInit+0x1d0>)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	089b      	lsrs	r3, r3, #2
 8005e42:	3302      	adds	r3, #2
 8005e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e48:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	220f      	movs	r2, #15
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a5d      	ldr	r2, [pc, #372]	; (8005fd8 <HAL_GPIO_DeInit+0x1d4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d02b      	beq.n	8005ebe <HAL_GPIO_DeInit+0xba>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a5c      	ldr	r2, [pc, #368]	; (8005fdc <HAL_GPIO_DeInit+0x1d8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d025      	beq.n	8005eba <HAL_GPIO_DeInit+0xb6>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a5b      	ldr	r2, [pc, #364]	; (8005fe0 <HAL_GPIO_DeInit+0x1dc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01f      	beq.n	8005eb6 <HAL_GPIO_DeInit+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a5a      	ldr	r2, [pc, #360]	; (8005fe4 <HAL_GPIO_DeInit+0x1e0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d019      	beq.n	8005eb2 <HAL_GPIO_DeInit+0xae>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a59      	ldr	r2, [pc, #356]	; (8005fe8 <HAL_GPIO_DeInit+0x1e4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_GPIO_DeInit+0xaa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a58      	ldr	r2, [pc, #352]	; (8005fec <HAL_GPIO_DeInit+0x1e8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00d      	beq.n	8005eaa <HAL_GPIO_DeInit+0xa6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a57      	ldr	r2, [pc, #348]	; (8005ff0 <HAL_GPIO_DeInit+0x1ec>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <HAL_GPIO_DeInit+0xa2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a56      	ldr	r2, [pc, #344]	; (8005ff4 <HAL_GPIO_DeInit+0x1f0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <HAL_GPIO_DeInit+0x9e>
 8005e9e:	2307      	movs	r3, #7
 8005ea0:	e00e      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	e00c      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005ea6:	2306      	movs	r3, #6
 8005ea8:	e00a      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005eaa:	2305      	movs	r3, #5
 8005eac:	e008      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005eae:	2304      	movs	r3, #4
 8005eb0:	e006      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e004      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e002      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <HAL_GPIO_DeInit+0xbc>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	f002 0203 	and.w	r2, r2, #3
 8005ec6:	0092      	lsls	r2, r2, #2
 8005ec8:	4093      	lsls	r3, r2
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d132      	bne.n	8005f36 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ed0:	4b49      	ldr	r3, [pc, #292]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	4947      	ldr	r1, [pc, #284]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005ede:	4b46      	ldr	r3, [pc, #280]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	4944      	ldr	r1, [pc, #272]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005eec:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	4940      	ldr	r1, [pc, #256]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005efa:	4b3f      	ldr	r3, [pc, #252]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	493d      	ldr	r1, [pc, #244]	; (8005ff8 <HAL_GPIO_DeInit+0x1f4>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	220f      	movs	r2, #15
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005f18:	4a2e      	ldr	r2, [pc, #184]	; (8005fd4 <HAL_GPIO_DeInit+0x1d0>)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	089b      	lsrs	r3, r3, #2
 8005f1e:	3302      	adds	r3, #2
 8005f20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	43da      	mvns	r2, r3
 8005f28:	482a      	ldr	r0, [pc, #168]	; (8005fd4 <HAL_GPIO_DeInit+0x1d0>)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	089b      	lsrs	r3, r3, #2
 8005f2e:	400a      	ands	r2, r1
 8005f30:	3302      	adds	r3, #2
 8005f32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	2103      	movs	r1, #3
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	401a      	ands	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	08da      	lsrs	r2, r3, #3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3208      	adds	r2, #8
 8005f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	220f      	movs	r2, #15
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	08d2      	lsrs	r2, r2, #3
 8005f6c:	4019      	ands	r1, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3208      	adds	r2, #8
 8005f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	2103      	movs	r1, #3
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	2101      	movs	r1, #1
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	401a      	ands	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2103      	movs	r1, #3
 8005faa:	fa01 f303 	lsl.w	r3, r1, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	401a      	ands	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	f67f af2e 	bls.w	8005e20 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40020000 	.word	0x40020000
 8005fdc:	40020400 	.word	0x40020400
 8005fe0:	40020800 	.word	0x40020800
 8005fe4:	40020c00 	.word	0x40020c00
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40021400 	.word	0x40021400
 8005ff0:	40021800 	.word	0x40021800
 8005ff4:	40021c00 	.word	0x40021c00
 8005ff8:	40013c00 	.word	0x40013c00

08005ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	887b      	ldrh	r3, [r7, #2]
 800600e:	4013      	ands	r3, r2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e001      	b.n	800601e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	807b      	strh	r3, [r7, #2]
 8006038:	4613      	mov	r3, r2
 800603a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800603c:	787b      	ldrb	r3, [r7, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006042:	887a      	ldrh	r2, [r7, #2]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006048:	e003      	b.n	8006052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800604a:	887b      	ldrh	r3, [r7, #2]
 800604c:	041a      	lsls	r2, r3, #16
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	619a      	str	r2, [r3, #24]
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e12b      	b.n	80062ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fe f8e4 	bl	8004254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	; 0x24
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060c4:	f002 fa58 	bl	8008578 <HAL_RCC_GetPCLK1Freq>
 80060c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4a81      	ldr	r2, [pc, #516]	; (80062d4 <HAL_I2C_Init+0x274>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d807      	bhi.n	80060e4 <HAL_I2C_Init+0x84>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a80      	ldr	r2, [pc, #512]	; (80062d8 <HAL_I2C_Init+0x278>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	bf94      	ite	ls
 80060dc:	2301      	movls	r3, #1
 80060de:	2300      	movhi	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e006      	b.n	80060f2 <HAL_I2C_Init+0x92>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4a7d      	ldr	r2, [pc, #500]	; (80062dc <HAL_I2C_Init+0x27c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bf94      	ite	ls
 80060ec:	2301      	movls	r3, #1
 80060ee:	2300      	movhi	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0e7      	b.n	80062ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a78      	ldr	r2, [pc, #480]	; (80062e0 <HAL_I2C_Init+0x280>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0c9b      	lsrs	r3, r3, #18
 8006104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a6a      	ldr	r2, [pc, #424]	; (80062d4 <HAL_I2C_Init+0x274>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d802      	bhi.n	8006134 <HAL_I2C_Init+0xd4>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	3301      	adds	r3, #1
 8006132:	e009      	b.n	8006148 <HAL_I2C_Init+0xe8>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800613a:	fb02 f303 	mul.w	r3, r2, r3
 800613e:	4a69      	ldr	r2, [pc, #420]	; (80062e4 <HAL_I2C_Init+0x284>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	099b      	lsrs	r3, r3, #6
 8006146:	3301      	adds	r3, #1
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	430b      	orrs	r3, r1
 800614e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800615a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	495c      	ldr	r1, [pc, #368]	; (80062d4 <HAL_I2C_Init+0x274>)
 8006164:	428b      	cmp	r3, r1
 8006166:	d819      	bhi.n	800619c <HAL_I2C_Init+0x13c>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1e59      	subs	r1, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	fbb1 f3f3 	udiv	r3, r1, r3
 8006176:	1c59      	adds	r1, r3, #1
 8006178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800617c:	400b      	ands	r3, r1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_I2C_Init+0x138>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1e59      	subs	r1, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006190:	3301      	adds	r3, #1
 8006192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006196:	e051      	b.n	800623c <HAL_I2C_Init+0x1dc>
 8006198:	2304      	movs	r3, #4
 800619a:	e04f      	b.n	800623c <HAL_I2C_Init+0x1dc>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d111      	bne.n	80061c8 <HAL_I2C_Init+0x168>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1e58      	subs	r0, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	440b      	add	r3, r1
 80061b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b6:	3301      	adds	r3, #1
 80061b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e012      	b.n	80061ee <HAL_I2C_Init+0x18e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1e58      	subs	r0, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6859      	ldr	r1, [r3, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	0099      	lsls	r1, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	fbb0 f3f3 	udiv	r3, r0, r3
 80061de:	3301      	adds	r3, #1
 80061e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_I2C_Init+0x196>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e022      	b.n	800623c <HAL_I2C_Init+0x1dc>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10e      	bne.n	800621c <HAL_I2C_Init+0x1bc>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1e58      	subs	r0, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	440b      	add	r3, r1
 800620c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006210:	3301      	adds	r3, #1
 8006212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621a:	e00f      	b.n	800623c <HAL_I2C_Init+0x1dc>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	1e58      	subs	r0, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6859      	ldr	r1, [r3, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	0099      	lsls	r1, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006232:	3301      	adds	r3, #1
 8006234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	6809      	ldr	r1, [r1, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800626a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6911      	ldr	r1, [r2, #16]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68d2      	ldr	r2, [r2, #12]
 8006276:	4311      	orrs	r1, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	430b      	orrs	r3, r1
 800627e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695a      	ldr	r2, [r3, #20]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	000186a0 	.word	0x000186a0
 80062d8:	001e847f 	.word	0x001e847f
 80062dc:	003d08ff 	.word	0x003d08ff
 80062e0:	431bde83 	.word	0x431bde83
 80062e4:	10624dd3 	.word	0x10624dd3

080062e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e021      	b.n	800633e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2224      	movs	r2, #36	; 0x24
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0201 	bic.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fd ffe6 	bl	80042e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	607a      	str	r2, [r7, #4]
 8006352:	461a      	mov	r2, r3
 8006354:	460b      	mov	r3, r1
 8006356:	817b      	strh	r3, [r7, #10]
 8006358:	4613      	mov	r3, r2
 800635a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800635c:	f7fe fee2 	bl	8005124 <HAL_GetTick>
 8006360:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b20      	cmp	r3, #32
 800636c:	f040 80e0 	bne.w	8006530 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	2319      	movs	r3, #25
 8006376:	2201      	movs	r2, #1
 8006378:	4970      	ldr	r1, [pc, #448]	; (800653c <HAL_I2C_Master_Transmit+0x1f4>)
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 fa56 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
 8006388:	e0d3      	b.n	8006532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_I2C_Master_Transmit+0x50>
 8006394:	2302      	movs	r3, #2
 8006396:	e0cc      	b.n	8006532 <HAL_I2C_Master_Transmit+0x1ea>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d007      	beq.n	80063be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2221      	movs	r2, #33	; 0x21
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2210      	movs	r2, #16
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	893a      	ldrh	r2, [r7, #8]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a50      	ldr	r2, [pc, #320]	; (8006540 <HAL_I2C_Master_Transmit+0x1f8>)
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006400:	8979      	ldrh	r1, [r7, #10]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 ff42 	bl	8007290 <I2C_MasterRequestWrite>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e08d      	b.n	8006532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006416:	2300      	movs	r3, #0
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	613b      	str	r3, [r7, #16]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800642c:	e066      	b.n	80064fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	6a39      	ldr	r1, [r7, #32]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f001 fb14 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00d      	beq.n	800645a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	2b04      	cmp	r3, #4
 8006444:	d107      	bne.n	8006456 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e06b      	b.n	8006532 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d11b      	bne.n	80064d0 <HAL_I2C_Master_Transmit+0x188>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d017      	beq.n	80064d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	6a39      	ldr	r1, [r7, #32]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f001 fb0b 	bl	8007af0 <I2C_WaitOnBTFFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d107      	bne.n	80064f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e01a      	b.n	8006532 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d194      	bne.n	800642e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e000      	b.n	8006532 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	00100002 	.word	0x00100002
 8006540:	ffff0000 	.word	0xffff0000

08006544 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	; 0x30
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	461a      	mov	r2, r3
 8006550:	460b      	mov	r3, r1
 8006552:	817b      	strh	r3, [r7, #10]
 8006554:	4613      	mov	r3, r2
 8006556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006558:	f7fe fde4 	bl	8005124 <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	f040 8217 	bne.w	800699a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2319      	movs	r3, #25
 8006572:	2201      	movs	r2, #1
 8006574:	497c      	ldr	r1, [pc, #496]	; (8006768 <HAL_I2C_Master_Receive+0x224>)
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f001 f958 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006582:	2302      	movs	r3, #2
 8006584:	e20a      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_I2C_Master_Receive+0x50>
 8006590:	2302      	movs	r3, #2
 8006592:	e203      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d007      	beq.n	80065ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2222      	movs	r2, #34	; 0x22
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2210      	movs	r2, #16
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	893a      	ldrh	r2, [r7, #8]
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a5c      	ldr	r2, [pc, #368]	; (800676c <HAL_I2C_Master_Receive+0x228>)
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065fc:	8979      	ldrh	r1, [r7, #10]
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fec6 	bl	8007394 <I2C_MasterRequestRead>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e1c4      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d113      	bne.n	8006642 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661a:	2300      	movs	r3, #0
 800661c:	623b      	str	r3, [r7, #32]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e198      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	2b01      	cmp	r3, #1
 8006648:	d11b      	bne.n	8006682 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e178      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006686:	2b02      	cmp	r3, #2
 8006688:	d11b      	bne.n	80066c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006698:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	e158      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066e8:	e144      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	f200 80f1 	bhi.w	80068d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d123      	bne.n	8006744 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f001 fa3d 	bl	8007b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e145      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006742:	e117      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	2b02      	cmp	r3, #2
 800674a:	d14e      	bne.n	80067ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2200      	movs	r2, #0
 8006754:	4906      	ldr	r1, [pc, #24]	; (8006770 <HAL_I2C_Master_Receive+0x22c>)
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f001 f868 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d008      	beq.n	8006774 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e11a      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
 8006766:	bf00      	nop
 8006768:	00100002 	.word	0x00100002
 800676c:	ffff0000 	.word	0xffff0000
 8006770:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e8:	e0c4      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2200      	movs	r2, #0
 80067f2:	496c      	ldr	r1, [pc, #432]	; (80069a4 <HAL_I2C_Master_Receive+0x460>)
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 f819 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0cb      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2200      	movs	r2, #0
 800684e:	4955      	ldr	r1, [pc, #340]	; (80069a4 <HAL_I2C_Master_Receive+0x460>)
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 ffeb 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e09d      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691a      	ldr	r2, [r3, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068d4:	e04e      	b.n	8006974 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f001 f950 	bl	8007b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e058      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b04      	cmp	r3, #4
 8006928:	d124      	bne.n	8006974 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692e:	2b03      	cmp	r3, #3
 8006930:	d107      	bne.n	8006942 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	f47f aeb6 	bne.w	80066ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	e000      	b.n	800699c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800699a:	2302      	movs	r3, #2
  }
}
 800699c:	4618      	mov	r0, r3
 800699e:	3728      	adds	r7, #40	; 0x28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	00010004 	.word	0x00010004

080069a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	4608      	mov	r0, r1
 80069b2:	4611      	mov	r1, r2
 80069b4:	461a      	mov	r2, r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	817b      	strh	r3, [r7, #10]
 80069ba:	460b      	mov	r3, r1
 80069bc:	813b      	strh	r3, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069c2:	f7fe fbaf 	bl	8005124 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	f040 80d9 	bne.w	8006b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	2319      	movs	r3, #25
 80069dc:	2201      	movs	r2, #1
 80069de:	496d      	ldr	r1, [pc, #436]	; (8006b94 <HAL_I2C_Mem_Write+0x1ec>)
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 ff23 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e0cc      	b.n	8006b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_I2C_Mem_Write+0x56>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e0c5      	b.n	8006b8a <HAL_I2C_Mem_Write+0x1e2>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d007      	beq.n	8006a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2221      	movs	r2, #33	; 0x21
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2240      	movs	r2, #64	; 0x40
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a3a      	ldr	r2, [r7, #32]
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a4d      	ldr	r2, [pc, #308]	; (8006b98 <HAL_I2C_Mem_Write+0x1f0>)
 8006a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a66:	88f8      	ldrh	r0, [r7, #6]
 8006a68:	893a      	ldrh	r2, [r7, #8]
 8006a6a:	8979      	ldrh	r1, [r7, #10]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4603      	mov	r3, r0
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fd5a 	bl	8007530 <I2C_RequestMemoryWrite>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d052      	beq.n	8006b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e081      	b.n	8006b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 ffe8 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00d      	beq.n	8006ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d107      	bne.n	8006aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e06b      	b.n	8006b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d11b      	bne.n	8006b28 <HAL_I2C_Mem_Write+0x180>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d017      	beq.n	8006b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1aa      	bne.n	8006a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 ffdb 	bl	8007af0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00d      	beq.n	8006b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d107      	bne.n	8006b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e016      	b.n	8006b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e000      	b.n	8006b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b88:	2302      	movs	r3, #2
  }
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	00100002 	.word	0x00100002
 8006b98:	ffff0000 	.word	0xffff0000

08006b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08c      	sub	sp, #48	; 0x30
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4603      	mov	r3, r0
 8006bac:	817b      	strh	r3, [r7, #10]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	813b      	strh	r3, [r7, #8]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bb6:	f7fe fab5 	bl	8005124 <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	f040 8214 	bne.w	8006ff2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2319      	movs	r3, #25
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	497b      	ldr	r1, [pc, #492]	; (8006dc0 <HAL_I2C_Mem_Read+0x224>)
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 fe29 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006be0:	2302      	movs	r3, #2
 8006be2:	e207      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_I2C_Mem_Read+0x56>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e200      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d007      	beq.n	8006c18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2222      	movs	r2, #34	; 0x22
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2240      	movs	r2, #64	; 0x40
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a5b      	ldr	r2, [pc, #364]	; (8006dc4 <HAL_I2C_Mem_Read+0x228>)
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c5a:	88f8      	ldrh	r0, [r7, #6]
 8006c5c:	893a      	ldrh	r2, [r7, #8]
 8006c5e:	8979      	ldrh	r1, [r7, #10]
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4603      	mov	r3, r0
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fcf6 	bl	800765c <I2C_RequestMemoryRead>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e1bc      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d113      	bne.n	8006caa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c82:	2300      	movs	r3, #0
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	623b      	str	r3, [r7, #32]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e190      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d11b      	bne.n	8006cea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	e170      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d11b      	bne.n	8006d2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	e150      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d40:	e144      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	f200 80f1 	bhi.w	8006f2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d123      	bne.n	8006d9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 ff11 	bl	8007b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e145      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d9a:	e117      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d14e      	bne.n	8006e42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	2200      	movs	r2, #0
 8006dac:	4906      	ldr	r1, [pc, #24]	; (8006dc8 <HAL_I2C_Mem_Read+0x22c>)
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 fd3c 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d008      	beq.n	8006dcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e11a      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
 8006dbe:	bf00      	nop
 8006dc0:	00100002 	.word	0x00100002
 8006dc4:	ffff0000 	.word	0xffff0000
 8006dc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e40:	e0c4      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2200      	movs	r2, #0
 8006e4a:	496c      	ldr	r1, [pc, #432]	; (8006ffc <HAL_I2C_Mem_Read+0x460>)
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 fced 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0cb      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4955      	ldr	r1, [pc, #340]	; (8006ffc <HAL_I2C_Mem_Read+0x460>)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fcbf 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e09d      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f2c:	e04e      	b.n	8006fcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 fe24 	bl	8007b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e058      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d124      	bne.n	8006fcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d107      	bne.n	8006f9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f47f aeb6 	bne.w	8006d42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e000      	b.n	8006ff4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006ff2:	2302      	movs	r3, #2
  }
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3728      	adds	r7, #40	; 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	00010004 	.word	0x00010004

08007000 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08a      	sub	sp, #40	; 0x28
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	460b      	mov	r3, r1
 800700e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007010:	f7fe f888 	bl	8005124 <HAL_GetTick>
 8007014:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b20      	cmp	r3, #32
 8007024:	f040 8111 	bne.w	800724a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	2319      	movs	r3, #25
 800702e:	2201      	movs	r2, #1
 8007030:	4988      	ldr	r1, [pc, #544]	; (8007254 <HAL_I2C_IsDeviceReady+0x254>)
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fbfa 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
 8007040:	e104      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_I2C_IsDeviceReady+0x50>
 800704c:	2302      	movs	r3, #2
 800704e:	e0fd      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	d007      	beq.n	8007076 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007084:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2224      	movs	r2, #36	; 0x24
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a70      	ldr	r2, [pc, #448]	; (8007258 <HAL_I2C_IsDeviceReady+0x258>)
 8007098:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fbb8 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d0:	d103      	bne.n	80070da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e0b6      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070de:	897b      	ldrh	r3, [r7, #10]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80070ee:	f7fe f819 	bl	8005124 <HAL_GetTick>
 80070f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b02      	cmp	r3, #2
 8007100:	bf0c      	ite	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	2300      	movne	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007118:	bf0c      	ite	eq
 800711a:	2301      	moveq	r3, #1
 800711c:	2300      	movne	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007122:	e025      	b.n	8007170 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007124:	f7fd fffe 	bl	8005124 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <HAL_I2C_IsDeviceReady+0x13a>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	22a0      	movs	r2, #160	; 0xa0
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b02      	cmp	r3, #2
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2ba0      	cmp	r3, #160	; 0xa0
 800717a:	d005      	beq.n	8007188 <HAL_I2C_IsDeviceReady+0x188>
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <HAL_I2C_IsDeviceReady+0x188>
 8007182:	7dbb      	ldrb	r3, [r7, #22]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0cd      	beq.n	8007124 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d129      	bne.n	80071f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2319      	movs	r3, #25
 80071ca:	2201      	movs	r2, #1
 80071cc:	4921      	ldr	r1, [pc, #132]	; (8007254 <HAL_I2C_IsDeviceReady+0x254>)
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fb2c 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e036      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e02c      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007200:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800720a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	2319      	movs	r3, #25
 8007212:	2201      	movs	r2, #1
 8007214:	490f      	ldr	r1, [pc, #60]	; (8007254 <HAL_I2C_IsDeviceReady+0x254>)
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 fb08 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e012      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	3301      	adds	r3, #1
 800722a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	f4ff af32 	bcc.w	800709a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2220      	movs	r2, #32
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
  }
}
 800724c:	4618      	mov	r0, r3
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	00100002 	.word	0x00100002
 8007258:	ffff0000 	.word	0xffff0000

0800725c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	607a      	str	r2, [r7, #4]
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	460b      	mov	r3, r1
 800729e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d006      	beq.n	80072ba <I2C_MasterRequestWrite+0x2a>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d003      	beq.n	80072ba <I2C_MasterRequestWrite+0x2a>
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072b8:	d108      	bne.n	80072cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e00b      	b.n	80072e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	2b12      	cmp	r3, #18
 80072d2:	d107      	bne.n	80072e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 fa9b 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00d      	beq.n	8007318 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800730a:	d103      	bne.n	8007314 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e035      	b.n	8007384 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007320:	d108      	bne.n	8007334 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007322:	897b      	ldrh	r3, [r7, #10]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	461a      	mov	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007330:	611a      	str	r2, [r3, #16]
 8007332:	e01b      	b.n	800736c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007334:	897b      	ldrh	r3, [r7, #10]
 8007336:	11db      	asrs	r3, r3, #7
 8007338:	b2db      	uxtb	r3, r3
 800733a:	f003 0306 	and.w	r3, r3, #6
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f063 030f 	orn	r3, r3, #15
 8007344:	b2da      	uxtb	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	490e      	ldr	r1, [pc, #56]	; (800738c <I2C_MasterRequestWrite+0xfc>)
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fae4 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e010      	b.n	8007384 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007362:	897b      	ldrh	r3, [r7, #10]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4907      	ldr	r1, [pc, #28]	; (8007390 <I2C_MasterRequestWrite+0x100>)
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fad4 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	00010008 	.word	0x00010008
 8007390:	00010002 	.word	0x00010002

08007394 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	460b      	mov	r3, r1
 80073a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d006      	beq.n	80073ce <I2C_MasterRequestRead+0x3a>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d003      	beq.n	80073ce <I2C_MasterRequestRead+0x3a>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073cc:	d108      	bne.n	80073e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e00b      	b.n	80073f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e4:	2b11      	cmp	r3, #17
 80073e6:	d107      	bne.n	80073f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fa11 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00d      	beq.n	800742c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741e:	d103      	bne.n	8007428 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007426:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e079      	b.n	8007520 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007434:	d108      	bne.n	8007448 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007436:	897b      	ldrh	r3, [r7, #10]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	b2da      	uxtb	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	611a      	str	r2, [r3, #16]
 8007446:	e05f      	b.n	8007508 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007448:	897b      	ldrh	r3, [r7, #10]
 800744a:	11db      	asrs	r3, r3, #7
 800744c:	b2db      	uxtb	r3, r3
 800744e:	f003 0306 	and.w	r3, r3, #6
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f063 030f 	orn	r3, r3, #15
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4930      	ldr	r1, [pc, #192]	; (8007528 <I2C_MasterRequestRead+0x194>)
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fa5a 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e054      	b.n	8007520 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007476:	897b      	ldrh	r3, [r7, #10]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	4929      	ldr	r1, [pc, #164]	; (800752c <I2C_MasterRequestRead+0x198>)
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 fa4a 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e044      	b.n	8007520 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f9af 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00d      	beq.n	80074f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e2:	d103      	bne.n	80074ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e017      	b.n	8007520 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80074f0:	897b      	ldrh	r3, [r7, #10]
 80074f2:	11db      	asrs	r3, r3, #7
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	f003 0306 	and.w	r3, r3, #6
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f063 030e 	orn	r3, r3, #14
 8007500:	b2da      	uxtb	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	4907      	ldr	r1, [pc, #28]	; (800752c <I2C_MasterRequestRead+0x198>)
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 fa06 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	00010008 	.word	0x00010008
 800752c:	00010002 	.word	0x00010002

08007530 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	4603      	mov	r3, r0
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	460b      	mov	r3, r1
 8007544:	813b      	strh	r3, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	2200      	movs	r2, #0
 8007562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f960 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00d      	beq.n	800758e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007580:	d103      	bne.n	800758a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e05f      	b.n	800764e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800758e:	897b      	ldrh	r3, [r7, #10]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800759c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	6a3a      	ldr	r2, [r7, #32]
 80075a2:	492d      	ldr	r1, [pc, #180]	; (8007658 <I2C_RequestMemoryWrite+0x128>)
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f9bb 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e04c      	b.n	800764e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075cc:	6a39      	ldr	r1, [r7, #32]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fa46 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00d      	beq.n	80075f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d107      	bne.n	80075f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e02b      	b.n	800764e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d105      	bne.n	8007608 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075fc:	893b      	ldrh	r3, [r7, #8]
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	611a      	str	r2, [r3, #16]
 8007606:	e021      	b.n	800764c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007608:	893b      	ldrh	r3, [r7, #8]
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b29b      	uxth	r3, r3
 800760e:	b2da      	uxtb	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007618:	6a39      	ldr	r1, [r7, #32]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fa20 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00d      	beq.n	8007642 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	2b04      	cmp	r3, #4
 800762c:	d107      	bne.n	800763e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800763c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e005      	b.n	800764e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007642:	893b      	ldrh	r3, [r7, #8]
 8007644:	b2da      	uxtb	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	00010002 	.word	0x00010002

0800765c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	461a      	mov	r2, r3
 800766a:	4603      	mov	r3, r0
 800766c:	817b      	strh	r3, [r7, #10]
 800766e:	460b      	mov	r3, r1
 8007670:	813b      	strh	r3, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007684:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	2200      	movs	r2, #0
 800769e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f8c2 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00d      	beq.n	80076ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076bc:	d103      	bne.n	80076c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e0aa      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ca:	897b      	ldrh	r3, [r7, #10]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	6a3a      	ldr	r2, [r7, #32]
 80076de:	4952      	ldr	r1, [pc, #328]	; (8007828 <I2C_RequestMemoryRead+0x1cc>)
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f91d 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e097      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007708:	6a39      	ldr	r1, [r7, #32]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f9a8 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	2b04      	cmp	r3, #4
 800771c:	d107      	bne.n	800772e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800772c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e076      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d105      	bne.n	8007744 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007738:	893b      	ldrh	r3, [r7, #8]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	611a      	str	r2, [r3, #16]
 8007742:	e021      	b.n	8007788 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007744:	893b      	ldrh	r3, [r7, #8]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	b2da      	uxtb	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007754:	6a39      	ldr	r1, [r7, #32]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f982 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	2b04      	cmp	r3, #4
 8007768:	d107      	bne.n	800777a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e050      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778a:	6a39      	ldr	r1, [r7, #32]
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f967 	bl	8007a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00d      	beq.n	80077b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	2b04      	cmp	r3, #4
 800779e:	d107      	bne.n	80077b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e035      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f82b 	bl	800782c <I2C_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00d      	beq.n	80077f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ea:	d103      	bne.n	80077f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e013      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077f8:	897b      	ldrh	r3, [r7, #10]
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	b2da      	uxtb	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	6a3a      	ldr	r2, [r7, #32]
 800780c:	4906      	ldr	r1, [pc, #24]	; (8007828 <I2C_RequestMemoryRead+0x1cc>)
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 f886 	bl	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	00010002 	.word	0x00010002

0800782c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	4613      	mov	r3, r2
 800783a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800783c:	e048      	b.n	80078d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007844:	d044      	beq.n	80078d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007846:	f7fd fc6d 	bl	8005124 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d302      	bcc.n	800785c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d139      	bne.n	80078d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	0c1b      	lsrs	r3, r3, #16
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b01      	cmp	r3, #1
 8007864:	d10d      	bne.n	8007882 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	43da      	mvns	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4013      	ands	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	e00c      	b.n	800789c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	43da      	mvns	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d116      	bne.n	80078d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e023      	b.n	8007918 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d10d      	bne.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	43da      	mvns	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	e00c      	b.n	8007910 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	43da      	mvns	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4013      	ands	r3, r2
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	429a      	cmp	r2, r3
 8007914:	d093      	beq.n	800783e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800792e:	e071      	b.n	8007a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800793a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800793e:	d123      	bne.n	8007988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800794e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	f043 0204 	orr.w	r2, r3, #4
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e067      	b.n	8007a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d041      	beq.n	8007a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007990:	f7fd fbc8 	bl	8005124 <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d136      	bne.n	8007a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	0c1b      	lsrs	r3, r3, #16
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10c      	bne.n	80079ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	43da      	mvns	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	4013      	ands	r3, r2
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bf14      	ite	ne
 80079c2:	2301      	movne	r3, #1
 80079c4:	2300      	moveq	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	e00b      	b.n	80079e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	43da      	mvns	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	4013      	ands	r3, r2
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d016      	beq.n	8007a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	f043 0220 	orr.w	r2, r3, #32
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e021      	b.n	8007a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	0c1b      	lsrs	r3, r3, #16
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d10c      	bne.n	8007a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	43da      	mvns	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e00b      	b.n	8007a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	43da      	mvns	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4013      	ands	r3, r2
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf14      	ite	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	2300      	moveq	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f47f af6d 	bne.w	8007930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a6c:	e034      	b.n	8007ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f8e3 	bl	8007c3a <I2C_IsAcknowledgeFailed>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e034      	b.n	8007ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d028      	beq.n	8007ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a86:	f7fd fb4d 	bl	8005124 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d302      	bcc.n	8007a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d11d      	bne.n	8007ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d016      	beq.n	8007ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	f043 0220 	orr.w	r2, r3, #32
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e007      	b.n	8007ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae2:	2b80      	cmp	r3, #128	; 0x80
 8007ae4:	d1c3      	bne.n	8007a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007afc:	e034      	b.n	8007b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 f89b 	bl	8007c3a <I2C_IsAcknowledgeFailed>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e034      	b.n	8007b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d028      	beq.n	8007b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b16:	f7fd fb05 	bl	8005124 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11d      	bne.n	8007b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d016      	beq.n	8007b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	f043 0220 	orr.w	r2, r3, #32
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e007      	b.n	8007b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d1c3      	bne.n	8007afe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b8c:	e049      	b.n	8007c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	f003 0310 	and.w	r3, r3, #16
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d119      	bne.n	8007bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0210 	mvn.w	r2, #16
 8007ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e030      	b.n	8007c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd0:	f7fd faa8 	bl	8005124 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d302      	bcc.n	8007be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d11d      	bne.n	8007c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d016      	beq.n	8007c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f043 0220 	orr.w	r2, r3, #32
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e007      	b.n	8007c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d1ae      	bne.n	8007b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c50:	d11b      	bne.n	8007c8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f043 0204 	orr.w	r2, r3, #4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e267      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d075      	beq.n	8007da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cb6:	4b88      	ldr	r3, [pc, #544]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 030c 	and.w	r3, r3, #12
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d00c      	beq.n	8007cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cc2:	4b85      	ldr	r3, [pc, #532]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d112      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cce:	4b82      	ldr	r3, [pc, #520]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cda:	d10b      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cdc:	4b7e      	ldr	r3, [pc, #504]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d05b      	beq.n	8007da0 <HAL_RCC_OscConfig+0x108>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d157      	bne.n	8007da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e242      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfc:	d106      	bne.n	8007d0c <HAL_RCC_OscConfig+0x74>
 8007cfe:	4b76      	ldr	r3, [pc, #472]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a75      	ldr	r2, [pc, #468]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	e01d      	b.n	8007d48 <HAL_RCC_OscConfig+0xb0>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d14:	d10c      	bne.n	8007d30 <HAL_RCC_OscConfig+0x98>
 8007d16:	4b70      	ldr	r3, [pc, #448]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a6f      	ldr	r2, [pc, #444]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	4b6d      	ldr	r3, [pc, #436]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a6c      	ldr	r2, [pc, #432]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	e00b      	b.n	8007d48 <HAL_RCC_OscConfig+0xb0>
 8007d30:	4b69      	ldr	r3, [pc, #420]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a68      	ldr	r2, [pc, #416]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	4b66      	ldr	r3, [pc, #408]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a65      	ldr	r2, [pc, #404]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d013      	beq.n	8007d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d50:	f7fd f9e8 	bl	8005124 <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d58:	f7fd f9e4 	bl	8005124 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b64      	cmp	r3, #100	; 0x64
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e207      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d6a:	4b5b      	ldr	r3, [pc, #364]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f0      	beq.n	8007d58 <HAL_RCC_OscConfig+0xc0>
 8007d76:	e014      	b.n	8007da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d78:	f7fd f9d4 	bl	8005124 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d80:	f7fd f9d0 	bl	8005124 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b64      	cmp	r3, #100	; 0x64
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e1f3      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d92:	4b51      	ldr	r3, [pc, #324]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f0      	bne.n	8007d80 <HAL_RCC_OscConfig+0xe8>
 8007d9e:	e000      	b.n	8007da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d063      	beq.n	8007e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dae:	4b4a      	ldr	r3, [pc, #296]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 030c 	and.w	r3, r3, #12
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dba:	4b47      	ldr	r3, [pc, #284]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d11c      	bne.n	8007e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dc6:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d116      	bne.n	8007e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dd2:	4b41      	ldr	r3, [pc, #260]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_RCC_OscConfig+0x152>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d001      	beq.n	8007dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e1c7      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dea:	4b3b      	ldr	r3, [pc, #236]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4937      	ldr	r1, [pc, #220]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfe:	e03a      	b.n	8007e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d020      	beq.n	8007e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e08:	4b34      	ldr	r3, [pc, #208]	; (8007edc <HAL_RCC_OscConfig+0x244>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0e:	f7fd f989 	bl	8005124 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e16:	f7fd f985 	bl	8005124 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e1a8      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e28:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f0      	beq.n	8007e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e34:	4b28      	ldr	r3, [pc, #160]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	4925      	ldr	r1, [pc, #148]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	600b      	str	r3, [r1, #0]
 8007e48:	e015      	b.n	8007e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <HAL_RCC_OscConfig+0x244>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e50:	f7fd f968 	bl	8005124 <HAL_GetTick>
 8007e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e58:	f7fd f964 	bl	8005124 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e187      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f0      	bne.n	8007e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d036      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d016      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e8a:	4b15      	ldr	r3, [pc, #84]	; (8007ee0 <HAL_RCC_OscConfig+0x248>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e90:	f7fd f948 	bl	8005124 <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e98:	f7fd f944 	bl	8005124 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e167      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <HAL_RCC_OscConfig+0x240>)
 8007eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCC_OscConfig+0x200>
 8007eb6:	e01b      	b.n	8007ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <HAL_RCC_OscConfig+0x248>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ebe:	f7fd f931 	bl	8005124 <HAL_GetTick>
 8007ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec4:	e00e      	b.n	8007ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ec6:	f7fd f92d 	bl	8005124 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d907      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e150      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	42470000 	.word	0x42470000
 8007ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee4:	4b88      	ldr	r3, [pc, #544]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1ea      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8097 	beq.w	800802c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f02:	4b81      	ldr	r3, [pc, #516]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10f      	bne.n	8007f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	4b7d      	ldr	r3, [pc, #500]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	4a7c      	ldr	r2, [pc, #496]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f1e:	4b7a      	ldr	r3, [pc, #488]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f2e:	4b77      	ldr	r3, [pc, #476]	; (800810c <HAL_RCC_OscConfig+0x474>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d118      	bne.n	8007f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f3a:	4b74      	ldr	r3, [pc, #464]	; (800810c <HAL_RCC_OscConfig+0x474>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a73      	ldr	r2, [pc, #460]	; (800810c <HAL_RCC_OscConfig+0x474>)
 8007f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f46:	f7fd f8ed 	bl	8005124 <HAL_GetTick>
 8007f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4c:	e008      	b.n	8007f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f4e:	f7fd f8e9 	bl	8005124 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e10c      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f60:	4b6a      	ldr	r3, [pc, #424]	; (800810c <HAL_RCC_OscConfig+0x474>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0f0      	beq.n	8007f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d106      	bne.n	8007f82 <HAL_RCC_OscConfig+0x2ea>
 8007f74:	4b64      	ldr	r3, [pc, #400]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f78:	4a63      	ldr	r2, [pc, #396]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f80:	e01c      	b.n	8007fbc <HAL_RCC_OscConfig+0x324>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d10c      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x30c>
 8007f8a:	4b5f      	ldr	r3, [pc, #380]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	4a5e      	ldr	r2, [pc, #376]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f90:	f043 0304 	orr.w	r3, r3, #4
 8007f94:	6713      	str	r3, [r2, #112]	; 0x70
 8007f96:	4b5c      	ldr	r3, [pc, #368]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9a:	4a5b      	ldr	r2, [pc, #364]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007f9c:	f043 0301 	orr.w	r3, r3, #1
 8007fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa2:	e00b      	b.n	8007fbc <HAL_RCC_OscConfig+0x324>
 8007fa4:	4b58      	ldr	r3, [pc, #352]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	4a57      	ldr	r2, [pc, #348]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb0:	4b55      	ldr	r3, [pc, #340]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb4:	4a54      	ldr	r2, [pc, #336]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007fb6:	f023 0304 	bic.w	r3, r3, #4
 8007fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d015      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc4:	f7fd f8ae 	bl	8005124 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fca:	e00a      	b.n	8007fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fcc:	f7fd f8aa 	bl	8005124 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e0cb      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe2:	4b49      	ldr	r3, [pc, #292]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0ee      	beq.n	8007fcc <HAL_RCC_OscConfig+0x334>
 8007fee:	e014      	b.n	800801a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff0:	f7fd f898 	bl	8005124 <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff6:	e00a      	b.n	800800e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff8:	f7fd f894 	bl	8005124 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f241 3288 	movw	r2, #5000	; 0x1388
 8008006:	4293      	cmp	r3, r2
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e0b5      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800800e:	4b3e      	ldr	r3, [pc, #248]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1ee      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d105      	bne.n	800802c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008020:	4b39      	ldr	r3, [pc, #228]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	4a38      	ldr	r2, [pc, #224]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8008026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800802a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80a1 	beq.w	8008178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008036:	4b34      	ldr	r3, [pc, #208]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 030c 	and.w	r3, r3, #12
 800803e:	2b08      	cmp	r3, #8
 8008040:	d05c      	beq.n	80080fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	2b02      	cmp	r3, #2
 8008048:	d141      	bne.n	80080ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800804a:	4b31      	ldr	r3, [pc, #196]	; (8008110 <HAL_RCC_OscConfig+0x478>)
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008050:	f7fd f868 	bl	8005124 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008058:	f7fd f864 	bl	8005124 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e087      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806a:	4b27      	ldr	r3, [pc, #156]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f0      	bne.n	8008058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	69da      	ldr	r2, [r3, #28]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	431a      	orrs	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	019b      	lsls	r3, r3, #6
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	085b      	lsrs	r3, r3, #1
 800808e:	3b01      	subs	r3, #1
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	061b      	lsls	r3, r3, #24
 800809a:	491b      	ldr	r1, [pc, #108]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 800809c:	4313      	orrs	r3, r2
 800809e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080a0:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <HAL_RCC_OscConfig+0x478>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a6:	f7fd f83d 	bl	8005124 <HAL_GetTick>
 80080aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ae:	f7fd f839 	bl	8005124 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e05c      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c0:	4b11      	ldr	r3, [pc, #68]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_RCC_OscConfig+0x416>
 80080cc:	e054      	b.n	8008178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ce:	4b10      	ldr	r3, [pc, #64]	; (8008110 <HAL_RCC_OscConfig+0x478>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d4:	f7fd f826 	bl	8005124 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080dc:	f7fd f822 	bl	8005124 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e045      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <HAL_RCC_OscConfig+0x470>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f0      	bne.n	80080dc <HAL_RCC_OscConfig+0x444>
 80080fa:	e03d      	b.n	8008178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d107      	bne.n	8008114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e038      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
 8008108:	40023800 	.word	0x40023800
 800810c:	40007000 	.word	0x40007000
 8008110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <HAL_RCC_OscConfig+0x4ec>)
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d028      	beq.n	8008174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800812c:	429a      	cmp	r2, r3
 800812e:	d121      	bne.n	8008174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800813a:	429a      	cmp	r2, r3
 800813c:	d11a      	bne.n	8008174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008144:	4013      	ands	r3, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800814a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800814c:	4293      	cmp	r3, r2
 800814e:	d111      	bne.n	8008174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	085b      	lsrs	r3, r3, #1
 800815c:	3b01      	subs	r3, #1
 800815e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008160:	429a      	cmp	r2, r3
 8008162:	d107      	bne.n	8008174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008170:	429a      	cmp	r2, r3
 8008172:	d001      	beq.n	8008178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e000      	b.n	800817a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800

08008188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0cc      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800819c:	4b68      	ldr	r3, [pc, #416]	; (8008340 <HAL_RCC_ClockConfig+0x1b8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d90c      	bls.n	80081c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081aa:	4b65      	ldr	r3, [pc, #404]	; (8008340 <HAL_RCC_ClockConfig+0x1b8>)
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b2:	4b63      	ldr	r3, [pc, #396]	; (8008340 <HAL_RCC_ClockConfig+0x1b8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d001      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e0b8      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d020      	beq.n	8008212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081dc:	4b59      	ldr	r3, [pc, #356]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	4a58      	ldr	r2, [pc, #352]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80081e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d005      	beq.n	8008200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081f4:	4b53      	ldr	r3, [pc, #332]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	4a52      	ldr	r2, [pc, #328]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008200:	4b50      	ldr	r3, [pc, #320]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	494d      	ldr	r1, [pc, #308]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 800820e:	4313      	orrs	r3, r2
 8008210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d044      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d107      	bne.n	8008236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008226:	4b47      	ldr	r3, [pc, #284]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d119      	bne.n	8008266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e07f      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d003      	beq.n	8008246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008242:	2b03      	cmp	r3, #3
 8008244:	d107      	bne.n	8008256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008246:	4b3f      	ldr	r3, [pc, #252]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d109      	bne.n	8008266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e06f      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008256:	4b3b      	ldr	r3, [pc, #236]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e067      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008266:	4b37      	ldr	r3, [pc, #220]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f023 0203 	bic.w	r2, r3, #3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	4934      	ldr	r1, [pc, #208]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008274:	4313      	orrs	r3, r2
 8008276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008278:	f7fc ff54 	bl	8005124 <HAL_GetTick>
 800827c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827e:	e00a      	b.n	8008296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008280:	f7fc ff50 	bl	8005124 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	f241 3288 	movw	r2, #5000	; 0x1388
 800828e:	4293      	cmp	r3, r2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e04f      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008296:	4b2b      	ldr	r3, [pc, #172]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 020c 	and.w	r2, r3, #12
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d1eb      	bne.n	8008280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082a8:	4b25      	ldr	r3, [pc, #148]	; (8008340 <HAL_RCC_ClockConfig+0x1b8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d20c      	bcs.n	80082d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b6:	4b22      	ldr	r3, [pc, #136]	; (8008340 <HAL_RCC_ClockConfig+0x1b8>)
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082be:	4b20      	ldr	r3, [pc, #128]	; (8008340 <HAL_RCC_ClockConfig+0x1b8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d001      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e032      	b.n	8008336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082dc:	4b19      	ldr	r3, [pc, #100]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4916      	ldr	r1, [pc, #88]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	490e      	ldr	r1, [pc, #56]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 800830a:	4313      	orrs	r3, r2
 800830c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800830e:	f000 f821 	bl	8008354 <HAL_RCC_GetSysClockFreq>
 8008312:	4602      	mov	r2, r0
 8008314:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <HAL_RCC_ClockConfig+0x1bc>)
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	091b      	lsrs	r3, r3, #4
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	490a      	ldr	r1, [pc, #40]	; (8008348 <HAL_RCC_ClockConfig+0x1c0>)
 8008320:	5ccb      	ldrb	r3, [r1, r3]
 8008322:	fa22 f303 	lsr.w	r3, r2, r3
 8008326:	4a09      	ldr	r2, [pc, #36]	; (800834c <HAL_RCC_ClockConfig+0x1c4>)
 8008328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <HAL_RCC_ClockConfig+0x1c8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f7fc feb4 	bl	800509c <HAL_InitTick>

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40023c00 	.word	0x40023c00
 8008344:	40023800 	.word	0x40023800
 8008348:	080154a4 	.word	0x080154a4
 800834c:	20000020 	.word	0x20000020
 8008350:	20000024 	.word	0x20000024

08008354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008358:	b094      	sub	sp, #80	; 0x50
 800835a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	647b      	str	r3, [r7, #68]	; 0x44
 8008360:	2300      	movs	r3, #0
 8008362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008364:	2300      	movs	r3, #0
 8008366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800836c:	4b79      	ldr	r3, [pc, #484]	; (8008554 <HAL_RCC_GetSysClockFreq+0x200>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 030c 	and.w	r3, r3, #12
 8008374:	2b08      	cmp	r3, #8
 8008376:	d00d      	beq.n	8008394 <HAL_RCC_GetSysClockFreq+0x40>
 8008378:	2b08      	cmp	r3, #8
 800837a:	f200 80e1 	bhi.w	8008540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_RCC_GetSysClockFreq+0x34>
 8008382:	2b04      	cmp	r3, #4
 8008384:	d003      	beq.n	800838e <HAL_RCC_GetSysClockFreq+0x3a>
 8008386:	e0db      	b.n	8008540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008388:	4b73      	ldr	r3, [pc, #460]	; (8008558 <HAL_RCC_GetSysClockFreq+0x204>)
 800838a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800838c:	e0db      	b.n	8008546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800838e:	4b73      	ldr	r3, [pc, #460]	; (800855c <HAL_RCC_GetSysClockFreq+0x208>)
 8008390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008392:	e0d8      	b.n	8008546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008394:	4b6f      	ldr	r3, [pc, #444]	; (8008554 <HAL_RCC_GetSysClockFreq+0x200>)
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800839c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800839e:	4b6d      	ldr	r3, [pc, #436]	; (8008554 <HAL_RCC_GetSysClockFreq+0x200>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d063      	beq.n	8008472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083aa:	4b6a      	ldr	r3, [pc, #424]	; (8008554 <HAL_RCC_GetSysClockFreq+0x200>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	099b      	lsrs	r3, r3, #6
 80083b0:	2200      	movs	r2, #0
 80083b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80083b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083bc:	633b      	str	r3, [r7, #48]	; 0x30
 80083be:	2300      	movs	r3, #0
 80083c0:	637b      	str	r3, [r7, #52]	; 0x34
 80083c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80083c6:	4622      	mov	r2, r4
 80083c8:	462b      	mov	r3, r5
 80083ca:	f04f 0000 	mov.w	r0, #0
 80083ce:	f04f 0100 	mov.w	r1, #0
 80083d2:	0159      	lsls	r1, r3, #5
 80083d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083d8:	0150      	lsls	r0, r2, #5
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4621      	mov	r1, r4
 80083e0:	1a51      	subs	r1, r2, r1
 80083e2:	6139      	str	r1, [r7, #16]
 80083e4:	4629      	mov	r1, r5
 80083e6:	eb63 0301 	sbc.w	r3, r3, r1
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083f8:	4659      	mov	r1, fp
 80083fa:	018b      	lsls	r3, r1, #6
 80083fc:	4651      	mov	r1, sl
 80083fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008402:	4651      	mov	r1, sl
 8008404:	018a      	lsls	r2, r1, #6
 8008406:	4651      	mov	r1, sl
 8008408:	ebb2 0801 	subs.w	r8, r2, r1
 800840c:	4659      	mov	r1, fp
 800840e:	eb63 0901 	sbc.w	r9, r3, r1
 8008412:	f04f 0200 	mov.w	r2, #0
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800841e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008426:	4690      	mov	r8, r2
 8008428:	4699      	mov	r9, r3
 800842a:	4623      	mov	r3, r4
 800842c:	eb18 0303 	adds.w	r3, r8, r3
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	462b      	mov	r3, r5
 8008434:	eb49 0303 	adc.w	r3, r9, r3
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008446:	4629      	mov	r1, r5
 8008448:	024b      	lsls	r3, r1, #9
 800844a:	4621      	mov	r1, r4
 800844c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008450:	4621      	mov	r1, r4
 8008452:	024a      	lsls	r2, r1, #9
 8008454:	4610      	mov	r0, r2
 8008456:	4619      	mov	r1, r3
 8008458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845a:	2200      	movs	r2, #0
 800845c:	62bb      	str	r3, [r7, #40]	; 0x28
 800845e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008464:	f7f8 fc10 	bl	8000c88 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4613      	mov	r3, r2
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008470:	e058      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008472:	4b38      	ldr	r3, [pc, #224]	; (8008554 <HAL_RCC_GetSysClockFreq+0x200>)
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	099b      	lsrs	r3, r3, #6
 8008478:	2200      	movs	r2, #0
 800847a:	4618      	mov	r0, r3
 800847c:	4611      	mov	r1, r2
 800847e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008482:	623b      	str	r3, [r7, #32]
 8008484:	2300      	movs	r3, #0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
 8008488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800848c:	4642      	mov	r2, r8
 800848e:	464b      	mov	r3, r9
 8008490:	f04f 0000 	mov.w	r0, #0
 8008494:	f04f 0100 	mov.w	r1, #0
 8008498:	0159      	lsls	r1, r3, #5
 800849a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800849e:	0150      	lsls	r0, r2, #5
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4641      	mov	r1, r8
 80084a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80084aa:	4649      	mov	r1, r9
 80084ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80084bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80084c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80084c4:	ebb2 040a 	subs.w	r4, r2, sl
 80084c8:	eb63 050b 	sbc.w	r5, r3, fp
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	f04f 0300 	mov.w	r3, #0
 80084d4:	00eb      	lsls	r3, r5, #3
 80084d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084da:	00e2      	lsls	r2, r4, #3
 80084dc:	4614      	mov	r4, r2
 80084de:	461d      	mov	r5, r3
 80084e0:	4643      	mov	r3, r8
 80084e2:	18e3      	adds	r3, r4, r3
 80084e4:	603b      	str	r3, [r7, #0]
 80084e6:	464b      	mov	r3, r9
 80084e8:	eb45 0303 	adc.w	r3, r5, r3
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	f04f 0300 	mov.w	r3, #0
 80084f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084fa:	4629      	mov	r1, r5
 80084fc:	028b      	lsls	r3, r1, #10
 80084fe:	4621      	mov	r1, r4
 8008500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008504:	4621      	mov	r1, r4
 8008506:	028a      	lsls	r2, r1, #10
 8008508:	4610      	mov	r0, r2
 800850a:	4619      	mov	r1, r3
 800850c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850e:	2200      	movs	r2, #0
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	61fa      	str	r2, [r7, #28]
 8008514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008518:	f7f8 fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4613      	mov	r3, r2
 8008522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008524:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <HAL_RCC_GetSysClockFreq+0x200>)
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	0c1b      	lsrs	r3, r3, #16
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	3301      	adds	r3, #1
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800853e:	e002      	b.n	8008546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008540:	4b05      	ldr	r3, [pc, #20]	; (8008558 <HAL_RCC_GetSysClockFreq+0x204>)
 8008542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008548:	4618      	mov	r0, r3
 800854a:	3750      	adds	r7, #80	; 0x50
 800854c:	46bd      	mov	sp, r7
 800854e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008552:	bf00      	nop
 8008554:	40023800 	.word	0x40023800
 8008558:	00f42400 	.word	0x00f42400
 800855c:	007a1200 	.word	0x007a1200

08008560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008564:	4b03      	ldr	r3, [pc, #12]	; (8008574 <HAL_RCC_GetHCLKFreq+0x14>)
 8008566:	681b      	ldr	r3, [r3, #0]
}
 8008568:	4618      	mov	r0, r3
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000020 	.word	0x20000020

08008578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800857c:	f7ff fff0 	bl	8008560 <HAL_RCC_GetHCLKFreq>
 8008580:	4602      	mov	r2, r0
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	0a9b      	lsrs	r3, r3, #10
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	4903      	ldr	r1, [pc, #12]	; (800859c <HAL_RCC_GetPCLK1Freq+0x24>)
 800858e:	5ccb      	ldrb	r3, [r1, r3]
 8008590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008594:	4618      	mov	r0, r3
 8008596:	bd80      	pop	{r7, pc}
 8008598:	40023800 	.word	0x40023800
 800859c:	080154b4 	.word	0x080154b4

080085a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80085a4:	f7ff ffdc 	bl	8008560 <HAL_RCC_GetHCLKFreq>
 80085a8:	4602      	mov	r2, r0
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	0b5b      	lsrs	r3, r3, #13
 80085b0:	f003 0307 	and.w	r3, r3, #7
 80085b4:	4903      	ldr	r1, [pc, #12]	; (80085c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085b6:	5ccb      	ldrb	r3, [r1, r3]
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085bc:	4618      	mov	r0, r3
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40023800 	.word	0x40023800
 80085c4:	080154b4 	.word	0x080154b4

080085c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e022      	b.n	8008620 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d105      	bne.n	80085f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fb fe9d 	bl	800432c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2203      	movs	r2, #3
 80085f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f814 	bl	8008628 <HAL_SD_InitCard>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e00a      	b.n	8008620 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008628:	b5b0      	push	{r4, r5, r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af04      	add	r7, sp, #16
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008630:	2300      	movs	r3, #0
 8008632:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008638:	2300      	movs	r3, #0
 800863a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008640:	2300      	movs	r3, #0
 8008642:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008644:	2376      	movs	r3, #118	; 0x76
 8008646:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681d      	ldr	r5, [r3, #0]
 800864c:	466c      	mov	r4, sp
 800864e:	f107 0314 	add.w	r3, r7, #20
 8008652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800865a:	f107 0308 	add.w	r3, r7, #8
 800865e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008660:	4628      	mov	r0, r5
 8008662:	f002 fd4f 	bl	800b104 <SDIO_Init>
 8008666:	4603      	mov	r3, r0
 8008668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800866c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e04f      	b.n	8008718 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008678:	4b29      	ldr	r3, [pc, #164]	; (8008720 <HAL_SD_InitCard+0xf8>)
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f002 fd87 	bl	800b196 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008688:	4b25      	ldr	r3, [pc, #148]	; (8008720 <HAL_SD_InitCard+0xf8>)
 800868a:	2201      	movs	r2, #1
 800868c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800868e:	2002      	movs	r0, #2
 8008690:	f7fc fd54 	bl	800513c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 f877 	bl	8009788 <SD_PowerON>
 800869a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00b      	beq.n	80086ba <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2201      	movs	r2, #1
 80086a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	431a      	orrs	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e02e      	b.n	8008718 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 ff96 	bl	80095ec <SD_InitCard>
 80086c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e01b      	b.n	8008718 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80086e8:	4618      	mov	r0, r3
 80086ea:	f002 fde6 	bl	800b2ba <SDMMC_CmdBlockLength>
 80086ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <HAL_SD_InitCard+0xfc>)
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	; 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bdb0      	pop	{r4, r5, r7, pc}
 8008720:	422580a0 	.word	0x422580a0
 8008724:	004005ff 	.word	0x004005ff

08008728 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b092      	sub	sp, #72	; 0x48
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008736:	f7fc fcf5 	bl	8005124 <HAL_GetTick>
 800873a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d107      	bne.n	800875a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e1c5      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b01      	cmp	r3, #1
 8008764:	f040 81b8 	bne.w	8008ad8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800876e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	441a      	add	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008778:	429a      	cmp	r2, r3
 800877a:	d907      	bls.n	800878c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e1ac      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2203      	movs	r2, #3
 8008790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2200      	movs	r2, #0
 800879a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d002      	beq.n	80087aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	025b      	lsls	r3, r3, #9
 80087a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295
 80087ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	025b      	lsls	r3, r3, #9
 80087b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80087b6:	2390      	movs	r3, #144	; 0x90
 80087b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80087ba:	2302      	movs	r3, #2
 80087bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087be:	2300      	movs	r3, #0
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f107 0214 	add.w	r2, r7, #20
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f002 fd46 	bl	800b262 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d90a      	bls.n	80087f2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2202      	movs	r2, #2
 80087e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 fdaa 	bl	800b342 <SDMMC_CmdReadMultiBlock>
 80087ee:	6478      	str	r0, [r7, #68]	; 0x44
 80087f0:	e009      	b.n	8008806 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087fe:	4618      	mov	r0, r3
 8008800:	f002 fd7d 	bl	800b2fe <SDMMC_CmdReadSingleBlock>
 8008804:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008808:	2b00      	cmp	r3, #0
 800880a:	d012      	beq.n	8008832 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a7e      	ldr	r2, [pc, #504]	; (8008a0c <HAL_SD_ReadBlocks+0x2e4>)
 8008812:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800881a:	431a      	orrs	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e159      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008836:	e061      	b.n	80088fc <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d03c      	beq.n	80088c0 <HAL_SD_ReadBlocks+0x198>
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d039      	beq.n	80088c0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800884c:	2300      	movs	r3, #0
 800884e:	643b      	str	r3, [r7, #64]	; 0x40
 8008850:	e033      	b.n	80088ba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4618      	mov	r0, r3
 8008858:	f002 fc7f 	bl	800b15a <SDIO_ReadFIFO>
 800885c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800885e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008860:	b2da      	uxtb	r2, r3
 8008862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008864:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	3301      	adds	r3, #1
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800886c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886e:	3b01      	subs	r3, #1
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	0a1b      	lsrs	r3, r3, #8
 8008876:	b2da      	uxtb	r2, r3
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	3301      	adds	r3, #1
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008884:	3b01      	subs	r3, #1
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	0c1b      	lsrs	r3, r3, #16
 800888c:	b2da      	uxtb	r2, r3
 800888e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008890:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	3301      	adds	r3, #1
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889a:	3b01      	subs	r3, #1
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	0e1b      	lsrs	r3, r3, #24
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088aa:	3301      	adds	r3, #1
 80088ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b0:	3b01      	subs	r3, #1
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80088b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088b6:	3301      	adds	r3, #1
 80088b8:	643b      	str	r3, [r7, #64]	; 0x40
 80088ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088bc:	2b07      	cmp	r3, #7
 80088be:	d9c8      	bls.n	8008852 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80088c0:	f7fc fc30 	bl	8005124 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d902      	bls.n	80088d6 <HAL_SD_ReadBlocks+0x1ae>
 80088d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d112      	bne.n	80088fc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a4c      	ldr	r2, [pc, #304]	; (8008a0c <HAL_SD_ReadBlocks+0x2e4>)
 80088dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e0f4      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008902:	f240 332a 	movw	r3, #810	; 0x32a
 8008906:	4013      	ands	r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d095      	beq.n	8008838 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d022      	beq.n	8008960 <HAL_SD_ReadBlocks+0x238>
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d91f      	bls.n	8008960 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008924:	2b03      	cmp	r3, #3
 8008926:	d01b      	beq.n	8008960 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f002 fd6f 	bl	800b410 <SDMMC_CmdStopTransfer>
 8008932:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008936:	2b00      	cmp	r3, #0
 8008938:	d012      	beq.n	8008960 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a33      	ldr	r2, [pc, #204]	; (8008a0c <HAL_SD_ReadBlocks+0x2e4>)
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008948:	431a      	orrs	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e0c2      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <HAL_SD_ReadBlocks+0x254>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008978:	2b00      	cmp	r3, #0
 800897a:	d012      	beq.n	80089a2 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a22      	ldr	r2, [pc, #136]	; (8008a0c <HAL_SD_ReadBlocks+0x2e4>)
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	f043 0208 	orr.w	r2, r3, #8
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e0a1      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d012      	beq.n	80089d6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <HAL_SD_ReadBlocks+0x2e4>)
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	f043 0202 	orr.w	r2, r3, #2
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e087      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089dc:	f003 0320 	and.w	r3, r3, #32
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d064      	beq.n	8008aae <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <HAL_SD_ReadBlocks+0x2e4>)
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	f043 0220 	orr.w	r2, r3, #32
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e06d      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
 8008a0a:	bf00      	nop
 8008a0c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f002 fba0 	bl	800b15a <SDIO_ReadFIFO>
 8008a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a26:	3301      	adds	r3, #1
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a38:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a42:	3b01      	subs	r3, #1
 8008a44:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a48:	0c1b      	lsrs	r3, r3, #16
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	3301      	adds	r3, #1
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	0e1b      	lsrs	r3, r3, #24
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a64:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a68:	3301      	adds	r3, #1
 8008a6a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a72:	f7fc fb57 	bl	8005124 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d902      	bls.n	8008a88 <HAL_SD_ReadBlocks+0x360>
 8008a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d112      	bne.n	8008aae <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a18      	ldr	r2, [pc, #96]	; (8008af0 <HAL_SD_ReadBlocks+0x3c8>)
 8008a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e01b      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <HAL_SD_ReadBlocks+0x39a>
 8008abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1a6      	bne.n	8008a10 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f240 523a 	movw	r2, #1338	; 0x53a
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e006      	b.n	8008ae6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008adc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
  }
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3748      	adds	r7, #72	; 0x48
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	004005ff 	.word	0x004005ff

08008af4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b092      	sub	sp, #72	; 0x48
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b02:	f7fc fb0f 	bl	8005124 <HAL_GetTick>
 8008b06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d107      	bne.n	8008b26 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e16d      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	f040 8160 	bne.w	8008df4 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	441a      	add	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d907      	bls.n	8008b58 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e154      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2200      	movs	r2, #0
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d002      	beq.n	8008b76 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	025b      	lsls	r3, r3, #9
 8008b74:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b76:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	025b      	lsls	r3, r3, #9
 8008b80:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008b82:	2390      	movs	r3, #144	; 0x90
 8008b84:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008b86:	2300      	movs	r3, #0
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f107 0218 	add.w	r2, r7, #24
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f002 fb60 	bl	800b262 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d90a      	bls.n	8008bbe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f002 fc08 	bl	800b3ca <SDMMC_CmdWriteMultiBlock>
 8008bba:	6478      	str	r0, [r7, #68]	; 0x44
 8008bbc:	e009      	b.n	8008bd2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2210      	movs	r2, #16
 8008bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f002 fbdb 	bl	800b386 <SDMMC_CmdWriteSingleBlock>
 8008bd0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d012      	beq.n	8008bfe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a8b      	ldr	r2, [pc, #556]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be6:	431a      	orrs	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e101      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008c02:	e065      	b.n	8008cd0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d040      	beq.n	8008c94 <HAL_SD_WriteBlocks+0x1a0>
 8008c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d03d      	beq.n	8008c94 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c1c:	e037      	b.n	8008c8e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	3301      	adds	r3, #1
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	021a      	lsls	r2, r3, #8
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	3301      	adds	r3, #1
 8008c40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c44:	3b01      	subs	r3, #1
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	041a      	lsls	r2, r3, #16
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c56:	3301      	adds	r3, #1
 8008c58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	061a      	lsls	r2, r3, #24
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	3301      	adds	r3, #1
 8008c70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	3b01      	subs	r3, #1
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f107 0214 	add.w	r2, r7, #20
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 fa76 	bl	800b174 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c90:	2b07      	cmp	r3, #7
 8008c92:	d9c4      	bls.n	8008c1e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008c94:	f7fc fa46 	bl	8005124 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d902      	bls.n	8008caa <HAL_SD_WriteBlocks+0x1b6>
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d112      	bne.n	8008cd0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a57      	ldr	r2, [pc, #348]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e098      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cd6:	f240 331a 	movw	r3, #794	; 0x31a
 8008cda:	4013      	ands	r3, r2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d091      	beq.n	8008c04 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d022      	beq.n	8008d34 <HAL_SD_WriteBlocks+0x240>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d91f      	bls.n	8008d34 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d01b      	beq.n	8008d34 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 fb85 	bl	800b410 <SDMMC_CmdStopTransfer>
 8008d06:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d012      	beq.n	8008d34 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a3e      	ldr	r2, [pc, #248]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e066      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d106      	bne.n	8008d50 <HAL_SD_WriteBlocks+0x25c>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d012      	beq.n	8008d76 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a2d      	ldr	r2, [pc, #180]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	f043 0208 	orr.w	r2, r3, #8
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e045      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d012      	beq.n	8008daa <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a20      	ldr	r2, [pc, #128]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	f043 0202 	orr.w	r2, r3, #2
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e02b      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d012      	beq.n	8008dde <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <HAL_SD_WriteBlocks+0x318>)
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	f043 0210 	orr.w	r2, r3, #16
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e011      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e006      	b.n	8008e02 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
  }
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3748      	adds	r7, #72	; 0x48
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	004005ff 	.word	0x004005ff

08008e10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d008      	beq.n	8008e3e <HAL_SD_IRQHandler+0x2e>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fd5c 	bl	80098f4 <SD_Read_IT>
 8008e3c:	e165      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 808f 	beq.w	8008f6c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8008e66:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008e6a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d039      	beq.n	8008efa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d104      	bne.n	8008e9a <HAL_SD_IRQHandler+0x8a>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f002 fab6 	bl	800b410 <SDMMC_CmdStopTransfer>
 8008ea4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d008      	beq.n	8008ebe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f92f 	bl	800911c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d104      	bne.n	8008eea <HAL_SD_IRQHandler+0xda>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f003 fb82 	bl	800c5f4 <HAL_SD_RxCpltCallback>
 8008ef0:	e10b      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f003 fb74 	bl	800c5e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ef8:	e107      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8102 	beq.w	800910a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d011      	beq.n	8008f34 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f002 fa7b 	bl	800b410 <SDMMC_CmdStopTransfer>
 8008f1a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d008      	beq.n	8008f34 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f8f4 	bl	800911c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f040 80e5 	bne.w	800910a <HAL_SD_IRQHandler+0x2fa>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f040 80df 	bne.w	800910a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0208 	bic.w	r2, r2, #8
 8008f5a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f003 fb3b 	bl	800c5e0 <HAL_SD_TxCpltCallback>
}
 8008f6a:	e0ce      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d008      	beq.n	8008f8c <HAL_SD_IRQHandler+0x17c>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fd06 	bl	8009996 <SD_Write_IT>
 8008f8a:	e0be      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f92:	f240 233a 	movw	r3, #570	; 0x23a
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80b6 	beq.w	800910a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb0:	f043 0202 	orr.w	r2, r3, #2
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	f043 0208 	orr.w	r2, r3, #8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	f043 0220 	orr.w	r2, r3, #32
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	f003 0310 	and.w	r3, r3, #16
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	f043 0210 	orr.w	r2, r3, #16
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800900c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	f043 0208 	orr.w	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f240 723a 	movw	r2, #1850	; 0x73a
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009038:	f023 0302 	bic.w	r3, r3, #2
 800903c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f002 f9e4 	bl	800b410 <SDMMC_CmdStopTransfer>
 8009048:	4602      	mov	r2, r0
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f855 	bl	800911c <HAL_SD_ErrorCallback>
}
 8009072:	e04a      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907a:	2b00      	cmp	r3, #0
 800907c:	d045      	beq.n	800910a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	d104      	bne.n	8009092 <HAL_SD_IRQHandler+0x282>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d011      	beq.n	80090b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009096:	4a1f      	ldr	r2, [pc, #124]	; (8009114 <HAL_SD_IRQHandler+0x304>)
 8009098:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fc fa88 	bl	80055b4 <HAL_DMA_Abort_IT>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d02f      	beq.n	800910a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fa2e 	bl	8009510 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80090b4:	e029      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <HAL_SD_IRQHandler+0x2ba>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ce:	4a12      	ldr	r2, [pc, #72]	; (8009118 <HAL_SD_IRQHandler+0x308>)
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fc fa6c 	bl	80055b4 <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d013      	beq.n	800910a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fa49 	bl	800957e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80090ec:	e00d      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f003 fa62 	bl	800c5cc <HAL_SD_AbortCallback>
}
 8009108:	e7ff      	b.n	800910a <HAL_SD_IRQHandler+0x2fa>
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	08009511 	.word	0x08009511
 8009118:	0800957f 	.word	0x0800957f

0800911c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800913e:	0f9b      	lsrs	r3, r3, #30
 8009140:	b2da      	uxtb	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914a:	0e9b      	lsrs	r3, r3, #26
 800914c:	b2db      	uxtb	r3, r3
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	b2da      	uxtb	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915c:	0e1b      	lsrs	r3, r3, #24
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	b2da      	uxtb	r2, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800916e:	0c1b      	lsrs	r3, r3, #16
 8009170:	b2da      	uxtb	r2, r3
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	b2da      	uxtb	r2, r3
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009186:	b2da      	uxtb	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009190:	0d1b      	lsrs	r3, r3, #20
 8009192:	b29a      	uxth	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800919c:	0c1b      	lsrs	r3, r3, #16
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ae:	0bdb      	lsrs	r3, r3, #15
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c0:	0b9b      	lsrs	r3, r3, #14
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d2:	0b5b      	lsrs	r3, r3, #13
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e4:	0b1b      	lsrs	r3, r3, #12
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2200      	movs	r2, #0
 80091f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d163      	bne.n	80092c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009204:	009a      	lsls	r2, r3, #2
 8009206:	f640 73fc 	movw	r3, #4092	; 0xffc
 800920a:	4013      	ands	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009210:	0f92      	lsrs	r2, r2, #30
 8009212:	431a      	orrs	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921c:	0edb      	lsrs	r3, r3, #27
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	b2da      	uxtb	r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922e:	0e1b      	lsrs	r3, r3, #24
 8009230:	b2db      	uxtb	r3, r3
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	b2da      	uxtb	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009240:	0d5b      	lsrs	r3, r3, #21
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 0307 	and.w	r3, r3, #7
 8009248:	b2da      	uxtb	r2, r3
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009252:	0c9b      	lsrs	r3, r3, #18
 8009254:	b2db      	uxtb	r3, r3
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	b2da      	uxtb	r2, r3
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009264:	0bdb      	lsrs	r3, r3, #15
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	b2da      	uxtb	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	7e1b      	ldrb	r3, [r3, #24]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	3302      	adds	r3, #2
 8009288:	2201      	movs	r2, #1
 800928a:	fa02 f303 	lsl.w	r3, r2, r3
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009292:	fb03 f202 	mul.w	r2, r3, r2
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	7a1b      	ldrb	r3, [r3, #8]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	2201      	movs	r2, #1
 80092a6:	409a      	lsls	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80092b4:	0a52      	lsrs	r2, r2, #9
 80092b6:	fb03 f202 	mul.w	r2, r3, r2
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092c4:	661a      	str	r2, [r3, #96]	; 0x60
 80092c6:	e031      	b.n	800932c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d11d      	bne.n	800930c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d4:	041b      	lsls	r3, r3, #16
 80092d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	431a      	orrs	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	3301      	adds	r3, #1
 80092ec:	029a      	lsls	r2, r3, #10
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009300:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	661a      	str	r2, [r3, #96]	; 0x60
 800930a:	e00f      	b.n	800932c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a58      	ldr	r2, [pc, #352]	; (8009474 <HAL_SD_GetCardCSD+0x344>)
 8009312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e09d      	b.n	8009468 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009330:	0b9b      	lsrs	r3, r3, #14
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009342:	09db      	lsrs	r3, r3, #7
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934a:	b2da      	uxtb	r2, r3
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009364:	0fdb      	lsrs	r3, r3, #31
 8009366:	b2da      	uxtb	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009370:	0f5b      	lsrs	r3, r3, #29
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009382:	0e9b      	lsrs	r3, r3, #26
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	b2da      	uxtb	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009394:	0d9b      	lsrs	r3, r3, #22
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	b2da      	uxtb	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	0d5b      	lsrs	r3, r3, #21
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c2:	0c1b      	lsrs	r3, r3, #16
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	0bdb      	lsrs	r3, r3, #15
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	0b9b      	lsrs	r3, r3, #14
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	0b5b      	lsrs	r3, r3, #13
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	0b1b      	lsrs	r3, r3, #12
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	b2da      	uxtb	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	0a9b      	lsrs	r3, r3, #10
 8009428:	b2db      	uxtb	r3, r3
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	b2da      	uxtb	r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943a:	0a1b      	lsrs	r3, r3, #8
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	b2da      	uxtb	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	b2da      	uxtb	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	004005ff 	.word	0x004005ff

08009478 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f9de 	bl	80098a4 <SD_SendStatus>
 80094e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	0a5b      	lsrs	r3, r3, #9
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009506:	693b      	ldr	r3, [r7, #16]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f240 523a 	movw	r2, #1338	; 0x53a
 8009526:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff ffd1 	bl	80094d0 <HAL_SD_GetCardState>
 800952e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b06      	cmp	r3, #6
 8009542:	d002      	beq.n	800954a <SD_DMATxAbort+0x3a>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b05      	cmp	r3, #5
 8009548:	d10a      	bne.n	8009560 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f001 ff5e 	bl	800b410 <SDMMC_CmdStopTransfer>
 8009554:	4602      	mov	r2, r0
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	431a      	orrs	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f003 f82f 	bl	800c5cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800956e:	e002      	b.n	8009576 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fdd3 	bl	800911c <HAL_SD_ErrorCallback>
}
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f240 523a 	movw	r2, #1338	; 0x53a
 8009594:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7ff ff9a 	bl	80094d0 <HAL_SD_GetCardState>
 800959c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b06      	cmp	r3, #6
 80095b0:	d002      	beq.n	80095b8 <SD_DMARxAbort+0x3a>
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2b05      	cmp	r3, #5
 80095b6:	d10a      	bne.n	80095ce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 ff27 	bl	800b410 <SDMMC_CmdStopTransfer>
 80095c2:	4602      	mov	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	431a      	orrs	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d103      	bne.n	80095de <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f002 fff8 	bl	800c5cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80095dc:	e002      	b.n	80095e4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7ff fd9c 	bl	800911c <HAL_SD_ErrorCallback>
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095ec:	b5b0      	push	{r4, r5, r7, lr}
 80095ee:	b094      	sub	sp, #80	; 0x50
 80095f0:	af04      	add	r7, sp, #16
 80095f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80095f4:	2301      	movs	r3, #1
 80095f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 fdd8 	bl	800b1b2 <SDIO_GetPowerState>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d102      	bne.n	800960e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009608:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800960c:	e0b8      	b.n	8009780 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009612:	2b03      	cmp	r3, #3
 8009614:	d02f      	beq.n	8009676 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f001 ffbf 	bl	800b59e <SDMMC_CmdSendCID>
 8009620:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <SD_InitCard+0x40>
    {
      return errorstate;
 8009628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962a:	e0a9      	b.n	8009780 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2100      	movs	r1, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f001 fe02 	bl	800b23c <SDIO_GetResponse>
 8009638:	4602      	mov	r2, r0
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2104      	movs	r1, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f001 fdf9 	bl	800b23c <SDIO_GetResponse>
 800964a:	4602      	mov	r2, r0
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2108      	movs	r1, #8
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fdf0 	bl	800b23c <SDIO_GetResponse>
 800965c:	4602      	mov	r2, r0
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	210c      	movs	r1, #12
 8009668:	4618      	mov	r0, r3
 800966a:	f001 fde7 	bl	800b23c <SDIO_GetResponse>
 800966e:	4602      	mov	r2, r0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	2b03      	cmp	r3, #3
 800967c:	d00d      	beq.n	800969a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f107 020e 	add.w	r2, r7, #14
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f001 ffc5 	bl	800b618 <SDMMC_CmdSetRelAdd>
 800968e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <SD_InitCard+0xae>
    {
      return errorstate;
 8009696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009698:	e072      	b.n	8009780 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d036      	beq.n	8009710 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096a2:	89fb      	ldrh	r3, [r7, #14]
 80096a4:	461a      	mov	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b2:	041b      	lsls	r3, r3, #16
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f001 ff8f 	bl	800b5da <SDMMC_CmdSendCSD>
 80096bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80096c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c6:	e05b      	b.n	8009780 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 fdb4 	bl	800b23c <SDIO_GetResponse>
 80096d4:	4602      	mov	r2, r0
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2104      	movs	r1, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 fdab 	bl	800b23c <SDIO_GetResponse>
 80096e6:	4602      	mov	r2, r0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2108      	movs	r1, #8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 fda2 	bl	800b23c <SDIO_GetResponse>
 80096f8:	4602      	mov	r2, r0
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	210c      	movs	r1, #12
 8009704:	4618      	mov	r0, r3
 8009706:	f001 fd99 	bl	800b23c <SDIO_GetResponse>
 800970a:	4602      	mov	r2, r0
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2104      	movs	r1, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f001 fd90 	bl	800b23c <SDIO_GetResponse>
 800971c:	4603      	mov	r3, r0
 800971e:	0d1a      	lsrs	r2, r3, #20
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009724:	f107 0310 	add.w	r3, r7, #16
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff fd00 	bl	8009130 <HAL_SD_GetCardCSD>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009736:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800973a:	e021      	b.n	8009780 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6819      	ldr	r1, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009744:	041b      	lsls	r3, r3, #16
 8009746:	2200      	movs	r2, #0
 8009748:	461c      	mov	r4, r3
 800974a:	4615      	mov	r5, r2
 800974c:	4622      	mov	r2, r4
 800974e:	462b      	mov	r3, r5
 8009750:	4608      	mov	r0, r1
 8009752:	f001 fe7f 	bl	800b454 <SDMMC_CmdSelDesel>
 8009756:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <SD_InitCard+0x176>
  {
    return errorstate;
 800975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009760:	e00e      	b.n	8009780 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681d      	ldr	r5, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	466c      	mov	r4, sp
 800976a:	f103 0210 	add.w	r2, r3, #16
 800976e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009774:	3304      	adds	r3, #4
 8009776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009778:	4628      	mov	r0, r5
 800977a:	f001 fcc3 	bl	800b104 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3740      	adds	r7, #64	; 0x40
 8009784:	46bd      	mov	sp, r7
 8009786:	bdb0      	pop	{r4, r5, r7, pc}

08009788 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fe7a 	bl	800b49a <SDMMC_CmdGoIdleState>
 80097a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	e072      	b.n	8009898 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 fe8d 	bl	800b4d6 <SDMMC_CmdOperCond>
 80097bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00d      	beq.n	80097e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 fe63 	bl	800b49a <SDMMC_CmdGoIdleState>
 80097d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	e05b      	b.n	8009898 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d137      	bne.n	800985e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fe8d 	bl	800b514 <SDMMC_CmdAppCommand>
 80097fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d02d      	beq.n	800985e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009802:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009806:	e047      	b.n	8009898 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2100      	movs	r1, #0
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fe80 	bl	800b514 <SDMMC_CmdAppCommand>
 8009814:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <SD_PowerON+0x98>
    {
      return errorstate;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	e03b      	b.n	8009898 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	491e      	ldr	r1, [pc, #120]	; (80098a0 <SD_PowerON+0x118>)
 8009826:	4618      	mov	r0, r3
 8009828:	f001 fe96 	bl	800b558 <SDMMC_CmdAppOperCommand>
 800982c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009838:	e02e      	b.n	8009898 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2100      	movs	r1, #0
 8009840:	4618      	mov	r0, r3
 8009842:	f001 fcfb 	bl	800b23c <SDIO_GetResponse>
 8009846:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	0fdb      	lsrs	r3, r3, #31
 800984c:	2b01      	cmp	r3, #1
 800984e:	d101      	bne.n	8009854 <SD_PowerON+0xcc>
 8009850:	2301      	movs	r3, #1
 8009852:	e000      	b.n	8009856 <SD_PowerON+0xce>
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]

    count++;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	3301      	adds	r3, #1
 800985c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009864:	4293      	cmp	r3, r2
 8009866:	d802      	bhi.n	800986e <SD_PowerON+0xe6>
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d0cc      	beq.n	8009808 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009874:	4293      	cmp	r3, r2
 8009876:	d902      	bls.n	800987e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800987c:	e00c      	b.n	8009898 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	645a      	str	r2, [r3, #68]	; 0x44
 800988e:	e002      	b.n	8009896 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	c1100000 	.word	0xc1100000

080098a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80098b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098b8:	e018      	b.n	80098ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c2:	041b      	lsls	r3, r3, #16
 80098c4:	4619      	mov	r1, r3
 80098c6:	4610      	mov	r0, r2
 80098c8:	f001 fec7 	bl	800b65a <SDMMC_CmdSendStatus>
 80098cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	e009      	b.n	80098ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f001 fcac 	bl	800b23c <SDIO_GetResponse>
 80098e4:	4602      	mov	r2, r0
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009900:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d03f      	beq.n	800998e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800990e:	2300      	movs	r3, #0
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	e033      	b.n	800997c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	f001 fc1e 	bl	800b15a <SDIO_ReadFIFO>
 800991e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	b2da      	uxtb	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	3b01      	subs	r3, #1
 8009932:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	b2da      	uxtb	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3301      	adds	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3b01      	subs	r3, #1
 8009948:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	0c1b      	lsrs	r3, r3, #16
 800994e:	b2da      	uxtb	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3b01      	subs	r3, #1
 800995e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	0e1b      	lsrs	r3, r3, #24
 8009964:	b2da      	uxtb	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	701a      	strb	r2, [r3, #0]
      tmp++;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3301      	adds	r3, #1
 800996e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	3b01      	subs	r3, #1
 8009974:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	3301      	adds	r3, #1
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b07      	cmp	r3, #7
 8009980:	d9c8      	bls.n	8009914 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800998e:	bf00      	nop
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d043      	beq.n	8009a38 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	e037      	b.n	8009a26 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	021a      	lsls	r2, r3, #8
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3301      	adds	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	3b01      	subs	r3, #1
 80099de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	041a      	lsls	r2, r3, #16
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3301      	adds	r3, #1
 80099f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	061a      	lsls	r2, r3, #24
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3301      	adds	r3, #1
 8009a08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f107 0208 	add.w	r2, r7, #8
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 fbaa 	bl	800b174 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	3301      	adds	r3, #1
 8009a24:	617b      	str	r3, [r7, #20]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b07      	cmp	r3, #7
 8009a2a:	d9c4      	bls.n	80099b6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e07b      	b.n	8009b4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d108      	bne.n	8009a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a62:	d009      	beq.n	8009a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	61da      	str	r2, [r3, #28]
 8009a6a:	e005      	b.n	8009a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fa fd4a 	bl	800452c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afc:	ea42 0103 	orr.w	r1, r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	0c1b      	lsrs	r3, r3, #16
 8009b16:	f003 0104 	and.w	r1, r3, #4
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	f003 0210 	and.w	r2, r3, #16
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69da      	ldr	r2, [r3, #28]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e01a      	b.n	8009b9a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b7a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7fa fd53 	bl	8004628 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b088      	sub	sp, #32
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_SPI_Transmit+0x22>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e12d      	b.n	8009e20 <HAL_SPI_Transmit+0x27e>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bcc:	f7fb faaa 	bl	8005124 <HAL_GetTick>
 8009bd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d002      	beq.n	8009be8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009be2:	2302      	movs	r3, #2
 8009be4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009be6:	e116      	b.n	8009e16 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <HAL_SPI_Transmit+0x52>
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d102      	bne.n	8009bfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bf8:	e10d      	b.n	8009e16 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2203      	movs	r2, #3
 8009bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	88fa      	ldrh	r2, [r7, #6]
 8009c12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	88fa      	ldrh	r2, [r7, #6]
 8009c18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c40:	d10f      	bne.n	8009c62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6c:	2b40      	cmp	r3, #64	; 0x40
 8009c6e:	d007      	beq.n	8009c80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c88:	d14f      	bne.n	8009d2a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <HAL_SPI_Transmit+0xf6>
 8009c92:	8afb      	ldrh	r3, [r7, #22]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d142      	bne.n	8009d1e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	881a      	ldrh	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	1c9a      	adds	r2, r3, #2
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009cbc:	e02f      	b.n	8009d1e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d112      	bne.n	8009cf2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	1c9a      	adds	r2, r3, #2
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	86da      	strh	r2, [r3, #54]	; 0x36
 8009cf0:	e015      	b.n	8009d1e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cf2:	f7fb fa17 	bl	8005124 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d803      	bhi.n	8009d0a <HAL_SPI_Transmit+0x168>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d102      	bne.n	8009d10 <HAL_SPI_Transmit+0x16e>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d106      	bne.n	8009d1e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009d1c:	e07b      	b.n	8009e16 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1ca      	bne.n	8009cbe <HAL_SPI_Transmit+0x11c>
 8009d28:	e050      	b.n	8009dcc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <HAL_SPI_Transmit+0x196>
 8009d32:	8afb      	ldrh	r3, [r7, #22]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d144      	bne.n	8009dc2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	330c      	adds	r3, #12
 8009d42:	7812      	ldrb	r2, [r2, #0]
 8009d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009d5e:	e030      	b.n	8009dc2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d113      	bne.n	8009d96 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	330c      	adds	r3, #12
 8009d78:	7812      	ldrb	r2, [r2, #0]
 8009d7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d94:	e015      	b.n	8009dc2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d96:	f7fb f9c5 	bl	8005124 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	683a      	ldr	r2, [r7, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d803      	bhi.n	8009dae <HAL_SPI_Transmit+0x20c>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dac:	d102      	bne.n	8009db4 <HAL_SPI_Transmit+0x212>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d106      	bne.n	8009dc2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009dc0:	e029      	b.n	8009e16 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1c9      	bne.n	8009d60 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 fbdf 	bl	800a594 <SPI_EndRxTxTransaction>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2220      	movs	r2, #32
 8009de0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dea:	2300      	movs	r3, #0
 8009dec:	613b      	str	r3, [r7, #16]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	613b      	str	r3, [r7, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	77fb      	strb	r3, [r7, #31]
 8009e0c:	e003      	b.n	8009e16 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3720      	adds	r7, #32
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	603b      	str	r3, [r7, #0]
 8009e34:	4613      	mov	r3, r2
 8009e36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d002      	beq.n	8009e4e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e4c:	e0fb      	b.n	800a046 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e56:	d112      	bne.n	8009e7e <HAL_SPI_Receive+0x56>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10e      	bne.n	8009e7e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2204      	movs	r2, #4
 8009e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009e68:	88fa      	ldrh	r2, [r7, #6]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 f8ef 	bl	800a058 <HAL_SPI_TransmitReceive>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	e0e8      	b.n	800a050 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_SPI_Receive+0x64>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e0e1      	b.n	800a050 <HAL_SPI_Receive+0x228>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e94:	f7fb f946 	bl	8005124 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <HAL_SPI_Receive+0x7e>
 8009ea0:	88fb      	ldrh	r3, [r7, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009eaa:	e0cc      	b.n	800a046 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2204      	movs	r2, #4
 8009eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	88fa      	ldrh	r2, [r7, #6]
 8009ec4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	88fa      	ldrh	r2, [r7, #6]
 8009eca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef2:	d10f      	bne.n	8009f14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1e:	2b40      	cmp	r3, #64	; 0x40
 8009f20:	d007      	beq.n	8009f32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d16a      	bne.n	800a010 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009f3a:	e032      	b.n	8009fa2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d115      	bne.n	8009f76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f103 020c 	add.w	r2, r3, #12
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f56:	7812      	ldrb	r2, [r2, #0]
 8009f58:	b2d2      	uxtb	r2, r2
 8009f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f74:	e015      	b.n	8009fa2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f76:	f7fb f8d5 	bl	8005124 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d803      	bhi.n	8009f8e <HAL_SPI_Receive+0x166>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d102      	bne.n	8009f94 <HAL_SPI_Receive+0x16c>
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009fa0:	e051      	b.n	800a046 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1c7      	bne.n	8009f3c <HAL_SPI_Receive+0x114>
 8009fac:	e035      	b.n	800a01a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d113      	bne.n	8009fe4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	b292      	uxth	r2, r2
 8009fc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fce:	1c9a      	adds	r2, r3, #2
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009fe2:	e015      	b.n	800a010 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fe4:	f7fb f89e 	bl	8005124 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d803      	bhi.n	8009ffc <HAL_SPI_Receive+0x1d4>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffa:	d102      	bne.n	800a002 <HAL_SPI_Receive+0x1da>
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a00e:	e01a      	b.n	800a046 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a014:	b29b      	uxth	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1c9      	bne.n	8009fae <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 fa52 	bl	800a4c8 <SPI_EndRxTransaction>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2220      	movs	r2, #32
 800a02e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	75fb      	strb	r3, [r7, #23]
 800a03c:	e003      	b.n	800a046 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08c      	sub	sp, #48	; 0x30
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a066:	2301      	movs	r3, #1
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_SPI_TransmitReceive+0x26>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e198      	b.n	800a3b0 <HAL_SPI_TransmitReceive+0x358>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a086:	f7fb f84d 	bl	8005124 <HAL_GetTick>
 800a08a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a09c:	887b      	ldrh	r3, [r7, #2]
 800a09e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d00f      	beq.n	800a0c8 <HAL_SPI_TransmitReceive+0x70>
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0ae:	d107      	bne.n	800a0c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <HAL_SPI_TransmitReceive+0x68>
 800a0b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d003      	beq.n	800a0c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a0c6:	e16d      	b.n	800a3a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_SPI_TransmitReceive+0x82>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <HAL_SPI_TransmitReceive+0x82>
 800a0d4:	887b      	ldrh	r3, [r7, #2]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a0e0:	e160      	b.n	800a3a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d003      	beq.n	800a0f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2205      	movs	r2, #5
 800a0f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	887a      	ldrh	r2, [r7, #2]
 800a106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	887a      	ldrh	r2, [r7, #2]
 800a10c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	887a      	ldrh	r2, [r7, #2]
 800a118:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	887a      	ldrh	r2, [r7, #2]
 800a11e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a136:	2b40      	cmp	r3, #64	; 0x40
 800a138:	d007      	beq.n	800a14a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a148:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a152:	d17c      	bne.n	800a24e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <HAL_SPI_TransmitReceive+0x10a>
 800a15c:	8b7b      	ldrh	r3, [r7, #26]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d16a      	bne.n	800a238 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	881a      	ldrh	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a172:	1c9a      	adds	r2, r3, #2
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	3b01      	subs	r3, #1
 800a180:	b29a      	uxth	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a186:	e057      	b.n	800a238 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b02      	cmp	r3, #2
 800a194:	d11b      	bne.n	800a1ce <HAL_SPI_TransmitReceive+0x176>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d016      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x176>
 800a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d113      	bne.n	800a1ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	881a      	ldrh	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	1c9a      	adds	r2, r3, #2
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d119      	bne.n	800a210 <HAL_SPI_TransmitReceive+0x1b8>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d014      	beq.n	800a210 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f0:	b292      	uxth	r2, r2
 800a1f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	1c9a      	adds	r2, r3, #2
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a20c:	2301      	movs	r3, #1
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a210:	f7fa ff88 	bl	8005124 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d80b      	bhi.n	800a238 <HAL_SPI_TransmitReceive+0x1e0>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d007      	beq.n	800a238 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a236:	e0b5      	b.n	800a3a4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1a2      	bne.n	800a188 <HAL_SPI_TransmitReceive+0x130>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a246:	b29b      	uxth	r3, r3
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d19d      	bne.n	800a188 <HAL_SPI_TransmitReceive+0x130>
 800a24c:	e080      	b.n	800a350 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <HAL_SPI_TransmitReceive+0x204>
 800a256:	8b7b      	ldrh	r3, [r7, #26]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d16f      	bne.n	800a33c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	330c      	adds	r3, #12
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3b01      	subs	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a282:	e05b      	b.n	800a33c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f003 0302 	and.w	r3, r3, #2
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d11c      	bne.n	800a2cc <HAL_SPI_TransmitReceive+0x274>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a296:	b29b      	uxth	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d017      	beq.n	800a2cc <HAL_SPI_TransmitReceive+0x274>
 800a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d114      	bne.n	800a2cc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	330c      	adds	r3, #12
 800a2ac:	7812      	ldrb	r2, [r2, #0]
 800a2ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	1c5a      	adds	r2, r3, #1
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d119      	bne.n	800a30e <HAL_SPI_TransmitReceive+0x2b6>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d014      	beq.n	800a30e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29a      	uxth	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a30a:	2301      	movs	r3, #1
 800a30c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a30e:	f7fa ff09 	bl	8005124 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d803      	bhi.n	800a326 <HAL_SPI_TransmitReceive+0x2ce>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a324:	d102      	bne.n	800a32c <HAL_SPI_TransmitReceive+0x2d4>
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d107      	bne.n	800a33c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a33a:	e033      	b.n	800a3a4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d19e      	bne.n	800a284 <HAL_SPI_TransmitReceive+0x22c>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d199      	bne.n	800a284 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a352:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f91d 	bl	800a594 <SPI_EndRxTxTransaction>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d006      	beq.n	800a36e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2220      	movs	r2, #32
 800a36a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a36c:	e01a      	b.n	800a3a4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a376:	2300      	movs	r3, #0
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a39a:	e003      	b.n	800a3a4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a3ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3730      	adds	r7, #48	; 0x30
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a3c8:	f7fa feac 	bl	8005124 <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	1a9b      	subs	r3, r3, r2
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a3d8:	f7fa fea4 	bl	8005124 <HAL_GetTick>
 800a3dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a3de:	4b39      	ldr	r3, [pc, #228]	; (800a4c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	015b      	lsls	r3, r3, #5
 800a3e4:	0d1b      	lsrs	r3, r3, #20
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	fb02 f303 	mul.w	r3, r2, r3
 800a3ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3ee:	e054      	b.n	800a49a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f6:	d050      	beq.n	800a49a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3f8:	f7fa fe94 	bl	8005124 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	69fa      	ldr	r2, [r7, #28]
 800a404:	429a      	cmp	r2, r3
 800a406:	d902      	bls.n	800a40e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d13d      	bne.n	800a48a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a41c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a426:	d111      	bne.n	800a44c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a430:	d004      	beq.n	800a43c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a43a:	d107      	bne.n	800a44c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a44a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a454:	d10f      	bne.n	800a476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e017      	b.n	800a4ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	3b01      	subs	r3, #1
 800a498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689a      	ldr	r2, [r3, #8]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d19b      	bne.n	800a3f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3720      	adds	r7, #32
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000020 	.word	0x20000020

0800a4c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a4dc:	d111      	bne.n	800a502 <SPI_EndRxTransaction+0x3a>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4e6:	d004      	beq.n	800a4f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f0:	d107      	bne.n	800a502 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a500:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a50a:	d12a      	bne.n	800a562 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a514:	d012      	beq.n	800a53c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	2180      	movs	r1, #128	; 0x80
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff ff49 	bl	800a3b8 <SPI_WaitFlagStateUntilTimeout>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d02d      	beq.n	800a588 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a530:	f043 0220 	orr.w	r2, r3, #32
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e026      	b.n	800a58a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	2101      	movs	r1, #1
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff ff36 	bl	800a3b8 <SPI_WaitFlagStateUntilTimeout>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01a      	beq.n	800a588 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a556:	f043 0220 	orr.w	r2, r3, #32
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e013      	b.n	800a58a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2200      	movs	r2, #0
 800a56a:	2101      	movs	r1, #1
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff ff23 	bl	800a3b8 <SPI_WaitFlagStateUntilTimeout>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d007      	beq.n	800a588 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57c:	f043 0220 	orr.w	r2, r3, #32
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e000      	b.n	800a58a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7ff ff04 	bl	800a3b8 <SPI_WaitFlagStateUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d007      	beq.n	800a5c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ba:	f043 0220 	orr.w	r2, r3, #32
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e032      	b.n	800a62c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a5c6:	4b1b      	ldr	r3, [pc, #108]	; (800a634 <SPI_EndRxTxTransaction+0xa0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a1b      	ldr	r2, [pc, #108]	; (800a638 <SPI_EndRxTxTransaction+0xa4>)
 800a5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d0:	0d5b      	lsrs	r3, r3, #21
 800a5d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a5d6:	fb02 f303 	mul.w	r3, r2, r3
 800a5da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5e4:	d112      	bne.n	800a60c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2180      	movs	r1, #128	; 0x80
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f7ff fee1 	bl	800a3b8 <SPI_WaitFlagStateUntilTimeout>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d016      	beq.n	800a62a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a600:	f043 0220 	orr.w	r2, r3, #32
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e00f      	b.n	800a62c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	3b01      	subs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b80      	cmp	r3, #128	; 0x80
 800a624:	d0f2      	beq.n	800a60c <SPI_EndRxTxTransaction+0x78>
 800a626:	e000      	b.n	800a62a <SPI_EndRxTxTransaction+0x96>
        break;
 800a628:	bf00      	nop
  }

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000020 	.word	0x20000020
 800a638:	165e9f81 	.word	0x165e9f81

0800a63c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d101      	bne.n	800a64e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e042      	b.n	800a6d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7fa f812 	bl	800468c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2224      	movs	r2, #36	; 0x24
 800a66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a67e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 facb 	bl	800ac1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695a      	ldr	r2, [r3, #20]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2220      	movs	r2, #32
 800a6c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08c      	sub	sp, #48	; 0x30
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b20      	cmp	r3, #32
 800a6f4:	d14a      	bne.n	800a78c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e043      	b.n	800a78e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2201      	movs	r2, #1
 800a70a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a712:	88fb      	ldrh	r3, [r7, #6]
 800a714:	461a      	mov	r2, r3
 800a716:	68b9      	ldr	r1, [r7, #8]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f959 	bl	800a9d0 <UART_Start_Receive_DMA>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d12c      	bne.n	800a786 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a730:	2b01      	cmp	r3, #1
 800a732:	d125      	bne.n	800a780 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a734:	2300      	movs	r3, #0
 800a736:	613b      	str	r3, [r7, #16]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	613b      	str	r3, [r7, #16]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	613b      	str	r3, [r7, #16]
 800a748:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	330c      	adds	r3, #12
 800a750:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	617b      	str	r3, [r7, #20]
   return(result);
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f043 0310 	orr.w	r3, r3, #16
 800a760:	62bb      	str	r3, [r7, #40]	; 0x28
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	330c      	adds	r3, #12
 800a768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76a:	627a      	str	r2, [r7, #36]	; 0x24
 800a76c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	6a39      	ldr	r1, [r7, #32]
 800a770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	61fb      	str	r3, [r7, #28]
   return(result);
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e5      	bne.n	800a74a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a77e:	e002      	b.n	800a786 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a78a:	e000      	b.n	800a78e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800a78c:	2302      	movs	r3, #2
  }
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b09c      	sub	sp, #112	; 0x70
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7de:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d172      	bne.n	800a8d4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fe:	e853 3f00 	ldrex	r3, [r3]
 800a802:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a80a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	330c      	adds	r3, #12
 800a812:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a814:	65ba      	str	r2, [r7, #88]	; 0x58
 800a816:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a818:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a81a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a81c:	e841 2300 	strex	r3, r2, [r1]
 800a820:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1e5      	bne.n	800a7f4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3314      	adds	r3, #20
 800a82e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	e853 3f00 	ldrex	r3, [r3]
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	667b      	str	r3, [r7, #100]	; 0x64
 800a840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3314      	adds	r3, #20
 800a846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a848:	647a      	str	r2, [r7, #68]	; 0x44
 800a84a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e5      	bne.n	800a828 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3314      	adds	r3, #20
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	623b      	str	r3, [r7, #32]
   return(result);
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a872:	663b      	str	r3, [r7, #96]	; 0x60
 800a874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3314      	adds	r3, #20
 800a87a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a87c:	633a      	str	r2, [r7, #48]	; 0x30
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e5      	bne.n	800a85c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a892:	2220      	movs	r2, #32
 800a894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d119      	bne.n	800a8d4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	330c      	adds	r3, #12
 800a8a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	e853 3f00 	ldrex	r3, [r3]
 800a8ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0310 	bic.w	r3, r3, #16
 800a8b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	330c      	adds	r3, #12
 800a8be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8c0:	61fa      	str	r2, [r7, #28]
 800a8c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	69b9      	ldr	r1, [r7, #24]
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e5      	bne.n	800a8a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d106      	bne.n	800a8f0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8ea:	f7f7 fef3 	bl	80026d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8ee:	e002      	b.n	800a8f6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a8f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8f2:	f7ff ff50 	bl	800a796 <HAL_UART_RxCpltCallback>
}
 800a8f6:	bf00      	nop
 800a8f8:	3770      	adds	r7, #112	; 0x70
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2201      	movs	r2, #1
 800a910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	2b01      	cmp	r3, #1
 800a918:	d108      	bne.n	800a92c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	b29b      	uxth	r3, r3
 800a922:	4619      	mov	r1, r3
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f7f7 fed5 	bl	80026d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a92a:	e002      	b.n	800a932 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f7ff ff3c 	bl	800a7aa <HAL_UART_RxHalfCpltCallback>
}
 800a932:	bf00      	nop
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a956:	2b80      	cmp	r3, #128	; 0x80
 800a958:	bf0c      	ite	eq
 800a95a:	2301      	moveq	r3, #1
 800a95c:	2300      	movne	r3, #0
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b21      	cmp	r3, #33	; 0x21
 800a96c:	d108      	bne.n	800a980 <UART_DMAError+0x46>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a97a:	68b8      	ldr	r0, [r7, #8]
 800a97c:	f000 f8c2 	bl	800ab04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a98a:	2b40      	cmp	r3, #64	; 0x40
 800a98c:	bf0c      	ite	eq
 800a98e:	2301      	moveq	r3, #1
 800a990:	2300      	movne	r3, #0
 800a992:	b2db      	uxtb	r3, r3
 800a994:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	2b22      	cmp	r3, #34	; 0x22
 800a9a0:	d108      	bne.n	800a9b4 <UART_DMAError+0x7a>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d005      	beq.n	800a9b4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a9ae:	68b8      	ldr	r0, [r7, #8]
 800a9b0:	f000 f8d0 	bl	800ab54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b8:	f043 0210 	orr.w	r2, r3, #16
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9c0:	68b8      	ldr	r0, [r7, #8]
 800a9c2:	f7ff fefc 	bl	800a7be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b098      	sub	sp, #96	; 0x60
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	88fa      	ldrh	r2, [r7, #6]
 800a9e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2222      	movs	r2, #34	; 0x22
 800a9f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fc:	4a3e      	ldr	r2, [pc, #248]	; (800aaf8 <UART_Start_Receive_DMA+0x128>)
 800a9fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa04:	4a3d      	ldr	r2, [pc, #244]	; (800aafc <UART_Start_Receive_DMA+0x12c>)
 800aa06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0c:	4a3c      	ldr	r2, [pc, #240]	; (800ab00 <UART_Start_Receive_DMA+0x130>)
 800aa0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa14:	2200      	movs	r2, #0
 800aa16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aa18:	f107 0308 	add.w	r3, r7, #8
 800aa1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	88fb      	ldrh	r3, [r7, #6]
 800aa30:	f7fa fd68 	bl	8005504 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aa34:	2300      	movs	r3, #0
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	613b      	str	r3, [r7, #16]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d019      	beq.n	800aa86 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa68:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	330c      	adds	r3, #12
 800aa70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa72:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa7a:	e841 2300 	strex	r3, r2, [r1]
 800aa7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aa80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1e5      	bne.n	800aa52 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3314      	adds	r3, #20
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	f043 0301 	orr.w	r3, r3, #1
 800aa9c:	657b      	str	r3, [r7, #84]	; 0x54
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaa6:	63ba      	str	r2, [r7, #56]	; 0x38
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aaac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaae:	e841 2300 	strex	r3, r2, [r1]
 800aab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1e5      	bne.n	800aa86 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3314      	adds	r3, #20
 800aac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	617b      	str	r3, [r7, #20]
   return(result);
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad0:	653b      	str	r3, [r7, #80]	; 0x50
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	3314      	adds	r3, #20
 800aad8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aada:	627a      	str	r2, [r7, #36]	; 0x24
 800aadc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6a39      	ldr	r1, [r7, #32]
 800aae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e5      	bne.n	800aaba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3760      	adds	r7, #96	; 0x60
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	0800a7d3 	.word	0x0800a7d3
 800aafc:	0800a8ff 	.word	0x0800a8ff
 800ab00:	0800a93b 	.word	0x0800a93b

0800ab04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b089      	sub	sp, #36	; 0x24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	330c      	adds	r3, #12
 800ab12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab22:	61fb      	str	r3, [r7, #28]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	330c      	adds	r3, #12
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	61ba      	str	r2, [r7, #24]
 800ab2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6979      	ldr	r1, [r7, #20]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	613b      	str	r3, [r7, #16]
   return(result);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e5      	bne.n	800ab0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2220      	movs	r2, #32
 800ab44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800ab48:	bf00      	nop
 800ab4a:	3724      	adds	r7, #36	; 0x24
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b095      	sub	sp, #84	; 0x54
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	330c      	adds	r3, #12
 800ab62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	330c      	adds	r3, #12
 800ab7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab7c:	643a      	str	r2, [r7, #64]	; 0x40
 800ab7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e5      	bne.n	800ab5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3314      	adds	r3, #20
 800ab96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	e853 3f00 	ldrex	r3, [r3]
 800ab9e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	f023 0301 	bic.w	r3, r3, #1
 800aba6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3314      	adds	r3, #20
 800abae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e5      	bne.n	800ab90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d119      	bne.n	800ac00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	330c      	adds	r3, #12
 800abd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	60bb      	str	r3, [r7, #8]
   return(result);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f023 0310 	bic.w	r3, r3, #16
 800abe2:	647b      	str	r3, [r7, #68]	; 0x44
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	330c      	adds	r3, #12
 800abea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abec:	61ba      	str	r2, [r7, #24]
 800abee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf0:	6979      	ldr	r1, [r7, #20]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	e841 2300 	strex	r3, r2, [r1]
 800abf8:	613b      	str	r3, [r7, #16]
   return(result);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1e5      	bne.n	800abcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2220      	movs	r2, #32
 800ac04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ac0e:	bf00      	nop
 800ac10:	3754      	adds	r7, #84	; 0x54
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
	...

0800ac1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac20:	b0c0      	sub	sp, #256	; 0x100
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac38:	68d9      	ldr	r1, [r3, #12]
 800ac3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	ea40 0301 	orr.w	r3, r0, r1
 800ac44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	431a      	orrs	r2, r3
 800ac54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ac74:	f021 010c 	bic.w	r1, r1, #12
 800ac78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac82:	430b      	orrs	r3, r1
 800ac84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ac92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac96:	6999      	ldr	r1, [r3, #24]
 800ac98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	ea40 0301 	orr.w	r3, r0, r1
 800aca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	4b8f      	ldr	r3, [pc, #572]	; (800aee8 <UART_SetConfig+0x2cc>)
 800acac:	429a      	cmp	r2, r3
 800acae:	d005      	beq.n	800acbc <UART_SetConfig+0xa0>
 800acb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b8d      	ldr	r3, [pc, #564]	; (800aeec <UART_SetConfig+0x2d0>)
 800acb8:	429a      	cmp	r2, r3
 800acba:	d104      	bne.n	800acc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acbc:	f7fd fc70 	bl	80085a0 <HAL_RCC_GetPCLK2Freq>
 800acc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800acc4:	e003      	b.n	800acce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800acc6:	f7fd fc57 	bl	8008578 <HAL_RCC_GetPCLK1Freq>
 800acca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acd8:	f040 810c 	bne.w	800aef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800acdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ace6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800acea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800acee:	4622      	mov	r2, r4
 800acf0:	462b      	mov	r3, r5
 800acf2:	1891      	adds	r1, r2, r2
 800acf4:	65b9      	str	r1, [r7, #88]	; 0x58
 800acf6:	415b      	adcs	r3, r3
 800acf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800acfe:	4621      	mov	r1, r4
 800ad00:	eb12 0801 	adds.w	r8, r2, r1
 800ad04:	4629      	mov	r1, r5
 800ad06:	eb43 0901 	adc.w	r9, r3, r1
 800ad0a:	f04f 0200 	mov.w	r2, #0
 800ad0e:	f04f 0300 	mov.w	r3, #0
 800ad12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad1e:	4690      	mov	r8, r2
 800ad20:	4699      	mov	r9, r3
 800ad22:	4623      	mov	r3, r4
 800ad24:	eb18 0303 	adds.w	r3, r8, r3
 800ad28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	eb49 0303 	adc.w	r3, r9, r3
 800ad32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ad46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	18db      	adds	r3, r3, r3
 800ad4e:	653b      	str	r3, [r7, #80]	; 0x50
 800ad50:	4613      	mov	r3, r2
 800ad52:	eb42 0303 	adc.w	r3, r2, r3
 800ad56:	657b      	str	r3, [r7, #84]	; 0x54
 800ad58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ad5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ad60:	f7f5 ff92 	bl	8000c88 <__aeabi_uldivmod>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4b61      	ldr	r3, [pc, #388]	; (800aef0 <UART_SetConfig+0x2d4>)
 800ad6a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad6e:	095b      	lsrs	r3, r3, #5
 800ad70:	011c      	lsls	r4, r3, #4
 800ad72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ad80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ad84:	4642      	mov	r2, r8
 800ad86:	464b      	mov	r3, r9
 800ad88:	1891      	adds	r1, r2, r2
 800ad8a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ad8c:	415b      	adcs	r3, r3
 800ad8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ad94:	4641      	mov	r1, r8
 800ad96:	eb12 0a01 	adds.w	sl, r2, r1
 800ad9a:	4649      	mov	r1, r9
 800ad9c:	eb43 0b01 	adc.w	fp, r3, r1
 800ada0:	f04f 0200 	mov.w	r2, #0
 800ada4:	f04f 0300 	mov.w	r3, #0
 800ada8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800adac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800adb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adb4:	4692      	mov	sl, r2
 800adb6:	469b      	mov	fp, r3
 800adb8:	4643      	mov	r3, r8
 800adba:	eb1a 0303 	adds.w	r3, sl, r3
 800adbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adc2:	464b      	mov	r3, r9
 800adc4:	eb4b 0303 	adc.w	r3, fp, r3
 800adc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800add8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800addc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ade0:	460b      	mov	r3, r1
 800ade2:	18db      	adds	r3, r3, r3
 800ade4:	643b      	str	r3, [r7, #64]	; 0x40
 800ade6:	4613      	mov	r3, r2
 800ade8:	eb42 0303 	adc.w	r3, r2, r3
 800adec:	647b      	str	r3, [r7, #68]	; 0x44
 800adee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800adf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800adf6:	f7f5 ff47 	bl	8000c88 <__aeabi_uldivmod>
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	4611      	mov	r1, r2
 800ae00:	4b3b      	ldr	r3, [pc, #236]	; (800aef0 <UART_SetConfig+0x2d4>)
 800ae02:	fba3 2301 	umull	r2, r3, r3, r1
 800ae06:	095b      	lsrs	r3, r3, #5
 800ae08:	2264      	movs	r2, #100	; 0x64
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	1acb      	subs	r3, r1, r3
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ae16:	4b36      	ldr	r3, [pc, #216]	; (800aef0 <UART_SetConfig+0x2d4>)
 800ae18:	fba3 2302 	umull	r2, r3, r3, r2
 800ae1c:	095b      	lsrs	r3, r3, #5
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae24:	441c      	add	r4, r3
 800ae26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ae34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ae38:	4642      	mov	r2, r8
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	1891      	adds	r1, r2, r2
 800ae3e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae40:	415b      	adcs	r3, r3
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae48:	4641      	mov	r1, r8
 800ae4a:	1851      	adds	r1, r2, r1
 800ae4c:	6339      	str	r1, [r7, #48]	; 0x30
 800ae4e:	4649      	mov	r1, r9
 800ae50:	414b      	adcs	r3, r1
 800ae52:	637b      	str	r3, [r7, #52]	; 0x34
 800ae54:	f04f 0200 	mov.w	r2, #0
 800ae58:	f04f 0300 	mov.w	r3, #0
 800ae5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ae60:	4659      	mov	r1, fp
 800ae62:	00cb      	lsls	r3, r1, #3
 800ae64:	4651      	mov	r1, sl
 800ae66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae6a:	4651      	mov	r1, sl
 800ae6c:	00ca      	lsls	r2, r1, #3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4619      	mov	r1, r3
 800ae72:	4603      	mov	r3, r0
 800ae74:	4642      	mov	r2, r8
 800ae76:	189b      	adds	r3, r3, r2
 800ae78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae7c:	464b      	mov	r3, r9
 800ae7e:	460a      	mov	r2, r1
 800ae80:	eb42 0303 	adc.w	r3, r2, r3
 800ae84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ae94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ae98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	18db      	adds	r3, r3, r3
 800aea0:	62bb      	str	r3, [r7, #40]	; 0x28
 800aea2:	4613      	mov	r3, r2
 800aea4:	eb42 0303 	adc.w	r3, r2, r3
 800aea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aeae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aeb2:	f7f5 fee9 	bl	8000c88 <__aeabi_uldivmod>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <UART_SetConfig+0x2d4>)
 800aebc:	fba3 1302 	umull	r1, r3, r3, r2
 800aec0:	095b      	lsrs	r3, r3, #5
 800aec2:	2164      	movs	r1, #100	; 0x64
 800aec4:	fb01 f303 	mul.w	r3, r1, r3
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	3332      	adds	r3, #50	; 0x32
 800aece:	4a08      	ldr	r2, [pc, #32]	; (800aef0 <UART_SetConfig+0x2d4>)
 800aed0:	fba2 2303 	umull	r2, r3, r2, r3
 800aed4:	095b      	lsrs	r3, r3, #5
 800aed6:	f003 0207 	and.w	r2, r3, #7
 800aeda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4422      	add	r2, r4
 800aee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aee4:	e106      	b.n	800b0f4 <UART_SetConfig+0x4d8>
 800aee6:	bf00      	nop
 800aee8:	40011000 	.word	0x40011000
 800aeec:	40011400 	.word	0x40011400
 800aef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aefe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800af06:	4642      	mov	r2, r8
 800af08:	464b      	mov	r3, r9
 800af0a:	1891      	adds	r1, r2, r2
 800af0c:	6239      	str	r1, [r7, #32]
 800af0e:	415b      	adcs	r3, r3
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
 800af12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af16:	4641      	mov	r1, r8
 800af18:	1854      	adds	r4, r2, r1
 800af1a:	4649      	mov	r1, r9
 800af1c:	eb43 0501 	adc.w	r5, r3, r1
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	f04f 0300 	mov.w	r3, #0
 800af28:	00eb      	lsls	r3, r5, #3
 800af2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af2e:	00e2      	lsls	r2, r4, #3
 800af30:	4614      	mov	r4, r2
 800af32:	461d      	mov	r5, r3
 800af34:	4643      	mov	r3, r8
 800af36:	18e3      	adds	r3, r4, r3
 800af38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af3c:	464b      	mov	r3, r9
 800af3e:	eb45 0303 	adc.w	r3, r5, r3
 800af42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800af46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af56:	f04f 0200 	mov.w	r2, #0
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800af62:	4629      	mov	r1, r5
 800af64:	008b      	lsls	r3, r1, #2
 800af66:	4621      	mov	r1, r4
 800af68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af6c:	4621      	mov	r1, r4
 800af6e:	008a      	lsls	r2, r1, #2
 800af70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800af74:	f7f5 fe88 	bl	8000c88 <__aeabi_uldivmod>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4b60      	ldr	r3, [pc, #384]	; (800b100 <UART_SetConfig+0x4e4>)
 800af7e:	fba3 2302 	umull	r2, r3, r3, r2
 800af82:	095b      	lsrs	r3, r3, #5
 800af84:	011c      	lsls	r4, r3, #4
 800af86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af8a:	2200      	movs	r2, #0
 800af8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800af90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800af94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800af98:	4642      	mov	r2, r8
 800af9a:	464b      	mov	r3, r9
 800af9c:	1891      	adds	r1, r2, r2
 800af9e:	61b9      	str	r1, [r7, #24]
 800afa0:	415b      	adcs	r3, r3
 800afa2:	61fb      	str	r3, [r7, #28]
 800afa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afa8:	4641      	mov	r1, r8
 800afaa:	1851      	adds	r1, r2, r1
 800afac:	6139      	str	r1, [r7, #16]
 800afae:	4649      	mov	r1, r9
 800afb0:	414b      	adcs	r3, r1
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	f04f 0200 	mov.w	r2, #0
 800afb8:	f04f 0300 	mov.w	r3, #0
 800afbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afc0:	4659      	mov	r1, fp
 800afc2:	00cb      	lsls	r3, r1, #3
 800afc4:	4651      	mov	r1, sl
 800afc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afca:	4651      	mov	r1, sl
 800afcc:	00ca      	lsls	r2, r1, #3
 800afce:	4610      	mov	r0, r2
 800afd0:	4619      	mov	r1, r3
 800afd2:	4603      	mov	r3, r0
 800afd4:	4642      	mov	r2, r8
 800afd6:	189b      	adds	r3, r3, r2
 800afd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800afdc:	464b      	mov	r3, r9
 800afde:	460a      	mov	r2, r1
 800afe0:	eb42 0303 	adc.w	r3, r2, r3
 800afe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aff4:	f04f 0200 	mov.w	r2, #0
 800aff8:	f04f 0300 	mov.w	r3, #0
 800affc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b000:	4649      	mov	r1, r9
 800b002:	008b      	lsls	r3, r1, #2
 800b004:	4641      	mov	r1, r8
 800b006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b00a:	4641      	mov	r1, r8
 800b00c:	008a      	lsls	r2, r1, #2
 800b00e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b012:	f7f5 fe39 	bl	8000c88 <__aeabi_uldivmod>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4611      	mov	r1, r2
 800b01c:	4b38      	ldr	r3, [pc, #224]	; (800b100 <UART_SetConfig+0x4e4>)
 800b01e:	fba3 2301 	umull	r2, r3, r3, r1
 800b022:	095b      	lsrs	r3, r3, #5
 800b024:	2264      	movs	r2, #100	; 0x64
 800b026:	fb02 f303 	mul.w	r3, r2, r3
 800b02a:	1acb      	subs	r3, r1, r3
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	3332      	adds	r3, #50	; 0x32
 800b030:	4a33      	ldr	r2, [pc, #204]	; (800b100 <UART_SetConfig+0x4e4>)
 800b032:	fba2 2303 	umull	r2, r3, r2, r3
 800b036:	095b      	lsrs	r3, r3, #5
 800b038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b03c:	441c      	add	r4, r3
 800b03e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b042:	2200      	movs	r2, #0
 800b044:	673b      	str	r3, [r7, #112]	; 0x70
 800b046:	677a      	str	r2, [r7, #116]	; 0x74
 800b048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b04c:	4642      	mov	r2, r8
 800b04e:	464b      	mov	r3, r9
 800b050:	1891      	adds	r1, r2, r2
 800b052:	60b9      	str	r1, [r7, #8]
 800b054:	415b      	adcs	r3, r3
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b05c:	4641      	mov	r1, r8
 800b05e:	1851      	adds	r1, r2, r1
 800b060:	6039      	str	r1, [r7, #0]
 800b062:	4649      	mov	r1, r9
 800b064:	414b      	adcs	r3, r1
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	f04f 0200 	mov.w	r2, #0
 800b06c:	f04f 0300 	mov.w	r3, #0
 800b070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b074:	4659      	mov	r1, fp
 800b076:	00cb      	lsls	r3, r1, #3
 800b078:	4651      	mov	r1, sl
 800b07a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b07e:	4651      	mov	r1, sl
 800b080:	00ca      	lsls	r2, r1, #3
 800b082:	4610      	mov	r0, r2
 800b084:	4619      	mov	r1, r3
 800b086:	4603      	mov	r3, r0
 800b088:	4642      	mov	r2, r8
 800b08a:	189b      	adds	r3, r3, r2
 800b08c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b08e:	464b      	mov	r3, r9
 800b090:	460a      	mov	r2, r1
 800b092:	eb42 0303 	adc.w	r3, r2, r3
 800b096:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b0a2:	667a      	str	r2, [r7, #100]	; 0x64
 800b0a4:	f04f 0200 	mov.w	r2, #0
 800b0a8:	f04f 0300 	mov.w	r3, #0
 800b0ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	008b      	lsls	r3, r1, #2
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	008a      	lsls	r2, r1, #2
 800b0be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b0c2:	f7f5 fde1 	bl	8000c88 <__aeabi_uldivmod>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	; (800b100 <UART_SetConfig+0x4e4>)
 800b0cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b0d0:	095b      	lsrs	r3, r3, #5
 800b0d2:	2164      	movs	r1, #100	; 0x64
 800b0d4:	fb01 f303 	mul.w	r3, r1, r3
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	011b      	lsls	r3, r3, #4
 800b0dc:	3332      	adds	r3, #50	; 0x32
 800b0de:	4a08      	ldr	r2, [pc, #32]	; (800b100 <UART_SetConfig+0x4e4>)
 800b0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e4:	095b      	lsrs	r3, r3, #5
 800b0e6:	f003 020f 	and.w	r2, r3, #15
 800b0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4422      	add	r2, r4
 800b0f2:	609a      	str	r2, [r3, #8]
}
 800b0f4:	bf00      	nop
 800b0f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b100:	51eb851f 	.word	0x51eb851f

0800b104 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b104:	b084      	sub	sp, #16
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	f107 001c 	add.w	r0, r7, #28
 800b112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b11a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b11c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b11e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b122:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b126:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b12a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b12e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	4313      	orrs	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b13e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	431a      	orrs	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	b004      	add	sp, #16
 800b158:	4770      	bx	lr

0800b15a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2203      	movs	r2, #3
 800b1a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0303 	and.w	r3, r3, #3
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b085      	sub	sp, #20
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b1f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b1f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b208:	f023 030f 	bic.w	r3, r3, #15
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	431a      	orrs	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	b2db      	uxtb	r3, r3
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3314      	adds	r3, #20
 800b24a:	461a      	mov	r2, r3
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	4413      	add	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
}  
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b262:	b480      	push	{r7}
 800b264:	b085      	sub	sp, #20
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b288:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b28e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b294:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0

}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b088      	sub	sp, #32
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2cc:	2340      	movs	r3, #64	; 0x40
 800b2ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2da:	f107 0308 	add.w	r3, r7, #8
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f7ff ff74 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b2e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ea:	2110      	movs	r1, #16
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f9d7 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b2f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b088      	sub	sp, #32
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b30c:	2311      	movs	r3, #17
 800b30e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b310:	2340      	movs	r3, #64	; 0x40
 800b312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b31e:	f107 0308 	add.w	r3, r7, #8
 800b322:	4619      	mov	r1, r3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff ff52 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b32a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b32e:	2111      	movs	r1, #17
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f9b5 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b336:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b338:	69fb      	ldr	r3, [r7, #28]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b088      	sub	sp, #32
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b350:	2312      	movs	r3, #18
 800b352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b35c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b362:	f107 0308 	add.w	r3, r7, #8
 800b366:	4619      	mov	r1, r3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff ff30 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b372:	2112      	movs	r1, #18
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f993 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b37c:	69fb      	ldr	r3, [r7, #28]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3720      	adds	r7, #32
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b088      	sub	sp, #32
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b394:	2318      	movs	r3, #24
 800b396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b398:	2340      	movs	r3, #64	; 0x40
 800b39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b39c:	2300      	movs	r3, #0
 800b39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3a6:	f107 0308 	add.w	r3, r7, #8
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7ff ff0e 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b3b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b6:	2118      	movs	r1, #24
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f971 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3c0:	69fb      	ldr	r3, [r7, #28]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3720      	adds	r7, #32
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b088      	sub	sp, #32
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b3d8:	2319      	movs	r3, #25
 800b3da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3dc:	2340      	movs	r3, #64	; 0x40
 800b3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3ea:	f107 0308 	add.w	r3, r7, #8
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7ff feec 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3fa:	2119      	movs	r1, #25
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f94f 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b404:	69fb      	ldr	r3, [r7, #28]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3720      	adds	r7, #32
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
	...

0800b410 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b418:	2300      	movs	r3, #0
 800b41a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b41c:	230c      	movs	r3, #12
 800b41e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b420:	2340      	movs	r3, #64	; 0x40
 800b422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b42c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff feca 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b43a:	4a05      	ldr	r2, [pc, #20]	; (800b450 <SDMMC_CmdStopTransfer+0x40>)
 800b43c:	210c      	movs	r1, #12
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f92e 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b446:	69fb      	ldr	r3, [r7, #28]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3720      	adds	r7, #32
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	05f5e100 	.word	0x05f5e100

0800b454 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08a      	sub	sp, #40	; 0x28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b464:	2307      	movs	r3, #7
 800b466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b468:	2340      	movs	r3, #64	; 0x40
 800b46a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b474:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b476:	f107 0310 	add.w	r3, r7, #16
 800b47a:	4619      	mov	r1, r3
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f7ff fea6 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b482:	f241 3288 	movw	r2, #5000	; 0x1388
 800b486:	2107      	movs	r1, #7
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f000 f909 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b48e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b492:	4618      	mov	r0, r3
 800b494:	3728      	adds	r7, #40	; 0x28
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4b8:	f107 0308 	add.w	r3, r7, #8
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fe85 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fb23 	bl	800bb10 <SDMMC_GetCmdError>
 800b4ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b088      	sub	sp, #32
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b4de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b4e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4e8:	2340      	movs	r3, #64	; 0x40
 800b4ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff fe66 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fab6 	bl	800ba74 <SDMMC_GetCmdResp7>
 800b508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b50a:	69fb      	ldr	r3, [r7, #28]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3720      	adds	r7, #32
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b522:	2337      	movs	r3, #55	; 0x37
 800b524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b52a:	2300      	movs	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b534:	f107 0308 	add.w	r3, r7, #8
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff fe47 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b540:	f241 3288 	movw	r2, #5000	; 0x1388
 800b544:	2137      	movs	r1, #55	; 0x37
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f8aa 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b54c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b54e:	69fb      	ldr	r3, [r7, #28]
}
 800b550:	4618      	mov	r0, r3
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b088      	sub	sp, #32
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b56e:	2329      	movs	r3, #41	; 0x29
 800b570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b572:	2340      	movs	r3, #64	; 0x40
 800b574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b580:	f107 0308 	add.w	r3, r7, #8
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fe21 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f9bd 	bl	800b90c <SDMMC_GetCmdResp3>
 800b592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b594:	69fb      	ldr	r3, [r7, #28]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3720      	adds	r7, #32
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b088      	sub	sp, #32
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b5aa:	2302      	movs	r3, #2
 800b5ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b5ae:	23c0      	movs	r3, #192	; 0xc0
 800b5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5bc:	f107 0308 	add.w	r3, r7, #8
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7ff fe03 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f957 	bl	800b87c <SDMMC_GetCmdResp2>
 800b5ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5d0:	69fb      	ldr	r3, [r7, #28]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3720      	adds	r7, #32
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b088      	sub	sp, #32
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b5e8:	2309      	movs	r3, #9
 800b5ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b5ec:	23c0      	movs	r3, #192	; 0xc0
 800b5ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5fa:	f107 0308 	add.w	r3, r7, #8
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff fde4 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f938 	bl	800b87c <SDMMC_GetCmdResp2>
 800b60c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b60e:	69fb      	ldr	r3, [r7, #28]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3720      	adds	r7, #32
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b626:	2303      	movs	r3, #3
 800b628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b62a:	2340      	movs	r3, #64	; 0x40
 800b62c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b62e:	2300      	movs	r3, #0
 800b630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b636:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b638:	f107 0308 	add.w	r3, r7, #8
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fdc5 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	2103      	movs	r1, #3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f99d 	bl	800b988 <SDMMC_GetCmdResp6>
 800b64e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b650:	69fb      	ldr	r3, [r7, #28]
}
 800b652:	4618      	mov	r0, r3
 800b654:	3720      	adds	r7, #32
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b088      	sub	sp, #32
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b668:	230d      	movs	r3, #13
 800b66a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b66c:	2340      	movs	r3, #64	; 0x40
 800b66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b670:	2300      	movs	r3, #0
 800b672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b678:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff fda4 	bl	800b1ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b686:	f241 3288 	movw	r2, #5000	; 0x1388
 800b68a:	210d      	movs	r1, #13
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f807 	bl	800b6a0 <SDMMC_GetCmdResp1>
 800b692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b694:	69fb      	ldr	r3, [r7, #28]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3720      	adds	r7, #32
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b6ae:	4b70      	ldr	r3, [pc, #448]	; (800b870 <SDMMC_GetCmdResp1+0x1d0>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a70      	ldr	r2, [pc, #448]	; (800b874 <SDMMC_GetCmdResp1+0x1d4>)
 800b6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b8:	0a5a      	lsrs	r2, r3, #9
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	fb02 f303 	mul.w	r3, r2, r3
 800b6c0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	1e5a      	subs	r2, r3, #1
 800b6c6:	61fa      	str	r2, [r7, #28]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6d0:	e0c9      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0ef      	beq.n	800b6c2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1ea      	bne.n	800b6c2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f0:	f003 0304 	and.w	r3, r3, #4
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d004      	beq.n	800b702 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6fe:	2304      	movs	r3, #4
 800b700:	e0b1      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d004      	beq.n	800b718 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2201      	movs	r2, #1
 800b712:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b714:	2301      	movs	r3, #1
 800b716:	e0a6      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	22c5      	movs	r2, #197	; 0xc5
 800b71c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fd7f 	bl	800b222 <SDIO_GetCommandResponse>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	7afb      	ldrb	r3, [r7, #11]
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d001      	beq.n	800b732 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b72e:	2301      	movs	r3, #1
 800b730:	e099      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b732:	2100      	movs	r1, #0
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff fd81 	bl	800b23c <SDIO_GetResponse>
 800b73a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	4b4e      	ldr	r3, [pc, #312]	; (800b878 <SDMMC_GetCmdResp1+0x1d8>)
 800b740:	4013      	ands	r3, r2
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b746:	2300      	movs	r3, #0
 800b748:	e08d      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	da02      	bge.n	800b756 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b754:	e087      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b760:	2340      	movs	r3, #64	; 0x40
 800b762:	e080      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b76e:	2380      	movs	r3, #128	; 0x80
 800b770:	e079      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b77c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b780:	e071      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b78c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b790:	e069      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b79c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a0:	e061      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d002      	beq.n	800b7b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b7ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b7b0:	e059      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b7bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7c0:	e051      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b7cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7d0:	e049      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b7dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b7e0:	e041      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b7ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7f0:	e039      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b7fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b800:	e031      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b80c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b810:	e029      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b81c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b820:	e021      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b82c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b830:	e019      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b83c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b840:	e011      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b84c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b850:	e009      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f003 0308 	and.w	r3, r3, #8
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b85c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b860:	e001      	b.n	800b866 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b866:	4618      	mov	r0, r3
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20000020 	.word	0x20000020
 800b874:	10624dd3 	.word	0x10624dd3
 800b878:	fdffe008 	.word	0xfdffe008

0800b87c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b884:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <SDMMC_GetCmdResp2+0x88>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a1f      	ldr	r2, [pc, #124]	; (800b908 <SDMMC_GetCmdResp2+0x8c>)
 800b88a:	fba2 2303 	umull	r2, r3, r2, r3
 800b88e:	0a5b      	lsrs	r3, r3, #9
 800b890:	f241 3288 	movw	r2, #5000	; 0x1388
 800b894:	fb02 f303 	mul.w	r3, r2, r3
 800b898:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	1e5a      	subs	r2, r3, #1
 800b89e:	60fa      	str	r2, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8a8:	e026      	b.n	800b8f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d0ef      	beq.n	800b89a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d1ea      	bne.n	800b89a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c8:	f003 0304 	and.w	r3, r3, #4
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2204      	movs	r2, #4
 800b8d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8d6:	2304      	movs	r3, #4
 800b8d8:	e00e      	b.n	800b8f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8de:	f003 0301 	and.w	r3, r3, #1
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d004      	beq.n	800b8f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e003      	b.n	800b8f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	22c5      	movs	r2, #197	; 0xc5
 800b8f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20000020 	.word	0x20000020
 800b908:	10624dd3 	.word	0x10624dd3

0800b90c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b914:	4b1a      	ldr	r3, [pc, #104]	; (800b980 <SDMMC_GetCmdResp3+0x74>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a1a      	ldr	r2, [pc, #104]	; (800b984 <SDMMC_GetCmdResp3+0x78>)
 800b91a:	fba2 2303 	umull	r2, r3, r2, r3
 800b91e:	0a5b      	lsrs	r3, r3, #9
 800b920:	f241 3288 	movw	r2, #5000	; 0x1388
 800b924:	fb02 f303 	mul.w	r3, r2, r3
 800b928:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	60fa      	str	r2, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b938:	e01b      	b.n	800b972 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b93e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0ef      	beq.n	800b92a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1ea      	bne.n	800b92a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d004      	beq.n	800b96a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2204      	movs	r2, #4
 800b964:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b966:	2304      	movs	r3, #4
 800b968:	e003      	b.n	800b972 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	22c5      	movs	r2, #197	; 0xc5
 800b96e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	20000020 	.word	0x20000020
 800b984:	10624dd3 	.word	0x10624dd3

0800b988 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	460b      	mov	r3, r1
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b996:	4b35      	ldr	r3, [pc, #212]	; (800ba6c <SDMMC_GetCmdResp6+0xe4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a35      	ldr	r2, [pc, #212]	; (800ba70 <SDMMC_GetCmdResp6+0xe8>)
 800b99c:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a0:	0a5b      	lsrs	r3, r3, #9
 800b9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a6:	fb02 f303 	mul.w	r3, r2, r3
 800b9aa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	1e5a      	subs	r2, r3, #1
 800b9b0:	61fa      	str	r2, [r7, #28]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9ba:	e052      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d0ef      	beq.n	800b9ac <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1ea      	bne.n	800b9ac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9e8:	2304      	movs	r3, #4
 800b9ea:	e03a      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e02f      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7ff fc0d 	bl	800b222 <SDIO_GetCommandResponse>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	7afb      	ldrb	r3, [r7, #11]
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d001      	beq.n	800ba16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e025      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	22c5      	movs	r2, #197	; 0xc5
 800ba1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fc0c 	bl	800b23c <SDIO_GetResponse>
 800ba24:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d106      	bne.n	800ba3e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	0c1b      	lsrs	r3, r3, #16
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	e011      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba4c:	e009      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba5c:	e001      	b.n	800ba62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000020 	.word	0x20000020
 800ba70:	10624dd3 	.word	0x10624dd3

0800ba74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba7c:	4b22      	ldr	r3, [pc, #136]	; (800bb08 <SDMMC_GetCmdResp7+0x94>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a22      	ldr	r2, [pc, #136]	; (800bb0c <SDMMC_GetCmdResp7+0x98>)
 800ba82:	fba2 2303 	umull	r2, r3, r2, r3
 800ba86:	0a5b      	lsrs	r3, r3, #9
 800ba88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba8c:	fb02 f303 	mul.w	r3, r2, r3
 800ba90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	1e5a      	subs	r2, r3, #1
 800ba96:	60fa      	str	r2, [r7, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baa0:	e02c      	b.n	800bafc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0ef      	beq.n	800ba92 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1ea      	bne.n	800ba92 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac0:	f003 0304 	and.w	r3, r3, #4
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d004      	beq.n	800bad2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2204      	movs	r2, #4
 800bacc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bace:	2304      	movs	r3, #4
 800bad0:	e014      	b.n	800bafc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d004      	beq.n	800bae8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e009      	b.n	800bafc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2240      	movs	r2, #64	; 0x40
 800baf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bafa:	2300      	movs	r3, #0
  
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	20000020 	.word	0x20000020
 800bb0c:	10624dd3 	.word	0x10624dd3

0800bb10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb18:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <SDMMC_GetCmdError+0x50>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a11      	ldr	r2, [pc, #68]	; (800bb64 <SDMMC_GetCmdError+0x54>)
 800bb1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb22:	0a5b      	lsrs	r3, r3, #9
 800bb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb28:	fb02 f303 	mul.w	r3, r2, r3
 800bb2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	1e5a      	subs	r2, r3, #1
 800bb32:	60fa      	str	r2, [r7, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d102      	bne.n	800bb3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb3c:	e009      	b.n	800bb52 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0f1      	beq.n	800bb2e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	22c5      	movs	r2, #197	; 0xc5
 800bb4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	20000020 	.word	0x20000020
 800bb64:	10624dd3 	.word	0x10624dd3

0800bb68 <bmp5_init>:
*  @brief This API is the entry point.
*  It performs the selection of I2C/I3C/SPI read mechanism according to the
*  selected interface and reads the chip-id of the sensor.
*/
int8_t bmp5_init(struct bmp5_dev *dev)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t chip_id;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fb0c 	bl	800c18e <null_ptr_check>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800bb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d133      	bne.n	800bbea <bmp5_init+0x82>
    {
        if (dev->intf == BMP5_SPI_INTF)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7d5b      	ldrb	r3, [r3, #21]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d108      	bne.n	800bb9c <bmp5_init+0x34>
        {
            /* Performing a single read via SPI of registers,
             * e.g. registers CHIP_ID, before the actual
             * SPI communication with the device.
             */
            rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 800bb8a:	f107 010e 	add.w	r1, r7, #14
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	2001      	movs	r0, #1
 800bb94:	f000 f82f 	bl	800bbf6 <bmp5_get_regs>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 800bb9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d122      	bne.n	800bbea <bmp5_init+0x82>
        {
            /* Read chip_id */
            rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &chip_id, 1, dev);
 800bba4:	f107 010d 	add.w	r1, r7, #13
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	2001      	movs	r0, #1
 800bbae:	f000 f822 	bl	800bbf6 <bmp5_get_regs>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800bbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d115      	bne.n	800bbea <bmp5_init+0x82>
            {
                if (chip_id != 0)
 800bbbe:	7b7b      	ldrb	r3, [r7, #13]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d005      	beq.n	800bbd0 <bmp5_init+0x68>
                {
                    /* Validate post power-up procedure */
                    rslt = power_up_check(dev);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 fb1b 	bl	800c200 <power_up_check>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	73fb      	strb	r3, [r7, #15]
 800bbce:	e001      	b.n	800bbd4 <bmp5_init+0x6c>
                }
                else
                {
                    rslt = BMP5_E_INVALID_CHIP_ID;
 800bbd0:	23fc      	movs	r3, #252	; 0xfc
 800bbd2:	73fb      	strb	r3, [r7, #15]
                }

                if (rslt == BMP5_OK)
 800bbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d106      	bne.n	800bbea <bmp5_init+0x82>
                {
                    rslt = validate_chip_id(chip_id, dev);
 800bbdc:	7b7b      	ldrb	r3, [r7, #13]
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 faf4 	bl	800c1ce <validate_chip_id>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800bbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <bmp5_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp5_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 800bbf6:	b590      	push	{r4, r7, lr}
 800bbf8:	b087      	sub	sp, #28
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
 800bc02:	4603      	mov	r3, r0
 800bc04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800bc06:	6838      	ldr	r0, [r7, #0]
 800bc08:	f000 fac1 	bl	800c18e <null_ptr_check>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 800bc10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d11e      	bne.n	800bc56 <bmp5_get_regs+0x60>
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d01b      	beq.n	800bc56 <bmp5_get_regs+0x60>
    {
        if (dev->intf == BMP5_SPI_INTF)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	7d5b      	ldrb	r3, [r3, #21]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d103      	bne.n	800bc2e <bmp5_get_regs+0x38>
        {
            /* If interface selected is SPI */
            reg_addr = reg_addr | BMP5_SPI_RD_MASK;
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc2c:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data from the reg_addr */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	689c      	ldr	r4, [r3, #8]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	7bf8      	ldrb	r0, [r7, #15]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	68b9      	ldr	r1, [r7, #8]
 800bc3c:	47a0      	blx	r4
 800bc3e:	4603      	mov	r3, r0
 800bc40:	461a      	mov	r2, r3
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	751a      	strb	r2, [r3, #20]

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d004      	beq.n	800bc5a <bmp5_get_regs+0x64>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL;
 800bc50:	23fe      	movs	r3, #254	; 0xfe
 800bc52:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 800bc54:	e001      	b.n	800bc5a <bmp5_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800bc56:	23ff      	movs	r3, #255	; 0xff
 800bc58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800bc5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	371c      	adds	r7, #28
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd90      	pop	{r4, r7, pc}

0800bc66 <bmp5_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp5_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp5_dev *dev)
{
 800bc66:	b590      	push	{r4, r7, lr}
 800bc68:	b087      	sub	sp, #28
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	75bb      	strb	r3, [r7, #22]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800bc7a:	6838      	ldr	r0, [r7, #0]
 800bc7c:	f000 fa87 	bl	800c18e <null_ptr_check>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMP5_OK) && (reg_data != NULL))
 800bc84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d140      	bne.n	800bd0e <bmp5_set_regs+0xa8>
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d03d      	beq.n	800bd0e <bmp5_set_regs+0xa8>
    {
        if (dev->intf == BMP5_SPI_INTF)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	7d5b      	ldrb	r3, [r3, #21]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d11d      	bne.n	800bcd6 <bmp5_set_regs+0x70>
        {
            /* Write the data to the reg_addr */
            do
            {
                dev->intf_rslt = dev->write((reg_addr + idx), &reg_data[idx], 1, dev->intf_ptr);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68dc      	ldr	r4, [r3, #12]
 800bc9e:	7bfa      	ldrb	r2, [r7, #15]
 800bca0:	7dbb      	ldrb	r3, [r7, #22]
 800bca2:	4413      	add	r3, r2
 800bca4:	b2d8      	uxtb	r0, r3
 800bca6:	7dbb      	ldrb	r3, [r7, #22]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	18d1      	adds	r1, r2, r3
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	47a0      	blx	r4
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	751a      	strb	r2, [r3, #20]
                idx++;
 800bcbc:	7dbb      	ldrb	r3, [r7, #22]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	75bb      	strb	r3, [r7, #22]
            } while ((idx < len) && (dev->intf_rslt == BMP5_INTF_RET_SUCCESS));
 800bcc2:	7dbb      	ldrb	r3, [r7, #22]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d919      	bls.n	800bcfe <bmp5_set_regs+0x98>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0e2      	beq.n	800bc9a <bmp5_set_regs+0x34>
 800bcd4:	e013      	b.n	800bcfe <bmp5_set_regs+0x98>
        }
        else if ((dev->intf == BMP5_I2C_INTF) || (dev->intf == BMP5_I3C_INTF))
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	7d5b      	ldrb	r3, [r3, #21]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d003      	beq.n	800bce6 <bmp5_set_regs+0x80>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	7d5b      	ldrb	r3, [r3, #21]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d10b      	bne.n	800bcfe <bmp5_set_regs+0x98>
        {
            /* Write the data to the reg_addr */
            dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	68dc      	ldr	r4, [r3, #12]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	7bf8      	ldrb	r0, [r7, #15]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	68b9      	ldr	r1, [r7, #8]
 800bcf4:	47a0      	blx	r4
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	751a      	strb	r2, [r3, #20]
        }

        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <bmp5_set_regs+0xac>
        {
            /* Failure case */
            rslt = BMP5_E_COM_FAIL;
 800bd08:	23fe      	movs	r3, #254	; 0xfe
 800bd0a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP5_INTF_RET_SUCCESS)
 800bd0c:	e001      	b.n	800bd12 <bmp5_set_regs+0xac>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800bd0e:	23ff      	movs	r3, #255	; 0xff
 800bd10:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800bd12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	371c      	adds	r7, #28
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd90      	pop	{r4, r7, pc}

0800bd1e <bmp5_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp5_soft_reset(struct bmp5_dev *dev)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t por_status;
    uint8_t data = BMP5_SOFT_RESET_CMD;
 800bd26:	23b6      	movs	r3, #182	; 0xb6
 800bd28:	737b      	strb	r3, [r7, #13]

    /* Reset the device */
    rslt = bmp5_set_regs(BMP5_REG_CMD, &data, 1, dev);
 800bd2a:	f107 010d 	add.w	r1, r7, #13
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	207e      	movs	r0, #126	; 0x7e
 800bd34:	f7ff ff97 	bl	800bc66 <bmp5_set_regs>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800bd3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d114      	bne.n	800bd6e <bmp5_soft_reset+0x50>
    {
        /* Soft-reset execution takes 2 ms */
        dev->delay_us(BMP5_DELAY_US_SOFT_RESET, dev->intf_ptr);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	6852      	ldr	r2, [r2, #4]
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bd52:	4798      	blx	r3

        if (dev->intf == BMP5_SPI_INTF)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7d5b      	ldrb	r3, [r3, #21]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d108      	bne.n	800bd6e <bmp5_soft_reset+0x50>
        {
            /* Performing a single read via SPI of registers,
            * e.g. registers CHIP_ID, before the actual
            * SPI communication with the device.
            */
            rslt = bmp5_get_regs(BMP5_REG_CHIP_ID, &reg_data, 1, dev);
 800bd5c:	f107 010e 	add.w	r1, r7, #14
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	2001      	movs	r0, #1
 800bd66:	f7ff ff46 	bl	800bbf6 <bmp5_get_regs>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	73fb      	strb	r3, [r7, #15]
#endif
    }

    (void)por_status; // Avoid compiler warning-as-error

    return rslt;
 800bd6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <bmp5_get_interrupt_status>:

/*!
 *  @brief This API is used to get interrupt status.
 */
int8_t bmp5_get_interrupt_status(uint8_t *int_status, struct bmp5_dev *dev)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (int_status != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d008      	beq.n	800bd9c <bmp5_get_interrupt_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_INT_STATUS, int_status, 1, dev);
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	2027      	movs	r0, #39	; 0x27
 800bd92:	f7ff ff30 	bl	800bbf6 <bmp5_get_regs>
 800bd96:	4603      	mov	r3, r0
 800bd98:	73fb      	strb	r3, [r7, #15]
 800bd9a:	e001      	b.n	800bda0 <bmp5_get_interrupt_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800bd9c:	23ff      	movs	r3, #255	; 0xff
 800bd9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800bda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <bmp5_get_power_mode>:

/*!
 *  @brief This API is used to get powermode of the sensor.
 */
int8_t bmp5_get_power_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t deep_dis;
    uint8_t reg_data;
    uint8_t pwrmode;

    if (powermode != NULL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d03f      	beq.n	800be3c <bmp5_get_power_mode+0x90>
    {
        /* Read the power mode register */
        rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800bdbc:	f107 010c 	add.w	r1, r7, #12
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	2037      	movs	r0, #55	; 0x37
 800bdc6:	f7ff ff16 	bl	800bbf6 <bmp5_get_regs>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 800bdce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d134      	bne.n	800be40 <bmp5_get_power_mode+0x94>
        {
            pwrmode = BMP5_GET_BITS_POS_0(reg_data, BMP5_POWERMODE);
 800bdd6:	7b3b      	ldrb	r3, [r7, #12]
 800bdd8:	f003 0303 	and.w	r3, r3, #3
 800bddc:	73bb      	strb	r3, [r7, #14]

            switch (pwrmode)
 800bdde:	7bbb      	ldrb	r3, [r7, #14]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d828      	bhi.n	800be36 <bmp5_get_power_mode+0x8a>
 800bde4:	a201      	add	r2, pc, #4	; (adr r2, 800bdec <bmp5_get_power_mode+0x40>)
 800bde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdea:	bf00      	nop
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800be1f 	.word	0x0800be1f
 800bdf4:	0800be27 	.word	0x0800be27
 800bdf8:	0800be2f 	.word	0x0800be2f
            {
                case BMP5_POWERMODE_STANDBY:

                    /* Getting deep disable status */
                    deep_dis = BMP5_GET_BITSLICE(reg_data, BMP5_DEEP_DISABLE);
 800bdfc:	7b3b      	ldrb	r3, [r7, #12]
 800bdfe:	09db      	lsrs	r3, r3, #7
 800be00:	737b      	strb	r3, [r7, #13]
                    /* Checking deepstandby status only when powermode is in standby mode */

                    /* If deep_dis = 0(BMP5_DEEP_ENABLED) then deepstandby mode is enabled.
                     * If deep_dis = 1(BMP5_DEEP_DISABLED) then deepstandby mode is disabled
                     */
                    if (deep_dis == BMP5_DEEP_ENABLED)
 800be02:	7b7b      	ldrb	r3, [r7, #13]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d106      	bne.n	800be16 <bmp5_get_power_mode+0x6a>
                    {
                        rslt = check_deepstandby_mode(powermode, dev);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa31 	bl	800c272 <check_deepstandby_mode>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        *powermode = BMP5_POWERMODE_STANDBY;
                    }

                    break;
 800be14:	e014      	b.n	800be40 <bmp5_get_power_mode+0x94>
                        *powermode = BMP5_POWERMODE_STANDBY;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	701a      	strb	r2, [r3, #0]
                    break;
 800be1c:	e010      	b.n	800be40 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_NORMAL:
                    *powermode = BMP5_POWERMODE_NORMAL;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
                    break;
 800be24:	e00c      	b.n	800be40 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_FORCED:
                    *powermode = BMP5_POWERMODE_FORCED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2202      	movs	r2, #2
 800be2a:	701a      	strb	r2, [r3, #0]
                    break;
 800be2c:	e008      	b.n	800be40 <bmp5_get_power_mode+0x94>
                case BMP5_POWERMODE_CONTINOUS:
                    *powermode = BMP5_POWERMODE_CONTINOUS;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2203      	movs	r2, #3
 800be32:	701a      	strb	r2, [r3, #0]
                    break;
 800be34:	e004      	b.n	800be40 <bmp5_get_power_mode+0x94>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 800be36:	23f9      	movs	r3, #249	; 0xf9
 800be38:	73fb      	strb	r3, [r7, #15]
                    break;
 800be3a:	e001      	b.n	800be40 <bmp5_get_power_mode+0x94>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800be3c:	23ff      	movs	r3, #255	; 0xff
 800be3e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800be40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <bmp5_set_power_mode>:

/*!
 *  @brief This API is used to set powermode of the sensor.
 */
int8_t bmp5_set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	6039      	str	r1, [r7, #0]
 800be56:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    enum bmp5_powermode lst_pwrmode;

    /* Existing power mode of the device is received in lst_pwrmode */
    rslt = bmp5_get_power_mode(&lst_pwrmode, dev);
 800be58:	f107 030e 	add.w	r3, r7, #14
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff ffa4 	bl	800bdac <bmp5_get_power_mode>
 800be64:	4603      	mov	r3, r0
 800be66:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800be68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d137      	bne.n	800bee0 <bmp5_set_power_mode+0x94>
    {
        /* If the sensor is not in standby mode set the device to
         *  standby mode.
         */
        if (lst_pwrmode != BMP5_POWERMODE_STANDBY)
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d011      	beq.n	800be9a <bmp5_set_power_mode+0x4e>
        {
            /* Device should be set to standby before transiting to
             * forced mode or normal mode or continous mode.
             */
            rslt = set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	2000      	movs	r0, #0
 800be7a:	f000 faae 	bl	800c3da <set_power_mode>
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800be82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d107      	bne.n	800be9a <bmp5_set_power_mode+0x4e>
            {
                /* Give t_standby(as per data sheet) time for device to go into standby mode */
                dev->delay_us(BMP5_DELAY_US_STANDBY, dev->intf_ptr);
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	6852      	ldr	r2, [r2, #4]
 800be92:	4611      	mov	r1, r2
 800be94:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800be98:	4798      	blx	r3
            }
        }

        /* Set the desired power mode */
        if (rslt == BMP5_OK)
 800be9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d11e      	bne.n	800bee0 <bmp5_set_power_mode+0x94>
        {
            switch (powermode)
 800bea2:	79fb      	ldrb	r3, [r7, #7]
 800bea4:	2b04      	cmp	r3, #4
 800bea6:	d009      	beq.n	800bebc <bmp5_set_power_mode+0x70>
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	dc15      	bgt.n	800bed8 <bmp5_set_power_mode+0x8c>
 800beac:	2b00      	cmp	r3, #0
 800beae:	d016      	beq.n	800bede <bmp5_set_power_mode+0x92>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	db11      	blt.n	800bed8 <bmp5_set_power_mode+0x8c>
 800beb4:	3b01      	subs	r3, #1
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d80e      	bhi.n	800bed8 <bmp5_set_power_mode+0x8c>
 800beba:	e005      	b.n	800bec8 <bmp5_set_power_mode+0x7c>
            {
                case BMP5_POWERMODE_DEEP_STANDBY:
                    rslt = set_deep_standby_mode(dev);
 800bebc:	6838      	ldr	r0, [r7, #0]
 800bebe:	f000 fa1f 	bl	800c300 <set_deep_standby_mode>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
                    break;
 800bec6:	e00b      	b.n	800bee0 <bmp5_set_power_mode+0x94>
                     */
                    break;
                case BMP5_POWERMODE_NORMAL:
                case BMP5_POWERMODE_FORCED:
                case BMP5_POWERMODE_CONTINOUS:
                    rslt = set_power_mode(powermode, dev);
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fa84 	bl	800c3da <set_power_mode>
 800bed2:	4603      	mov	r3, r0
 800bed4:	73fb      	strb	r3, [r7, #15]
                    break;
 800bed6:	e003      	b.n	800bee0 <bmp5_set_power_mode+0x94>
                default:
                    rslt = BMP5_E_INVALID_POWERMODE;
 800bed8:	23f9      	movs	r3, #249	; 0xf9
 800beda:	73fb      	strb	r3, [r7, #15]
                    break;
 800bedc:	e000      	b.n	800bee0 <bmp5_set_power_mode+0x94>
                    break;
 800bede:	bf00      	nop
            }
        }
    }

    return rslt;
 800bee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <bmp5_get_sensor_data>:
 * sensor and store it in the bmp5_sensor_data structure instance passed by the user.
 */
int8_t bmp5_get_sensor_data(struct bmp5_sensor_data *sensor_data,
                            const struct bmp5_osr_odr_press_config *osr_odr_press_cfg,
                            struct bmp5_dev *dev)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b08a      	sub	sp, #40	; 0x28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[6] = { 0 };
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	2300      	movs	r3, #0
 800befe:	833b      	strh	r3, [r7, #24]
    int32_t raw_data_t;
    uint32_t raw_data_p;

    rslt = bmp5_get_regs(BMP5_REG_TEMP_DATA_XLSB, reg_data, 6, dev);
 800bf00:	f107 0114 	add.w	r1, r7, #20
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2206      	movs	r2, #6
 800bf08:	201d      	movs	r0, #29
 800bf0a:	f7ff fe74 	bl	800bbf6 <bmp5_get_regs>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP5_OK)
 800bf14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d13a      	bne.n	800bf92 <bmp5_get_sensor_data+0xa6>
    {
        raw_data_t = (int32_t)(((uint32_t)reg_data[2] << 16) | ((uint16_t)reg_data[1] << 8) | reg_data[0]);
 800bf1c:	7dbb      	ldrb	r3, [r7, #22]
 800bf1e:	041b      	lsls	r3, r3, #16
 800bf20:	7d7a      	ldrb	r2, [r7, #21]
 800bf22:	0212      	lsls	r2, r2, #8
 800bf24:	4313      	orrs	r3, r2
 800bf26:	7d3a      	ldrb	r2, [r7, #20]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	623b      	str	r3, [r7, #32]
        sensor_data->temperature =
            (int64_t)((raw_data_t / (int64_t)65536.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

        /* Division by 2^16(whose equivalent value is 65536) is performed to get temperature data in deg C */
        sensor_data->temperature = (float)(raw_data_t / 65536.0);
 800bf2c:	6a38      	ldr	r0, [r7, #32]
 800bf2e:	f7f4 faf9 	bl	8000524 <__aeabi_i2d>
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	4b1a      	ldr	r3, [pc, #104]	; (800bfa0 <bmp5_get_sensor_data+0xb4>)
 800bf38:	f7f4 fc88 	bl	800084c <__aeabi_ddiv>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4610      	mov	r0, r2
 800bf42:	4619      	mov	r1, r3
 800bf44:	f7f4 fe50 	bl	8000be8 <__aeabi_d2f>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	605a      	str	r2, [r3, #4]
#endif

        if (osr_odr_press_cfg->press_en == BMP5_ENABLE)
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	789b      	ldrb	r3, [r3, #2]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d119      	bne.n	800bf8a <bmp5_get_sensor_data+0x9e>
        {
            raw_data_p = (uint32_t)(((uint32_t)reg_data[5] << 16) | ((uint16_t)reg_data[4] << 8) | reg_data[3]);
 800bf56:	7e7b      	ldrb	r3, [r7, #25]
 800bf58:	041b      	lsls	r3, r3, #16
 800bf5a:	7e3a      	ldrb	r2, [r7, #24]
 800bf5c:	0212      	lsls	r2, r2, #8
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	7dfa      	ldrb	r2, [r7, #23]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	61fb      	str	r3, [r7, #28]
            sensor_data->pressure =
                (uint64_t)((raw_data_p / (int64_t)64.0) * (power(10, BMP5_FIXED_POINT_DIGIT_PRECISION)));
#else

            /* Division by 2^6(whose equivalent value is 64) is performed to get pressure data in Pa */
            sensor_data->pressure = (float)(raw_data_p / 64.0);
 800bf66:	69f8      	ldr	r0, [r7, #28]
 800bf68:	f7f4 facc 	bl	8000504 <__aeabi_ui2d>
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	4b0c      	ldr	r3, [pc, #48]	; (800bfa4 <bmp5_get_sensor_data+0xb8>)
 800bf72:	f7f4 fc6b 	bl	800084c <__aeabi_ddiv>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f7f4 fe33 	bl	8000be8 <__aeabi_d2f>
 800bf82:	4602      	mov	r2, r0
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	e003      	b.n	800bf92 <bmp5_get_sensor_data+0xa6>
#endif
        }
        else
        {
            sensor_data->pressure = 0.0;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f04f 0200 	mov.w	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
        }
    }

    return rslt;
 800bf92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3728      	adds	r7, #40	; 0x28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	40f00000 	.word	0x40f00000
 800bfa4:	40500000 	.word	0x40500000

0800bfa8 <bmp5_get_osr_odr_press_config>:
/*!
 *  @brief This API gets the configuration for oversampling of temperature, oversampling of
 *  pressure and ODR configuration along with pressure enable.
 */
int8_t bmp5_get_osr_odr_press_config(struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to store OSR and ODR config */
    uint8_t reg_data[2];

    if (osr_odr_press_cfg != NULL)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d02b      	beq.n	800c010 <bmp5_get_osr_odr_press_config+0x68>
    {
        /* Get OSR and ODR configuration in burst read */
        rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800bfb8:	f107 010c 	add.w	r1, r7, #12
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	2036      	movs	r0, #54	; 0x36
 800bfc2:	f7ff fe18 	bl	800bbf6 <bmp5_get_regs>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 800bfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d120      	bne.n	800c014 <bmp5_get_osr_odr_press_config+0x6c>
        {
            osr_odr_press_cfg->osr_t = BMP5_GET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS);
 800bfd2:	7b3b      	ldrb	r3, [r7, #12]
 800bfd4:	f003 0307 	and.w	r3, r3, #7
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	701a      	strb	r2, [r3, #0]
            osr_odr_press_cfg->osr_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_OS);
 800bfde:	7b3b      	ldrb	r3, [r7, #12]
 800bfe0:	10db      	asrs	r3, r3, #3
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	705a      	strb	r2, [r3, #1]
            osr_odr_press_cfg->press_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_PRESS_EN);
 800bfee:	7b3b      	ldrb	r3, [r7, #12]
 800bff0:	119b      	asrs	r3, r3, #6
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	709a      	strb	r2, [r3, #2]
            osr_odr_press_cfg->odr = BMP5_GET_BITSLICE(reg_data[1], BMP5_ODR);
 800bffe:	7b7b      	ldrb	r3, [r7, #13]
 800c000:	109b      	asrs	r3, r3, #2
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 031f 	and.w	r3, r3, #31
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	70da      	strb	r2, [r3, #3]
 800c00e:	e001      	b.n	800c014 <bmp5_get_osr_odr_press_config+0x6c>
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800c010:	23ff      	movs	r3, #255	; 0xff
 800c012:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <bmp5_set_osr_odr_press_config>:
 *
 *  @note If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
 *  without disabling deep-standby mode makes powermode invalid.
 */
int8_t bmp5_set_osr_odr_press_config(const struct bmp5_osr_odr_press_config *osr_odr_press_cfg, struct bmp5_dev *dev)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
    /* Variable to store the function result */
    int8_t rslt = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]

    /* Variable to set ODR and OSR config */
    uint8_t reg_data[2] = { 0 };
 800c02e:	2300      	movs	r3, #0
 800c030:	81bb      	strh	r3, [r7, #12]

    if (osr_odr_press_cfg != NULL)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d062      	beq.n	800c0fe <bmp5_set_osr_odr_press_config+0xde>
        /* If ODR is set to a value higher than 5Hz then powermode is set as standby mode, as ODR value greater than 5HZ
         * without disabling deep-standby mode makes powermode invalid.
         * NOTE: Register value for 5Hz is greater compared to ODRs higher than it. Thus in this below condition odr
         * is checked whether less than 5Hz macro.
         */
        if (osr_odr_press_cfg->odr < BMP5_ODR_05_HZ)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	78db      	ldrb	r3, [r3, #3]
 800c03c:	2b17      	cmp	r3, #23
 800c03e:	d804      	bhi.n	800c04a <bmp5_set_osr_odr_press_config+0x2a>
        {
            rslt = set_standby_mode(dev);
 800c040:	6838      	ldr	r0, [r7, #0]
 800c042:	f000 f9ff 	bl	800c444 <set_standby_mode>
 800c046:	4603      	mov	r3, r0
 800c048:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMP5_OK)
 800c04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d157      	bne.n	800c102 <bmp5_set_osr_odr_press_config+0xe2>
        {
            rslt = bmp5_get_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800c052:	f107 010c 	add.w	r1, r7, #12
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2202      	movs	r2, #2
 800c05a:	2036      	movs	r0, #54	; 0x36
 800c05c:	f7ff fdcb 	bl	800bbf6 <bmp5_get_regs>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800c064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d14a      	bne.n	800c102 <bmp5_set_osr_odr_press_config+0xe2>
            {
                reg_data[0] = BMP5_SET_BITS_POS_0(reg_data[0], BMP5_TEMP_OS, osr_odr_press_cfg->osr_t);
 800c06c:	7b3b      	ldrb	r3, [r7, #12]
 800c06e:	b25b      	sxtb	r3, r3
 800c070:	f023 0307 	bic.w	r3, r3, #7
 800c074:	b25a      	sxtb	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	b25b      	sxtb	r3, r3
 800c07c:	f003 0307 	and.w	r3, r3, #7
 800c080:	b25b      	sxtb	r3, r3
 800c082:	4313      	orrs	r3, r2
 800c084:	b25b      	sxtb	r3, r3
 800c086:	b2db      	uxtb	r3, r3
 800c088:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_OS, osr_odr_press_cfg->osr_p);
 800c08a:	7b3b      	ldrb	r3, [r7, #12]
 800c08c:	b25b      	sxtb	r3, r3
 800c08e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800c092:	b25a      	sxtb	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	785b      	ldrb	r3, [r3, #1]
 800c098:	00db      	lsls	r3, r3, #3
 800c09a:	b25b      	sxtb	r3, r3
 800c09c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0a0:	b25b      	sxtb	r3, r3
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	b25b      	sxtb	r3, r3
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	733b      	strb	r3, [r7, #12]
                reg_data[0] = BMP5_SET_BITSLICE(reg_data[0], BMP5_PRESS_EN, osr_odr_press_cfg->press_en);
 800c0aa:	7b3b      	ldrb	r3, [r7, #12]
 800c0ac:	b25b      	sxtb	r3, r3
 800c0ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0b2:	b25a      	sxtb	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	789b      	ldrb	r3, [r3, #2]
 800c0b8:	019b      	lsls	r3, r3, #6
 800c0ba:	b25b      	sxtb	r3, r3
 800c0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c0:	b25b      	sxtb	r3, r3
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	b25b      	sxtb	r3, r3
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	733b      	strb	r3, [r7, #12]
                reg_data[1] = BMP5_SET_BITSLICE(reg_data[1], BMP5_ODR, osr_odr_press_cfg->odr);
 800c0ca:	7b7b      	ldrb	r3, [r7, #13]
 800c0cc:	b25b      	sxtb	r3, r3
 800c0ce:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 800c0d2:	b25a      	sxtb	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	78db      	ldrb	r3, [r3, #3]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	b25b      	sxtb	r3, r3
 800c0dc:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800c0e0:	b25b      	sxtb	r3, r3
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	b25b      	sxtb	r3, r3
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	737b      	strb	r3, [r7, #13]

                /* Set ODR and OSR configuration */
                rslt = bmp5_set_regs(BMP5_REG_OSR_CONFIG, reg_data, 2, dev);
 800c0ea:	f107 010c 	add.w	r1, r7, #12
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	2036      	movs	r0, #54	; 0x36
 800c0f4:	f7ff fdb7 	bl	800bc66 <bmp5_set_regs>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]
 800c0fc:	e001      	b.n	800c102 <bmp5_set_osr_odr_press_config+0xe2>
            }
        }
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800c0fe:	23ff      	movs	r3, #255	; 0xff
 800c100:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <bmp5_get_iir_config>:

/*!
 *  @brief This API gets the configuration for IIR of temperature and pressure.
 */
int8_t bmp5_get_iir_config(struct bmp5_iir_config *iir_cfg, struct bmp5_dev *dev)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Variable to get IIR config */
    uint8_t reg_data[2];

    if (iir_cfg != NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d02f      	beq.n	800c17e <bmp5_get_iir_config+0x70>
    {
        /* Get IIR configuration */
        rslt = bmp5_get_regs(BMP5_REG_DSP_CONFIG, reg_data, 2, dev);
 800c11e:	f107 010c 	add.w	r1, r7, #12
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	2202      	movs	r2, #2
 800c126:	2030      	movs	r0, #48	; 0x30
 800c128:	f7ff fd65 	bl	800bbf6 <bmp5_get_regs>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]

        iir_cfg->shdw_set_iir_t = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_TEMP);
 800c130:	7b3b      	ldrb	r3, [r7, #12]
 800c132:	10db      	asrs	r3, r3, #3
 800c134:	b2db      	uxtb	r3, r3
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	709a      	strb	r2, [r3, #2]
        iir_cfg->shdw_set_iir_p = BMP5_GET_BITSLICE(reg_data[0], BMP5_SHDW_SET_IIR_PRESS);
 800c140:	7b3b      	ldrb	r3, [r7, #12]
 800c142:	115b      	asrs	r3, r3, #5
 800c144:	b2db      	uxtb	r3, r3
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	70da      	strb	r2, [r3, #3]
        iir_cfg->iir_flush_forced_en = BMP5_GET_BITSLICE(reg_data[0], BMP5_IIR_FLUSH_FORCED_EN);
 800c150:	7b3b      	ldrb	r3, [r7, #12]
 800c152:	109b      	asrs	r3, r3, #2
 800c154:	b2db      	uxtb	r3, r3
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	711a      	strb	r2, [r3, #4]

        iir_cfg->set_iir_t = BMP5_GET_BITS_POS_0(reg_data[1], BMP5_SET_IIR_TEMP);
 800c160:	7b7b      	ldrb	r3, [r7, #13]
 800c162:	f003 0307 	and.w	r3, r3, #7
 800c166:	b2da      	uxtb	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	701a      	strb	r2, [r3, #0]
        iir_cfg->set_iir_p = BMP5_GET_BITSLICE(reg_data[1], BMP5_SET_IIR_PRESS);
 800c16c:	7b7b      	ldrb	r3, [r7, #13]
 800c16e:	10db      	asrs	r3, r3, #3
 800c170:	b2db      	uxtb	r3, r3
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	b2da      	uxtb	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	705a      	strb	r2, [r3, #1]
 800c17c:	e001      	b.n	800c182 <bmp5_get_iir_config+0x74>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800c17e:	23ff      	movs	r3, #255	; 0xff
 800c180:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c182:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp5_dev *dev)
{
 800c18e:	b480      	push	{r7}
 800c190:	b085      	sub	sp, #20
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <null_ptr_check+0x26>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d007      	beq.n	800c1b4 <null_ptr_check+0x26>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <null_ptr_check+0x26>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BMP5_E_NULL_PTR;
 800c1b4:	23ff      	movs	r3, #255	; 0xff
 800c1b6:	73fb      	strb	r3, [r7, #15]
 800c1b8:	e001      	b.n	800c1be <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP5_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <validate_chip_id>:

/*!
 * @brief This internal API is used to validate the chip id of the sensor.
 */
static int8_t validate_chip_id(uint8_t chip_id, struct bmp5_dev *dev)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	6039      	str	r1, [r7, #0]
 800c1d8:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    if (chip_id == BMP5_CHIP_ID)
 800c1da:	79fb      	ldrb	r3, [r7, #7]
 800c1dc:	2b50      	cmp	r3, #80	; 0x50
 800c1de:	d105      	bne.n	800c1ec <validate_chip_id+0x1e>
    {
        /* Updating chip_id in device structure */
        dev->chip_id = chip_id;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	79fa      	ldrb	r2, [r7, #7]
 800c1e4:	701a      	strb	r2, [r3, #0]
        rslt = BMP5_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]
 800c1ea:	e001      	b.n	800c1f0 <validate_chip_id+0x22>
    }
    else
    {
        rslt = BMP5_E_DEV_NOT_FOUND;
 800c1ec:	23fd      	movs	r3, #253	; 0xfd
 800c1ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3714      	adds	r7, #20
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <power_up_check>:

/*!
 * @brief This internal API is used to validate the post power-up procedure.
 */
static int8_t power_up_check(struct bmp5_dev *dev)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t nvm_status;
    uint8_t por_status;

    rslt = get_nvm_status(&nvm_status, dev);
 800c208:	f107 030e 	add.w	r3, r7, #14
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 f937 	bl	800c482 <get_nvm_status>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800c218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d122      	bne.n	800c266 <power_up_check+0x66>
    {
        /* Check if nvm_rdy status = 1 and nvm_err status = 0 to proceed */
        if ((nvm_status & BMP5_INT_NVM_RDY) && (!(nvm_status & BMP5_INT_NVM_ERR)))
 800c220:	7bbb      	ldrb	r3, [r7, #14]
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d01b      	beq.n	800c262 <power_up_check+0x62>
 800c22a:	7bbb      	ldrb	r3, [r7, #14]
 800c22c:	f003 0304 	and.w	r3, r3, #4
 800c230:	2b00      	cmp	r3, #0
 800c232:	d116      	bne.n	800c262 <power_up_check+0x62>
        {
            rslt = bmp5_get_interrupt_status(&por_status, dev);
 800c234:	f107 030d 	add.w	r3, r7, #13
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fd9d 	bl	800bd7a <bmp5_get_interrupt_status>
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800c244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10c      	bne.n	800c266 <power_up_check+0x66>
            {
                /* Check if por/soft-reset complete status = 1 to proceed */
                if (por_status & BMP5_INT_ASSERTED_POR_SOFTRESET_COMPLETE)
 800c24c:	7b7b      	ldrb	r3, [r7, #13]
 800c24e:	f003 0310 	and.w	r3, r3, #16
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <power_up_check+0x5c>
                {
                    rslt = BMP5_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 800c25a:	e004      	b.n	800c266 <power_up_check+0x66>
                }
                else
                {
                    rslt = BMP5_E_POWER_UP;
 800c25c:	23fb      	movs	r3, #251	; 0xfb
 800c25e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP5_OK)
 800c260:	e001      	b.n	800c266 <power_up_check+0x66>
                }
            }
        }
        else
        {
            rslt = BMP5_E_POWER_UP;
 800c262:	23fb      	movs	r3, #251	; 0xfb
 800c264:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800c266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <check_deepstandby_mode>:

/*!
 * @brief This internal API is used to check if sensor is in deepstandby mode.
 */
static int8_t check_deepstandby_mode(enum bmp5_powermode *powermode, struct bmp5_dev *dev)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b086      	sub	sp, #24
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t fifo_frame_sel;
    struct bmp5_iir_config iir_cfg = { 0 };
 800c27c:	f107 0310 	add.w	r3, r7, #16
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	711a      	strb	r2, [r3, #4]
    struct bmp5_osr_odr_press_config osr_odr_press_cfg = { 0 };
 800c286:	2300      	movs	r3, #0
 800c288:	60fb      	str	r3, [r7, #12]

    rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &fifo_frame_sel, 1, dev);
 800c28a:	f107 0116 	add.w	r1, r7, #22
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2201      	movs	r2, #1
 800c292:	2018      	movs	r0, #24
 800c294:	f7ff fcaf 	bl	800bbf6 <bmp5_get_regs>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]
    fifo_frame_sel = BMP5_GET_BITS_POS_0(fifo_frame_sel, BMP5_FIFO_FRAME_SEL);
 800c29c:	7dbb      	ldrb	r3, [r7, #22]
 800c29e:	f003 0303 	and.w	r3, r3, #3
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	75bb      	strb	r3, [r7, #22]

    if (rslt == BMP5_OK)
 800c2a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d113      	bne.n	800c2d6 <check_deepstandby_mode+0x64>
    {
        rslt = bmp5_get_osr_odr_press_config(&osr_odr_press_cfg, dev);
 800c2ae:	f107 030c 	add.w	r3, r7, #12
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fe77 	bl	800bfa8 <bmp5_get_osr_odr_press_config>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP5_OK)
 800c2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d107      	bne.n	800c2d6 <check_deepstandby_mode+0x64>
        {
            rslt = bmp5_get_iir_config(&iir_cfg, dev);
 800c2c6:	f107 0310 	add.w	r3, r7, #16
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7ff ff1e 	bl	800c10e <bmp5_get_iir_config>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	75fb      	strb	r3, [r7, #23]
    }

    /* As per datasheet odr should be less than 5Hz. But register value for 5Hz is less than 4Hz and so,
     * thus in this below condition odr is checked whether greater than 5Hz macro.
     */
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	2b18      	cmp	r3, #24
 800c2da:	d90b      	bls.n	800c2f4 <check_deepstandby_mode+0x82>
 800c2dc:	7dbb      	ldrb	r3, [r7, #22]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d108      	bne.n	800c2f4 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 800c2e2:	7c3b      	ldrb	r3, [r7, #16]
    if ((osr_odr_press_cfg.odr > BMP5_ODR_05_HZ) && (fifo_frame_sel == BMP5_DISABLE) &&
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d105      	bne.n	800c2f4 <check_deepstandby_mode+0x82>
        (iir_cfg.set_iir_t == BMP5_IIR_FILTER_BYPASS) && (iir_cfg.set_iir_p == BMP5_IIR_FILTER_BYPASS))
 800c2e8:	7c7b      	ldrb	r3, [r7, #17]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d102      	bne.n	800c2f4 <check_deepstandby_mode+0x82>
    {
        *powermode = BMP5_POWERMODE_DEEP_STANDBY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2204      	movs	r2, #4
 800c2f2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800c2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <set_deep_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in deep standby mode.
 */
static int8_t set_deep_standby_mode(struct bmp5_dev *dev)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800c308:	f107 010e 	add.w	r1, r7, #14
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	2037      	movs	r0, #55	; 0x37
 800c312:	f7ff fc70 	bl	800bbf6 <bmp5_get_regs>
 800c316:	4603      	mov	r3, r0
 800c318:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800c31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d155      	bne.n	800c3ce <set_deep_standby_mode+0xce>
    {
        /* Setting deep_dis = 0(BMP5_DEEP_ENABLED) enables the deep standby mode */
        reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_DEEP_DISABLE);
 800c322:	7bbb      	ldrb	r3, [r7, #14]
 800c324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	73bb      	strb	r3, [r7, #14]

        /* Set ODR less then 5Hz - ODR used is 1Hz */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_ODR, BMP5_ODR_01_HZ);
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	b25b      	sxtb	r3, r3
 800c330:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 800c334:	b25b      	sxtb	r3, r3
 800c336:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800c33a:	b25b      	sxtb	r3, r3
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	73bb      	strb	r3, [r7, #14]

        /* Write the value to the odr config register(0x37) */
        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800c340:	f107 010e 	add.w	r1, r7, #14
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	2037      	movs	r0, #55	; 0x37
 800c34a:	f7ff fc8c 	bl	800bc66 <bmp5_set_regs>
 800c34e:	4603      	mov	r3, r0
 800c350:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP5_OK)
 800c352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d11a      	bne.n	800c390 <set_deep_standby_mode+0x90>
        {
            rslt = bmp5_get_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 800c35a:	f107 010e 	add.w	r1, r7, #14
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	2031      	movs	r0, #49	; 0x31
 800c364:	f7ff fc47 	bl	800bbf6 <bmp5_get_regs>
 800c368:	4603      	mov	r3, r0
 800c36a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800c36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10d      	bne.n	800c390 <set_deep_standby_mode+0x90>
                /* Set iir_t and iir_p as Bypass(0x00) */

                /* The register holds only iir_t and iir_p and the last 2 bits are reserved.
                 * Thus using the macro BMP5_IIR_BYPASS(0xC0) the register value is set as zero.
                 */
                reg_data = reg_data & BMP5_IIR_BYPASS;
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the IIR register(0x31) */
                rslt = bmp5_set_regs(BMP5_REG_DSP_IIR, &reg_data, 1, dev);
 800c37e:	f107 010e 	add.w	r1, r7, #14
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	2031      	movs	r0, #49	; 0x31
 800c388:	f7ff fc6d 	bl	800bc66 <bmp5_set_regs>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73fb      	strb	r3, [r7, #15]
            }
        }

        if (rslt == BMP5_OK)
 800c390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d11a      	bne.n	800c3ce <set_deep_standby_mode+0xce>
        {
            rslt = bmp5_get_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 800c398:	f107 010e 	add.w	r1, r7, #14
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	2018      	movs	r0, #24
 800c3a2:	f7ff fc28 	bl	800bbf6 <bmp5_get_regs>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMP5_OK)
 800c3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10d      	bne.n	800c3ce <set_deep_standby_mode+0xce>
            {
                /* Disable fifo frame selct */
                reg_data = BMP5_SET_BIT_VAL_0(reg_data, BMP5_FIFO_FRAME_SEL);
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
 800c3b4:	f023 0303 	bic.w	r3, r3, #3
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	73bb      	strb	r3, [r7, #14]

                /* Write the value to the fifo select register(0x18) */
                rslt = bmp5_set_regs(BMP5_REG_FIFO_SEL, &reg_data, 1, dev);
 800c3bc:	f107 010e 	add.w	r1, r7, #14
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	2018      	movs	r0, #24
 800c3c6:	f7ff fc4e 	bl	800bc66 <bmp5_set_regs>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800c3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <set_power_mode>:

/*!
 * @brief This internal API is used to set sensor in standby or normal or forced or continous powermode.
 */
static int8_t set_power_mode(enum bmp5_powermode powermode, struct bmp5_dev *dev)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	6039      	str	r1, [r7, #0]
 800c3e4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp5_get_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800c3e6:	f107 010e 	add.w	r1, r7, #14
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	2037      	movs	r0, #55	; 0x37
 800c3f0:	f7ff fc01 	bl	800bbf6 <bmp5_get_regs>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800c3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d11b      	bne.n	800c438 <set_power_mode+0x5e>
    {
        /* Setting deep_dis = 1(BMP5_DEEP_DISABLED) disables the deep standby mode */
        reg_data = BMP5_SET_BITSLICE(reg_data, BMP5_DEEP_DISABLE, BMP5_DEEP_DISABLED);
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c406:	b2db      	uxtb	r3, r3
 800c408:	73bb      	strb	r3, [r7, #14]

        reg_data = BMP5_SET_BITS_POS_0(reg_data, BMP5_POWERMODE, powermode);
 800c40a:	7bbb      	ldrb	r3, [r7, #14]
 800c40c:	b25b      	sxtb	r3, r3
 800c40e:	f023 0303 	bic.w	r3, r3, #3
 800c412:	b25a      	sxtb	r2, r3
 800c414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c418:	f003 0303 	and.w	r3, r3, #3
 800c41c:	b25b      	sxtb	r3, r3
 800c41e:	4313      	orrs	r3, r2
 800c420:	b25b      	sxtb	r3, r3
 800c422:	b2db      	uxtb	r3, r3
 800c424:	73bb      	strb	r3, [r7, #14]

        rslt = bmp5_set_regs(BMP5_REG_ODR_CONFIG, &reg_data, 1, dev);
 800c426:	f107 010e 	add.w	r1, r7, #14
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2201      	movs	r2, #1
 800c42e:	2037      	movs	r0, #55	; 0x37
 800c430:	f7ff fc19 	bl	800bc66 <bmp5_set_regs>
 800c434:	4603      	mov	r3, r0
 800c436:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <set_standby_mode>:

/*!
 * @brief This internal API is used to set sensor in standby powermode when powermode is deepstandby mode.
 */
static int8_t set_standby_mode(struct bmp5_dev *dev)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    enum bmp5_powermode pwrmode;

    rslt = bmp5_get_power_mode(&pwrmode, dev);
 800c44c:	f107 030e 	add.w	r3, r7, #14
 800c450:	6879      	ldr	r1, [r7, #4]
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fcaa 	bl	800bdac <bmp5_get_power_mode>
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP5_OK)
 800c45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d108      	bne.n	800c476 <set_standby_mode+0x32>
    {
        if (pwrmode == BMP5_POWERMODE_DEEP_STANDBY)
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	2b04      	cmp	r3, #4
 800c468:	d105      	bne.n	800c476 <set_standby_mode+0x32>
        {
            rslt = bmp5_set_power_mode(BMP5_POWERMODE_STANDBY, dev);
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	2000      	movs	r0, #0
 800c46e:	f7ff fced 	bl	800be4c <bmp5_set_power_mode>
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800c476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <get_nvm_status>:

/*!
 *  @brief This API is used to get nvm status.
 */
static int8_t get_nvm_status(uint8_t *nvm_status, struct bmp5_dev *dev)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (nvm_status != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d008      	beq.n	800c4a4 <get_nvm_status+0x22>
    {
        rslt = bmp5_get_regs(BMP5_REG_STATUS, nvm_status, 1, dev);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2201      	movs	r2, #1
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	2028      	movs	r0, #40	; 0x28
 800c49a:	f7ff fbac 	bl	800bbf6 <bmp5_get_regs>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73fb      	strb	r3, [r7, #15]
 800c4a2:	e001      	b.n	800c4a8 <get_nvm_status+0x26>
    }
    else
    {
        rslt = BMP5_E_NULL_PTR;
 800c4a4:	23ff      	movs	r3, #255	; 0xff
 800c4a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c4b8:	4904      	ldr	r1, [pc, #16]	; (800c4cc <MX_FATFS_Init+0x18>)
 800c4ba:	4805      	ldr	r0, [pc, #20]	; (800c4d0 <MX_FATFS_Init+0x1c>)
 800c4bc:	f003 fa88 	bl	800f9d0 <FATFS_LinkDriver>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	4b03      	ldr	r3, [pc, #12]	; (800c4d4 <MX_FATFS_Init+0x20>)
 800c4c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c4c8:	bf00      	nop
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	20001550 	.word	0x20001550
 800c4d0:	080154c4 	.word	0x080154c4
 800c4d4:	2000154c 	.word	0x2000154c

0800c4d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c4dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c4f2:	f000 f89e 	bl	800c632 <BSP_SD_IsDetected>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d001      	beq.n	800c500 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e005      	b.n	800c50c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c500:	4804      	ldr	r0, [pc, #16]	; (800c514 <BSP_SD_Init+0x2c>)
 800c502:	f7fc f861 	bl	80085c8 <HAL_SD_Init>
 800c506:	4603      	mov	r3, r0
 800c508:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c50a:	79fb      	ldrb	r3, [r7, #7]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000f0c 	.word	0x20000f0c

0800c518 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af02      	add	r7, sp, #8
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	68ba      	ldr	r2, [r7, #8]
 800c532:	68f9      	ldr	r1, [r7, #12]
 800c534:	4806      	ldr	r0, [pc, #24]	; (800c550 <BSP_SD_ReadBlocks+0x38>)
 800c536:	f7fc f8f7 	bl	8008728 <HAL_SD_ReadBlocks>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c544:	7dfb      	ldrb	r3, [r7, #23]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	20000f0c 	.word	0x20000f0c

0800c554 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af02      	add	r7, sp, #8
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
 800c560:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	4806      	ldr	r0, [pc, #24]	; (800c58c <BSP_SD_WriteBlocks+0x38>)
 800c572:	f7fc fabf 	bl	8008af4 <HAL_SD_WriteBlocks>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d001      	beq.n	800c580 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000f0c 	.word	0x20000f0c

0800c590 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c594:	4805      	ldr	r0, [pc, #20]	; (800c5ac <BSP_SD_GetCardState+0x1c>)
 800c596:	f7fc ff9b 	bl	80094d0 <HAL_SD_GetCardState>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b04      	cmp	r3, #4
 800c59e:	bf14      	ite	ne
 800c5a0:	2301      	movne	r3, #1
 800c5a2:	2300      	moveq	r3, #0
 800c5a4:	b2db      	uxtb	r3, r3
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000f0c 	.word	0x20000f0c

0800c5b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c5b8:	6879      	ldr	r1, [r7, #4]
 800c5ba:	4803      	ldr	r0, [pc, #12]	; (800c5c8 <BSP_SD_GetCardInfo+0x18>)
 800c5bc:	f7fc ff5c 	bl	8009478 <HAL_SD_GetCardInfo>
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20000f0c 	.word	0x20000f0c

0800c5cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c5d4:	f000 f818 	bl	800c608 <BSP_SD_AbortCallback>
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b082      	sub	sp, #8
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c5e8:	f000 f815 	bl	800c616 <BSP_SD_WriteCpltCallback>
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c5fc:	f000 f812 	bl	800c624 <BSP_SD_ReadCpltCallback>
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c608:	b480      	push	{r7}
 800c60a:	af00      	add	r7, sp, #0

}
 800c60c:	bf00      	nop
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c616:	b480      	push	{r7}
 800c618:	af00      	add	r7, sp, #0

}
 800c61a:	bf00      	nop
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c624:	b480      	push	{r7}
 800c626:	af00      	add	r7, sp, #0

}
 800c628:	bf00      	nop
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c638:	2301      	movs	r3, #1
 800c63a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c63c:	f000 f80c 	bl	800c658 <BSP_PlatformIsDetected>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d101      	bne.n	800c64a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c646:	2300      	movs	r3, #0
 800c648:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	b2db      	uxtb	r3, r3
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
	...

0800c658 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c65e:	2301      	movs	r3, #1
 800c660:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c662:	2180      	movs	r1, #128	; 0x80
 800c664:	4806      	ldr	r0, [pc, #24]	; (800c680 <BSP_PlatformIsDetected+0x28>)
 800c666:	f7f9 fcc9 	bl	8005ffc <HAL_GPIO_ReadPin>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c670:	2300      	movs	r3, #0
 800c672:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c674:	79fb      	ldrb	r3, [r7, #7]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	40020800 	.word	0x40020800

0800c684 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c68e:	4b0b      	ldr	r3, [pc, #44]	; (800c6bc <SD_CheckStatus+0x38>)
 800c690:	2201      	movs	r2, #1
 800c692:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c694:	f7ff ff7c 	bl	800c590 <BSP_SD_GetCardState>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d107      	bne.n	800c6ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c69e:	4b07      	ldr	r3, [pc, #28]	; (800c6bc <SD_CheckStatus+0x38>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	f023 0301 	bic.w	r3, r3, #1
 800c6a8:	b2da      	uxtb	r2, r3
 800c6aa:	4b04      	ldr	r3, [pc, #16]	; (800c6bc <SD_CheckStatus+0x38>)
 800c6ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c6ae:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <SD_CheckStatus+0x38>)
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	b2db      	uxtb	r3, r3
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20000029 	.word	0x20000029

0800c6c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c6ca:	4b0b      	ldr	r3, [pc, #44]	; (800c6f8 <SD_initialize+0x38>)
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c6d0:	f7ff ff0a 	bl	800c4e8 <BSP_SD_Init>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d107      	bne.n	800c6ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff ffd1 	bl	800c684 <SD_CheckStatus>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b04      	ldr	r3, [pc, #16]	; (800c6f8 <SD_initialize+0x38>)
 800c6e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c6ea:	4b03      	ldr	r3, [pc, #12]	; (800c6f8 <SD_initialize+0x38>)
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	b2db      	uxtb	r3, r3
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20000029 	.word	0x20000029

0800c6fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff ffbb 	bl	800c684 <SD_CheckStatus>
 800c70e:	4603      	mov	r3, r0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
 800c722:	603b      	str	r3, [r7, #0]
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c72c:	f04f 33ff 	mov.w	r3, #4294967295
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	68b8      	ldr	r0, [r7, #8]
 800c736:	f7ff feef 	bl	800c518 <BSP_SD_ReadBlocks>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d107      	bne.n	800c750 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c740:	bf00      	nop
 800c742:	f7ff ff25 	bl	800c590 <BSP_SD_GetCardState>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1fa      	bne.n	800c742 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c750:	7dfb      	ldrb	r3, [r7, #23]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b086      	sub	sp, #24
 800c75e:	af00      	add	r7, sp, #0
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
 800c764:	603b      	str	r3, [r7, #0]
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c76e:	f04f 33ff 	mov.w	r3, #4294967295
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	68b8      	ldr	r0, [r7, #8]
 800c778:	f7ff feec 	bl	800c554 <BSP_SD_WriteBlocks>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d107      	bne.n	800c792 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c782:	bf00      	nop
 800c784:	f7ff ff04 	bl	800c590 <BSP_SD_GetCardState>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1fa      	bne.n	800c784 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c792:	7dfb      	ldrb	r3, [r7, #23]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08c      	sub	sp, #48	; 0x30
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	603a      	str	r2, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c7b2:	4b25      	ldr	r3, [pc, #148]	; (800c848 <SD_ioctl+0xac>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <SD_ioctl+0x28>
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	e03c      	b.n	800c83e <SD_ioctl+0xa2>

  switch (cmd)
 800c7c4:	79bb      	ldrb	r3, [r7, #6]
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d834      	bhi.n	800c834 <SD_ioctl+0x98>
 800c7ca:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <SD_ioctl+0x34>)
 800c7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d0:	0800c7e1 	.word	0x0800c7e1
 800c7d4:	0800c7e9 	.word	0x0800c7e9
 800c7d8:	0800c801 	.word	0x0800c801
 800c7dc:	0800c81b 	.word	0x0800c81b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7e6:	e028      	b.n	800c83a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c7e8:	f107 030c 	add.w	r3, r7, #12
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fedf 	bl	800c5b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c7fe:	e01c      	b.n	800c83a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c800:	f107 030c 	add.w	r3, r7, #12
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff fed3 	bl	800c5b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c818:	e00f      	b.n	800c83a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c81a:	f107 030c 	add.w	r3, r7, #12
 800c81e:	4618      	mov	r0, r3
 800c820:	f7ff fec6 	bl	800c5b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	0a5a      	lsrs	r2, r3, #9
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c832:	e002      	b.n	800c83a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c834:	2304      	movs	r3, #4
 800c836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c83a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3730      	adds	r7, #48	; 0x30
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20000029 	.word	0x20000029

0800c84c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	4603      	mov	r3, r0
 800c854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	4a08      	ldr	r2, [pc, #32]	; (800c87c <disk_status+0x30>)
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4413      	add	r3, r2
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	79fa      	ldrb	r2, [r7, #7]
 800c864:	4905      	ldr	r1, [pc, #20]	; (800c87c <disk_status+0x30>)
 800c866:	440a      	add	r2, r1
 800c868:	7a12      	ldrb	r2, [r2, #8]
 800c86a:	4610      	mov	r0, r2
 800c86c:	4798      	blx	r3
 800c86e:	4603      	mov	r3, r0
 800c870:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200035e4 	.word	0x200035e4

0800c880 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c88a:	2300      	movs	r3, #0
 800c88c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	4a0e      	ldr	r2, [pc, #56]	; (800c8cc <disk_initialize+0x4c>)
 800c892:	5cd3      	ldrb	r3, [r2, r3]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d114      	bne.n	800c8c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c898:	79fb      	ldrb	r3, [r7, #7]
 800c89a:	4a0c      	ldr	r2, [pc, #48]	; (800c8cc <disk_initialize+0x4c>)
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	79fa      	ldrb	r2, [r7, #7]
 800c8a6:	4909      	ldr	r1, [pc, #36]	; (800c8cc <disk_initialize+0x4c>)
 800c8a8:	440a      	add	r2, r1
 800c8aa:	7a12      	ldrb	r2, [r2, #8]
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d103      	bne.n	800c8c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	4a03      	ldr	r2, [pc, #12]	; (800c8cc <disk_initialize+0x4c>)
 800c8be:	2101      	movs	r1, #1
 800c8c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	200035e4 	.word	0x200035e4

0800c8d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c8d0:	b590      	push	{r4, r7, lr}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	607a      	str	r2, [r7, #4]
 800c8da:	603b      	str	r3, [r7, #0]
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
 800c8e2:	4a0a      	ldr	r2, [pc, #40]	; (800c90c <disk_read+0x3c>)
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	689c      	ldr	r4, [r3, #8]
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	4a07      	ldr	r2, [pc, #28]	; (800c90c <disk_read+0x3c>)
 800c8f0:	4413      	add	r3, r2
 800c8f2:	7a18      	ldrb	r0, [r3, #8]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	68b9      	ldr	r1, [r7, #8]
 800c8fa:	47a0      	blx	r4
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800c900:	7dfb      	ldrb	r3, [r7, #23]
}
 800c902:	4618      	mov	r0, r3
 800c904:	371c      	adds	r7, #28
 800c906:	46bd      	mov	sp, r7
 800c908:	bd90      	pop	{r4, r7, pc}
 800c90a:	bf00      	nop
 800c90c:	200035e4 	.word	0x200035e4

0800c910 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c910:	b590      	push	{r4, r7, lr}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	607a      	str	r2, [r7, #4]
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	4a0a      	ldr	r2, [pc, #40]	; (800c94c <disk_write+0x3c>)
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	68dc      	ldr	r4, [r3, #12]
 800c92c:	7bfb      	ldrb	r3, [r7, #15]
 800c92e:	4a07      	ldr	r2, [pc, #28]	; (800c94c <disk_write+0x3c>)
 800c930:	4413      	add	r3, r2
 800c932:	7a18      	ldrb	r0, [r3, #8]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	68b9      	ldr	r1, [r7, #8]
 800c93a:	47a0      	blx	r4
 800c93c:	4603      	mov	r3, r0
 800c93e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c940:	7dfb      	ldrb	r3, [r7, #23]
}
 800c942:	4618      	mov	r0, r3
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd90      	pop	{r4, r7, pc}
 800c94a:	bf00      	nop
 800c94c:	200035e4 	.word	0x200035e4

0800c950 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	4603      	mov	r3, r0
 800c958:	603a      	str	r2, [r7, #0]
 800c95a:	71fb      	strb	r3, [r7, #7]
 800c95c:	460b      	mov	r3, r1
 800c95e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c960:	79fb      	ldrb	r3, [r7, #7]
 800c962:	4a09      	ldr	r2, [pc, #36]	; (800c988 <disk_ioctl+0x38>)
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	79fa      	ldrb	r2, [r7, #7]
 800c96e:	4906      	ldr	r1, [pc, #24]	; (800c988 <disk_ioctl+0x38>)
 800c970:	440a      	add	r2, r1
 800c972:	7a10      	ldrb	r0, [r2, #8]
 800c974:	79b9      	ldrb	r1, [r7, #6]
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	4798      	blx	r3
 800c97a:	4603      	mov	r3, r0
 800c97c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	200035e4 	.word	0x200035e4

0800c98c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	3301      	adds	r3, #1
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c99c:	89fb      	ldrh	r3, [r7, #14]
 800c99e:	021b      	lsls	r3, r3, #8
 800c9a0:	b21a      	sxth	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b21b      	sxth	r3, r3
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	b21b      	sxth	r3, r3
 800c9ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c9ae:	89fb      	ldrh	r3, [r7, #14]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3714      	adds	r7, #20
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	3303      	adds	r3, #3
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	3202      	adds	r2, #2
 800c9d4:	7812      	ldrb	r2, [r2, #0]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	021b      	lsls	r3, r3, #8
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	3201      	adds	r2, #1
 800c9e2:	7812      	ldrb	r2, [r2, #0]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	021b      	lsls	r3, r3, #8
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7812      	ldrb	r2, [r2, #0]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ca02:	b480      	push	{r7}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	887a      	ldrh	r2, [r7, #2]
 800ca16:	b2d2      	uxtb	r2, r2
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	887b      	ldrh	r3, [r7, #2]
 800ca1c:	0a1b      	lsrs	r3, r3, #8
 800ca1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	607a      	str	r2, [r7, #4]
 800ca26:	887a      	ldrh	r2, [r7, #2]
 800ca28:	b2d2      	uxtb	r2, r2
 800ca2a:	701a      	strb	r2, [r3, #0]
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	b2d2      	uxtb	r2, r2
 800ca4c:	701a      	strb	r2, [r3, #0]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	0a1b      	lsrs	r3, r3, #8
 800ca52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	607a      	str	r2, [r7, #4]
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	b2d2      	uxtb	r2, r2
 800ca5e:	701a      	strb	r2, [r3, #0]
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	0a1b      	lsrs	r3, r3, #8
 800ca64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	607a      	str	r2, [r7, #4]
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	b2d2      	uxtb	r2, r2
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	0a1b      	lsrs	r3, r3, #8
 800ca76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	1c5a      	adds	r2, r3, #1
 800ca7c:	607a      	str	r2, [r7, #4]
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	b2d2      	uxtb	r2, r2
 800ca82:	701a      	strb	r2, [r3, #0]
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00d      	beq.n	800cac6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	1c53      	adds	r3, r2, #1
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	1c59      	adds	r1, r3, #1
 800cab4:	6179      	str	r1, [r7, #20]
 800cab6:	7812      	ldrb	r2, [r2, #0]
 800cab8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	607b      	str	r3, [r7, #4]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1f1      	bne.n	800caaa <mem_cpy+0x1a>
	}
}
 800cac6:	bf00      	nop
 800cac8:	371c      	adds	r7, #28
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cad2:	b480      	push	{r7}
 800cad4:	b087      	sub	sp, #28
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	617a      	str	r2, [r7, #20]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	b2d2      	uxtb	r2, r2
 800caec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	607b      	str	r3, [r7, #4]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f3      	bne.n	800cae2 <mem_set+0x10>
}
 800cafa:	bf00      	nop
 800cafc:	bf00      	nop
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cb08:	b480      	push	{r7}
 800cb0a:	b089      	sub	sp, #36	; 0x24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	1c5a      	adds	r2, r3, #1
 800cb24:	61fa      	str	r2, [r7, #28]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	1c5a      	adds	r2, r3, #1
 800cb2e:	61ba      	str	r2, [r7, #24]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	1acb      	subs	r3, r1, r3
 800cb34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	607b      	str	r3, [r7, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <mem_cmp+0x40>
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0eb      	beq.n	800cb20 <mem_cmp+0x18>

	return r;
 800cb48:	697b      	ldr	r3, [r7, #20]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3724      	adds	r7, #36	; 0x24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cb60:	e002      	b.n	800cb68 <chk_chr+0x12>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	3301      	adds	r3, #1
 800cb66:	607b      	str	r3, [r7, #4]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <chk_chr+0x26>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	461a      	mov	r2, r3
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d1f2      	bne.n	800cb62 <chk_chr+0xc>
	return *str;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb96:	2300      	movs	r3, #0
 800cb98:	60bb      	str	r3, [r7, #8]
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	e029      	b.n	800cbf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cba0:	4a27      	ldr	r2, [pc, #156]	; (800cc40 <chk_lock+0xb4>)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	011b      	lsls	r3, r3, #4
 800cba6:	4413      	add	r3, r2
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d01d      	beq.n	800cbea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbae:	4a24      	ldr	r2, [pc, #144]	; (800cc40 <chk_lock+0xb4>)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	011b      	lsls	r3, r3, #4
 800cbb4:	4413      	add	r3, r2
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d116      	bne.n	800cbee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cbc0:	4a1f      	ldr	r2, [pc, #124]	; (800cc40 <chk_lock+0xb4>)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	4413      	add	r3, r2
 800cbc8:	3304      	adds	r3, #4
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d10c      	bne.n	800cbee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cbd4:	4a1a      	ldr	r2, [pc, #104]	; (800cc40 <chk_lock+0xb4>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	4413      	add	r3, r2
 800cbdc:	3308      	adds	r3, #8
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d102      	bne.n	800cbee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cbe8:	e007      	b.n	800cbfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cbea:	2301      	movs	r3, #1
 800cbec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	60fb      	str	r3, [r7, #12]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d9d2      	bls.n	800cba0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d109      	bne.n	800cc14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <chk_lock+0x80>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d101      	bne.n	800cc10 <chk_lock+0x84>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e010      	b.n	800cc32 <chk_lock+0xa6>
 800cc10:	2312      	movs	r3, #18
 800cc12:	e00e      	b.n	800cc32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d108      	bne.n	800cc2c <chk_lock+0xa0>
 800cc1a:	4a09      	ldr	r2, [pc, #36]	; (800cc40 <chk_lock+0xb4>)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	011b      	lsls	r3, r3, #4
 800cc20:	4413      	add	r3, r2
 800cc22:	330c      	adds	r3, #12
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc2a:	d101      	bne.n	800cc30 <chk_lock+0xa4>
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	e000      	b.n	800cc32 <chk_lock+0xa6>
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	200035c4 	.word	0x200035c4

0800cc44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	607b      	str	r3, [r7, #4]
 800cc4e:	e002      	b.n	800cc56 <enq_lock+0x12>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3301      	adds	r3, #1
 800cc54:	607b      	str	r3, [r7, #4]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d806      	bhi.n	800cc6a <enq_lock+0x26>
 800cc5c:	4a09      	ldr	r2, [pc, #36]	; (800cc84 <enq_lock+0x40>)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	011b      	lsls	r3, r3, #4
 800cc62:	4413      	add	r3, r2
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1f2      	bne.n	800cc50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	bf14      	ite	ne
 800cc70:	2301      	movne	r3, #1
 800cc72:	2300      	moveq	r3, #0
 800cc74:	b2db      	uxtb	r3, r3
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	200035c4 	.word	0x200035c4

0800cc88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc92:	2300      	movs	r3, #0
 800cc94:	60fb      	str	r3, [r7, #12]
 800cc96:	e01f      	b.n	800ccd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cc98:	4a41      	ldr	r2, [pc, #260]	; (800cda0 <inc_lock+0x118>)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	011b      	lsls	r3, r3, #4
 800cc9e:	4413      	add	r3, r2
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d113      	bne.n	800ccd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ccaa:	4a3d      	ldr	r2, [pc, #244]	; (800cda0 <inc_lock+0x118>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	011b      	lsls	r3, r3, #4
 800ccb0:	4413      	add	r3, r2
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d109      	bne.n	800ccd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ccbe:	4a38      	ldr	r2, [pc, #224]	; (800cda0 <inc_lock+0x118>)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	011b      	lsls	r3, r3, #4
 800ccc4:	4413      	add	r3, r2
 800ccc6:	3308      	adds	r3, #8
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d006      	beq.n	800cce0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d9dc      	bls.n	800cc98 <inc_lock+0x10>
 800ccde:	e000      	b.n	800cce2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cce0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d132      	bne.n	800cd4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cce8:	2300      	movs	r3, #0
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	e002      	b.n	800ccf4 <inc_lock+0x6c>
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d806      	bhi.n	800cd08 <inc_lock+0x80>
 800ccfa:	4a29      	ldr	r2, [pc, #164]	; (800cda0 <inc_lock+0x118>)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	011b      	lsls	r3, r3, #4
 800cd00:	4413      	add	r3, r2
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1f2      	bne.n	800ccee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d101      	bne.n	800cd12 <inc_lock+0x8a>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e040      	b.n	800cd94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	4922      	ldr	r1, [pc, #136]	; (800cda0 <inc_lock+0x118>)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	011b      	lsls	r3, r3, #4
 800cd1c:	440b      	add	r3, r1
 800cd1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	689a      	ldr	r2, [r3, #8]
 800cd24:	491e      	ldr	r1, [pc, #120]	; (800cda0 <inc_lock+0x118>)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	440b      	add	r3, r1
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	695a      	ldr	r2, [r3, #20]
 800cd34:	491a      	ldr	r1, [pc, #104]	; (800cda0 <inc_lock+0x118>)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	011b      	lsls	r3, r3, #4
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cd40:	4a17      	ldr	r2, [pc, #92]	; (800cda0 <inc_lock+0x118>)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	011b      	lsls	r3, r3, #4
 800cd46:	4413      	add	r3, r2
 800cd48:	330c      	adds	r3, #12
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d009      	beq.n	800cd68 <inc_lock+0xe0>
 800cd54:	4a12      	ldr	r2, [pc, #72]	; (800cda0 <inc_lock+0x118>)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	011b      	lsls	r3, r3, #4
 800cd5a:	4413      	add	r3, r2
 800cd5c:	330c      	adds	r3, #12
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <inc_lock+0xe0>
 800cd64:	2300      	movs	r3, #0
 800cd66:	e015      	b.n	800cd94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d108      	bne.n	800cd80 <inc_lock+0xf8>
 800cd6e:	4a0c      	ldr	r2, [pc, #48]	; (800cda0 <inc_lock+0x118>)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	4413      	add	r3, r2
 800cd76:	330c      	adds	r3, #12
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	e001      	b.n	800cd84 <inc_lock+0xfc>
 800cd80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd84:	4906      	ldr	r1, [pc, #24]	; (800cda0 <inc_lock+0x118>)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	440b      	add	r3, r1
 800cd8c:	330c      	adds	r3, #12
 800cd8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3301      	adds	r3, #1
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	200035c4 	.word	0x200035c4

0800cda4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d825      	bhi.n	800ce04 <dec_lock+0x60>
		n = Files[i].ctr;
 800cdb8:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <dec_lock+0x74>)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	011b      	lsls	r3, r3, #4
 800cdbe:	4413      	add	r3, r2
 800cdc0:	330c      	adds	r3, #12
 800cdc2:	881b      	ldrh	r3, [r3, #0]
 800cdc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cdc6:	89fb      	ldrh	r3, [r7, #14]
 800cdc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdcc:	d101      	bne.n	800cdd2 <dec_lock+0x2e>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cdd2:	89fb      	ldrh	r3, [r7, #14]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <dec_lock+0x3a>
 800cdd8:	89fb      	ldrh	r3, [r7, #14]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cdde:	4a0e      	ldr	r2, [pc, #56]	; (800ce18 <dec_lock+0x74>)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	011b      	lsls	r3, r3, #4
 800cde4:	4413      	add	r3, r2
 800cde6:	330c      	adds	r3, #12
 800cde8:	89fa      	ldrh	r2, [r7, #14]
 800cdea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cdec:	89fb      	ldrh	r3, [r7, #14]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d105      	bne.n	800cdfe <dec_lock+0x5a>
 800cdf2:	4a09      	ldr	r2, [pc, #36]	; (800ce18 <dec_lock+0x74>)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	011b      	lsls	r3, r3, #4
 800cdf8:	4413      	add	r3, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	737b      	strb	r3, [r7, #13]
 800ce02:	e001      	b.n	800ce08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ce04:	2302      	movs	r3, #2
 800ce06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ce08:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	200035c4 	.word	0x200035c4

0800ce1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	e010      	b.n	800ce4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce2a:	4a0d      	ldr	r2, [pc, #52]	; (800ce60 <clear_lock+0x44>)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	011b      	lsls	r3, r3, #4
 800ce30:	4413      	add	r3, r2
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d105      	bne.n	800ce46 <clear_lock+0x2a>
 800ce3a:	4a09      	ldr	r2, [pc, #36]	; (800ce60 <clear_lock+0x44>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	4413      	add	r3, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d9eb      	bls.n	800ce2a <clear_lock+0xe>
	}
}
 800ce52:	bf00      	nop
 800ce54:	bf00      	nop
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	200035c4 	.word	0x200035c4

0800ce64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b086      	sub	sp, #24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	78db      	ldrb	r3, [r3, #3]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d034      	beq.n	800cee2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7858      	ldrb	r0, [r3, #1]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce88:	2301      	movs	r3, #1
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	f7ff fd40 	bl	800c910 <disk_write>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ce96:	2301      	movs	r3, #1
 800ce98:	73fb      	strb	r3, [r7, #15]
 800ce9a:	e022      	b.n	800cee2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	1ad2      	subs	r2, r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d217      	bcs.n	800cee2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	789b      	ldrb	r3, [r3, #2]
 800ceb6:	613b      	str	r3, [r7, #16]
 800ceb8:	e010      	b.n	800cedc <sync_window+0x78>
					wsect += fs->fsize;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	4413      	add	r3, r2
 800cec2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	7858      	ldrb	r0, [r3, #1]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cece:	2301      	movs	r3, #1
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	f7ff fd1d 	bl	800c910 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	613b      	str	r3, [r7, #16]
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d8eb      	bhi.n	800ceba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefe:	683a      	ldr	r2, [r7, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d01b      	beq.n	800cf3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff ffad 	bl	800ce64 <sync_window>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d113      	bne.n	800cf3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	7858      	ldrb	r0, [r3, #1]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf1e:	2301      	movs	r3, #1
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	f7ff fcd5 	bl	800c8d0 <disk_read>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d004      	beq.n	800cf36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	683a      	ldr	r2, [r7, #0]
 800cf3a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff ff87 	bl	800ce64 <sync_window>
 800cf56:	4603      	mov	r3, r0
 800cf58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d159      	bne.n	800d014 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d149      	bne.n	800cffc <sync_fs+0xb4>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	791b      	ldrb	r3, [r3, #4]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d145      	bne.n	800cffc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	899b      	ldrh	r3, [r3, #12]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	f7ff fda8 	bl	800cad2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3338      	adds	r3, #56	; 0x38
 800cf86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff fd37 	bl	800ca02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3338      	adds	r3, #56	; 0x38
 800cf98:	4921      	ldr	r1, [pc, #132]	; (800d020 <sync_fs+0xd8>)
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fd4c 	bl	800ca38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3338      	adds	r3, #56	; 0x38
 800cfa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfa8:	491e      	ldr	r1, [pc, #120]	; (800d024 <sync_fs+0xdc>)
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fd44 	bl	800ca38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3338      	adds	r3, #56	; 0x38
 800cfb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f7ff fd3a 	bl	800ca38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	3338      	adds	r3, #56	; 0x38
 800cfc8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	695b      	ldr	r3, [r3, #20]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	4610      	mov	r0, r2
 800cfd4:	f7ff fd30 	bl	800ca38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	7858      	ldrb	r0, [r3, #1]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cff0:	2301      	movs	r3, #1
 800cff2:	f7ff fc8d 	bl	800c910 <disk_write>
			fs->fsi_flag = 0;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	785b      	ldrb	r3, [r3, #1]
 800d000:	2200      	movs	r2, #0
 800d002:	2100      	movs	r1, #0
 800d004:	4618      	mov	r0, r3
 800d006:	f7ff fca3 	bl	800c950 <disk_ioctl>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <sync_fs+0xcc>
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d014:	7bfb      	ldrb	r3, [r7, #15]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	41615252 	.word	0x41615252
 800d024:	61417272 	.word	0x61417272

0800d028 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	3b02      	subs	r3, #2
 800d036:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	3b02      	subs	r3, #2
 800d03e:	683a      	ldr	r2, [r7, #0]
 800d040:	429a      	cmp	r2, r3
 800d042:	d301      	bcc.n	800d048 <clust2sect+0x20>
 800d044:	2300      	movs	r3, #0
 800d046:	e008      	b.n	800d05a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	895b      	ldrh	r3, [r3, #10]
 800d04c:	461a      	mov	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	fb03 f202 	mul.w	r2, r3, r2
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d058:	4413      	add	r3, r2
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b086      	sub	sp, #24
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d904      	bls.n	800d086 <get_fat+0x20>
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	69db      	ldr	r3, [r3, #28]
 800d080:	683a      	ldr	r2, [r7, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d302      	bcc.n	800d08c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d086:	2301      	movs	r3, #1
 800d088:	617b      	str	r3, [r7, #20]
 800d08a:	e0bb      	b.n	800d204 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d08c:	f04f 33ff 	mov.w	r3, #4294967295
 800d090:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b03      	cmp	r3, #3
 800d098:	f000 8083 	beq.w	800d1a2 <get_fat+0x13c>
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	f300 80a7 	bgt.w	800d1f0 <get_fat+0x18a>
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d002      	beq.n	800d0ac <get_fat+0x46>
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d056      	beq.n	800d158 <get_fat+0xf2>
 800d0aa:	e0a1      	b.n	800d1f0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	085b      	lsrs	r3, r3, #1
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	899b      	ldrh	r3, [r3, #12]
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0ca:	4413      	add	r3, r2
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6938      	ldr	r0, [r7, #16]
 800d0d0:	f7ff ff0c 	bl	800ceec <move_window>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f040 808d 	bne.w	800d1f6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	60fa      	str	r2, [r7, #12]
 800d0e2:	693a      	ldr	r2, [r7, #16]
 800d0e4:	8992      	ldrh	r2, [r2, #12]
 800d0e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0ea:	fb01 f202 	mul.w	r2, r1, r2
 800d0ee:	1a9b      	subs	r3, r3, r2
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d0f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	899b      	ldrh	r3, [r3, #12]
 800d102:	4619      	mov	r1, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	fbb3 f3f1 	udiv	r3, r3, r1
 800d10a:	4413      	add	r3, r2
 800d10c:	4619      	mov	r1, r3
 800d10e:	6938      	ldr	r0, [r7, #16]
 800d110:	f7ff feec 	bl	800ceec <move_window>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d16f      	bne.n	800d1fa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	899b      	ldrh	r3, [r3, #12]
 800d11e:	461a      	mov	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	fbb3 f1f2 	udiv	r1, r3, r2
 800d126:	fb01 f202 	mul.w	r2, r1, r2
 800d12a:	1a9b      	subs	r3, r3, r2
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	4413      	add	r3, r2
 800d130:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d134:	021b      	lsls	r3, r3, #8
 800d136:	461a      	mov	r2, r3
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <get_fat+0xe8>
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	091b      	lsrs	r3, r3, #4
 800d14c:	e002      	b.n	800d154 <get_fat+0xee>
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d154:	617b      	str	r3, [r7, #20]
			break;
 800d156:	e055      	b.n	800d204 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	899b      	ldrh	r3, [r3, #12]
 800d160:	085b      	lsrs	r3, r3, #1
 800d162:	b29b      	uxth	r3, r3
 800d164:	4619      	mov	r1, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	fbb3 f3f1 	udiv	r3, r3, r1
 800d16c:	4413      	add	r3, r2
 800d16e:	4619      	mov	r1, r3
 800d170:	6938      	ldr	r0, [r7, #16]
 800d172:	f7ff febb 	bl	800ceec <move_window>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d140      	bne.n	800d1fe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	693a      	ldr	r2, [r7, #16]
 800d188:	8992      	ldrh	r2, [r2, #12]
 800d18a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d18e:	fb00 f202 	mul.w	r2, r0, r2
 800d192:	1a9b      	subs	r3, r3, r2
 800d194:	440b      	add	r3, r1
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fbf8 	bl	800c98c <ld_word>
 800d19c:	4603      	mov	r3, r0
 800d19e:	617b      	str	r3, [r7, #20]
			break;
 800d1a0:	e030      	b.n	800d204 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	899b      	ldrh	r3, [r3, #12]
 800d1aa:	089b      	lsrs	r3, r3, #2
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	6938      	ldr	r0, [r7, #16]
 800d1bc:	f7ff fe96 	bl	800ceec <move_window>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d11d      	bne.n	800d202 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	693a      	ldr	r2, [r7, #16]
 800d1d2:	8992      	ldrh	r2, [r2, #12]
 800d1d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1d8:	fb00 f202 	mul.w	r2, r0, r2
 800d1dc:	1a9b      	subs	r3, r3, r2
 800d1de:	440b      	add	r3, r1
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff fbeb 	bl	800c9bc <ld_dword>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d1ec:	617b      	str	r3, [r7, #20]
			break;
 800d1ee:	e009      	b.n	800d204 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
 800d1f4:	e006      	b.n	800d204 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1f6:	bf00      	nop
 800d1f8:	e004      	b.n	800d204 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1fa:	bf00      	nop
 800d1fc:	e002      	b.n	800d204 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d1fe:	bf00      	nop
 800d200:	e000      	b.n	800d204 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d202:	bf00      	nop
		}
	}

	return val;
 800d204:	697b      	ldr	r3, [r7, #20]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d20e:	b590      	push	{r4, r7, lr}
 800d210:	b089      	sub	sp, #36	; 0x24
 800d212:	af00      	add	r7, sp, #0
 800d214:	60f8      	str	r0, [r7, #12]
 800d216:	60b9      	str	r1, [r7, #8]
 800d218:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d21a:	2302      	movs	r3, #2
 800d21c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b01      	cmp	r3, #1
 800d222:	f240 8109 	bls.w	800d438 <put_fat+0x22a>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	f080 8103 	bcs.w	800d438 <put_fat+0x22a>
		switch (fs->fs_type) {
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b03      	cmp	r3, #3
 800d238:	f000 80b6 	beq.w	800d3a8 <put_fat+0x19a>
 800d23c:	2b03      	cmp	r3, #3
 800d23e:	f300 80fb 	bgt.w	800d438 <put_fat+0x22a>
 800d242:	2b01      	cmp	r3, #1
 800d244:	d003      	beq.n	800d24e <put_fat+0x40>
 800d246:	2b02      	cmp	r3, #2
 800d248:	f000 8083 	beq.w	800d352 <put_fat+0x144>
 800d24c:	e0f4      	b.n	800d438 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	61bb      	str	r3, [r7, #24]
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	085b      	lsrs	r3, r3, #1
 800d256:	69ba      	ldr	r2, [r7, #24]
 800d258:	4413      	add	r3, r2
 800d25a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	899b      	ldrh	r3, [r3, #12]
 800d264:	4619      	mov	r1, r3
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	fbb3 f3f1 	udiv	r3, r3, r1
 800d26c:	4413      	add	r3, r2
 800d26e:	4619      	mov	r1, r3
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7ff fe3b 	bl	800ceec <move_window>
 800d276:	4603      	mov	r3, r0
 800d278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d27a:	7ffb      	ldrb	r3, [r7, #31]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f040 80d4 	bne.w	800d42a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	61ba      	str	r2, [r7, #24]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	8992      	ldrh	r2, [r2, #12]
 800d292:	fbb3 f0f2 	udiv	r0, r3, r2
 800d296:	fb00 f202 	mul.w	r2, r0, r2
 800d29a:	1a9b      	subs	r3, r3, r2
 800d29c:	440b      	add	r3, r1
 800d29e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00d      	beq.n	800d2c6 <put_fat+0xb8>
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	b25b      	sxtb	r3, r3
 800d2b0:	f003 030f 	and.w	r3, r3, #15
 800d2b4:	b25a      	sxtb	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	011b      	lsls	r3, r3, #4
 800d2bc:	b25b      	sxtb	r3, r3
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	b25b      	sxtb	r3, r3
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	e001      	b.n	800d2ca <put_fat+0xbc>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	899b      	ldrh	r3, [r3, #12]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d2e4:	4413      	add	r3, r2
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f7ff fdff 	bl	800ceec <move_window>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d2f2:	7ffb      	ldrb	r3, [r7, #31]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f040 809a 	bne.w	800d42e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	899b      	ldrh	r3, [r3, #12]
 800d304:	461a      	mov	r2, r3
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	fbb3 f0f2 	udiv	r0, r3, r2
 800d30c:	fb00 f202 	mul.w	r2, r0, r2
 800d310:	1a9b      	subs	r3, r3, r2
 800d312:	440b      	add	r3, r1
 800d314:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	f003 0301 	and.w	r3, r3, #1
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d003      	beq.n	800d328 <put_fat+0x11a>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	091b      	lsrs	r3, r3, #4
 800d324:	b2db      	uxtb	r3, r3
 800d326:	e00e      	b.n	800d346 <put_fat+0x138>
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	b25b      	sxtb	r3, r3
 800d32e:	f023 030f 	bic.w	r3, r3, #15
 800d332:	b25a      	sxtb	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	0a1b      	lsrs	r3, r3, #8
 800d338:	b25b      	sxtb	r3, r3
 800d33a:	f003 030f 	and.w	r3, r3, #15
 800d33e:	b25b      	sxtb	r3, r3
 800d340:	4313      	orrs	r3, r2
 800d342:	b25b      	sxtb	r3, r3
 800d344:	b2db      	uxtb	r3, r3
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2201      	movs	r2, #1
 800d34e:	70da      	strb	r2, [r3, #3]
			break;
 800d350:	e072      	b.n	800d438 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	899b      	ldrh	r3, [r3, #12]
 800d35a:	085b      	lsrs	r3, r3, #1
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	4619      	mov	r1, r3
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	fbb3 f3f1 	udiv	r3, r3, r1
 800d366:	4413      	add	r3, r2
 800d368:	4619      	mov	r1, r3
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f7ff fdbe 	bl	800ceec <move_window>
 800d370:	4603      	mov	r3, r0
 800d372:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d374:	7ffb      	ldrb	r3, [r7, #31]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d15b      	bne.n	800d432 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	8992      	ldrh	r2, [r2, #12]
 800d388:	fbb3 f0f2 	udiv	r0, r3, r2
 800d38c:	fb00 f202 	mul.w	r2, r0, r2
 800d390:	1a9b      	subs	r3, r3, r2
 800d392:	440b      	add	r3, r1
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	b292      	uxth	r2, r2
 800d398:	4611      	mov	r1, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff fb31 	bl	800ca02 <st_word>
			fs->wflag = 1;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	70da      	strb	r2, [r3, #3]
			break;
 800d3a6:	e047      	b.n	800d438 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	899b      	ldrh	r3, [r3, #12]
 800d3b0:	089b      	lsrs	r3, r3, #2
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3bc:	4413      	add	r3, r2
 800d3be:	4619      	mov	r1, r3
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff fd93 	bl	800ceec <move_window>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3ca:	7ffb      	ldrb	r3, [r7, #31]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d132      	bne.n	800d436 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	8992      	ldrh	r2, [r2, #12]
 800d3e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3e8:	fb00 f202 	mul.w	r2, r0, r2
 800d3ec:	1a9b      	subs	r3, r3, r2
 800d3ee:	440b      	add	r3, r1
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff fae3 	bl	800c9bc <ld_dword>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d3fc:	4323      	orrs	r3, r4
 800d3fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	68fa      	ldr	r2, [r7, #12]
 800d40c:	8992      	ldrh	r2, [r2, #12]
 800d40e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d412:	fb00 f202 	mul.w	r2, r0, r2
 800d416:	1a9b      	subs	r3, r3, r2
 800d418:	440b      	add	r3, r1
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff fb0b 	bl	800ca38 <st_dword>
			fs->wflag = 1;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	70da      	strb	r2, [r3, #3]
			break;
 800d428:	e006      	b.n	800d438 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d42a:	bf00      	nop
 800d42c:	e004      	b.n	800d438 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d42e:	bf00      	nop
 800d430:	e002      	b.n	800d438 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d432:	bf00      	nop
 800d434:	e000      	b.n	800d438 <put_fat+0x22a>
			if (res != FR_OK) break;
 800d436:	bf00      	nop
		}
	}
	return res;
 800d438:	7ffb      	ldrb	r3, [r7, #31]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3724      	adds	r7, #36	; 0x24
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd90      	pop	{r4, r7, pc}

0800d442 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b088      	sub	sp, #32
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d904      	bls.n	800d468 <remove_chain+0x26>
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	69db      	ldr	r3, [r3, #28]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	429a      	cmp	r2, r3
 800d466:	d301      	bcc.n	800d46c <remove_chain+0x2a>
 800d468:	2302      	movs	r3, #2
 800d46a:	e04b      	b.n	800d504 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00c      	beq.n	800d48c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d472:	f04f 32ff 	mov.w	r2, #4294967295
 800d476:	6879      	ldr	r1, [r7, #4]
 800d478:	69b8      	ldr	r0, [r7, #24]
 800d47a:	f7ff fec8 	bl	800d20e <put_fat>
 800d47e:	4603      	mov	r3, r0
 800d480:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d482:	7ffb      	ldrb	r3, [r7, #31]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <remove_chain+0x4a>
 800d488:	7ffb      	ldrb	r3, [r7, #31]
 800d48a:	e03b      	b.n	800d504 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d48c:	68b9      	ldr	r1, [r7, #8]
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f7ff fde9 	bl	800d066 <get_fat>
 800d494:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d031      	beq.n	800d500 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d101      	bne.n	800d4a6 <remove_chain+0x64>
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	e02e      	b.n	800d504 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ac:	d101      	bne.n	800d4b2 <remove_chain+0x70>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e028      	b.n	800d504 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	68b9      	ldr	r1, [r7, #8]
 800d4b6:	69b8      	ldr	r0, [r7, #24]
 800d4b8:	f7ff fea9 	bl	800d20e <put_fat>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d4c0:	7ffb      	ldrb	r3, [r7, #31]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <remove_chain+0x88>
 800d4c6:	7ffb      	ldrb	r3, [r7, #31]
 800d4c8:	e01c      	b.n	800d504 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	699a      	ldr	r2, [r3, #24]
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	69db      	ldr	r3, [r3, #28]
 800d4d2:	3b02      	subs	r3, #2
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d20b      	bcs.n	800d4f0 <remove_chain+0xae>
			fs->free_clst++;
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	791b      	ldrb	r3, [r3, #4]
 800d4e6:	f043 0301 	orr.w	r3, r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	69db      	ldr	r3, [r3, #28]
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d3c6      	bcc.n	800d48c <remove_chain+0x4a>
 800d4fe:	e000      	b.n	800d502 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d500:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	3720      	adds	r7, #32
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10d      	bne.n	800d53e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d004      	beq.n	800d538 <create_chain+0x2c>
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	69ba      	ldr	r2, [r7, #24]
 800d534:	429a      	cmp	r2, r3
 800d536:	d31b      	bcc.n	800d570 <create_chain+0x64>
 800d538:	2301      	movs	r3, #1
 800d53a:	61bb      	str	r3, [r7, #24]
 800d53c:	e018      	b.n	800d570 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f7ff fd90 	bl	800d066 <get_fat>
 800d546:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d801      	bhi.n	800d552 <create_chain+0x46>
 800d54e:	2301      	movs	r3, #1
 800d550:	e070      	b.n	800d634 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d558:	d101      	bne.n	800d55e <create_chain+0x52>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	e06a      	b.n	800d634 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	429a      	cmp	r2, r3
 800d566:	d201      	bcs.n	800d56c <create_chain+0x60>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	e063      	b.n	800d634 <create_chain+0x128>
		scl = clst;
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	3301      	adds	r3, #1
 800d578:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	429a      	cmp	r2, r3
 800d582:	d307      	bcc.n	800d594 <create_chain+0x88>
				ncl = 2;
 800d584:	2302      	movs	r3, #2
 800d586:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d588:	69fa      	ldr	r2, [r7, #28]
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d901      	bls.n	800d594 <create_chain+0x88>
 800d590:	2300      	movs	r3, #0
 800d592:	e04f      	b.n	800d634 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d594:	69f9      	ldr	r1, [r7, #28]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff fd65 	bl	800d066 <get_fat>
 800d59c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00e      	beq.n	800d5c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d003      	beq.n	800d5b2 <create_chain+0xa6>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b0:	d101      	bne.n	800d5b6 <create_chain+0xaa>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	e03e      	b.n	800d634 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d5b6:	69fa      	ldr	r2, [r7, #28]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d1da      	bne.n	800d574 <create_chain+0x68>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	e038      	b.n	800d634 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d5c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c8:	69f9      	ldr	r1, [r7, #28]
 800d5ca:	6938      	ldr	r0, [r7, #16]
 800d5cc:	f7ff fe1f 	bl	800d20e <put_fat>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d109      	bne.n	800d5ee <create_chain+0xe2>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d006      	beq.n	800d5ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d5e0:	69fa      	ldr	r2, [r7, #28]
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6938      	ldr	r0, [r7, #16]
 800d5e6:	f7ff fe12 	bl	800d20e <put_fat>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d116      	bne.n	800d622 <create_chain+0x116>
		fs->last_clst = ncl;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	69fa      	ldr	r2, [r7, #28]
 800d5f8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	699a      	ldr	r2, [r3, #24]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	3b02      	subs	r3, #2
 800d604:	429a      	cmp	r2, r3
 800d606:	d804      	bhi.n	800d612 <create_chain+0x106>
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	791b      	ldrb	r3, [r3, #4]
 800d616:	f043 0301 	orr.w	r3, r3, #1
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	711a      	strb	r2, [r3, #4]
 800d620:	e007      	b.n	800d632 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d622:	7dfb      	ldrb	r3, [r7, #23]
 800d624:	2b01      	cmp	r3, #1
 800d626:	d102      	bne.n	800d62e <create_chain+0x122>
 800d628:	f04f 33ff 	mov.w	r3, #4294967295
 800d62c:	e000      	b.n	800d630 <create_chain+0x124>
 800d62e:	2301      	movs	r3, #1
 800d630:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d632:	69fb      	ldr	r3, [r7, #28]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b087      	sub	sp, #28
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	3304      	adds	r3, #4
 800d652:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	899b      	ldrh	r3, [r3, #12]
 800d658:	461a      	mov	r2, r3
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	8952      	ldrh	r2, [r2, #10]
 800d664:	fbb3 f3f2 	udiv	r3, r3, r2
 800d668:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	1d1a      	adds	r2, r3, #4
 800d66e:	613a      	str	r2, [r7, #16]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <clmt_clust+0x42>
 800d67a:	2300      	movs	r3, #0
 800d67c:	e010      	b.n	800d6a0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	429a      	cmp	r2, r3
 800d684:	d307      	bcc.n	800d696 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	617b      	str	r3, [r7, #20]
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3304      	adds	r3, #4
 800d692:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d694:	e7e9      	b.n	800d66a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d696:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	4413      	add	r3, r2
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	371c      	adds	r7, #28
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6c2:	d204      	bcs.n	800d6ce <dir_sdi+0x22>
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	f003 031f 	and.w	r3, r3, #31
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d001      	beq.n	800d6d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d6ce:	2302      	movs	r3, #2
 800d6d0:	e071      	b.n	800d7b6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	683a      	ldr	r2, [r7, #0]
 800d6d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d106      	bne.n	800d6f2 <dir_sdi+0x46>
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d902      	bls.n	800d6f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10c      	bne.n	800d712 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	8912      	ldrh	r2, [r2, #8]
 800d700:	4293      	cmp	r3, r2
 800d702:	d301      	bcc.n	800d708 <dir_sdi+0x5c>
 800d704:	2302      	movs	r3, #2
 800d706:	e056      	b.n	800d7b6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	61da      	str	r2, [r3, #28]
 800d710:	e02d      	b.n	800d76e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	895b      	ldrh	r3, [r3, #10]
 800d716:	461a      	mov	r2, r3
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	899b      	ldrh	r3, [r3, #12]
 800d71c:	fb02 f303 	mul.w	r3, r2, r3
 800d720:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d722:	e019      	b.n	800d758 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6979      	ldr	r1, [r7, #20]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff fc9c 	bl	800d066 <get_fat>
 800d72e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d736:	d101      	bne.n	800d73c <dir_sdi+0x90>
 800d738:	2301      	movs	r3, #1
 800d73a:	e03c      	b.n	800d7b6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d904      	bls.n	800d74c <dir_sdi+0xa0>
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d301      	bcc.n	800d750 <dir_sdi+0xa4>
 800d74c:	2302      	movs	r3, #2
 800d74e:	e032      	b.n	800d7b6 <dir_sdi+0x10a>
			ofs -= csz;
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d2e1      	bcs.n	800d724 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d760:	6979      	ldr	r1, [r7, #20]
 800d762:	6938      	ldr	r0, [r7, #16]
 800d764:	f7ff fc60 	bl	800d028 <clust2sect>
 800d768:	4602      	mov	r2, r0
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	69db      	ldr	r3, [r3, #28]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <dir_sdi+0xd4>
 800d77c:	2302      	movs	r3, #2
 800d77e:	e01a      	b.n	800d7b6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	69da      	ldr	r2, [r3, #28]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	899b      	ldrh	r3, [r3, #12]
 800d788:	4619      	mov	r1, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d790:	441a      	add	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	899b      	ldrh	r3, [r3, #12]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7a8:	fb00 f202 	mul.w	r2, r0, r2
 800d7ac:	1a9b      	subs	r3, r3, r2
 800d7ae:	18ca      	adds	r2, r1, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3718      	adds	r7, #24
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b086      	sub	sp, #24
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	3320      	adds	r3, #32
 800d7d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d003      	beq.n	800d7e6 <dir_next+0x28>
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d7e4:	d301      	bcc.n	800d7ea <dir_next+0x2c>
 800d7e6:	2304      	movs	r3, #4
 800d7e8:	e0bb      	b.n	800d962 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	899b      	ldrh	r3, [r3, #12]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7f6:	fb01 f202 	mul.w	r2, r1, r2
 800d7fa:	1a9b      	subs	r3, r3, r2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f040 809d 	bne.w	800d93c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	1c5a      	adds	r2, r3, #1
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10b      	bne.n	800d82c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	095b      	lsrs	r3, r3, #5
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	8912      	ldrh	r2, [r2, #8]
 800d81c:	4293      	cmp	r3, r2
 800d81e:	f0c0 808d 	bcc.w	800d93c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	61da      	str	r2, [r3, #28]
 800d828:	2304      	movs	r3, #4
 800d82a:	e09a      	b.n	800d962 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	899b      	ldrh	r3, [r3, #12]
 800d830:	461a      	mov	r2, r3
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	fbb3 f3f2 	udiv	r3, r3, r2
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	8952      	ldrh	r2, [r2, #10]
 800d83c:	3a01      	subs	r2, #1
 800d83e:	4013      	ands	r3, r2
 800d840:	2b00      	cmp	r3, #0
 800d842:	d17b      	bne.n	800d93c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	699b      	ldr	r3, [r3, #24]
 800d84a:	4619      	mov	r1, r3
 800d84c:	4610      	mov	r0, r2
 800d84e:	f7ff fc0a 	bl	800d066 <get_fat>
 800d852:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d801      	bhi.n	800d85e <dir_next+0xa0>
 800d85a:	2302      	movs	r3, #2
 800d85c:	e081      	b.n	800d962 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d864:	d101      	bne.n	800d86a <dir_next+0xac>
 800d866:	2301      	movs	r3, #1
 800d868:	e07b      	b.n	800d962 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	429a      	cmp	r2, r3
 800d872:	d359      	bcc.n	800d928 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d104      	bne.n	800d884 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	61da      	str	r2, [r3, #28]
 800d880:	2304      	movs	r3, #4
 800d882:	e06e      	b.n	800d962 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	4619      	mov	r1, r3
 800d88c:	4610      	mov	r0, r2
 800d88e:	f7ff fe3d 	bl	800d50c <create_chain>
 800d892:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d101      	bne.n	800d89e <dir_next+0xe0>
 800d89a:	2307      	movs	r3, #7
 800d89c:	e061      	b.n	800d962 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d101      	bne.n	800d8a8 <dir_next+0xea>
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e05c      	b.n	800d962 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ae:	d101      	bne.n	800d8b4 <dir_next+0xf6>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e056      	b.n	800d962 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f7ff fad5 	bl	800ce64 <sync_window>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d001      	beq.n	800d8c4 <dir_next+0x106>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e04e      	b.n	800d962 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	899b      	ldrh	r3, [r3, #12]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	f7ff f8fe 	bl	800cad2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	613b      	str	r3, [r7, #16]
 800d8da:	6979      	ldr	r1, [r7, #20]
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	f7ff fba3 	bl	800d028 <clust2sect>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	635a      	str	r2, [r3, #52]	; 0x34
 800d8e8:	e012      	b.n	800d910 <dir_next+0x152>
						fs->wflag = 1;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f7ff fab7 	bl	800ce64 <sync_window>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <dir_next+0x142>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e030      	b.n	800d962 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	3301      	adds	r3, #1
 800d904:	613b      	str	r3, [r7, #16]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	635a      	str	r2, [r3, #52]	; 0x34
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	895b      	ldrh	r3, [r3, #10]
 800d914:	461a      	mov	r2, r3
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	4293      	cmp	r3, r2
 800d91a:	d3e6      	bcc.n	800d8ea <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	1ad2      	subs	r2, r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d92e:	6979      	ldr	r1, [r7, #20]
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff fb79 	bl	800d028 <clust2sect>
 800d936:	4602      	mov	r2, r0
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	899b      	ldrh	r3, [r3, #12]
 800d94c:	461a      	mov	r2, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	fbb3 f0f2 	udiv	r0, r3, r2
 800d954:	fb00 f202 	mul.w	r2, r0, r2
 800d958:	1a9b      	subs	r3, r3, r2
 800d95a:	18ca      	adds	r2, r1, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b086      	sub	sp, #24
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
 800d972:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d97a:	2100      	movs	r1, #0
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff fe95 	bl	800d6ac <dir_sdi>
 800d982:	4603      	mov	r3, r0
 800d984:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d12b      	bne.n	800d9e4 <dir_alloc+0x7a>
		n = 0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	4619      	mov	r1, r3
 800d996:	68f8      	ldr	r0, [r7, #12]
 800d998:	f7ff faa8 	bl	800ceec <move_window>
 800d99c:	4603      	mov	r3, r0
 800d99e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d9a0:	7dfb      	ldrb	r3, [r7, #23]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d11d      	bne.n	800d9e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2be5      	cmp	r3, #229	; 0xe5
 800d9ae:	d004      	beq.n	800d9ba <dir_alloc+0x50>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a1b      	ldr	r3, [r3, #32]
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d107      	bne.n	800d9ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	613b      	str	r3, [r7, #16]
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d102      	bne.n	800d9ce <dir_alloc+0x64>
 800d9c8:	e00c      	b.n	800d9e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d9ce:	2101      	movs	r1, #1
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7ff fef4 	bl	800d7be <dir_next>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d0d7      	beq.n	800d990 <dir_alloc+0x26>
 800d9e0:	e000      	b.n	800d9e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d9e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d9e4:	7dfb      	ldrb	r3, [r7, #23]
 800d9e6:	2b04      	cmp	r3, #4
 800d9e8:	d101      	bne.n	800d9ee <dir_alloc+0x84>
 800d9ea:	2307      	movs	r3, #7
 800d9ec:	75fb      	strb	r3, [r7, #23]
	return res;
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	331a      	adds	r3, #26
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe ffc0 	bl	800c98c <ld_word>
 800da0c:	4603      	mov	r3, r0
 800da0e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b03      	cmp	r3, #3
 800da16:	d109      	bne.n	800da2c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	3314      	adds	r3, #20
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe ffb5 	bl	800c98c <ld_word>
 800da22:	4603      	mov	r3, r0
 800da24:	041b      	lsls	r3, r3, #16
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	4313      	orrs	r3, r2
 800da2a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800da2c:	68fb      	ldr	r3, [r7, #12]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	331a      	adds	r3, #26
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	b292      	uxth	r2, r2
 800da4a:	4611      	mov	r1, r2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe ffd8 	bl	800ca02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	2b03      	cmp	r3, #3
 800da58:	d109      	bne.n	800da6e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f103 0214 	add.w	r2, r3, #20
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	0c1b      	lsrs	r3, r3, #16
 800da64:	b29b      	uxth	r3, r3
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7fe ffca 	bl	800ca02 <st_word>
	}
}
 800da6e:	bf00      	nop
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
	...

0800da78 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	331a      	adds	r3, #26
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe ff80 	bl	800c98c <ld_word>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <cmp_lfn+0x1e>
 800da92:	2300      	movs	r3, #0
 800da94:	e059      	b.n	800db4a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da9e:	1e5a      	subs	r2, r3, #1
 800daa0:	4613      	mov	r3, r2
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	4413      	add	r3, r2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800daac:	2301      	movs	r3, #1
 800daae:	81fb      	strh	r3, [r7, #14]
 800dab0:	2300      	movs	r3, #0
 800dab2:	613b      	str	r3, [r7, #16]
 800dab4:	e033      	b.n	800db1e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dab6:	4a27      	ldr	r2, [pc, #156]	; (800db54 <cmp_lfn+0xdc>)
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	4413      	add	r3, r2
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	461a      	mov	r2, r3
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	4413      	add	r3, r2
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fe ff61 	bl	800c98c <ld_word>
 800daca:	4603      	mov	r3, r0
 800dacc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dace:	89fb      	ldrh	r3, [r7, #14]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01a      	beq.n	800db0a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2bfe      	cmp	r3, #254	; 0xfe
 800dad8:	d812      	bhi.n	800db00 <cmp_lfn+0x88>
 800dada:	89bb      	ldrh	r3, [r7, #12]
 800dadc:	4618      	mov	r0, r3
 800dade:	f001 ffc3 	bl	800fa68 <ff_wtoupper>
 800dae2:	4603      	mov	r3, r0
 800dae4:	461c      	mov	r4, r3
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	617a      	str	r2, [r7, #20]
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	4413      	add	r3, r2
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f001 ffb7 	bl	800fa68 <ff_wtoupper>
 800dafa:	4603      	mov	r3, r0
 800dafc:	429c      	cmp	r4, r3
 800dafe:	d001      	beq.n	800db04 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800db00:	2300      	movs	r3, #0
 800db02:	e022      	b.n	800db4a <cmp_lfn+0xd2>
			}
			wc = uc;
 800db04:	89bb      	ldrh	r3, [r7, #12]
 800db06:	81fb      	strh	r3, [r7, #14]
 800db08:	e006      	b.n	800db18 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800db0a:	89bb      	ldrh	r3, [r7, #12]
 800db0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db10:	4293      	cmp	r3, r2
 800db12:	d001      	beq.n	800db18 <cmp_lfn+0xa0>
 800db14:	2300      	movs	r3, #0
 800db16:	e018      	b.n	800db4a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	3301      	adds	r3, #1
 800db1c:	613b      	str	r3, [r7, #16]
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	2b0c      	cmp	r3, #12
 800db22:	d9c8      	bls.n	800dab6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <cmp_lfn+0xd0>
 800db30:	89fb      	ldrh	r3, [r7, #14]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d008      	beq.n	800db48 <cmp_lfn+0xd0>
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	4413      	add	r3, r2
 800db3e:	881b      	ldrh	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <cmp_lfn+0xd0>
 800db44:	2300      	movs	r3, #0
 800db46:	e000      	b.n	800db4a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800db48:	2301      	movs	r3, #1
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd90      	pop	{r4, r7, pc}
 800db52:	bf00      	nop
 800db54:	08015558 	.word	0x08015558

0800db58 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	4611      	mov	r1, r2
 800db64:	461a      	mov	r2, r3
 800db66:	460b      	mov	r3, r1
 800db68:	71fb      	strb	r3, [r7, #7]
 800db6a:	4613      	mov	r3, r2
 800db6c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	330d      	adds	r3, #13
 800db72:	79ba      	ldrb	r2, [r7, #6]
 800db74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	330b      	adds	r3, #11
 800db7a:	220f      	movs	r2, #15
 800db7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	330c      	adds	r3, #12
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	331a      	adds	r3, #26
 800db8a:	2100      	movs	r1, #0
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fe ff38 	bl	800ca02 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	1e5a      	subs	r2, r3, #1
 800db96:	4613      	mov	r3, r2
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	4413      	add	r3, r2
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4413      	add	r3, r2
 800dba0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	82fb      	strh	r3, [r7, #22]
 800dba6:	2300      	movs	r3, #0
 800dba8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dbaa:	8afb      	ldrh	r3, [r7, #22]
 800dbac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d007      	beq.n	800dbc4 <put_lfn+0x6c>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	61fa      	str	r2, [r7, #28]
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dbc4:	4a17      	ldr	r2, [pc, #92]	; (800dc24 <put_lfn+0xcc>)
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	4413      	add	r3, r2
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	461a      	mov	r2, r3
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	8afa      	ldrh	r2, [r7, #22]
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fe ff13 	bl	800ca02 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dbdc:	8afb      	ldrh	r3, [r7, #22]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <put_lfn+0x90>
 800dbe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbe6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	3301      	adds	r3, #1
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	2b0c      	cmp	r3, #12
 800dbf2:	d9da      	bls.n	800dbaa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dbf4:	8afb      	ldrh	r3, [r7, #22]
 800dbf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d006      	beq.n	800dc0c <put_lfn+0xb4>
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	005b      	lsls	r3, r3, #1
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	4413      	add	r3, r2
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d103      	bne.n	800dc14 <put_lfn+0xbc>
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc12:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	79fa      	ldrb	r2, [r7, #7]
 800dc18:	701a      	strb	r2, [r3, #0]
}
 800dc1a:	bf00      	nop
 800dc1c:	3720      	adds	r7, #32
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	08015558 	.word	0x08015558

0800dc28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08c      	sub	sp, #48	; 0x30
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dc36:	220b      	movs	r2, #11
 800dc38:	68b9      	ldr	r1, [r7, #8]
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f7fe ff28 	bl	800ca90 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2b05      	cmp	r3, #5
 800dc44:	d92b      	bls.n	800dc9e <gen_numname+0x76>
		sr = seq;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dc4a:	e022      	b.n	800dc92 <gen_numname+0x6a>
			wc = *lfn++;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	1c9a      	adds	r2, r3, #2
 800dc50:	607a      	str	r2, [r7, #4]
 800dc52:	881b      	ldrh	r3, [r3, #0]
 800dc54:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dc56:	2300      	movs	r3, #0
 800dc58:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc5a:	e017      	b.n	800dc8c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	005a      	lsls	r2, r3, #1
 800dc60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	4413      	add	r3, r2
 800dc68:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dc6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc6c:	085b      	lsrs	r3, r3, #1
 800dc6e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d005      	beq.n	800dc86 <gen_numname+0x5e>
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800dc80:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800dc84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	3301      	adds	r3, #1
 800dc8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8e:	2b0f      	cmp	r3, #15
 800dc90:	d9e4      	bls.n	800dc5c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1d8      	bne.n	800dc4c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dc9e:	2307      	movs	r3, #7
 800dca0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	f003 030f 	and.w	r3, r3, #15
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	3330      	adds	r3, #48	; 0x30
 800dcae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dcb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcb6:	2b39      	cmp	r3, #57	; 0x39
 800dcb8:	d904      	bls.n	800dcc4 <gen_numname+0x9c>
 800dcba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcbe:	3307      	adds	r3, #7
 800dcc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	1e5a      	subs	r2, r3, #1
 800dcc8:	62ba      	str	r2, [r7, #40]	; 0x28
 800dcca:	3330      	adds	r3, #48	; 0x30
 800dccc:	443b      	add	r3, r7
 800dcce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dcd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	091b      	lsrs	r3, r3, #4
 800dcda:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1df      	bne.n	800dca2 <gen_numname+0x7a>
	ns[i] = '~';
 800dce2:	f107 0214 	add.w	r2, r7, #20
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	4413      	add	r3, r2
 800dcea:	227e      	movs	r2, #126	; 0x7e
 800dcec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dcee:	2300      	movs	r3, #0
 800dcf0:	627b      	str	r3, [r7, #36]	; 0x24
 800dcf2:	e002      	b.n	800dcfa <gen_numname+0xd2>
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800dcfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d205      	bcs.n	800dd0e <gen_numname+0xe6>
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd06:	4413      	add	r3, r2
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b20      	cmp	r3, #32
 800dd0c:	d1f2      	bne.n	800dcf4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	2b07      	cmp	r3, #7
 800dd12:	d807      	bhi.n	800dd24 <gen_numname+0xfc>
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd1a:	3330      	adds	r3, #48	; 0x30
 800dd1c:	443b      	add	r3, r7
 800dd1e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dd22:	e000      	b.n	800dd26 <gen_numname+0xfe>
 800dd24:	2120      	movs	r1, #32
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	627a      	str	r2, [r7, #36]	; 0x24
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	460a      	mov	r2, r1
 800dd32:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd36:	2b07      	cmp	r3, #7
 800dd38:	d9e9      	bls.n	800dd0e <gen_numname+0xe6>
}
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
 800dd3e:	3730      	adds	r7, #48	; 0x30
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dd50:	230b      	movs	r3, #11
 800dd52:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dd54:	7bfb      	ldrb	r3, [r7, #15]
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	0852      	lsrs	r2, r2, #1
 800dd5a:	01db      	lsls	r3, r3, #7
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	1c59      	adds	r1, r3, #1
 800dd64:	6079      	str	r1, [r7, #4]
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	4413      	add	r3, r2
 800dd6a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	60bb      	str	r3, [r7, #8]
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1ed      	bne.n	800dd54 <sum_sfn+0x10>
	return sum;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b086      	sub	sp, #24
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dd94:	2100      	movs	r1, #0
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7ff fc88 	bl	800d6ac <dir_sdi>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <dir_find+0x24>
 800dda6:	7dfb      	ldrb	r3, [r7, #23]
 800dda8:	e0a9      	b.n	800defe <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ddaa:	23ff      	movs	r3, #255	; 0xff
 800ddac:	753b      	strb	r3, [r7, #20]
 800ddae:	7d3b      	ldrb	r3, [r7, #20]
 800ddb0:	757b      	strb	r3, [r7, #21]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6938      	ldr	r0, [r7, #16]
 800ddc2:	f7ff f893 	bl	800ceec <move_window>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f040 8090 	bne.w	800def2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ddda:	7dbb      	ldrb	r3, [r7, #22]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d102      	bne.n	800dde6 <dir_find+0x60>
 800dde0:	2304      	movs	r3, #4
 800dde2:	75fb      	strb	r3, [r7, #23]
 800dde4:	e08a      	b.n	800defc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a1b      	ldr	r3, [r3, #32]
 800ddea:	330b      	adds	r3, #11
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddf2:	73fb      	strb	r3, [r7, #15]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	7bfa      	ldrb	r2, [r7, #15]
 800ddf8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ddfa:	7dbb      	ldrb	r3, [r7, #22]
 800ddfc:	2be5      	cmp	r3, #229	; 0xe5
 800ddfe:	d007      	beq.n	800de10 <dir_find+0x8a>
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	f003 0308 	and.w	r3, r3, #8
 800de06:	2b00      	cmp	r3, #0
 800de08:	d009      	beq.n	800de1e <dir_find+0x98>
 800de0a:	7bfb      	ldrb	r3, [r7, #15]
 800de0c:	2b0f      	cmp	r3, #15
 800de0e:	d006      	beq.n	800de1e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800de10:	23ff      	movs	r3, #255	; 0xff
 800de12:	757b      	strb	r3, [r7, #21]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f04f 32ff 	mov.w	r2, #4294967295
 800de1a:	631a      	str	r2, [r3, #48]	; 0x30
 800de1c:	e05e      	b.n	800dedc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	2b0f      	cmp	r3, #15
 800de22:	d136      	bne.n	800de92 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d154      	bne.n	800dedc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800de32:	7dbb      	ldrb	r3, [r7, #22]
 800de34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00d      	beq.n	800de58 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	7b5b      	ldrb	r3, [r3, #13]
 800de42:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800de44:	7dbb      	ldrb	r3, [r7, #22]
 800de46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de4a:	75bb      	strb	r3, [r7, #22]
 800de4c:	7dbb      	ldrb	r3, [r7, #22]
 800de4e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	695a      	ldr	r2, [r3, #20]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800de58:	7dba      	ldrb	r2, [r7, #22]
 800de5a:	7d7b      	ldrb	r3, [r7, #21]
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d115      	bne.n	800de8c <dir_find+0x106>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	330d      	adds	r3, #13
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	7d3a      	ldrb	r2, [r7, #20]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d10e      	bne.n	800de8c <dir_find+0x106>
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	691a      	ldr	r2, [r3, #16]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7ff fdfd 	bl	800da78 <cmp_lfn>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d003      	beq.n	800de8c <dir_find+0x106>
 800de84:	7d7b      	ldrb	r3, [r7, #21]
 800de86:	3b01      	subs	r3, #1
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	e000      	b.n	800de8e <dir_find+0x108>
 800de8c:	23ff      	movs	r3, #255	; 0xff
 800de8e:	757b      	strb	r3, [r7, #21]
 800de90:	e024      	b.n	800dedc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800de92:	7d7b      	ldrb	r3, [r7, #21]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d109      	bne.n	800deac <dir_find+0x126>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff ff51 	bl	800dd44 <sum_sfn>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	7d3b      	ldrb	r3, [r7, #20]
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d024      	beq.n	800def6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10a      	bne.n	800ded0 <dir_find+0x14a>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a18      	ldr	r0, [r3, #32]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	3324      	adds	r3, #36	; 0x24
 800dec2:	220b      	movs	r2, #11
 800dec4:	4619      	mov	r1, r3
 800dec6:	f7fe fe1f 	bl	800cb08 <mem_cmp>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	d014      	beq.n	800defa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ded0:	23ff      	movs	r3, #255	; 0xff
 800ded2:	757b      	strb	r3, [r7, #21]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f04f 32ff 	mov.w	r2, #4294967295
 800deda:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dedc:	2100      	movs	r1, #0
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff fc6d 	bl	800d7be <dir_next>
 800dee4:	4603      	mov	r3, r0
 800dee6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dee8:	7dfb      	ldrb	r3, [r7, #23]
 800deea:	2b00      	cmp	r3, #0
 800deec:	f43f af65 	beq.w	800ddba <dir_find+0x34>
 800def0:	e004      	b.n	800defc <dir_find+0x176>
		if (res != FR_OK) break;
 800def2:	bf00      	nop
 800def4:	e002      	b.n	800defc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800def6:	bf00      	nop
 800def8:	e000      	b.n	800defc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800defa:	bf00      	nop

	return res;
 800defc:	7dfb      	ldrb	r3, [r7, #23]
}
 800defe:	4618      	mov	r0, r3
 800df00:	3718      	adds	r7, #24
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
	...

0800df08 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08c      	sub	sp, #48	; 0x30
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <dir_register+0x20>
 800df24:	2306      	movs	r3, #6
 800df26:	e0e0      	b.n	800e0ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800df28:	2300      	movs	r3, #0
 800df2a:	627b      	str	r3, [r7, #36]	; 0x24
 800df2c:	e002      	b.n	800df34 <dir_register+0x2c>
 800df2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df30:	3301      	adds	r3, #1
 800df32:	627b      	str	r3, [r7, #36]	; 0x24
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	691a      	ldr	r2, [r3, #16]
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	005b      	lsls	r3, r3, #1
 800df3c:	4413      	add	r3, r2
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1f4      	bne.n	800df2e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800df4a:	f107 030c 	add.w	r3, r7, #12
 800df4e:	220c      	movs	r2, #12
 800df50:	4618      	mov	r0, r3
 800df52:	f7fe fd9d 	bl	800ca90 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800df56:	7dfb      	ldrb	r3, [r7, #23]
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d032      	beq.n	800dfc6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2240      	movs	r2, #64	; 0x40
 800df64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800df68:	2301      	movs	r3, #1
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800df6c:	e016      	b.n	800df9c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	691a      	ldr	r2, [r3, #16]
 800df78:	f107 010c 	add.w	r1, r7, #12
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	f7ff fe53 	bl	800dc28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff feff 	bl	800dd86 <dir_find>
 800df88:	4603      	mov	r3, r0
 800df8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800df8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df92:	2b00      	cmp	r3, #0
 800df94:	d106      	bne.n	800dfa4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	3301      	adds	r3, #1
 800df9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800df9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9e:	2b63      	cmp	r3, #99	; 0x63
 800dfa0:	d9e5      	bls.n	800df6e <dir_register+0x66>
 800dfa2:	e000      	b.n	800dfa6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dfa4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	2b64      	cmp	r3, #100	; 0x64
 800dfaa:	d101      	bne.n	800dfb0 <dir_register+0xa8>
 800dfac:	2307      	movs	r3, #7
 800dfae:	e09c      	b.n	800e0ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	d002      	beq.n	800dfbe <dir_register+0xb6>
 800dfb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfbc:	e095      	b.n	800e0ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dfbe:	7dfa      	ldrb	r2, [r7, #23]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	f003 0302 	and.w	r3, r3, #2
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d007      	beq.n	800dfe0 <dir_register+0xd8>
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	330c      	adds	r3, #12
 800dfd4:	4a47      	ldr	r2, [pc, #284]	; (800e0f4 <dir_register+0x1ec>)
 800dfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfda:	089b      	lsrs	r3, r3, #2
 800dfdc:	3301      	adds	r3, #1
 800dfde:	e000      	b.n	800dfe2 <dir_register+0xda>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dfe4:	6a39      	ldr	r1, [r7, #32]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7ff fcbf 	bl	800d96a <dir_alloc>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d148      	bne.n	800e08c <dir_register+0x184>
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	623b      	str	r3, [r7, #32]
 800e000:	6a3b      	ldr	r3, [r7, #32]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d042      	beq.n	800e08c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	695a      	ldr	r2, [r3, #20]
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	015b      	lsls	r3, r3, #5
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff fb4a 	bl	800d6ac <dir_sdi>
 800e018:	4603      	mov	r3, r0
 800e01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e01e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e022:	2b00      	cmp	r3, #0
 800e024:	d132      	bne.n	800e08c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	3324      	adds	r3, #36	; 0x24
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff fe8a 	bl	800dd44 <sum_sfn>
 800e030:	4603      	mov	r3, r0
 800e032:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	69db      	ldr	r3, [r3, #28]
 800e038:	4619      	mov	r1, r3
 800e03a:	69f8      	ldr	r0, [r7, #28]
 800e03c:	f7fe ff56 	bl	800ceec <move_window>
 800e040:	4603      	mov	r3, r0
 800e042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d11d      	bne.n	800e08a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	6918      	ldr	r0, [r3, #16]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a19      	ldr	r1, [r3, #32]
 800e056:	6a3b      	ldr	r3, [r7, #32]
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	7efb      	ldrb	r3, [r7, #27]
 800e05c:	f7ff fd7c 	bl	800db58 <put_lfn>
				fs->wflag = 1;
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	2201      	movs	r2, #1
 800e064:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e066:	2100      	movs	r1, #0
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7ff fba8 	bl	800d7be <dir_next>
 800e06e:	4603      	mov	r3, r0
 800e070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d107      	bne.n	800e08c <dir_register+0x184>
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	3b01      	subs	r3, #1
 800e080:	623b      	str	r3, [r7, #32]
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1d5      	bne.n	800e034 <dir_register+0x12c>
 800e088:	e000      	b.n	800e08c <dir_register+0x184>
				if (res != FR_OK) break;
 800e08a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e08c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e090:	2b00      	cmp	r3, #0
 800e092:	d128      	bne.n	800e0e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	4619      	mov	r1, r3
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f7fe ff26 	bl	800ceec <move_window>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e0a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d11b      	bne.n	800e0e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a1b      	ldr	r3, [r3, #32]
 800e0b2:	2220      	movs	r2, #32
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fe fd0b 	bl	800cad2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6a18      	ldr	r0, [r3, #32]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3324      	adds	r3, #36	; 0x24
 800e0c4:	220b      	movs	r2, #11
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	f7fe fce2 	bl	800ca90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	f002 0218 	and.w	r2, r2, #24
 800e0dc:	b2d2      	uxtb	r2, r2
 800e0de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e0e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3730      	adds	r7, #48	; 0x30
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	4ec4ec4f 	.word	0x4ec4ec4f

0800e0f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08a      	sub	sp, #40	; 0x28
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	613b      	str	r3, [r7, #16]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	60fb      	str	r3, [r7, #12]
 800e110:	2300      	movs	r3, #0
 800e112:	617b      	str	r3, [r7, #20]
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	61ba      	str	r2, [r7, #24]
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	4413      	add	r3, r2
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e128:	2b1f      	cmp	r3, #31
 800e12a:	d940      	bls.n	800e1ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e12e:	2b2f      	cmp	r3, #47	; 0x2f
 800e130:	d006      	beq.n	800e140 <create_name+0x48>
 800e132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e134:	2b5c      	cmp	r3, #92	; 0x5c
 800e136:	d110      	bne.n	800e15a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e138:	e002      	b.n	800e140 <create_name+0x48>
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	3301      	adds	r3, #1
 800e13e:	61bb      	str	r3, [r7, #24]
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	4413      	add	r3, r2
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b2f      	cmp	r3, #47	; 0x2f
 800e14a:	d0f6      	beq.n	800e13a <create_name+0x42>
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	4413      	add	r3, r2
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	2b5c      	cmp	r3, #92	; 0x5c
 800e156:	d0f0      	beq.n	800e13a <create_name+0x42>
			break;
 800e158:	e02a      	b.n	800e1b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	2bfe      	cmp	r3, #254	; 0xfe
 800e15e:	d901      	bls.n	800e164 <create_name+0x6c>
 800e160:	2306      	movs	r3, #6
 800e162:	e17d      	b.n	800e460 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e166:	b2db      	uxtb	r3, r3
 800e168:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e16c:	2101      	movs	r1, #1
 800e16e:	4618      	mov	r0, r3
 800e170:	f001 fc3e 	bl	800f9f0 <ff_convert>
 800e174:	4603      	mov	r3, r0
 800e176:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d101      	bne.n	800e182 <create_name+0x8a>
 800e17e:	2306      	movs	r3, #6
 800e180:	e16e      	b.n	800e460 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e184:	2b7f      	cmp	r3, #127	; 0x7f
 800e186:	d809      	bhi.n	800e19c <create_name+0xa4>
 800e188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e18a:	4619      	mov	r1, r3
 800e18c:	488d      	ldr	r0, [pc, #564]	; (800e3c4 <create_name+0x2cc>)
 800e18e:	f7fe fce2 	bl	800cb56 <chk_chr>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <create_name+0xa4>
 800e198:	2306      	movs	r3, #6
 800e19a:	e161      	b.n	800e460 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	617a      	str	r2, [r7, #20]
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e1aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e1ac:	e7b4      	b.n	800e118 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e1ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	441a      	add	r2, r3
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e1ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1bc:	2b1f      	cmp	r3, #31
 800e1be:	d801      	bhi.n	800e1c4 <create_name+0xcc>
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	e000      	b.n	800e1c6 <create_name+0xce>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e1ca:	e011      	b.n	800e1f0 <create_name+0xf8>
		w = lfn[di - 1];
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e1d2:	3b01      	subs	r3, #1
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e1de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1e0:	2b20      	cmp	r3, #32
 800e1e2:	d002      	beq.n	800e1ea <create_name+0xf2>
 800e1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1e6:	2b2e      	cmp	r3, #46	; 0x2e
 800e1e8:	d106      	bne.n	800e1f8 <create_name+0x100>
		di--;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d1ea      	bne.n	800e1cc <create_name+0xd4>
 800e1f6:	e000      	b.n	800e1fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e1f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	005b      	lsls	r3, r3, #1
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	4413      	add	r3, r2
 800e202:	2200      	movs	r2, #0
 800e204:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <create_name+0x118>
 800e20c:	2306      	movs	r3, #6
 800e20e:	e127      	b.n	800e460 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3324      	adds	r3, #36	; 0x24
 800e214:	220b      	movs	r2, #11
 800e216:	2120      	movs	r1, #32
 800e218:	4618      	mov	r0, r3
 800e21a:	f7fe fc5a 	bl	800cad2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e21e:	2300      	movs	r3, #0
 800e220:	61bb      	str	r3, [r7, #24]
 800e222:	e002      	b.n	800e22a <create_name+0x132>
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	3301      	adds	r3, #1
 800e228:	61bb      	str	r3, [r7, #24]
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	4413      	add	r3, r2
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	2b20      	cmp	r3, #32
 800e236:	d0f5      	beq.n	800e224 <create_name+0x12c>
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	4413      	add	r3, r2
 800e240:	881b      	ldrh	r3, [r3, #0]
 800e242:	2b2e      	cmp	r3, #46	; 0x2e
 800e244:	d0ee      	beq.n	800e224 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d009      	beq.n	800e260 <create_name+0x168>
 800e24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e250:	f043 0303 	orr.w	r3, r3, #3
 800e254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e258:	e002      	b.n	800e260 <create_name+0x168>
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	617b      	str	r3, [r7, #20]
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d009      	beq.n	800e27a <create_name+0x182>
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e26c:	3b01      	subs	r3, #1
 800e26e:	005b      	lsls	r3, r3, #1
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	4413      	add	r3, r2
 800e274:	881b      	ldrh	r3, [r3, #0]
 800e276:	2b2e      	cmp	r3, #46	; 0x2e
 800e278:	d1ef      	bne.n	800e25a <create_name+0x162>

	i = b = 0; ni = 8;
 800e27a:	2300      	movs	r3, #0
 800e27c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e280:	2300      	movs	r3, #0
 800e282:	623b      	str	r3, [r7, #32]
 800e284:	2308      	movs	r3, #8
 800e286:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	1c5a      	adds	r2, r3, #1
 800e28c:	61ba      	str	r2, [r7, #24]
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	4413      	add	r3, r2
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f000 8090 	beq.w	800e3c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e2a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2a2:	2b20      	cmp	r3, #32
 800e2a4:	d006      	beq.n	800e2b4 <create_name+0x1bc>
 800e2a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2a8:	2b2e      	cmp	r3, #46	; 0x2e
 800e2aa:	d10a      	bne.n	800e2c2 <create_name+0x1ca>
 800e2ac:	69ba      	ldr	r2, [r7, #24]
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d006      	beq.n	800e2c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2b8:	f043 0303 	orr.w	r3, r3, #3
 800e2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2c0:	e07d      	b.n	800e3be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e2c2:	6a3a      	ldr	r2, [r7, #32]
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d203      	bcs.n	800e2d2 <create_name+0x1da>
 800e2ca:	69ba      	ldr	r2, [r7, #24]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d123      	bne.n	800e31a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	2b0b      	cmp	r3, #11
 800e2d6:	d106      	bne.n	800e2e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2dc:	f043 0303 	orr.w	r3, r3, #3
 800e2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2e4:	e075      	b.n	800e3d2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e2e6:	69ba      	ldr	r2, [r7, #24]
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d005      	beq.n	800e2fa <create_name+0x202>
 800e2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2f2:	f043 0303 	orr.w	r3, r3, #3
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e2fa:	69ba      	ldr	r2, [r7, #24]
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d866      	bhi.n	800e3d0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	61bb      	str	r3, [r7, #24]
 800e306:	2308      	movs	r3, #8
 800e308:	623b      	str	r3, [r7, #32]
 800e30a:	230b      	movs	r3, #11
 800e30c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e30e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e318:	e051      	b.n	800e3be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e31a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e31c:	2b7f      	cmp	r3, #127	; 0x7f
 800e31e:	d914      	bls.n	800e34a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e322:	2100      	movs	r1, #0
 800e324:	4618      	mov	r0, r3
 800e326:	f001 fb63 	bl	800f9f0 <ff_convert>
 800e32a:	4603      	mov	r3, r0
 800e32c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <create_name+0x246>
 800e334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e336:	3b80      	subs	r3, #128	; 0x80
 800e338:	4a23      	ldr	r2, [pc, #140]	; (800e3c8 <create_name+0x2d0>)
 800e33a:	5cd3      	ldrb	r3, [r2, r3]
 800e33c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e342:	f043 0302 	orr.w	r3, r3, #2
 800e346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e34a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <create_name+0x268>
 800e350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e352:	4619      	mov	r1, r3
 800e354:	481d      	ldr	r0, [pc, #116]	; (800e3cc <create_name+0x2d4>)
 800e356:	f7fe fbfe 	bl	800cb56 <chk_chr>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d008      	beq.n	800e372 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e360:	235f      	movs	r3, #95	; 0x5f
 800e362:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e368:	f043 0303 	orr.w	r3, r3, #3
 800e36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e370:	e01b      	b.n	800e3aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e374:	2b40      	cmp	r3, #64	; 0x40
 800e376:	d909      	bls.n	800e38c <create_name+0x294>
 800e378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e37a:	2b5a      	cmp	r3, #90	; 0x5a
 800e37c:	d806      	bhi.n	800e38c <create_name+0x294>
					b |= 2;
 800e37e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e382:	f043 0302 	orr.w	r3, r3, #2
 800e386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e38a:	e00e      	b.n	800e3aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e38c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e38e:	2b60      	cmp	r3, #96	; 0x60
 800e390:	d90b      	bls.n	800e3aa <create_name+0x2b2>
 800e392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e394:	2b7a      	cmp	r3, #122	; 0x7a
 800e396:	d808      	bhi.n	800e3aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e398:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e39c:	f043 0301 	orr.w	r3, r3, #1
 800e3a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e3a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3a6:	3b20      	subs	r3, #32
 800e3a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	623a      	str	r2, [r7, #32]
 800e3b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3b2:	b2d1      	uxtb	r1, r2
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	460a      	mov	r2, r1
 800e3ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e3be:	e763      	b.n	800e288 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e3c0:	bf00      	nop
 800e3c2:	e006      	b.n	800e3d2 <create_name+0x2da>
 800e3c4:	0801545c 	.word	0x0801545c
 800e3c8:	080154d8 	.word	0x080154d8
 800e3cc:	08015468 	.word	0x08015468
			if (si > di) break;			/* No extension */
 800e3d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e3d8:	2be5      	cmp	r3, #229	; 0xe5
 800e3da:	d103      	bne.n	800e3e4 <create_name+0x2ec>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2205      	movs	r2, #5
 800e3e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	2b08      	cmp	r3, #8
 800e3e8:	d104      	bne.n	800e3f4 <create_name+0x2fc>
 800e3ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e3f8:	f003 030c 	and.w	r3, r3, #12
 800e3fc:	2b0c      	cmp	r3, #12
 800e3fe:	d005      	beq.n	800e40c <create_name+0x314>
 800e400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e404:	f003 0303 	and.w	r3, r3, #3
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d105      	bne.n	800e418 <create_name+0x320>
 800e40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e410:	f043 0302 	orr.w	r3, r3, #2
 800e414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e41c:	f003 0302 	and.w	r3, r3, #2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d117      	bne.n	800e454 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e428:	f003 0303 	and.w	r3, r3, #3
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d105      	bne.n	800e43c <create_name+0x344>
 800e430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e434:	f043 0310 	orr.w	r3, r3, #16
 800e438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e43c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e440:	f003 030c 	and.w	r3, r3, #12
 800e444:	2b04      	cmp	r3, #4
 800e446:	d105      	bne.n	800e454 <create_name+0x35c>
 800e448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e44c:	f043 0308 	orr.w	r3, r3, #8
 800e450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e45a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e45e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e460:	4618      	mov	r0, r3
 800e462:	3728      	adds	r7, #40	; 0x28
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b086      	sub	sp, #24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e47c:	e002      	b.n	800e484 <follow_path+0x1c>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	3301      	adds	r3, #1
 800e482:	603b      	str	r3, [r7, #0]
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b2f      	cmp	r3, #47	; 0x2f
 800e48a:	d0f8      	beq.n	800e47e <follow_path+0x16>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b5c      	cmp	r3, #92	; 0x5c
 800e492:	d0f4      	beq.n	800e47e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	2200      	movs	r2, #0
 800e498:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b1f      	cmp	r3, #31
 800e4a0:	d80a      	bhi.n	800e4b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2280      	movs	r2, #128	; 0x80
 800e4a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7ff f8fd 	bl	800d6ac <dir_sdi>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	75fb      	strb	r3, [r7, #23]
 800e4b6:	e048      	b.n	800e54a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e4b8:	463b      	mov	r3, r7
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f7ff fe1b 	bl	800e0f8 <create_name>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d139      	bne.n	800e540 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7ff fc5a 	bl	800dd86 <dir_find>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e4dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00a      	beq.n	800e4fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e4e4:	7dfb      	ldrb	r3, [r7, #23]
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d12c      	bne.n	800e544 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e4ea:	7afb      	ldrb	r3, [r7, #11]
 800e4ec:	f003 0304 	and.w	r3, r3, #4
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d127      	bne.n	800e544 <follow_path+0xdc>
 800e4f4:	2305      	movs	r3, #5
 800e4f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e4f8:	e024      	b.n	800e544 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e4fa:	7afb      	ldrb	r3, [r7, #11]
 800e4fc:	f003 0304 	and.w	r3, r3, #4
 800e500:	2b00      	cmp	r3, #0
 800e502:	d121      	bne.n	800e548 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	799b      	ldrb	r3, [r3, #6]
 800e508:	f003 0310 	and.w	r3, r3, #16
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d102      	bne.n	800e516 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e510:	2305      	movs	r3, #5
 800e512:	75fb      	strb	r3, [r7, #23]
 800e514:	e019      	b.n	800e54a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	8992      	ldrh	r2, [r2, #12]
 800e524:	fbb3 f0f2 	udiv	r0, r3, r2
 800e528:	fb00 f202 	mul.w	r2, r0, r2
 800e52c:	1a9b      	subs	r3, r3, r2
 800e52e:	440b      	add	r3, r1
 800e530:	4619      	mov	r1, r3
 800e532:	68f8      	ldr	r0, [r7, #12]
 800e534:	f7ff fa60 	bl	800d9f8 <ld_clust>
 800e538:	4602      	mov	r2, r0
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e53e:	e7bb      	b.n	800e4b8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e540:	bf00      	nop
 800e542:	e002      	b.n	800e54a <follow_path+0xe2>
				break;
 800e544:	bf00      	nop
 800e546:	e000      	b.n	800e54a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e548:	bf00      	nop
			}
		}
	}

	return res;
 800e54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3718      	adds	r7, #24
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e554:	b480      	push	{r7}
 800e556:	b087      	sub	sp, #28
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e55c:	f04f 33ff 	mov.w	r3, #4294967295
 800e560:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d031      	beq.n	800e5ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	e002      	b.n	800e578 <get_ldnumber+0x24>
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	3301      	adds	r3, #1
 800e576:	617b      	str	r3, [r7, #20]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	2b1f      	cmp	r3, #31
 800e57e:	d903      	bls.n	800e588 <get_ldnumber+0x34>
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b3a      	cmp	r3, #58	; 0x3a
 800e586:	d1f4      	bne.n	800e572 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b3a      	cmp	r3, #58	; 0x3a
 800e58e:	d11c      	bne.n	800e5ca <get_ldnumber+0x76>
			tp = *path;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	1c5a      	adds	r2, r3, #1
 800e59a:	60fa      	str	r2, [r7, #12]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	3b30      	subs	r3, #48	; 0x30
 800e5a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b09      	cmp	r3, #9
 800e5a6:	d80e      	bhi.n	800e5c6 <get_ldnumber+0x72>
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d10a      	bne.n	800e5c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d107      	bne.n	800e5c6 <get_ldnumber+0x72>
					vol = (int)i;
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	617b      	str	r3, [r7, #20]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	697a      	ldr	r2, [r7, #20]
 800e5c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	e002      	b.n	800e5d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e5ce:	693b      	ldr	r3, [r7, #16]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	371c      	adds	r7, #28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	70da      	strb	r2, [r3, #3]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7fe fc78 	bl	800ceec <move_window>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <check_fs+0x2a>
 800e602:	2304      	movs	r3, #4
 800e604:	e038      	b.n	800e678 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	3338      	adds	r3, #56	; 0x38
 800e60a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fe f9bc 	bl	800c98c <ld_word>
 800e614:	4603      	mov	r3, r0
 800e616:	461a      	mov	r2, r3
 800e618:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d001      	beq.n	800e624 <check_fs+0x48>
 800e620:	2303      	movs	r3, #3
 800e622:	e029      	b.n	800e678 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e62a:	2be9      	cmp	r3, #233	; 0xe9
 800e62c:	d009      	beq.n	800e642 <check_fs+0x66>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e634:	2beb      	cmp	r3, #235	; 0xeb
 800e636:	d11e      	bne.n	800e676 <check_fs+0x9a>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e63e:	2b90      	cmp	r3, #144	; 0x90
 800e640:	d119      	bne.n	800e676 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	3338      	adds	r3, #56	; 0x38
 800e646:	3336      	adds	r3, #54	; 0x36
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe f9b7 	bl	800c9bc <ld_dword>
 800e64e:	4603      	mov	r3, r0
 800e650:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e654:	4a0a      	ldr	r2, [pc, #40]	; (800e680 <check_fs+0xa4>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d101      	bne.n	800e65e <check_fs+0x82>
 800e65a:	2300      	movs	r3, #0
 800e65c:	e00c      	b.n	800e678 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3338      	adds	r3, #56	; 0x38
 800e662:	3352      	adds	r3, #82	; 0x52
 800e664:	4618      	mov	r0, r3
 800e666:	f7fe f9a9 	bl	800c9bc <ld_dword>
 800e66a:	4603      	mov	r3, r0
 800e66c:	4a05      	ldr	r2, [pc, #20]	; (800e684 <check_fs+0xa8>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d101      	bne.n	800e676 <check_fs+0x9a>
 800e672:	2300      	movs	r3, #0
 800e674:	e000      	b.n	800e678 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e676:	2302      	movs	r3, #2
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	00544146 	.word	0x00544146
 800e684:	33544146 	.word	0x33544146

0800e688 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b096      	sub	sp, #88	; 0x58
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	4613      	mov	r3, r2
 800e694:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	2200      	movs	r2, #0
 800e69a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f7ff ff59 	bl	800e554 <get_ldnumber>
 800e6a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e6a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	da01      	bge.n	800e6ae <find_volume+0x26>
 800e6aa:	230b      	movs	r3, #11
 800e6ac:	e262      	b.n	800eb74 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e6ae:	4a9f      	ldr	r2, [pc, #636]	; (800e92c <find_volume+0x2a4>)
 800e6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d101      	bne.n	800e6c2 <find_volume+0x3a>
 800e6be:	230c      	movs	r3, #12
 800e6c0:	e258      	b.n	800eb74 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	f023 0301 	bic.w	r3, r3, #1
 800e6ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01a      	beq.n	800e70e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	785b      	ldrb	r3, [r3, #1]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fe f8b5 	bl	800c84c <disk_status>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e6e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10c      	bne.n	800e70e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d007      	beq.n	800e70a <find_volume+0x82>
 800e6fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e706:	230a      	movs	r3, #10
 800e708:	e234      	b.n	800eb74 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800e70a:	2300      	movs	r3, #0
 800e70c:	e232      	b.n	800eb74 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	2200      	movs	r2, #0
 800e712:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e716:	b2da      	uxtb	r2, r3
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	785b      	ldrb	r3, [r3, #1]
 800e720:	4618      	mov	r0, r3
 800e722:	f7fe f8ad 	bl	800c880 <disk_initialize>
 800e726:	4603      	mov	r3, r0
 800e728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e72c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e730:	f003 0301 	and.w	r3, r3, #1
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e738:	2303      	movs	r3, #3
 800e73a:	e21b      	b.n	800eb74 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e73c:	79fb      	ldrb	r3, [r7, #7]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d007      	beq.n	800e752 <find_volume+0xca>
 800e742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e746:	f003 0304 	and.w	r3, r3, #4
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e74e:	230a      	movs	r3, #10
 800e750:	e210      	b.n	800eb74 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	7858      	ldrb	r0, [r3, #1]
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	330c      	adds	r3, #12
 800e75a:	461a      	mov	r2, r3
 800e75c:	2102      	movs	r1, #2
 800e75e:	f7fe f8f7 	bl	800c950 <disk_ioctl>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <find_volume+0xe4>
 800e768:	2301      	movs	r3, #1
 800e76a:	e203      	b.n	800eb74 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	899b      	ldrh	r3, [r3, #12]
 800e770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e774:	d80d      	bhi.n	800e792 <find_volume+0x10a>
 800e776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e778:	899b      	ldrh	r3, [r3, #12]
 800e77a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e77e:	d308      	bcc.n	800e792 <find_volume+0x10a>
 800e780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e782:	899b      	ldrh	r3, [r3, #12]
 800e784:	461a      	mov	r2, r3
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	899b      	ldrh	r3, [r3, #12]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	4013      	ands	r3, r2
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <find_volume+0x10e>
 800e792:	2301      	movs	r3, #1
 800e794:	e1ee      	b.n	800eb74 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e79a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e79c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e79e:	f7ff ff1d 	bl	800e5dc <check_fs>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e7a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d149      	bne.n	800e844 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e7b4:	e01e      	b.n	800e7f4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7be:	011b      	lsls	r3, r3, #4
 800e7c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e7c4:	4413      	add	r3, r2
 800e7c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	3304      	adds	r3, #4
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d006      	beq.n	800e7e0 <find_volume+0x158>
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	3308      	adds	r3, #8
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fe f8f0 	bl	800c9bc <ld_dword>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	e000      	b.n	800e7e2 <find_volume+0x15a>
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	3358      	adds	r3, #88	; 0x58
 800e7e8:	443b      	add	r3, r7
 800e7ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d9dd      	bls.n	800e7b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <find_volume+0x182>
 800e804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e806:	3b01      	subs	r3, #1
 800e808:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e80a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	3358      	adds	r3, #88	; 0x58
 800e810:	443b      	add	r3, r7
 800e812:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e816:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d005      	beq.n	800e82a <find_volume+0x1a2>
 800e81e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e822:	f7ff fedb 	bl	800e5dc <check_fs>
 800e826:	4603      	mov	r3, r0
 800e828:	e000      	b.n	800e82c <find_volume+0x1a4>
 800e82a:	2303      	movs	r3, #3
 800e82c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e834:	2b01      	cmp	r3, #1
 800e836:	d905      	bls.n	800e844 <find_volume+0x1bc>
 800e838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e83a:	3301      	adds	r3, #1
 800e83c:	643b      	str	r3, [r7, #64]	; 0x40
 800e83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e840:	2b03      	cmp	r3, #3
 800e842:	d9e2      	bls.n	800e80a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e848:	2b04      	cmp	r3, #4
 800e84a:	d101      	bne.n	800e850 <find_volume+0x1c8>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e191      	b.n	800eb74 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e854:	2b01      	cmp	r3, #1
 800e856:	d901      	bls.n	800e85c <find_volume+0x1d4>
 800e858:	230d      	movs	r3, #13
 800e85a:	e18b      	b.n	800eb74 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	3338      	adds	r3, #56	; 0x38
 800e860:	330b      	adds	r3, #11
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe f892 	bl	800c98c <ld_word>
 800e868:	4603      	mov	r3, r0
 800e86a:	461a      	mov	r2, r3
 800e86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86e:	899b      	ldrh	r3, [r3, #12]
 800e870:	429a      	cmp	r2, r3
 800e872:	d001      	beq.n	800e878 <find_volume+0x1f0>
 800e874:	230d      	movs	r3, #13
 800e876:	e17d      	b.n	800eb74 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	3338      	adds	r3, #56	; 0x38
 800e87c:	3316      	adds	r3, #22
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe f884 	bl	800c98c <ld_word>
 800e884:	4603      	mov	r3, r0
 800e886:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d106      	bne.n	800e89c <find_volume+0x214>
 800e88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e890:	3338      	adds	r3, #56	; 0x38
 800e892:	3324      	adds	r3, #36	; 0x24
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe f891 	bl	800c9bc <ld_dword>
 800e89a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e8a0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	789b      	ldrb	r3, [r3, #2]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d005      	beq.n	800e8c0 <find_volume+0x238>
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	789b      	ldrb	r3, [r3, #2]
 800e8b8:	2b02      	cmp	r3, #2
 800e8ba:	d001      	beq.n	800e8c0 <find_volume+0x238>
 800e8bc:	230d      	movs	r3, #13
 800e8be:	e159      	b.n	800eb74 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	789b      	ldrb	r3, [r3, #2]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8c8:	fb02 f303 	mul.w	r3, r2, r3
 800e8cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	895b      	ldrh	r3, [r3, #10]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d008      	beq.n	800e8f4 <find_volume+0x26c>
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	895b      	ldrh	r3, [r3, #10]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ea:	895b      	ldrh	r3, [r3, #10]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <find_volume+0x270>
 800e8f4:	230d      	movs	r3, #13
 800e8f6:	e13d      	b.n	800eb74 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	3338      	adds	r3, #56	; 0x38
 800e8fc:	3311      	adds	r3, #17
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe f844 	bl	800c98c <ld_word>
 800e904:	4603      	mov	r3, r0
 800e906:	461a      	mov	r2, r3
 800e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90e:	891b      	ldrh	r3, [r3, #8]
 800e910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e912:	8992      	ldrh	r2, [r2, #12]
 800e914:	0952      	lsrs	r2, r2, #5
 800e916:	b292      	uxth	r2, r2
 800e918:	fbb3 f1f2 	udiv	r1, r3, r2
 800e91c:	fb01 f202 	mul.w	r2, r1, r2
 800e920:	1a9b      	subs	r3, r3, r2
 800e922:	b29b      	uxth	r3, r3
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <find_volume+0x2a8>
 800e928:	230d      	movs	r3, #13
 800e92a:	e123      	b.n	800eb74 <find_volume+0x4ec>
 800e92c:	200035bc 	.word	0x200035bc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e932:	3338      	adds	r3, #56	; 0x38
 800e934:	3313      	adds	r3, #19
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe f828 	bl	800c98c <ld_word>
 800e93c:	4603      	mov	r3, r0
 800e93e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e942:	2b00      	cmp	r3, #0
 800e944:	d106      	bne.n	800e954 <find_volume+0x2cc>
 800e946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e948:	3338      	adds	r3, #56	; 0x38
 800e94a:	3320      	adds	r3, #32
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fe f835 	bl	800c9bc <ld_dword>
 800e952:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e956:	3338      	adds	r3, #56	; 0x38
 800e958:	330e      	adds	r3, #14
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe f816 	bl	800c98c <ld_word>
 800e960:	4603      	mov	r3, r0
 800e962:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e964:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e966:	2b00      	cmp	r3, #0
 800e968:	d101      	bne.n	800e96e <find_volume+0x2e6>
 800e96a:	230d      	movs	r3, #13
 800e96c:	e102      	b.n	800eb74 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e96e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e972:	4413      	add	r3, r2
 800e974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e976:	8911      	ldrh	r1, [r2, #8]
 800e978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e97a:	8992      	ldrh	r2, [r2, #12]
 800e97c:	0952      	lsrs	r2, r2, #5
 800e97e:	b292      	uxth	r2, r2
 800e980:	fbb1 f2f2 	udiv	r2, r1, r2
 800e984:	b292      	uxth	r2, r2
 800e986:	4413      	add	r3, r2
 800e988:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e98a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	429a      	cmp	r2, r3
 800e990:	d201      	bcs.n	800e996 <find_volume+0x30e>
 800e992:	230d      	movs	r3, #13
 800e994:	e0ee      	b.n	800eb74 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e99e:	8952      	ldrh	r2, [r2, #10]
 800e9a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d101      	bne.n	800e9b0 <find_volume+0x328>
 800e9ac:	230d      	movs	r3, #13
 800e9ae:	e0e1      	b.n	800eb74 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800e9b0:	2303      	movs	r3, #3
 800e9b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d802      	bhi.n	800e9c6 <find_volume+0x33e>
 800e9c0:	2302      	movs	r3, #2
 800e9c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d802      	bhi.n	800e9d6 <find_volume+0x34e>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	1c9a      	adds	r2, r3, #2
 800e9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9dc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9e2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e9e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e8:	441a      	add	r2, r3
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ec:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e9ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	441a      	add	r2, r3
 800e9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e9f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e9fc:	2b03      	cmp	r3, #3
 800e9fe:	d11e      	bne.n	800ea3e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea02:	3338      	adds	r3, #56	; 0x38
 800ea04:	332a      	adds	r3, #42	; 0x2a
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fd ffc0 	bl	800c98c <ld_word>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <find_volume+0x38e>
 800ea12:	230d      	movs	r3, #13
 800ea14:	e0ae      	b.n	800eb74 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ea16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea18:	891b      	ldrh	r3, [r3, #8]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <find_volume+0x39a>
 800ea1e:	230d      	movs	r3, #13
 800ea20:	e0a8      	b.n	800eb74 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	3338      	adds	r3, #56	; 0x38
 800ea26:	332c      	adds	r3, #44	; 0x2c
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fd ffc7 	bl	800c9bc <ld_dword>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea32:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	69db      	ldr	r3, [r3, #28]
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	647b      	str	r3, [r7, #68]	; 0x44
 800ea3c:	e01f      	b.n	800ea7e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ea3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea40:	891b      	ldrh	r3, [r3, #8]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <find_volume+0x3c2>
 800ea46:	230d      	movs	r3, #13
 800ea48:	e094      	b.n	800eb74 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea50:	441a      	add	r2, r3
 800ea52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea54:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ea56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	d103      	bne.n	800ea66 <find_volume+0x3de>
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	69db      	ldr	r3, [r3, #28]
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	e00a      	b.n	800ea7c <find_volume+0x3f4>
 800ea66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea68:	69da      	ldr	r2, [r3, #28]
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	4413      	add	r3, r2
 800ea70:	085a      	lsrs	r2, r3, #1
 800ea72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea74:	69db      	ldr	r3, [r3, #28]
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ea7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea80:	6a1a      	ldr	r2, [r3, #32]
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	899b      	ldrh	r3, [r3, #12]
 800ea86:	4619      	mov	r1, r3
 800ea88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea8a:	440b      	add	r3, r1
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea90:	8989      	ldrh	r1, [r1, #12]
 800ea92:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d201      	bcs.n	800ea9e <find_volume+0x416>
 800ea9a:	230d      	movs	r3, #13
 800ea9c:	e06a      	b.n	800eb74 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ea9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa4:	619a      	str	r2, [r3, #24]
 800eaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa8:	699a      	ldr	r2, [r3, #24]
 800eaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800eaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab0:	2280      	movs	r2, #128	; 0x80
 800eab2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eab8:	2b03      	cmp	r3, #3
 800eaba:	d149      	bne.n	800eb50 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eabe:	3338      	adds	r3, #56	; 0x38
 800eac0:	3330      	adds	r3, #48	; 0x30
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fd ff62 	bl	800c98c <ld_word>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d140      	bne.n	800eb50 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	3301      	adds	r3, #1
 800ead2:	4619      	mov	r1, r3
 800ead4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ead6:	f7fe fa09 	bl	800ceec <move_window>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d137      	bne.n	800eb50 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	2200      	movs	r2, #0
 800eae4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae8:	3338      	adds	r3, #56	; 0x38
 800eaea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fd ff4c 	bl	800c98c <ld_word>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d127      	bne.n	800eb50 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800eb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb02:	3338      	adds	r3, #56	; 0x38
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7fd ff59 	bl	800c9bc <ld_dword>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	4a1b      	ldr	r2, [pc, #108]	; (800eb7c <find_volume+0x4f4>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d11e      	bne.n	800eb50 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800eb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb14:	3338      	adds	r3, #56	; 0x38
 800eb16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fd ff4e 	bl	800c9bc <ld_dword>
 800eb20:	4603      	mov	r3, r0
 800eb22:	4a17      	ldr	r2, [pc, #92]	; (800eb80 <find_volume+0x4f8>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d113      	bne.n	800eb50 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800eb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2a:	3338      	adds	r3, #56	; 0x38
 800eb2c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fd ff43 	bl	800c9bc <ld_dword>
 800eb36:	4602      	mov	r2, r0
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	3338      	adds	r3, #56	; 0x38
 800eb40:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fd ff39 	bl	800c9bc <ld_dword>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800eb56:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800eb58:	4b0a      	ldr	r3, [pc, #40]	; (800eb84 <find_volume+0x4fc>)
 800eb5a:	881b      	ldrh	r3, [r3, #0]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	4b08      	ldr	r3, [pc, #32]	; (800eb84 <find_volume+0x4fc>)
 800eb62:	801a      	strh	r2, [r3, #0]
 800eb64:	4b07      	ldr	r3, [pc, #28]	; (800eb84 <find_volume+0x4fc>)
 800eb66:	881a      	ldrh	r2, [r3, #0]
 800eb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800eb6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb6e:	f7fe f955 	bl	800ce1c <clear_lock>
#endif
	return FR_OK;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3758      	adds	r7, #88	; 0x58
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	41615252 	.word	0x41615252
 800eb80:	61417272 	.word	0x61417272
 800eb84:	200035c0 	.word	0x200035c0

0800eb88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800eb92:	2309      	movs	r3, #9
 800eb94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d01c      	beq.n	800ebd6 <validate+0x4e>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d018      	beq.n	800ebd6 <validate+0x4e>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d013      	beq.n	800ebd6 <validate+0x4e>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	889a      	ldrh	r2, [r3, #4]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	88db      	ldrh	r3, [r3, #6]
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d10c      	bne.n	800ebd6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	785b      	ldrb	r3, [r3, #1]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fd fe42 	bl	800c84c <disk_status>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	f003 0301 	and.w	r3, r3, #1
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d101      	bne.n	800ebd6 <validate+0x4e>
			res = FR_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d102      	bne.n	800ebe2 <validate+0x5a>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	e000      	b.n	800ebe4 <validate+0x5c>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	6013      	str	r3, [r2, #0]
	return res;
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
	...

0800ebf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ec06:	f107 0310 	add.w	r3, r7, #16
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff fca2 	bl	800e554 <get_ldnumber>
 800ec10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	da01      	bge.n	800ec1c <f_mount+0x28>
 800ec18:	230b      	movs	r3, #11
 800ec1a:	e02b      	b.n	800ec74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ec1c:	4a17      	ldr	r2, [pc, #92]	; (800ec7c <f_mount+0x88>)
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ec2c:	69b8      	ldr	r0, [r7, #24]
 800ec2e:	f7fe f8f5 	bl	800ce1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	2200      	movs	r2, #0
 800ec36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2200      	movs	r2, #0
 800ec42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	490d      	ldr	r1, [pc, #52]	; (800ec7c <f_mount+0x88>)
 800ec48:	69fb      	ldr	r3, [r7, #28]
 800ec4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d002      	beq.n	800ec5a <f_mount+0x66>
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d001      	beq.n	800ec5e <f_mount+0x6a>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e00a      	b.n	800ec74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ec5e:	f107 010c 	add.w	r1, r7, #12
 800ec62:	f107 0308 	add.w	r3, r7, #8
 800ec66:	2200      	movs	r2, #0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff fd0d 	bl	800e688 <find_volume>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3720      	adds	r7, #32
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	200035bc 	.word	0x200035bc

0800ec80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ec8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ec90:	6018      	str	r0, [r3, #0]
 800ec92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ec96:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800ec9a:	6019      	str	r1, [r3, #0]
 800ec9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eca0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800eca4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eca6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecaa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d101      	bne.n	800ecb8 <f_open+0x38>
 800ecb4:	2309      	movs	r3, #9
 800ecb6:	e2a6      	b.n	800f206 <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ecb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecbc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ecc0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ecc4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ecc8:	7812      	ldrb	r2, [r2, #0]
 800ecca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800ecce:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800ecd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ecd4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ecd8:	781a      	ldrb	r2, [r3, #0]
 800ecda:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800ecde:	f107 0308 	add.w	r3, r7, #8
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff fcd0 	bl	800e688 <find_volume>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800ecee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f040 827a 	bne.w	800f1ec <f_open+0x56c>
		dj.obj.fs = fs;
 800ecf8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ecfc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800ed00:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ed04:	f107 0214 	add.w	r2, r7, #20
 800ed08:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ed0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ed18:	4611      	mov	r1, r2
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff fba4 	bl	800e468 <follow_path>
 800ed20:	4603      	mov	r3, r0
 800ed22:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ed26:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d11e      	bne.n	800ed6c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ed2e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800ed32:	b25b      	sxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	da03      	bge.n	800ed40 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800ed38:	2306      	movs	r3, #6
 800ed3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800ed3e:	e015      	b.n	800ed6c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed44:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	f023 0301 	bic.w	r3, r3, #1
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	bf14      	ite	ne
 800ed52:	2301      	movne	r3, #1
 800ed54:	2300      	moveq	r3, #0
 800ed56:	b2db      	uxtb	r3, r3
 800ed58:	461a      	mov	r2, r3
 800ed5a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ed5e:	4611      	mov	r1, r2
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fd ff13 	bl	800cb8c <chk_lock>
 800ed66:	4603      	mov	r3, r0
 800ed68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ed6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ed70:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	f003 031c 	and.w	r3, r3, #28
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 80a7 	beq.w	800eece <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800ed80:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d01f      	beq.n	800edc8 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ed88:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ed8c:	2b04      	cmp	r3, #4
 800ed8e:	d10e      	bne.n	800edae <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ed90:	f7fd ff58 	bl	800cc44 <enq_lock>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d006      	beq.n	800eda8 <f_open+0x128>
 800ed9a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff f8b2 	bl	800df08 <dir_register>
 800eda4:	4603      	mov	r3, r0
 800eda6:	e000      	b.n	800edaa <f_open+0x12a>
 800eda8:	2312      	movs	r3, #18
 800edaa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800edae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800edb2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800edb6:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800edba:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800edbe:	7812      	ldrb	r2, [r2, #0]
 800edc0:	f042 0208 	orr.w	r2, r2, #8
 800edc4:	701a      	strb	r2, [r3, #0]
 800edc6:	e015      	b.n	800edf4 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800edc8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800edcc:	f003 0311 	and.w	r3, r3, #17
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d003      	beq.n	800eddc <f_open+0x15c>
					res = FR_DENIED;
 800edd4:	2307      	movs	r3, #7
 800edd6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800edda:	e00b      	b.n	800edf4 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eddc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ede0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	f003 0304 	and.w	r3, r3, #4
 800edea:	2b00      	cmp	r3, #0
 800edec:	d002      	beq.n	800edf4 <f_open+0x174>
 800edee:	2308      	movs	r3, #8
 800edf0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800edf4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f040 8088 	bne.w	800ef0e <f_open+0x28e>
 800edfe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ee02:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	f003 0308 	and.w	r3, r3, #8
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d07e      	beq.n	800ef0e <f_open+0x28e>
				dw = GET_FATTIME();
 800ee10:	f7fd fb62 	bl	800c4d8 <get_fattime>
 800ee14:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ee18:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ee1c:	330e      	adds	r3, #14
 800ee1e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fd fe08 	bl	800ca38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ee28:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ee2c:	3316      	adds	r3, #22
 800ee2e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fd fe00 	bl	800ca38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ee38:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ee3c:	330b      	adds	r3, #11
 800ee3e:	2220      	movs	r2, #32
 800ee40:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ee42:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ee46:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fe fdd3 	bl	800d9f8 <ld_clust>
 800ee52:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ee56:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ee5a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800ee5e:	2200      	movs	r2, #0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe fde8 	bl	800da36 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ee66:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800ee6a:	331c      	adds	r3, #28
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fd fde2 	bl	800ca38 <st_dword>
					fs->wflag = 1;
 800ee74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ee78:	2201      	movs	r2, #1
 800ee7a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ee7c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d044      	beq.n	800ef0e <f_open+0x28e>
						dw = fs->winsect;
 800ee84:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ee88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee8a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800ee8e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ee92:	2200      	movs	r2, #0
 800ee94:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe fad2 	bl	800d442 <remove_chain>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800eea4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d130      	bne.n	800ef0e <f_open+0x28e>
							res = move_window(fs, dw);
 800eeac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800eeb0:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7fe f819 	bl	800ceec <move_window>
 800eeba:	4603      	mov	r3, r0
 800eebc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800eec0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800eec4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800eec8:	3a01      	subs	r2, #1
 800eeca:	615a      	str	r2, [r3, #20]
 800eecc:	e01f      	b.n	800ef0e <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eece:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d11b      	bne.n	800ef0e <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eed6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800eeda:	f003 0310 	and.w	r3, r3, #16
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d003      	beq.n	800eeea <f_open+0x26a>
					res = FR_NO_FILE;
 800eee2:	2304      	movs	r3, #4
 800eee4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800eee8:	e011      	b.n	800ef0e <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eeea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eeee:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	f003 0302 	and.w	r3, r3, #2
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d008      	beq.n	800ef0e <f_open+0x28e>
 800eefc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800ef00:	f003 0301 	and.w	r3, r3, #1
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d002      	beq.n	800ef0e <f_open+0x28e>
						res = FR_DENIED;
 800ef08:	2307      	movs	r3, #7
 800ef0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800ef0e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d14a      	bne.n	800efac <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef1a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f003 0308 	and.w	r3, r3, #8
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00b      	beq.n	800ef40 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800ef28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef2c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ef30:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800ef34:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800ef38:	7812      	ldrb	r2, [r2, #0]
 800ef3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef3e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef40:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ef44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ef52:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800ef56:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ef62:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef66:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	f023 0301 	bic.w	r3, r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	bf14      	ite	ne
 800ef74:	2301      	movne	r3, #1
 800ef76:	2300      	moveq	r3, #0
 800ef78:	b2db      	uxtb	r3, r3
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800ef80:	4611      	mov	r1, r2
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fd fe80 	bl	800cc88 <inc_lock>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ef96:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800ef9a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d102      	bne.n	800efac <f_open+0x32c>
 800efa6:	2302      	movs	r3, #2
 800efa8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800efac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f040 811b 	bne.w	800f1ec <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800efb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800efba:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800efbe:	4611      	mov	r1, r2
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe fd19 	bl	800d9f8 <ld_clust>
 800efc6:	4602      	mov	r2, r0
 800efc8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efcc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800efd4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800efd8:	331c      	adds	r3, #28
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fd fcee 	bl	800c9bc <ld_dword>
 800efe0:	4602      	mov	r2, r0
 800efe2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efe6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800efee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eff2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2200      	movs	r2, #0
 800effa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800effc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f000:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f004:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f00c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f010:	88da      	ldrh	r2, [r3, #6]
 800f012:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f016:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f01e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f022:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f02c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800f030:	7812      	ldrb	r2, [r2, #0]
 800f032:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f034:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f038:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2200      	movs	r2, #0
 800f040:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f042:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f046:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2200      	movs	r2, #0
 800f04e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f050:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f054:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2200      	movs	r2, #0
 800f05c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f05e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f062:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3330      	adds	r3, #48	; 0x30
 800f06a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f7fd fd2e 	bl	800cad2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f076:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f07a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	f003 0320 	and.w	r3, r3, #32
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 80b1 	beq.w	800f1ec <f_open+0x56c>
 800f08a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f08e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	f000 80a8 	beq.w	800f1ec <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f09c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f0a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68da      	ldr	r2, [r3, #12]
 800f0a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f0ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f0b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f0b8:	895b      	ldrh	r3, [r3, #10]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f0c0:	899b      	ldrh	r3, [r3, #12]
 800f0c2:	fb02 f303 	mul.w	r3, r2, r3
 800f0c6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f0ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f0ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f0da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f0de:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800f0ea:	e021      	b.n	800f130 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800f0ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f0f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fd ffb3 	bl	800d066 <get_fat>
 800f100:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800f104:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d802      	bhi.n	800f112 <f_open+0x492>
 800f10c:	2302      	movs	r3, #2
 800f10e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f112:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800f116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11a:	d102      	bne.n	800f122 <f_open+0x4a2>
 800f11c:	2301      	movs	r3, #1
 800f11e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f122:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800f126:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800f130:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f134:	2b00      	cmp	r3, #0
 800f136:	d105      	bne.n	800f144 <f_open+0x4c4>
 800f138:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800f13c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800f140:	429a      	cmp	r2, r3
 800f142:	d8d3      	bhi.n	800f0ec <f_open+0x46c>
				}
				fp->clust = clst;
 800f144:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f148:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800f152:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f154:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d147      	bne.n	800f1ec <f_open+0x56c>
 800f15c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f160:	899b      	ldrh	r3, [r3, #12]
 800f162:	461a      	mov	r2, r3
 800f164:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800f168:	fbb3 f1f2 	udiv	r1, r3, r2
 800f16c:	fb01 f202 	mul.w	r2, r1, r2
 800f170:	1a9b      	subs	r3, r3, r2
 800f172:	2b00      	cmp	r3, #0
 800f174:	d03a      	beq.n	800f1ec <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f176:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f17a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fd ff52 	bl	800d028 <clust2sect>
 800f184:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800f188:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <f_open+0x518>
						res = FR_INT_ERR;
 800f190:	2302      	movs	r3, #2
 800f192:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f196:	e029      	b.n	800f1ec <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f198:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f19c:	899b      	ldrh	r3, [r3, #12]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800f1a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f1ac:	441a      	add	r2, r3
 800f1ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f1b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f1ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f1be:	7858      	ldrb	r0, [r3, #1]
 800f1c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f1c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f1d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6a1a      	ldr	r2, [r3, #32]
 800f1da:	2301      	movs	r3, #1
 800f1dc:	f7fd fb78 	bl	800c8d0 <disk_read>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <f_open+0x56c>
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f1ec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d006      	beq.n	800f202 <f_open+0x582>
 800f1f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f1f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2200      	movs	r2, #0
 800f200:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f202:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800f206:	4618      	mov	r0, r3
 800f208:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b08c      	sub	sp, #48	; 0x30
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
 800f21c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	2200      	movs	r2, #0
 800f226:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f107 0210 	add.w	r2, r7, #16
 800f22e:	4611      	mov	r1, r2
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff fca9 	bl	800eb88 <validate>
 800f236:	4603      	mov	r3, r0
 800f238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f23c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f240:	2b00      	cmp	r3, #0
 800f242:	d107      	bne.n	800f254 <f_write+0x44>
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	7d5b      	ldrb	r3, [r3, #21]
 800f248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f24c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f250:	2b00      	cmp	r3, #0
 800f252:	d002      	beq.n	800f25a <f_write+0x4a>
 800f254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f258:	e16a      	b.n	800f530 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	7d1b      	ldrb	r3, [r3, #20]
 800f25e:	f003 0302 	and.w	r3, r3, #2
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <f_write+0x5a>
 800f266:	2307      	movs	r3, #7
 800f268:	e162      	b.n	800f530 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	699a      	ldr	r2, [r3, #24]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	441a      	add	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	699b      	ldr	r3, [r3, #24]
 800f276:	429a      	cmp	r2, r3
 800f278:	f080 814c 	bcs.w	800f514 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	699b      	ldr	r3, [r3, #24]
 800f280:	43db      	mvns	r3, r3
 800f282:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f284:	e146      	b.n	800f514 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	693a      	ldr	r2, [r7, #16]
 800f28c:	8992      	ldrh	r2, [r2, #12]
 800f28e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f292:	fb01 f202 	mul.w	r2, r1, r2
 800f296:	1a9b      	subs	r3, r3, r2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f040 80f1 	bne.w	800f480 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	699b      	ldr	r3, [r3, #24]
 800f2a2:	693a      	ldr	r2, [r7, #16]
 800f2a4:	8992      	ldrh	r2, [r2, #12]
 800f2a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	8952      	ldrh	r2, [r2, #10]
 800f2ae:	3a01      	subs	r2, #1
 800f2b0:	4013      	ands	r3, r2
 800f2b2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d143      	bne.n	800f342 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10c      	bne.n	800f2dc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d11a      	bne.n	800f304 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe f91a 	bl	800d50c <create_chain>
 800f2d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800f2da:	e013      	b.n	800f304 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d007      	beq.n	800f2f4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	699b      	ldr	r3, [r3, #24]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7fe f9a6 	bl	800d63c <clmt_clust>
 800f2f0:	62b8      	str	r0, [r7, #40]	; 0x28
 800f2f2:	e007      	b.n	800f304 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	69db      	ldr	r3, [r3, #28]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	f7fe f905 	bl	800d50c <create_chain>
 800f302:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f306:	2b00      	cmp	r3, #0
 800f308:	f000 8109 	beq.w	800f51e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d104      	bne.n	800f31c <f_write+0x10c>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2202      	movs	r2, #2
 800f316:	755a      	strb	r2, [r3, #21]
 800f318:	2302      	movs	r3, #2
 800f31a:	e109      	b.n	800f530 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f322:	d104      	bne.n	800f32e <f_write+0x11e>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2201      	movs	r2, #1
 800f328:	755a      	strb	r2, [r3, #21]
 800f32a:	2301      	movs	r3, #1
 800f32c:	e100      	b.n	800f530 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f332:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d102      	bne.n	800f342 <f_write+0x132>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f340:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	7d1b      	ldrb	r3, [r3, #20]
 800f346:	b25b      	sxtb	r3, r3
 800f348:	2b00      	cmp	r3, #0
 800f34a:	da18      	bge.n	800f37e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	7858      	ldrb	r0, [r3, #1]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6a1a      	ldr	r2, [r3, #32]
 800f35a:	2301      	movs	r3, #1
 800f35c:	f7fd fad8 	bl	800c910 <disk_write>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d004      	beq.n	800f370 <f_write+0x160>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2201      	movs	r2, #1
 800f36a:	755a      	strb	r2, [r3, #21]
 800f36c:	2301      	movs	r3, #1
 800f36e:	e0df      	b.n	800f530 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	7d1b      	ldrb	r3, [r3, #20]
 800f374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f37e:	693a      	ldr	r2, [r7, #16]
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	69db      	ldr	r3, [r3, #28]
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	f7fd fe4e 	bl	800d028 <clust2sect>
 800f38c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d104      	bne.n	800f39e <f_write+0x18e>
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2202      	movs	r2, #2
 800f398:	755a      	strb	r2, [r3, #21]
 800f39a:	2302      	movs	r3, #2
 800f39c:	e0c8      	b.n	800f530 <f_write+0x320>
			sect += csect;
 800f39e:	697a      	ldr	r2, [r7, #20]
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	899b      	ldrh	r3, [r3, #12]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f3b4:	6a3b      	ldr	r3, [r7, #32]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d043      	beq.n	800f442 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	4413      	add	r3, r2
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	8952      	ldrh	r2, [r2, #10]
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d905      	bls.n	800f3d4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	895b      	ldrh	r3, [r3, #10]
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	7858      	ldrb	r0, [r3, #1]
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	69f9      	ldr	r1, [r7, #28]
 800f3de:	f7fd fa97 	bl	800c910 <disk_write>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d004      	beq.n	800f3f2 <f_write+0x1e2>
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	755a      	strb	r2, [r3, #21]
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e09e      	b.n	800f530 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6a1a      	ldr	r2, [r3, #32]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	6a3a      	ldr	r2, [r7, #32]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d918      	bls.n	800f432 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	6a1a      	ldr	r2, [r3, #32]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	693a      	ldr	r2, [r7, #16]
 800f410:	8992      	ldrh	r2, [r2, #12]
 800f412:	fb02 f303 	mul.w	r3, r2, r3
 800f416:	69fa      	ldr	r2, [r7, #28]
 800f418:	18d1      	adds	r1, r2, r3
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	899b      	ldrh	r3, [r3, #12]
 800f41e:	461a      	mov	r2, r3
 800f420:	f7fd fb36 	bl	800ca90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	7d1b      	ldrb	r3, [r3, #20]
 800f428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f42c:	b2da      	uxtb	r2, r3
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	899b      	ldrh	r3, [r3, #12]
 800f436:	461a      	mov	r2, r3
 800f438:	6a3b      	ldr	r3, [r7, #32]
 800f43a:	fb02 f303 	mul.w	r3, r2, r3
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f440:	e04b      	b.n	800f4da <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d016      	beq.n	800f47a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	699a      	ldr	r2, [r3, #24]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f454:	429a      	cmp	r2, r3
 800f456:	d210      	bcs.n	800f47a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	7858      	ldrb	r0, [r3, #1]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f462:	2301      	movs	r3, #1
 800f464:	697a      	ldr	r2, [r7, #20]
 800f466:	f7fd fa33 	bl	800c8d0 <disk_read>
 800f46a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d004      	beq.n	800f47a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2201      	movs	r2, #1
 800f474:	755a      	strb	r2, [r3, #21]
 800f476:	2301      	movs	r3, #1
 800f478:	e05a      	b.n	800f530 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	697a      	ldr	r2, [r7, #20]
 800f47e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	899b      	ldrh	r3, [r3, #12]
 800f484:	4618      	mov	r0, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	693a      	ldr	r2, [r7, #16]
 800f48c:	8992      	ldrh	r2, [r2, #12]
 800f48e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f492:	fb01 f202 	mul.w	r2, r1, r2
 800f496:	1a9b      	subs	r3, r3, r2
 800f498:	1ac3      	subs	r3, r0, r3
 800f49a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d901      	bls.n	800f4a8 <f_write+0x298>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	693a      	ldr	r2, [r7, #16]
 800f4b4:	8992      	ldrh	r2, [r2, #12]
 800f4b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f4ba:	fb00 f202 	mul.w	r2, r0, r2
 800f4be:	1a9b      	subs	r3, r3, r2
 800f4c0:	440b      	add	r3, r1
 800f4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c4:	69f9      	ldr	r1, [r7, #28]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fd fae2 	bl	800ca90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	7d1b      	ldrb	r3, [r3, #20]
 800f4d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f4da:	69fa      	ldr	r2, [r7, #28]
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4de:	4413      	add	r3, r2
 800f4e0:	61fb      	str	r3, [r7, #28]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	699a      	ldr	r2, [r3, #24]
 800f4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e8:	441a      	add	r2, r3
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	619a      	str	r2, [r3, #24]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	68da      	ldr	r2, [r3, #12]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	699b      	ldr	r3, [r3, #24]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	bf38      	it	cc
 800f4fa:	461a      	movcc	r2, r3
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	60da      	str	r2, [r3, #12]
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f506:	441a      	add	r2, r3
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	f47f aeb5 	bne.w	800f286 <f_write+0x76>
 800f51c:	e000      	b.n	800f520 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f51e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	7d1b      	ldrb	r3, [r3, #20]
 800f524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3730      	adds	r7, #48	; 0x30
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f107 0208 	add.w	r2, r7, #8
 800f546:	4611      	mov	r1, r2
 800f548:	4618      	mov	r0, r3
 800f54a:	f7ff fb1d 	bl	800eb88 <validate>
 800f54e:	4603      	mov	r3, r0
 800f550:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f552:	7dfb      	ldrb	r3, [r7, #23]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d168      	bne.n	800f62a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	7d1b      	ldrb	r3, [r3, #20]
 800f55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f560:	2b00      	cmp	r3, #0
 800f562:	d062      	beq.n	800f62a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	7d1b      	ldrb	r3, [r3, #20]
 800f568:	b25b      	sxtb	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	da15      	bge.n	800f59a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	7858      	ldrb	r0, [r3, #1]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a1a      	ldr	r2, [r3, #32]
 800f57c:	2301      	movs	r3, #1
 800f57e:	f7fd f9c7 	bl	800c910 <disk_write>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <f_sync+0x54>
 800f588:	2301      	movs	r3, #1
 800f58a:	e04f      	b.n	800f62c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	7d1b      	ldrb	r3, [r3, #20]
 800f590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f594:	b2da      	uxtb	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f59a:	f7fc ff9d 	bl	800c4d8 <get_fattime>
 800f59e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f7fd fc9f 	bl	800ceec <move_window>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d138      	bne.n	800f62a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	330b      	adds	r3, #11
 800f5c2:	781a      	ldrb	r2, [r3, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	330b      	adds	r3, #11
 800f5c8:	f042 0220 	orr.w	r2, r2, #32
 800f5cc:	b2d2      	uxtb	r2, r2
 800f5ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6818      	ldr	r0, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	461a      	mov	r2, r3
 800f5da:	68f9      	ldr	r1, [r7, #12]
 800f5dc:	f7fe fa2b 	bl	800da36 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f103 021c 	add.w	r2, r3, #28
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	f7fd fa23 	bl	800ca38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3316      	adds	r3, #22
 800f5f6:	6939      	ldr	r1, [r7, #16]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f7fd fa1d 	bl	800ca38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3312      	adds	r3, #18
 800f602:	2100      	movs	r1, #0
 800f604:	4618      	mov	r0, r3
 800f606:	f7fd f9fc 	bl	800ca02 <st_word>
					fs->wflag = 1;
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	2201      	movs	r2, #1
 800f60e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	4618      	mov	r0, r3
 800f614:	f7fd fc98 	bl	800cf48 <sync_fs>
 800f618:	4603      	mov	r3, r0
 800f61a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	7d1b      	ldrb	r3, [r3, #20]
 800f620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f624:	b2da      	uxtb	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff ff7b 	bl	800f538 <f_sync>
 800f642:	4603      	mov	r3, r0
 800f644:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f646:	7bfb      	ldrb	r3, [r7, #15]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d118      	bne.n	800f67e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f107 0208 	add.w	r2, r7, #8
 800f652:	4611      	mov	r1, r2
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff fa97 	bl	800eb88 <validate>
 800f65a:	4603      	mov	r3, r0
 800f65c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f65e:	7bfb      	ldrb	r3, [r7, #15]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d10c      	bne.n	800f67e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	691b      	ldr	r3, [r3, #16]
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fd fb9b 	bl	800cda4 <dec_lock>
 800f66e:	4603      	mov	r3, r0
 800f670:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f672:	7bfb      	ldrb	r3, [r7, #15]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d102      	bne.n	800f67e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800f68e:	af00      	add	r7, sp, #0
 800f690:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f694:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f698:	6018      	str	r0, [r3, #0]
 800f69a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f69e:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800f6a2:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f6a4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f6a8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d101      	bne.n	800f6b6 <f_opendir+0x2e>
 800f6b2:	2309      	movs	r3, #9
 800f6b4:	e0a0      	b.n	800f7f8 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 800f6b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f6ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800f6c4:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800f6c8:	463b      	mov	r3, r7
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe ffdb 	bl	800e688 <find_volume>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800f6d8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f040 8081 	bne.w	800f7e4 <f_opendir+0x15c>
		obj->fs = fs;
 800f6e2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800f6e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f6ea:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800f6ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f6f0:	f107 020c 	add.w	r2, r7, #12
 800f6f4:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f6f6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f6fa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f704:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f708:	4611      	mov	r1, r2
 800f70a:	6818      	ldr	r0, [r3, #0]
 800f70c:	f7fe feac 	bl	800e468 <follow_path>
 800f710:	4603      	mov	r3, r0
 800f712:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800f716:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d15b      	bne.n	800f7d6 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f71e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f722:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f72c:	b25b      	sxtb	r3, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	db1a      	blt.n	800f768 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f732:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f736:	799b      	ldrb	r3, [r3, #6]
 800f738:	f003 0310 	and.w	r3, r3, #16
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d010      	beq.n	800f762 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f740:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800f744:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f748:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	4619      	mov	r1, r3
 800f752:	4610      	mov	r0, r2
 800f754:	f7fe f950 	bl	800d9f8 <ld_clust>
 800f758:	4602      	mov	r2, r0
 800f75a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f75e:	609a      	str	r2, [r3, #8]
 800f760:	e002      	b.n	800f768 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f762:	2305      	movs	r3, #5
 800f764:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800f768:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d132      	bne.n	800f7d6 <f_opendir+0x14e>
				obj->id = fs->id;
 800f770:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800f774:	88da      	ldrh	r2, [r3, #6]
 800f776:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f77a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f77c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f780:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f784:	2100      	movs	r1, #0
 800f786:	6818      	ldr	r0, [r3, #0]
 800f788:	f7fd ff90 	bl	800d6ac <dir_sdi>
 800f78c:	4603      	mov	r3, r0
 800f78e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f792:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800f796:	2b00      	cmp	r3, #0
 800f798:	d11d      	bne.n	800f7d6 <f_opendir+0x14e>
					if (obj->sclust) {
 800f79a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d014      	beq.n	800f7ce <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f7a4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f7a8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	6818      	ldr	r0, [r3, #0]
 800f7b0:	f7fd fa6a 	bl	800cc88 <inc_lock>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f7ba:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f7bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d107      	bne.n	800f7d6 <f_opendir+0x14e>
 800f7c6:	2312      	movs	r3, #18
 800f7c8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800f7cc:	e003      	b.n	800f7d6 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f7ce:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f7d6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	d102      	bne.n	800f7e4 <f_opendir+0x15c>
 800f7de:	2305      	movs	r3, #5
 800f7e0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f7e4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d003      	beq.n	800f7f4 <f_opendir+0x16c>
 800f7ec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7f4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b084      	sub	sp, #16
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
 800f80a:	460b      	mov	r3, r1
 800f80c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800f80e:	78fb      	ldrb	r3, [r7, #3]
 800f810:	2b0a      	cmp	r3, #10
 800f812:	d103      	bne.n	800f81c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800f814:	210d      	movs	r1, #13
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f7ff fff3 	bl	800f802 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	db25      	blt.n	800f874 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	60fa      	str	r2, [r7, #12]
 800f82e:	687a      	ldr	r2, [r7, #4]
 800f830:	4413      	add	r3, r2
 800f832:	78fa      	ldrb	r2, [r7, #3]
 800f834:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b3c      	cmp	r3, #60	; 0x3c
 800f83a:	dd12      	ble.n	800f862 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f103 010c 	add.w	r1, r3, #12
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	f107 0308 	add.w	r3, r7, #8
 800f84c:	f7ff fce0 	bl	800f210 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	429a      	cmp	r2, r3
 800f856:	d101      	bne.n	800f85c <putc_bfd+0x5a>
 800f858:	2300      	movs	r3, #0
 800f85a:	e001      	b.n	800f860 <putc_bfd+0x5e>
 800f85c:	f04f 33ff 	mov.w	r3, #4294967295
 800f860:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	1c5a      	adds	r2, r3, #1
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	609a      	str	r2, [r3, #8]
 800f872:	e000      	b.n	800f876 <putc_bfd+0x74>
	if (i < 0) return;
 800f874:	bf00      	nop
}
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	db16      	blt.n	800f8ba <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6818      	ldr	r0, [r3, #0]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f103 010c 	add.w	r1, r3, #12
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	461a      	mov	r2, r3
 800f89c:	f107 030c 	add.w	r3, r7, #12
 800f8a0:	f7ff fcb6 	bl	800f210 <f_write>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d107      	bne.n	800f8ba <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d102      	bne.n	800f8ba <putc_flush+0x3e>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	e001      	b.n	800f8be <putc_flush+0x42>
	return EOF;
 800f8ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}

0800f8c6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800f8c6:	b480      	push	{r7}
 800f8c8:	b083      	sub	sp, #12
 800f8ca:	af00      	add	r7, sp, #0
 800f8cc:	6078      	str	r0, [r7, #4]
 800f8ce:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	605a      	str	r2, [r3, #4]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	609a      	str	r2, [r3, #8]
}
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b096      	sub	sp, #88	; 0x58
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800f8fa:	f107 030c 	add.w	r3, r7, #12
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff ffe0 	bl	800f8c6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800f906:	e009      	b.n	800f91c <f_puts+0x2c>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	1c5a      	adds	r2, r3, #1
 800f90c:	607a      	str	r2, [r7, #4]
 800f90e:	781a      	ldrb	r2, [r3, #0]
 800f910:	f107 030c 	add.w	r3, r7, #12
 800f914:	4611      	mov	r1, r2
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff ff73 	bl	800f802 <putc_bfd>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1f1      	bne.n	800f908 <f_puts+0x18>
	return putc_flush(&pb);
 800f924:	f107 030c 	add.w	r3, r7, #12
 800f928:	4618      	mov	r0, r3
 800f92a:	f7ff ffa7 	bl	800f87c <putc_flush>
 800f92e:	4603      	mov	r3, r0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3758      	adds	r7, #88	; 0x58
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f938:	b480      	push	{r7}
 800f93a:	b087      	sub	sp, #28
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	4613      	mov	r3, r2
 800f944:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f946:	2301      	movs	r3, #1
 800f948:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f94e:	4b1f      	ldr	r3, [pc, #124]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f950:	7a5b      	ldrb	r3, [r3, #9]
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	d131      	bne.n	800f9bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f958:	4b1c      	ldr	r3, [pc, #112]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f95a:	7a5b      	ldrb	r3, [r3, #9]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	461a      	mov	r2, r3
 800f960:	4b1a      	ldr	r3, [pc, #104]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f962:	2100      	movs	r1, #0
 800f964:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f966:	4b19      	ldr	r3, [pc, #100]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f968:	7a5b      	ldrb	r3, [r3, #9]
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	4a17      	ldr	r2, [pc, #92]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	4413      	add	r3, r2
 800f972:	68fa      	ldr	r2, [r7, #12]
 800f974:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f976:	4b15      	ldr	r3, [pc, #84]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f978:	7a5b      	ldrb	r3, [r3, #9]
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	461a      	mov	r2, r3
 800f97e:	4b13      	ldr	r3, [pc, #76]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f980:	4413      	add	r3, r2
 800f982:	79fa      	ldrb	r2, [r7, #7]
 800f984:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f986:	4b11      	ldr	r3, [pc, #68]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f988:	7a5b      	ldrb	r3, [r3, #9]
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	b2d1      	uxtb	r1, r2
 800f990:	4a0e      	ldr	r2, [pc, #56]	; (800f9cc <FATFS_LinkDriverEx+0x94>)
 800f992:	7251      	strb	r1, [r2, #9]
 800f994:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f996:	7dbb      	ldrb	r3, [r7, #22]
 800f998:	3330      	adds	r3, #48	; 0x30
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	223a      	movs	r2, #58	; 0x3a
 800f9a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	3302      	adds	r3, #2
 800f9ac:	222f      	movs	r2, #47	; 0x2f
 800f9ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	3303      	adds	r3, #3
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	371c      	adds	r7, #28
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop
 800f9cc:	200035e4 	.word	0x200035e4

0800f9d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f9da:	2200      	movs	r2, #0
 800f9dc:	6839      	ldr	r1, [r7, #0]
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff ffaa 	bl	800f938 <FATFS_LinkDriverEx>
 800f9e4:	4603      	mov	r3, r0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3708      	adds	r7, #8
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
	...

0800f9f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	6039      	str	r1, [r7, #0]
 800f9fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f9fc:	88fb      	ldrh	r3, [r7, #6]
 800f9fe:	2b7f      	cmp	r3, #127	; 0x7f
 800fa00:	d802      	bhi.n	800fa08 <ff_convert+0x18>
		c = chr;
 800fa02:	88fb      	ldrh	r3, [r7, #6]
 800fa04:	81fb      	strh	r3, [r7, #14]
 800fa06:	e025      	b.n	800fa54 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00b      	beq.n	800fa26 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fa0e:	88fb      	ldrh	r3, [r7, #6]
 800fa10:	2bff      	cmp	r3, #255	; 0xff
 800fa12:	d805      	bhi.n	800fa20 <ff_convert+0x30>
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	3b80      	subs	r3, #128	; 0x80
 800fa18:	4a12      	ldr	r2, [pc, #72]	; (800fa64 <ff_convert+0x74>)
 800fa1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa1e:	e000      	b.n	800fa22 <ff_convert+0x32>
 800fa20:	2300      	movs	r3, #0
 800fa22:	81fb      	strh	r3, [r7, #14]
 800fa24:	e016      	b.n	800fa54 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fa26:	2300      	movs	r3, #0
 800fa28:	81fb      	strh	r3, [r7, #14]
 800fa2a:	e009      	b.n	800fa40 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fa2c:	89fb      	ldrh	r3, [r7, #14]
 800fa2e:	4a0d      	ldr	r2, [pc, #52]	; (800fa64 <ff_convert+0x74>)
 800fa30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa34:	88fa      	ldrh	r2, [r7, #6]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d006      	beq.n	800fa48 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fa3a:	89fb      	ldrh	r3, [r7, #14]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	81fb      	strh	r3, [r7, #14]
 800fa40:	89fb      	ldrh	r3, [r7, #14]
 800fa42:	2b7f      	cmp	r3, #127	; 0x7f
 800fa44:	d9f2      	bls.n	800fa2c <ff_convert+0x3c>
 800fa46:	e000      	b.n	800fa4a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fa48:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fa4a:	89fb      	ldrh	r3, [r7, #14]
 800fa4c:	3380      	adds	r3, #128	; 0x80
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fa54:	89fb      	ldrh	r3, [r7, #14]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3714      	adds	r7, #20
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	08015568 	.word	0x08015568

0800fa68 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b087      	sub	sp, #28
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fa72:	88fb      	ldrh	r3, [r7, #6]
 800fa74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa78:	d201      	bcs.n	800fa7e <ff_wtoupper+0x16>
 800fa7a:	4b3e      	ldr	r3, [pc, #248]	; (800fb74 <ff_wtoupper+0x10c>)
 800fa7c:	e000      	b.n	800fa80 <ff_wtoupper+0x18>
 800fa7e:	4b3e      	ldr	r3, [pc, #248]	; (800fb78 <ff_wtoupper+0x110>)
 800fa80:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	1c9a      	adds	r2, r3, #2
 800fa86:	617a      	str	r2, [r7, #20]
 800fa88:	881b      	ldrh	r3, [r3, #0]
 800fa8a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fa8c:	8a7b      	ldrh	r3, [r7, #18]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d068      	beq.n	800fb64 <ff_wtoupper+0xfc>
 800fa92:	88fa      	ldrh	r2, [r7, #6]
 800fa94:	8a7b      	ldrh	r3, [r7, #18]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d364      	bcc.n	800fb64 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	1c9a      	adds	r2, r3, #2
 800fa9e:	617a      	str	r2, [r7, #20]
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	823b      	strh	r3, [r7, #16]
 800faa4:	8a3b      	ldrh	r3, [r7, #16]
 800faa6:	0a1b      	lsrs	r3, r3, #8
 800faa8:	81fb      	strh	r3, [r7, #14]
 800faaa:	8a3b      	ldrh	r3, [r7, #16]
 800faac:	b2db      	uxtb	r3, r3
 800faae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fab0:	88fa      	ldrh	r2, [r7, #6]
 800fab2:	8a79      	ldrh	r1, [r7, #18]
 800fab4:	8a3b      	ldrh	r3, [r7, #16]
 800fab6:	440b      	add	r3, r1
 800fab8:	429a      	cmp	r2, r3
 800faba:	da49      	bge.n	800fb50 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fabc:	89fb      	ldrh	r3, [r7, #14]
 800fabe:	2b08      	cmp	r3, #8
 800fac0:	d84f      	bhi.n	800fb62 <ff_wtoupper+0xfa>
 800fac2:	a201      	add	r2, pc, #4	; (adr r2, 800fac8 <ff_wtoupper+0x60>)
 800fac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac8:	0800faed 	.word	0x0800faed
 800facc:	0800faff 	.word	0x0800faff
 800fad0:	0800fb15 	.word	0x0800fb15
 800fad4:	0800fb1d 	.word	0x0800fb1d
 800fad8:	0800fb25 	.word	0x0800fb25
 800fadc:	0800fb2d 	.word	0x0800fb2d
 800fae0:	0800fb35 	.word	0x0800fb35
 800fae4:	0800fb3d 	.word	0x0800fb3d
 800fae8:	0800fb45 	.word	0x0800fb45
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800faec:	88fa      	ldrh	r2, [r7, #6]
 800faee:	8a7b      	ldrh	r3, [r7, #18]
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	005b      	lsls	r3, r3, #1
 800faf4:	697a      	ldr	r2, [r7, #20]
 800faf6:	4413      	add	r3, r2
 800faf8:	881b      	ldrh	r3, [r3, #0]
 800fafa:	80fb      	strh	r3, [r7, #6]
 800fafc:	e027      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fafe:	88fa      	ldrh	r2, [r7, #6]
 800fb00:	8a7b      	ldrh	r3, [r7, #18]
 800fb02:	1ad3      	subs	r3, r2, r3
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	88fa      	ldrh	r2, [r7, #6]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	80fb      	strh	r3, [r7, #6]
 800fb12:	e01c      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fb14:	88fb      	ldrh	r3, [r7, #6]
 800fb16:	3b10      	subs	r3, #16
 800fb18:	80fb      	strh	r3, [r7, #6]
 800fb1a:	e018      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fb1c:	88fb      	ldrh	r3, [r7, #6]
 800fb1e:	3b20      	subs	r3, #32
 800fb20:	80fb      	strh	r3, [r7, #6]
 800fb22:	e014      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fb24:	88fb      	ldrh	r3, [r7, #6]
 800fb26:	3b30      	subs	r3, #48	; 0x30
 800fb28:	80fb      	strh	r3, [r7, #6]
 800fb2a:	e010      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fb2c:	88fb      	ldrh	r3, [r7, #6]
 800fb2e:	3b1a      	subs	r3, #26
 800fb30:	80fb      	strh	r3, [r7, #6]
 800fb32:	e00c      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fb34:	88fb      	ldrh	r3, [r7, #6]
 800fb36:	3308      	adds	r3, #8
 800fb38:	80fb      	strh	r3, [r7, #6]
 800fb3a:	e008      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fb3c:	88fb      	ldrh	r3, [r7, #6]
 800fb3e:	3b50      	subs	r3, #80	; 0x50
 800fb40:	80fb      	strh	r3, [r7, #6]
 800fb42:	e004      	b.n	800fb4e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fb44:	88fb      	ldrh	r3, [r7, #6]
 800fb46:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fb4a:	80fb      	strh	r3, [r7, #6]
 800fb4c:	bf00      	nop
			}
			break;
 800fb4e:	e008      	b.n	800fb62 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fb50:	89fb      	ldrh	r3, [r7, #14]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d195      	bne.n	800fa82 <ff_wtoupper+0x1a>
 800fb56:	8a3b      	ldrh	r3, [r7, #16]
 800fb58:	005b      	lsls	r3, r3, #1
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fb60:	e78f      	b.n	800fa82 <ff_wtoupper+0x1a>
			break;
 800fb62:	bf00      	nop
	}

	return chr;
 800fb64:	88fb      	ldrh	r3, [r7, #6]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	371c      	adds	r7, #28
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	08015668 	.word	0x08015668
 800fb78:	0801585c 	.word	0x0801585c

0800fb7c <atoi>:
 800fb7c:	220a      	movs	r2, #10
 800fb7e:	2100      	movs	r1, #0
 800fb80:	f000 bfb2 	b.w	8010ae8 <strtol>

0800fb84 <malloc>:
 800fb84:	4b02      	ldr	r3, [pc, #8]	; (800fb90 <malloc+0xc>)
 800fb86:	4601      	mov	r1, r0
 800fb88:	6818      	ldr	r0, [r3, #0]
 800fb8a:	f000 b82b 	b.w	800fbe4 <_malloc_r>
 800fb8e:	bf00      	nop
 800fb90:	200001f0 	.word	0x200001f0

0800fb94 <free>:
 800fb94:	4b02      	ldr	r3, [pc, #8]	; (800fba0 <free+0xc>)
 800fb96:	4601      	mov	r1, r0
 800fb98:	6818      	ldr	r0, [r3, #0]
 800fb9a:	f002 be0f 	b.w	80127bc <_free_r>
 800fb9e:	bf00      	nop
 800fba0:	200001f0 	.word	0x200001f0

0800fba4 <sbrk_aligned>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	4e0e      	ldr	r6, [pc, #56]	; (800fbe0 <sbrk_aligned+0x3c>)
 800fba8:	460c      	mov	r4, r1
 800fbaa:	6831      	ldr	r1, [r6, #0]
 800fbac:	4605      	mov	r5, r0
 800fbae:	b911      	cbnz	r1, 800fbb6 <sbrk_aligned+0x12>
 800fbb0:	f001 fef6 	bl	80119a0 <_sbrk_r>
 800fbb4:	6030      	str	r0, [r6, #0]
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	4628      	mov	r0, r5
 800fbba:	f001 fef1 	bl	80119a0 <_sbrk_r>
 800fbbe:	1c43      	adds	r3, r0, #1
 800fbc0:	d00a      	beq.n	800fbd8 <sbrk_aligned+0x34>
 800fbc2:	1cc4      	adds	r4, r0, #3
 800fbc4:	f024 0403 	bic.w	r4, r4, #3
 800fbc8:	42a0      	cmp	r0, r4
 800fbca:	d007      	beq.n	800fbdc <sbrk_aligned+0x38>
 800fbcc:	1a21      	subs	r1, r4, r0
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f001 fee6 	bl	80119a0 <_sbrk_r>
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d101      	bne.n	800fbdc <sbrk_aligned+0x38>
 800fbd8:	f04f 34ff 	mov.w	r4, #4294967295
 800fbdc:	4620      	mov	r0, r4
 800fbde:	bd70      	pop	{r4, r5, r6, pc}
 800fbe0:	200035f4 	.word	0x200035f4

0800fbe4 <_malloc_r>:
 800fbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe8:	1ccd      	adds	r5, r1, #3
 800fbea:	f025 0503 	bic.w	r5, r5, #3
 800fbee:	3508      	adds	r5, #8
 800fbf0:	2d0c      	cmp	r5, #12
 800fbf2:	bf38      	it	cc
 800fbf4:	250c      	movcc	r5, #12
 800fbf6:	2d00      	cmp	r5, #0
 800fbf8:	4607      	mov	r7, r0
 800fbfa:	db01      	blt.n	800fc00 <_malloc_r+0x1c>
 800fbfc:	42a9      	cmp	r1, r5
 800fbfe:	d905      	bls.n	800fc0c <_malloc_r+0x28>
 800fc00:	230c      	movs	r3, #12
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	2600      	movs	r6, #0
 800fc06:	4630      	mov	r0, r6
 800fc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fce0 <_malloc_r+0xfc>
 800fc10:	f000 f868 	bl	800fce4 <__malloc_lock>
 800fc14:	f8d8 3000 	ldr.w	r3, [r8]
 800fc18:	461c      	mov	r4, r3
 800fc1a:	bb5c      	cbnz	r4, 800fc74 <_malloc_r+0x90>
 800fc1c:	4629      	mov	r1, r5
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f7ff ffc0 	bl	800fba4 <sbrk_aligned>
 800fc24:	1c43      	adds	r3, r0, #1
 800fc26:	4604      	mov	r4, r0
 800fc28:	d155      	bne.n	800fcd6 <_malloc_r+0xf2>
 800fc2a:	f8d8 4000 	ldr.w	r4, [r8]
 800fc2e:	4626      	mov	r6, r4
 800fc30:	2e00      	cmp	r6, #0
 800fc32:	d145      	bne.n	800fcc0 <_malloc_r+0xdc>
 800fc34:	2c00      	cmp	r4, #0
 800fc36:	d048      	beq.n	800fcca <_malloc_r+0xe6>
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	4631      	mov	r1, r6
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	eb04 0903 	add.w	r9, r4, r3
 800fc42:	f001 fead 	bl	80119a0 <_sbrk_r>
 800fc46:	4581      	cmp	r9, r0
 800fc48:	d13f      	bne.n	800fcca <_malloc_r+0xe6>
 800fc4a:	6821      	ldr	r1, [r4, #0]
 800fc4c:	1a6d      	subs	r5, r5, r1
 800fc4e:	4629      	mov	r1, r5
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff ffa7 	bl	800fba4 <sbrk_aligned>
 800fc56:	3001      	adds	r0, #1
 800fc58:	d037      	beq.n	800fcca <_malloc_r+0xe6>
 800fc5a:	6823      	ldr	r3, [r4, #0]
 800fc5c:	442b      	add	r3, r5
 800fc5e:	6023      	str	r3, [r4, #0]
 800fc60:	f8d8 3000 	ldr.w	r3, [r8]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d038      	beq.n	800fcda <_malloc_r+0xf6>
 800fc68:	685a      	ldr	r2, [r3, #4]
 800fc6a:	42a2      	cmp	r2, r4
 800fc6c:	d12b      	bne.n	800fcc6 <_malloc_r+0xe2>
 800fc6e:	2200      	movs	r2, #0
 800fc70:	605a      	str	r2, [r3, #4]
 800fc72:	e00f      	b.n	800fc94 <_malloc_r+0xb0>
 800fc74:	6822      	ldr	r2, [r4, #0]
 800fc76:	1b52      	subs	r2, r2, r5
 800fc78:	d41f      	bmi.n	800fcba <_malloc_r+0xd6>
 800fc7a:	2a0b      	cmp	r2, #11
 800fc7c:	d917      	bls.n	800fcae <_malloc_r+0xca>
 800fc7e:	1961      	adds	r1, r4, r5
 800fc80:	42a3      	cmp	r3, r4
 800fc82:	6025      	str	r5, [r4, #0]
 800fc84:	bf18      	it	ne
 800fc86:	6059      	strne	r1, [r3, #4]
 800fc88:	6863      	ldr	r3, [r4, #4]
 800fc8a:	bf08      	it	eq
 800fc8c:	f8c8 1000 	streq.w	r1, [r8]
 800fc90:	5162      	str	r2, [r4, r5]
 800fc92:	604b      	str	r3, [r1, #4]
 800fc94:	4638      	mov	r0, r7
 800fc96:	f104 060b 	add.w	r6, r4, #11
 800fc9a:	f000 f829 	bl	800fcf0 <__malloc_unlock>
 800fc9e:	f026 0607 	bic.w	r6, r6, #7
 800fca2:	1d23      	adds	r3, r4, #4
 800fca4:	1af2      	subs	r2, r6, r3
 800fca6:	d0ae      	beq.n	800fc06 <_malloc_r+0x22>
 800fca8:	1b9b      	subs	r3, r3, r6
 800fcaa:	50a3      	str	r3, [r4, r2]
 800fcac:	e7ab      	b.n	800fc06 <_malloc_r+0x22>
 800fcae:	42a3      	cmp	r3, r4
 800fcb0:	6862      	ldr	r2, [r4, #4]
 800fcb2:	d1dd      	bne.n	800fc70 <_malloc_r+0x8c>
 800fcb4:	f8c8 2000 	str.w	r2, [r8]
 800fcb8:	e7ec      	b.n	800fc94 <_malloc_r+0xb0>
 800fcba:	4623      	mov	r3, r4
 800fcbc:	6864      	ldr	r4, [r4, #4]
 800fcbe:	e7ac      	b.n	800fc1a <_malloc_r+0x36>
 800fcc0:	4634      	mov	r4, r6
 800fcc2:	6876      	ldr	r6, [r6, #4]
 800fcc4:	e7b4      	b.n	800fc30 <_malloc_r+0x4c>
 800fcc6:	4613      	mov	r3, r2
 800fcc8:	e7cc      	b.n	800fc64 <_malloc_r+0x80>
 800fcca:	230c      	movs	r3, #12
 800fccc:	603b      	str	r3, [r7, #0]
 800fcce:	4638      	mov	r0, r7
 800fcd0:	f000 f80e 	bl	800fcf0 <__malloc_unlock>
 800fcd4:	e797      	b.n	800fc06 <_malloc_r+0x22>
 800fcd6:	6025      	str	r5, [r4, #0]
 800fcd8:	e7dc      	b.n	800fc94 <_malloc_r+0xb0>
 800fcda:	605b      	str	r3, [r3, #4]
 800fcdc:	deff      	udf	#255	; 0xff
 800fcde:	bf00      	nop
 800fce0:	200035f0 	.word	0x200035f0

0800fce4 <__malloc_lock>:
 800fce4:	4801      	ldr	r0, [pc, #4]	; (800fcec <__malloc_lock+0x8>)
 800fce6:	f001 bea8 	b.w	8011a3a <__retarget_lock_acquire_recursive>
 800fcea:	bf00      	nop
 800fcec:	20003738 	.word	0x20003738

0800fcf0 <__malloc_unlock>:
 800fcf0:	4801      	ldr	r0, [pc, #4]	; (800fcf8 <__malloc_unlock+0x8>)
 800fcf2:	f001 bea3 	b.w	8011a3c <__retarget_lock_release_recursive>
 800fcf6:	bf00      	nop
 800fcf8:	20003738 	.word	0x20003738

0800fcfc <sulp>:
 800fcfc:	b570      	push	{r4, r5, r6, lr}
 800fcfe:	4604      	mov	r4, r0
 800fd00:	460d      	mov	r5, r1
 800fd02:	ec45 4b10 	vmov	d0, r4, r5
 800fd06:	4616      	mov	r6, r2
 800fd08:	f003 fc7a 	bl	8013600 <__ulp>
 800fd0c:	ec51 0b10 	vmov	r0, r1, d0
 800fd10:	b17e      	cbz	r6, 800fd32 <sulp+0x36>
 800fd12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fd16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	dd09      	ble.n	800fd32 <sulp+0x36>
 800fd1e:	051b      	lsls	r3, r3, #20
 800fd20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fd24:	2400      	movs	r4, #0
 800fd26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	462b      	mov	r3, r5
 800fd2e:	f7f0 fc63 	bl	80005f8 <__aeabi_dmul>
 800fd32:	bd70      	pop	{r4, r5, r6, pc}
 800fd34:	0000      	movs	r0, r0
	...

0800fd38 <_strtod_l>:
 800fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3c:	ed2d 8b02 	vpush	{d8}
 800fd40:	b09b      	sub	sp, #108	; 0x6c
 800fd42:	4604      	mov	r4, r0
 800fd44:	9213      	str	r2, [sp, #76]	; 0x4c
 800fd46:	2200      	movs	r2, #0
 800fd48:	9216      	str	r2, [sp, #88]	; 0x58
 800fd4a:	460d      	mov	r5, r1
 800fd4c:	f04f 0800 	mov.w	r8, #0
 800fd50:	f04f 0900 	mov.w	r9, #0
 800fd54:	460a      	mov	r2, r1
 800fd56:	9215      	str	r2, [sp, #84]	; 0x54
 800fd58:	7811      	ldrb	r1, [r2, #0]
 800fd5a:	292b      	cmp	r1, #43	; 0x2b
 800fd5c:	d04c      	beq.n	800fdf8 <_strtod_l+0xc0>
 800fd5e:	d83a      	bhi.n	800fdd6 <_strtod_l+0x9e>
 800fd60:	290d      	cmp	r1, #13
 800fd62:	d834      	bhi.n	800fdce <_strtod_l+0x96>
 800fd64:	2908      	cmp	r1, #8
 800fd66:	d834      	bhi.n	800fdd2 <_strtod_l+0x9a>
 800fd68:	2900      	cmp	r1, #0
 800fd6a:	d03d      	beq.n	800fde8 <_strtod_l+0xb0>
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	920a      	str	r2, [sp, #40]	; 0x28
 800fd70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fd72:	7832      	ldrb	r2, [r6, #0]
 800fd74:	2a30      	cmp	r2, #48	; 0x30
 800fd76:	f040 80b4 	bne.w	800fee2 <_strtod_l+0x1aa>
 800fd7a:	7872      	ldrb	r2, [r6, #1]
 800fd7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fd80:	2a58      	cmp	r2, #88	; 0x58
 800fd82:	d170      	bne.n	800fe66 <_strtod_l+0x12e>
 800fd84:	9302      	str	r3, [sp, #8]
 800fd86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	ab16      	add	r3, sp, #88	; 0x58
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	4a8e      	ldr	r2, [pc, #568]	; (800ffc8 <_strtod_l+0x290>)
 800fd90:	ab17      	add	r3, sp, #92	; 0x5c
 800fd92:	a915      	add	r1, sp, #84	; 0x54
 800fd94:	4620      	mov	r0, r4
 800fd96:	f002 fdc5 	bl	8012924 <__gethex>
 800fd9a:	f010 070f 	ands.w	r7, r0, #15
 800fd9e:	4605      	mov	r5, r0
 800fda0:	d005      	beq.n	800fdae <_strtod_l+0x76>
 800fda2:	2f06      	cmp	r7, #6
 800fda4:	d12a      	bne.n	800fdfc <_strtod_l+0xc4>
 800fda6:	3601      	adds	r6, #1
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9615      	str	r6, [sp, #84]	; 0x54
 800fdac:	930a      	str	r3, [sp, #40]	; 0x28
 800fdae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f040 857f 	bne.w	80108b4 <_strtod_l+0xb7c>
 800fdb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdb8:	b1db      	cbz	r3, 800fdf2 <_strtod_l+0xba>
 800fdba:	4642      	mov	r2, r8
 800fdbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fdc0:	ec43 2b10 	vmov	d0, r2, r3
 800fdc4:	b01b      	add	sp, #108	; 0x6c
 800fdc6:	ecbd 8b02 	vpop	{d8}
 800fdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdce:	2920      	cmp	r1, #32
 800fdd0:	d1cc      	bne.n	800fd6c <_strtod_l+0x34>
 800fdd2:	3201      	adds	r2, #1
 800fdd4:	e7bf      	b.n	800fd56 <_strtod_l+0x1e>
 800fdd6:	292d      	cmp	r1, #45	; 0x2d
 800fdd8:	d1c8      	bne.n	800fd6c <_strtod_l+0x34>
 800fdda:	2101      	movs	r1, #1
 800fddc:	910a      	str	r1, [sp, #40]	; 0x28
 800fdde:	1c51      	adds	r1, r2, #1
 800fde0:	9115      	str	r1, [sp, #84]	; 0x54
 800fde2:	7852      	ldrb	r2, [r2, #1]
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	d1c3      	bne.n	800fd70 <_strtod_l+0x38>
 800fde8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fdea:	9515      	str	r5, [sp, #84]	; 0x54
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f040 855f 	bne.w	80108b0 <_strtod_l+0xb78>
 800fdf2:	4642      	mov	r2, r8
 800fdf4:	464b      	mov	r3, r9
 800fdf6:	e7e3      	b.n	800fdc0 <_strtod_l+0x88>
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	e7ef      	b.n	800fddc <_strtod_l+0xa4>
 800fdfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fdfe:	b13a      	cbz	r2, 800fe10 <_strtod_l+0xd8>
 800fe00:	2135      	movs	r1, #53	; 0x35
 800fe02:	a818      	add	r0, sp, #96	; 0x60
 800fe04:	f003 fcf9 	bl	80137fa <__copybits>
 800fe08:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f003 f8cc 	bl	8012fa8 <_Bfree>
 800fe10:	3f01      	subs	r7, #1
 800fe12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fe14:	2f04      	cmp	r7, #4
 800fe16:	d806      	bhi.n	800fe26 <_strtod_l+0xee>
 800fe18:	e8df f007 	tbb	[pc, r7]
 800fe1c:	201d0314 	.word	0x201d0314
 800fe20:	14          	.byte	0x14
 800fe21:	00          	.byte	0x00
 800fe22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fe26:	05e9      	lsls	r1, r5, #23
 800fe28:	bf48      	it	mi
 800fe2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fe2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe32:	0d1b      	lsrs	r3, r3, #20
 800fe34:	051b      	lsls	r3, r3, #20
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1b9      	bne.n	800fdae <_strtod_l+0x76>
 800fe3a:	f001 fdd3 	bl	80119e4 <__errno>
 800fe3e:	2322      	movs	r3, #34	; 0x22
 800fe40:	6003      	str	r3, [r0, #0]
 800fe42:	e7b4      	b.n	800fdae <_strtod_l+0x76>
 800fe44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fe48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fe4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fe50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fe54:	e7e7      	b.n	800fe26 <_strtod_l+0xee>
 800fe56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ffd0 <_strtod_l+0x298>
 800fe5a:	e7e4      	b.n	800fe26 <_strtod_l+0xee>
 800fe5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fe60:	f04f 38ff 	mov.w	r8, #4294967295
 800fe64:	e7df      	b.n	800fe26 <_strtod_l+0xee>
 800fe66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	9215      	str	r2, [sp, #84]	; 0x54
 800fe6c:	785b      	ldrb	r3, [r3, #1]
 800fe6e:	2b30      	cmp	r3, #48	; 0x30
 800fe70:	d0f9      	beq.n	800fe66 <_strtod_l+0x12e>
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d09b      	beq.n	800fdae <_strtod_l+0x76>
 800fe76:	2301      	movs	r3, #1
 800fe78:	f04f 0a00 	mov.w	sl, #0
 800fe7c:	9304      	str	r3, [sp, #16]
 800fe7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe80:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fe86:	46d3      	mov	fp, sl
 800fe88:	220a      	movs	r2, #10
 800fe8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fe8c:	7806      	ldrb	r6, [r0, #0]
 800fe8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fe92:	b2d9      	uxtb	r1, r3
 800fe94:	2909      	cmp	r1, #9
 800fe96:	d926      	bls.n	800fee6 <_strtod_l+0x1ae>
 800fe98:	494c      	ldr	r1, [pc, #304]	; (800ffcc <_strtod_l+0x294>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	f001 fcc4 	bl	8011828 <strncmp>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	d030      	beq.n	800ff06 <_strtod_l+0x1ce>
 800fea4:	2000      	movs	r0, #0
 800fea6:	4632      	mov	r2, r6
 800fea8:	9005      	str	r0, [sp, #20]
 800feaa:	465e      	mov	r6, fp
 800feac:	4603      	mov	r3, r0
 800feae:	2a65      	cmp	r2, #101	; 0x65
 800feb0:	d001      	beq.n	800feb6 <_strtod_l+0x17e>
 800feb2:	2a45      	cmp	r2, #69	; 0x45
 800feb4:	d113      	bne.n	800fede <_strtod_l+0x1a6>
 800feb6:	b91e      	cbnz	r6, 800fec0 <_strtod_l+0x188>
 800feb8:	9a04      	ldr	r2, [sp, #16]
 800feba:	4302      	orrs	r2, r0
 800febc:	d094      	beq.n	800fde8 <_strtod_l+0xb0>
 800febe:	2600      	movs	r6, #0
 800fec0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fec2:	1c6a      	adds	r2, r5, #1
 800fec4:	9215      	str	r2, [sp, #84]	; 0x54
 800fec6:	786a      	ldrb	r2, [r5, #1]
 800fec8:	2a2b      	cmp	r2, #43	; 0x2b
 800feca:	d074      	beq.n	800ffb6 <_strtod_l+0x27e>
 800fecc:	2a2d      	cmp	r2, #45	; 0x2d
 800fece:	d078      	beq.n	800ffc2 <_strtod_l+0x28a>
 800fed0:	f04f 0c00 	mov.w	ip, #0
 800fed4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fed8:	2909      	cmp	r1, #9
 800feda:	d97f      	bls.n	800ffdc <_strtod_l+0x2a4>
 800fedc:	9515      	str	r5, [sp, #84]	; 0x54
 800fede:	2700      	movs	r7, #0
 800fee0:	e09e      	b.n	8010020 <_strtod_l+0x2e8>
 800fee2:	2300      	movs	r3, #0
 800fee4:	e7c8      	b.n	800fe78 <_strtod_l+0x140>
 800fee6:	f1bb 0f08 	cmp.w	fp, #8
 800feea:	bfd8      	it	le
 800feec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800feee:	f100 0001 	add.w	r0, r0, #1
 800fef2:	bfda      	itte	le
 800fef4:	fb02 3301 	mlale	r3, r2, r1, r3
 800fef8:	9309      	strle	r3, [sp, #36]	; 0x24
 800fefa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fefe:	f10b 0b01 	add.w	fp, fp, #1
 800ff02:	9015      	str	r0, [sp, #84]	; 0x54
 800ff04:	e7c1      	b.n	800fe8a <_strtod_l+0x152>
 800ff06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff08:	1c5a      	adds	r2, r3, #1
 800ff0a:	9215      	str	r2, [sp, #84]	; 0x54
 800ff0c:	785a      	ldrb	r2, [r3, #1]
 800ff0e:	f1bb 0f00 	cmp.w	fp, #0
 800ff12:	d037      	beq.n	800ff84 <_strtod_l+0x24c>
 800ff14:	9005      	str	r0, [sp, #20]
 800ff16:	465e      	mov	r6, fp
 800ff18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ff1c:	2b09      	cmp	r3, #9
 800ff1e:	d912      	bls.n	800ff46 <_strtod_l+0x20e>
 800ff20:	2301      	movs	r3, #1
 800ff22:	e7c4      	b.n	800feae <_strtod_l+0x176>
 800ff24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	9215      	str	r2, [sp, #84]	; 0x54
 800ff2a:	785a      	ldrb	r2, [r3, #1]
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	2a30      	cmp	r2, #48	; 0x30
 800ff30:	d0f8      	beq.n	800ff24 <_strtod_l+0x1ec>
 800ff32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ff36:	2b08      	cmp	r3, #8
 800ff38:	f200 84c1 	bhi.w	80108be <_strtod_l+0xb86>
 800ff3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff3e:	9005      	str	r0, [sp, #20]
 800ff40:	2000      	movs	r0, #0
 800ff42:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff44:	4606      	mov	r6, r0
 800ff46:	3a30      	subs	r2, #48	; 0x30
 800ff48:	f100 0301 	add.w	r3, r0, #1
 800ff4c:	d014      	beq.n	800ff78 <_strtod_l+0x240>
 800ff4e:	9905      	ldr	r1, [sp, #20]
 800ff50:	4419      	add	r1, r3
 800ff52:	9105      	str	r1, [sp, #20]
 800ff54:	4633      	mov	r3, r6
 800ff56:	eb00 0c06 	add.w	ip, r0, r6
 800ff5a:	210a      	movs	r1, #10
 800ff5c:	4563      	cmp	r3, ip
 800ff5e:	d113      	bne.n	800ff88 <_strtod_l+0x250>
 800ff60:	1833      	adds	r3, r6, r0
 800ff62:	2b08      	cmp	r3, #8
 800ff64:	f106 0601 	add.w	r6, r6, #1
 800ff68:	4406      	add	r6, r0
 800ff6a:	dc1a      	bgt.n	800ffa2 <_strtod_l+0x26a>
 800ff6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff6e:	230a      	movs	r3, #10
 800ff70:	fb03 2301 	mla	r3, r3, r1, r2
 800ff74:	9309      	str	r3, [sp, #36]	; 0x24
 800ff76:	2300      	movs	r3, #0
 800ff78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff7a:	1c51      	adds	r1, r2, #1
 800ff7c:	9115      	str	r1, [sp, #84]	; 0x54
 800ff7e:	7852      	ldrb	r2, [r2, #1]
 800ff80:	4618      	mov	r0, r3
 800ff82:	e7c9      	b.n	800ff18 <_strtod_l+0x1e0>
 800ff84:	4658      	mov	r0, fp
 800ff86:	e7d2      	b.n	800ff2e <_strtod_l+0x1f6>
 800ff88:	2b08      	cmp	r3, #8
 800ff8a:	f103 0301 	add.w	r3, r3, #1
 800ff8e:	dc03      	bgt.n	800ff98 <_strtod_l+0x260>
 800ff90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ff92:	434f      	muls	r7, r1
 800ff94:	9709      	str	r7, [sp, #36]	; 0x24
 800ff96:	e7e1      	b.n	800ff5c <_strtod_l+0x224>
 800ff98:	2b10      	cmp	r3, #16
 800ff9a:	bfd8      	it	le
 800ff9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ffa0:	e7dc      	b.n	800ff5c <_strtod_l+0x224>
 800ffa2:	2e10      	cmp	r6, #16
 800ffa4:	bfdc      	itt	le
 800ffa6:	230a      	movle	r3, #10
 800ffa8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ffac:	e7e3      	b.n	800ff76 <_strtod_l+0x23e>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	9305      	str	r3, [sp, #20]
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e780      	b.n	800feb8 <_strtod_l+0x180>
 800ffb6:	f04f 0c00 	mov.w	ip, #0
 800ffba:	1caa      	adds	r2, r5, #2
 800ffbc:	9215      	str	r2, [sp, #84]	; 0x54
 800ffbe:	78aa      	ldrb	r2, [r5, #2]
 800ffc0:	e788      	b.n	800fed4 <_strtod_l+0x19c>
 800ffc2:	f04f 0c01 	mov.w	ip, #1
 800ffc6:	e7f8      	b.n	800ffba <_strtod_l+0x282>
 800ffc8:	0801591c 	.word	0x0801591c
 800ffcc:	08015918 	.word	0x08015918
 800ffd0:	7ff00000 	.word	0x7ff00000
 800ffd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ffd6:	1c51      	adds	r1, r2, #1
 800ffd8:	9115      	str	r1, [sp, #84]	; 0x54
 800ffda:	7852      	ldrb	r2, [r2, #1]
 800ffdc:	2a30      	cmp	r2, #48	; 0x30
 800ffde:	d0f9      	beq.n	800ffd4 <_strtod_l+0x29c>
 800ffe0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ffe4:	2908      	cmp	r1, #8
 800ffe6:	f63f af7a 	bhi.w	800fede <_strtod_l+0x1a6>
 800ffea:	3a30      	subs	r2, #48	; 0x30
 800ffec:	9208      	str	r2, [sp, #32]
 800ffee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fff0:	920c      	str	r2, [sp, #48]	; 0x30
 800fff2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fff4:	1c57      	adds	r7, r2, #1
 800fff6:	9715      	str	r7, [sp, #84]	; 0x54
 800fff8:	7852      	ldrb	r2, [r2, #1]
 800fffa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fffe:	f1be 0f09 	cmp.w	lr, #9
 8010002:	d938      	bls.n	8010076 <_strtod_l+0x33e>
 8010004:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010006:	1a7f      	subs	r7, r7, r1
 8010008:	2f08      	cmp	r7, #8
 801000a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801000e:	dc03      	bgt.n	8010018 <_strtod_l+0x2e0>
 8010010:	9908      	ldr	r1, [sp, #32]
 8010012:	428f      	cmp	r7, r1
 8010014:	bfa8      	it	ge
 8010016:	460f      	movge	r7, r1
 8010018:	f1bc 0f00 	cmp.w	ip, #0
 801001c:	d000      	beq.n	8010020 <_strtod_l+0x2e8>
 801001e:	427f      	negs	r7, r7
 8010020:	2e00      	cmp	r6, #0
 8010022:	d14f      	bne.n	80100c4 <_strtod_l+0x38c>
 8010024:	9904      	ldr	r1, [sp, #16]
 8010026:	4301      	orrs	r1, r0
 8010028:	f47f aec1 	bne.w	800fdae <_strtod_l+0x76>
 801002c:	2b00      	cmp	r3, #0
 801002e:	f47f aedb 	bne.w	800fde8 <_strtod_l+0xb0>
 8010032:	2a69      	cmp	r2, #105	; 0x69
 8010034:	d029      	beq.n	801008a <_strtod_l+0x352>
 8010036:	dc26      	bgt.n	8010086 <_strtod_l+0x34e>
 8010038:	2a49      	cmp	r2, #73	; 0x49
 801003a:	d026      	beq.n	801008a <_strtod_l+0x352>
 801003c:	2a4e      	cmp	r2, #78	; 0x4e
 801003e:	f47f aed3 	bne.w	800fde8 <_strtod_l+0xb0>
 8010042:	499b      	ldr	r1, [pc, #620]	; (80102b0 <_strtod_l+0x578>)
 8010044:	a815      	add	r0, sp, #84	; 0x54
 8010046:	f002 fead 	bl	8012da4 <__match>
 801004a:	2800      	cmp	r0, #0
 801004c:	f43f aecc 	beq.w	800fde8 <_strtod_l+0xb0>
 8010050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	2b28      	cmp	r3, #40	; 0x28
 8010056:	d12f      	bne.n	80100b8 <_strtod_l+0x380>
 8010058:	4996      	ldr	r1, [pc, #600]	; (80102b4 <_strtod_l+0x57c>)
 801005a:	aa18      	add	r2, sp, #96	; 0x60
 801005c:	a815      	add	r0, sp, #84	; 0x54
 801005e:	f002 feb5 	bl	8012dcc <__hexnan>
 8010062:	2805      	cmp	r0, #5
 8010064:	d128      	bne.n	80100b8 <_strtod_l+0x380>
 8010066:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010068:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801006c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010070:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010074:	e69b      	b.n	800fdae <_strtod_l+0x76>
 8010076:	9f08      	ldr	r7, [sp, #32]
 8010078:	210a      	movs	r1, #10
 801007a:	fb01 2107 	mla	r1, r1, r7, r2
 801007e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010082:	9208      	str	r2, [sp, #32]
 8010084:	e7b5      	b.n	800fff2 <_strtod_l+0x2ba>
 8010086:	2a6e      	cmp	r2, #110	; 0x6e
 8010088:	e7d9      	b.n	801003e <_strtod_l+0x306>
 801008a:	498b      	ldr	r1, [pc, #556]	; (80102b8 <_strtod_l+0x580>)
 801008c:	a815      	add	r0, sp, #84	; 0x54
 801008e:	f002 fe89 	bl	8012da4 <__match>
 8010092:	2800      	cmp	r0, #0
 8010094:	f43f aea8 	beq.w	800fde8 <_strtod_l+0xb0>
 8010098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801009a:	4988      	ldr	r1, [pc, #544]	; (80102bc <_strtod_l+0x584>)
 801009c:	3b01      	subs	r3, #1
 801009e:	a815      	add	r0, sp, #84	; 0x54
 80100a0:	9315      	str	r3, [sp, #84]	; 0x54
 80100a2:	f002 fe7f 	bl	8012da4 <__match>
 80100a6:	b910      	cbnz	r0, 80100ae <_strtod_l+0x376>
 80100a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100aa:	3301      	adds	r3, #1
 80100ac:	9315      	str	r3, [sp, #84]	; 0x54
 80100ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80102cc <_strtod_l+0x594>
 80100b2:	f04f 0800 	mov.w	r8, #0
 80100b6:	e67a      	b.n	800fdae <_strtod_l+0x76>
 80100b8:	4881      	ldr	r0, [pc, #516]	; (80102c0 <_strtod_l+0x588>)
 80100ba:	f001 fcd9 	bl	8011a70 <nan>
 80100be:	ec59 8b10 	vmov	r8, r9, d0
 80100c2:	e674      	b.n	800fdae <_strtod_l+0x76>
 80100c4:	9b05      	ldr	r3, [sp, #20]
 80100c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100c8:	1afb      	subs	r3, r7, r3
 80100ca:	f1bb 0f00 	cmp.w	fp, #0
 80100ce:	bf08      	it	eq
 80100d0:	46b3      	moveq	fp, r6
 80100d2:	2e10      	cmp	r6, #16
 80100d4:	9308      	str	r3, [sp, #32]
 80100d6:	4635      	mov	r5, r6
 80100d8:	bfa8      	it	ge
 80100da:	2510      	movge	r5, #16
 80100dc:	f7f0 fa12 	bl	8000504 <__aeabi_ui2d>
 80100e0:	2e09      	cmp	r6, #9
 80100e2:	4680      	mov	r8, r0
 80100e4:	4689      	mov	r9, r1
 80100e6:	dd13      	ble.n	8010110 <_strtod_l+0x3d8>
 80100e8:	4b76      	ldr	r3, [pc, #472]	; (80102c4 <_strtod_l+0x58c>)
 80100ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80100ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80100f2:	f7f0 fa81 	bl	80005f8 <__aeabi_dmul>
 80100f6:	4680      	mov	r8, r0
 80100f8:	4650      	mov	r0, sl
 80100fa:	4689      	mov	r9, r1
 80100fc:	f7f0 fa02 	bl	8000504 <__aeabi_ui2d>
 8010100:	4602      	mov	r2, r0
 8010102:	460b      	mov	r3, r1
 8010104:	4640      	mov	r0, r8
 8010106:	4649      	mov	r1, r9
 8010108:	f7f0 f8c0 	bl	800028c <__adddf3>
 801010c:	4680      	mov	r8, r0
 801010e:	4689      	mov	r9, r1
 8010110:	2e0f      	cmp	r6, #15
 8010112:	dc38      	bgt.n	8010186 <_strtod_l+0x44e>
 8010114:	9b08      	ldr	r3, [sp, #32]
 8010116:	2b00      	cmp	r3, #0
 8010118:	f43f ae49 	beq.w	800fdae <_strtod_l+0x76>
 801011c:	dd24      	ble.n	8010168 <_strtod_l+0x430>
 801011e:	2b16      	cmp	r3, #22
 8010120:	dc0b      	bgt.n	801013a <_strtod_l+0x402>
 8010122:	4968      	ldr	r1, [pc, #416]	; (80102c4 <_strtod_l+0x58c>)
 8010124:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801012c:	4642      	mov	r2, r8
 801012e:	464b      	mov	r3, r9
 8010130:	f7f0 fa62 	bl	80005f8 <__aeabi_dmul>
 8010134:	4680      	mov	r8, r0
 8010136:	4689      	mov	r9, r1
 8010138:	e639      	b.n	800fdae <_strtod_l+0x76>
 801013a:	9a08      	ldr	r2, [sp, #32]
 801013c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010140:	4293      	cmp	r3, r2
 8010142:	db20      	blt.n	8010186 <_strtod_l+0x44e>
 8010144:	4c5f      	ldr	r4, [pc, #380]	; (80102c4 <_strtod_l+0x58c>)
 8010146:	f1c6 060f 	rsb	r6, r6, #15
 801014a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801014e:	4642      	mov	r2, r8
 8010150:	464b      	mov	r3, r9
 8010152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010156:	f7f0 fa4f 	bl	80005f8 <__aeabi_dmul>
 801015a:	9b08      	ldr	r3, [sp, #32]
 801015c:	1b9e      	subs	r6, r3, r6
 801015e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010162:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010166:	e7e3      	b.n	8010130 <_strtod_l+0x3f8>
 8010168:	9b08      	ldr	r3, [sp, #32]
 801016a:	3316      	adds	r3, #22
 801016c:	db0b      	blt.n	8010186 <_strtod_l+0x44e>
 801016e:	9b05      	ldr	r3, [sp, #20]
 8010170:	1bdf      	subs	r7, r3, r7
 8010172:	4b54      	ldr	r3, [pc, #336]	; (80102c4 <_strtod_l+0x58c>)
 8010174:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010178:	e9d7 2300 	ldrd	r2, r3, [r7]
 801017c:	4640      	mov	r0, r8
 801017e:	4649      	mov	r1, r9
 8010180:	f7f0 fb64 	bl	800084c <__aeabi_ddiv>
 8010184:	e7d6      	b.n	8010134 <_strtod_l+0x3fc>
 8010186:	9b08      	ldr	r3, [sp, #32]
 8010188:	1b75      	subs	r5, r6, r5
 801018a:	441d      	add	r5, r3
 801018c:	2d00      	cmp	r5, #0
 801018e:	dd70      	ble.n	8010272 <_strtod_l+0x53a>
 8010190:	f015 030f 	ands.w	r3, r5, #15
 8010194:	d00a      	beq.n	80101ac <_strtod_l+0x474>
 8010196:	494b      	ldr	r1, [pc, #300]	; (80102c4 <_strtod_l+0x58c>)
 8010198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801019c:	4642      	mov	r2, r8
 801019e:	464b      	mov	r3, r9
 80101a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80101a4:	f7f0 fa28 	bl	80005f8 <__aeabi_dmul>
 80101a8:	4680      	mov	r8, r0
 80101aa:	4689      	mov	r9, r1
 80101ac:	f035 050f 	bics.w	r5, r5, #15
 80101b0:	d04d      	beq.n	801024e <_strtod_l+0x516>
 80101b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80101b6:	dd22      	ble.n	80101fe <_strtod_l+0x4c6>
 80101b8:	2500      	movs	r5, #0
 80101ba:	46ab      	mov	fp, r5
 80101bc:	9509      	str	r5, [sp, #36]	; 0x24
 80101be:	9505      	str	r5, [sp, #20]
 80101c0:	2322      	movs	r3, #34	; 0x22
 80101c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80102cc <_strtod_l+0x594>
 80101c6:	6023      	str	r3, [r4, #0]
 80101c8:	f04f 0800 	mov.w	r8, #0
 80101cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f43f aded 	beq.w	800fdae <_strtod_l+0x76>
 80101d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80101d6:	4620      	mov	r0, r4
 80101d8:	f002 fee6 	bl	8012fa8 <_Bfree>
 80101dc:	9905      	ldr	r1, [sp, #20]
 80101de:	4620      	mov	r0, r4
 80101e0:	f002 fee2 	bl	8012fa8 <_Bfree>
 80101e4:	4659      	mov	r1, fp
 80101e6:	4620      	mov	r0, r4
 80101e8:	f002 fede 	bl	8012fa8 <_Bfree>
 80101ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101ee:	4620      	mov	r0, r4
 80101f0:	f002 feda 	bl	8012fa8 <_Bfree>
 80101f4:	4629      	mov	r1, r5
 80101f6:	4620      	mov	r0, r4
 80101f8:	f002 fed6 	bl	8012fa8 <_Bfree>
 80101fc:	e5d7      	b.n	800fdae <_strtod_l+0x76>
 80101fe:	4b32      	ldr	r3, [pc, #200]	; (80102c8 <_strtod_l+0x590>)
 8010200:	9304      	str	r3, [sp, #16]
 8010202:	2300      	movs	r3, #0
 8010204:	112d      	asrs	r5, r5, #4
 8010206:	4640      	mov	r0, r8
 8010208:	4649      	mov	r1, r9
 801020a:	469a      	mov	sl, r3
 801020c:	2d01      	cmp	r5, #1
 801020e:	dc21      	bgt.n	8010254 <_strtod_l+0x51c>
 8010210:	b10b      	cbz	r3, 8010216 <_strtod_l+0x4de>
 8010212:	4680      	mov	r8, r0
 8010214:	4689      	mov	r9, r1
 8010216:	492c      	ldr	r1, [pc, #176]	; (80102c8 <_strtod_l+0x590>)
 8010218:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801021c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010220:	4642      	mov	r2, r8
 8010222:	464b      	mov	r3, r9
 8010224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010228:	f7f0 f9e6 	bl	80005f8 <__aeabi_dmul>
 801022c:	4b27      	ldr	r3, [pc, #156]	; (80102cc <_strtod_l+0x594>)
 801022e:	460a      	mov	r2, r1
 8010230:	400b      	ands	r3, r1
 8010232:	4927      	ldr	r1, [pc, #156]	; (80102d0 <_strtod_l+0x598>)
 8010234:	428b      	cmp	r3, r1
 8010236:	4680      	mov	r8, r0
 8010238:	d8be      	bhi.n	80101b8 <_strtod_l+0x480>
 801023a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801023e:	428b      	cmp	r3, r1
 8010240:	bf86      	itte	hi
 8010242:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80102d4 <_strtod_l+0x59c>
 8010246:	f04f 38ff 	movhi.w	r8, #4294967295
 801024a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801024e:	2300      	movs	r3, #0
 8010250:	9304      	str	r3, [sp, #16]
 8010252:	e07b      	b.n	801034c <_strtod_l+0x614>
 8010254:	07ea      	lsls	r2, r5, #31
 8010256:	d505      	bpl.n	8010264 <_strtod_l+0x52c>
 8010258:	9b04      	ldr	r3, [sp, #16]
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f9cb 	bl	80005f8 <__aeabi_dmul>
 8010262:	2301      	movs	r3, #1
 8010264:	9a04      	ldr	r2, [sp, #16]
 8010266:	3208      	adds	r2, #8
 8010268:	f10a 0a01 	add.w	sl, sl, #1
 801026c:	106d      	asrs	r5, r5, #1
 801026e:	9204      	str	r2, [sp, #16]
 8010270:	e7cc      	b.n	801020c <_strtod_l+0x4d4>
 8010272:	d0ec      	beq.n	801024e <_strtod_l+0x516>
 8010274:	426d      	negs	r5, r5
 8010276:	f015 020f 	ands.w	r2, r5, #15
 801027a:	d00a      	beq.n	8010292 <_strtod_l+0x55a>
 801027c:	4b11      	ldr	r3, [pc, #68]	; (80102c4 <_strtod_l+0x58c>)
 801027e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010282:	4640      	mov	r0, r8
 8010284:	4649      	mov	r1, r9
 8010286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028a:	f7f0 fadf 	bl	800084c <__aeabi_ddiv>
 801028e:	4680      	mov	r8, r0
 8010290:	4689      	mov	r9, r1
 8010292:	112d      	asrs	r5, r5, #4
 8010294:	d0db      	beq.n	801024e <_strtod_l+0x516>
 8010296:	2d1f      	cmp	r5, #31
 8010298:	dd1e      	ble.n	80102d8 <_strtod_l+0x5a0>
 801029a:	2500      	movs	r5, #0
 801029c:	46ab      	mov	fp, r5
 801029e:	9509      	str	r5, [sp, #36]	; 0x24
 80102a0:	9505      	str	r5, [sp, #20]
 80102a2:	2322      	movs	r3, #34	; 0x22
 80102a4:	f04f 0800 	mov.w	r8, #0
 80102a8:	f04f 0900 	mov.w	r9, #0
 80102ac:	6023      	str	r3, [r4, #0]
 80102ae:	e78d      	b.n	80101cc <_strtod_l+0x494>
 80102b0:	08015a7e 	.word	0x08015a7e
 80102b4:	08015930 	.word	0x08015930
 80102b8:	08015a76 	.word	0x08015a76
 80102bc:	08015b5d 	.word	0x08015b5d
 80102c0:	08015b59 	.word	0x08015b59
 80102c4:	08015cb8 	.word	0x08015cb8
 80102c8:	08015c90 	.word	0x08015c90
 80102cc:	7ff00000 	.word	0x7ff00000
 80102d0:	7ca00000 	.word	0x7ca00000
 80102d4:	7fefffff 	.word	0x7fefffff
 80102d8:	f015 0310 	ands.w	r3, r5, #16
 80102dc:	bf18      	it	ne
 80102de:	236a      	movne	r3, #106	; 0x6a
 80102e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8010684 <_strtod_l+0x94c>
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	4640      	mov	r0, r8
 80102e8:	4649      	mov	r1, r9
 80102ea:	2300      	movs	r3, #0
 80102ec:	07ea      	lsls	r2, r5, #31
 80102ee:	d504      	bpl.n	80102fa <_strtod_l+0x5c2>
 80102f0:	e9da 2300 	ldrd	r2, r3, [sl]
 80102f4:	f7f0 f980 	bl	80005f8 <__aeabi_dmul>
 80102f8:	2301      	movs	r3, #1
 80102fa:	106d      	asrs	r5, r5, #1
 80102fc:	f10a 0a08 	add.w	sl, sl, #8
 8010300:	d1f4      	bne.n	80102ec <_strtod_l+0x5b4>
 8010302:	b10b      	cbz	r3, 8010308 <_strtod_l+0x5d0>
 8010304:	4680      	mov	r8, r0
 8010306:	4689      	mov	r9, r1
 8010308:	9b04      	ldr	r3, [sp, #16]
 801030a:	b1bb      	cbz	r3, 801033c <_strtod_l+0x604>
 801030c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010310:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010314:	2b00      	cmp	r3, #0
 8010316:	4649      	mov	r1, r9
 8010318:	dd10      	ble.n	801033c <_strtod_l+0x604>
 801031a:	2b1f      	cmp	r3, #31
 801031c:	f340 811e 	ble.w	801055c <_strtod_l+0x824>
 8010320:	2b34      	cmp	r3, #52	; 0x34
 8010322:	bfde      	ittt	le
 8010324:	f04f 33ff 	movle.w	r3, #4294967295
 8010328:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801032c:	4093      	lslle	r3, r2
 801032e:	f04f 0800 	mov.w	r8, #0
 8010332:	bfcc      	ite	gt
 8010334:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010338:	ea03 0901 	andle.w	r9, r3, r1
 801033c:	2200      	movs	r2, #0
 801033e:	2300      	movs	r3, #0
 8010340:	4640      	mov	r0, r8
 8010342:	4649      	mov	r1, r9
 8010344:	f7f0 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010348:	2800      	cmp	r0, #0
 801034a:	d1a6      	bne.n	801029a <_strtod_l+0x562>
 801034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010352:	4633      	mov	r3, r6
 8010354:	465a      	mov	r2, fp
 8010356:	4620      	mov	r0, r4
 8010358:	f002 fe8e 	bl	8013078 <__s2b>
 801035c:	9009      	str	r0, [sp, #36]	; 0x24
 801035e:	2800      	cmp	r0, #0
 8010360:	f43f af2a 	beq.w	80101b8 <_strtod_l+0x480>
 8010364:	9a08      	ldr	r2, [sp, #32]
 8010366:	9b05      	ldr	r3, [sp, #20]
 8010368:	2a00      	cmp	r2, #0
 801036a:	eba3 0307 	sub.w	r3, r3, r7
 801036e:	bfa8      	it	ge
 8010370:	2300      	movge	r3, #0
 8010372:	930c      	str	r3, [sp, #48]	; 0x30
 8010374:	2500      	movs	r5, #0
 8010376:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801037a:	9312      	str	r3, [sp, #72]	; 0x48
 801037c:	46ab      	mov	fp, r5
 801037e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010380:	4620      	mov	r0, r4
 8010382:	6859      	ldr	r1, [r3, #4]
 8010384:	f002 fdd0 	bl	8012f28 <_Balloc>
 8010388:	9005      	str	r0, [sp, #20]
 801038a:	2800      	cmp	r0, #0
 801038c:	f43f af18 	beq.w	80101c0 <_strtod_l+0x488>
 8010390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010392:	691a      	ldr	r2, [r3, #16]
 8010394:	3202      	adds	r2, #2
 8010396:	f103 010c 	add.w	r1, r3, #12
 801039a:	0092      	lsls	r2, r2, #2
 801039c:	300c      	adds	r0, #12
 801039e:	f001 fb56 	bl	8011a4e <memcpy>
 80103a2:	ec49 8b10 	vmov	d0, r8, r9
 80103a6:	aa18      	add	r2, sp, #96	; 0x60
 80103a8:	a917      	add	r1, sp, #92	; 0x5c
 80103aa:	4620      	mov	r0, r4
 80103ac:	f003 f998 	bl	80136e0 <__d2b>
 80103b0:	ec49 8b18 	vmov	d8, r8, r9
 80103b4:	9016      	str	r0, [sp, #88]	; 0x58
 80103b6:	2800      	cmp	r0, #0
 80103b8:	f43f af02 	beq.w	80101c0 <_strtod_l+0x488>
 80103bc:	2101      	movs	r1, #1
 80103be:	4620      	mov	r0, r4
 80103c0:	f002 fef2 	bl	80131a8 <__i2b>
 80103c4:	4683      	mov	fp, r0
 80103c6:	2800      	cmp	r0, #0
 80103c8:	f43f aefa 	beq.w	80101c0 <_strtod_l+0x488>
 80103cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80103ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80103d0:	2e00      	cmp	r6, #0
 80103d2:	bfab      	itete	ge
 80103d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80103d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80103d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80103da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80103de:	bfac      	ite	ge
 80103e0:	eb06 0a03 	addge.w	sl, r6, r3
 80103e4:	1b9f      	sublt	r7, r3, r6
 80103e6:	9b04      	ldr	r3, [sp, #16]
 80103e8:	1af6      	subs	r6, r6, r3
 80103ea:	4416      	add	r6, r2
 80103ec:	4ba0      	ldr	r3, [pc, #640]	; (8010670 <_strtod_l+0x938>)
 80103ee:	3e01      	subs	r6, #1
 80103f0:	429e      	cmp	r6, r3
 80103f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80103f6:	f280 80c4 	bge.w	8010582 <_strtod_l+0x84a>
 80103fa:	1b9b      	subs	r3, r3, r6
 80103fc:	2b1f      	cmp	r3, #31
 80103fe:	eba2 0203 	sub.w	r2, r2, r3
 8010402:	f04f 0101 	mov.w	r1, #1
 8010406:	f300 80b0 	bgt.w	801056a <_strtod_l+0x832>
 801040a:	fa01 f303 	lsl.w	r3, r1, r3
 801040e:	930e      	str	r3, [sp, #56]	; 0x38
 8010410:	2300      	movs	r3, #0
 8010412:	930d      	str	r3, [sp, #52]	; 0x34
 8010414:	eb0a 0602 	add.w	r6, sl, r2
 8010418:	9b04      	ldr	r3, [sp, #16]
 801041a:	45b2      	cmp	sl, r6
 801041c:	4417      	add	r7, r2
 801041e:	441f      	add	r7, r3
 8010420:	4653      	mov	r3, sl
 8010422:	bfa8      	it	ge
 8010424:	4633      	movge	r3, r6
 8010426:	42bb      	cmp	r3, r7
 8010428:	bfa8      	it	ge
 801042a:	463b      	movge	r3, r7
 801042c:	2b00      	cmp	r3, #0
 801042e:	bfc2      	ittt	gt
 8010430:	1af6      	subgt	r6, r6, r3
 8010432:	1aff      	subgt	r7, r7, r3
 8010434:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801043a:	2b00      	cmp	r3, #0
 801043c:	dd17      	ble.n	801046e <_strtod_l+0x736>
 801043e:	4659      	mov	r1, fp
 8010440:	461a      	mov	r2, r3
 8010442:	4620      	mov	r0, r4
 8010444:	f002 ff70 	bl	8013328 <__pow5mult>
 8010448:	4683      	mov	fp, r0
 801044a:	2800      	cmp	r0, #0
 801044c:	f43f aeb8 	beq.w	80101c0 <_strtod_l+0x488>
 8010450:	4601      	mov	r1, r0
 8010452:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010454:	4620      	mov	r0, r4
 8010456:	f002 febd 	bl	80131d4 <__multiply>
 801045a:	900b      	str	r0, [sp, #44]	; 0x2c
 801045c:	2800      	cmp	r0, #0
 801045e:	f43f aeaf 	beq.w	80101c0 <_strtod_l+0x488>
 8010462:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010464:	4620      	mov	r0, r4
 8010466:	f002 fd9f 	bl	8012fa8 <_Bfree>
 801046a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801046c:	9316      	str	r3, [sp, #88]	; 0x58
 801046e:	2e00      	cmp	r6, #0
 8010470:	f300 808c 	bgt.w	801058c <_strtod_l+0x854>
 8010474:	9b08      	ldr	r3, [sp, #32]
 8010476:	2b00      	cmp	r3, #0
 8010478:	dd08      	ble.n	801048c <_strtod_l+0x754>
 801047a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801047c:	9905      	ldr	r1, [sp, #20]
 801047e:	4620      	mov	r0, r4
 8010480:	f002 ff52 	bl	8013328 <__pow5mult>
 8010484:	9005      	str	r0, [sp, #20]
 8010486:	2800      	cmp	r0, #0
 8010488:	f43f ae9a 	beq.w	80101c0 <_strtod_l+0x488>
 801048c:	2f00      	cmp	r7, #0
 801048e:	dd08      	ble.n	80104a2 <_strtod_l+0x76a>
 8010490:	9905      	ldr	r1, [sp, #20]
 8010492:	463a      	mov	r2, r7
 8010494:	4620      	mov	r0, r4
 8010496:	f002 ffa1 	bl	80133dc <__lshift>
 801049a:	9005      	str	r0, [sp, #20]
 801049c:	2800      	cmp	r0, #0
 801049e:	f43f ae8f 	beq.w	80101c0 <_strtod_l+0x488>
 80104a2:	f1ba 0f00 	cmp.w	sl, #0
 80104a6:	dd08      	ble.n	80104ba <_strtod_l+0x782>
 80104a8:	4659      	mov	r1, fp
 80104aa:	4652      	mov	r2, sl
 80104ac:	4620      	mov	r0, r4
 80104ae:	f002 ff95 	bl	80133dc <__lshift>
 80104b2:	4683      	mov	fp, r0
 80104b4:	2800      	cmp	r0, #0
 80104b6:	f43f ae83 	beq.w	80101c0 <_strtod_l+0x488>
 80104ba:	9a05      	ldr	r2, [sp, #20]
 80104bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80104be:	4620      	mov	r0, r4
 80104c0:	f003 f814 	bl	80134ec <__mdiff>
 80104c4:	4605      	mov	r5, r0
 80104c6:	2800      	cmp	r0, #0
 80104c8:	f43f ae7a 	beq.w	80101c0 <_strtod_l+0x488>
 80104cc:	68c3      	ldr	r3, [r0, #12]
 80104ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80104d0:	2300      	movs	r3, #0
 80104d2:	60c3      	str	r3, [r0, #12]
 80104d4:	4659      	mov	r1, fp
 80104d6:	f002 ffed 	bl	80134b4 <__mcmp>
 80104da:	2800      	cmp	r0, #0
 80104dc:	da60      	bge.n	80105a0 <_strtod_l+0x868>
 80104de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104e0:	ea53 0308 	orrs.w	r3, r3, r8
 80104e4:	f040 8084 	bne.w	80105f0 <_strtod_l+0x8b8>
 80104e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d17f      	bne.n	80105f0 <_strtod_l+0x8b8>
 80104f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80104f4:	0d1b      	lsrs	r3, r3, #20
 80104f6:	051b      	lsls	r3, r3, #20
 80104f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80104fc:	d978      	bls.n	80105f0 <_strtod_l+0x8b8>
 80104fe:	696b      	ldr	r3, [r5, #20]
 8010500:	b913      	cbnz	r3, 8010508 <_strtod_l+0x7d0>
 8010502:	692b      	ldr	r3, [r5, #16]
 8010504:	2b01      	cmp	r3, #1
 8010506:	dd73      	ble.n	80105f0 <_strtod_l+0x8b8>
 8010508:	4629      	mov	r1, r5
 801050a:	2201      	movs	r2, #1
 801050c:	4620      	mov	r0, r4
 801050e:	f002 ff65 	bl	80133dc <__lshift>
 8010512:	4659      	mov	r1, fp
 8010514:	4605      	mov	r5, r0
 8010516:	f002 ffcd 	bl	80134b4 <__mcmp>
 801051a:	2800      	cmp	r0, #0
 801051c:	dd68      	ble.n	80105f0 <_strtod_l+0x8b8>
 801051e:	9904      	ldr	r1, [sp, #16]
 8010520:	4a54      	ldr	r2, [pc, #336]	; (8010674 <_strtod_l+0x93c>)
 8010522:	464b      	mov	r3, r9
 8010524:	2900      	cmp	r1, #0
 8010526:	f000 8084 	beq.w	8010632 <_strtod_l+0x8fa>
 801052a:	ea02 0109 	and.w	r1, r2, r9
 801052e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010532:	dc7e      	bgt.n	8010632 <_strtod_l+0x8fa>
 8010534:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010538:	f77f aeb3 	ble.w	80102a2 <_strtod_l+0x56a>
 801053c:	4b4e      	ldr	r3, [pc, #312]	; (8010678 <_strtod_l+0x940>)
 801053e:	4640      	mov	r0, r8
 8010540:	4649      	mov	r1, r9
 8010542:	2200      	movs	r2, #0
 8010544:	f7f0 f858 	bl	80005f8 <__aeabi_dmul>
 8010548:	4b4a      	ldr	r3, [pc, #296]	; (8010674 <_strtod_l+0x93c>)
 801054a:	400b      	ands	r3, r1
 801054c:	4680      	mov	r8, r0
 801054e:	4689      	mov	r9, r1
 8010550:	2b00      	cmp	r3, #0
 8010552:	f47f ae3f 	bne.w	80101d4 <_strtod_l+0x49c>
 8010556:	2322      	movs	r3, #34	; 0x22
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	e63b      	b.n	80101d4 <_strtod_l+0x49c>
 801055c:	f04f 32ff 	mov.w	r2, #4294967295
 8010560:	fa02 f303 	lsl.w	r3, r2, r3
 8010564:	ea03 0808 	and.w	r8, r3, r8
 8010568:	e6e8      	b.n	801033c <_strtod_l+0x604>
 801056a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801056e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010572:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010576:	36e2      	adds	r6, #226	; 0xe2
 8010578:	fa01 f306 	lsl.w	r3, r1, r6
 801057c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010580:	e748      	b.n	8010414 <_strtod_l+0x6dc>
 8010582:	2100      	movs	r1, #0
 8010584:	2301      	movs	r3, #1
 8010586:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801058a:	e743      	b.n	8010414 <_strtod_l+0x6dc>
 801058c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801058e:	4632      	mov	r2, r6
 8010590:	4620      	mov	r0, r4
 8010592:	f002 ff23 	bl	80133dc <__lshift>
 8010596:	9016      	str	r0, [sp, #88]	; 0x58
 8010598:	2800      	cmp	r0, #0
 801059a:	f47f af6b 	bne.w	8010474 <_strtod_l+0x73c>
 801059e:	e60f      	b.n	80101c0 <_strtod_l+0x488>
 80105a0:	46ca      	mov	sl, r9
 80105a2:	d171      	bne.n	8010688 <_strtod_l+0x950>
 80105a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80105a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105aa:	b352      	cbz	r2, 8010602 <_strtod_l+0x8ca>
 80105ac:	4a33      	ldr	r2, [pc, #204]	; (801067c <_strtod_l+0x944>)
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d12a      	bne.n	8010608 <_strtod_l+0x8d0>
 80105b2:	9b04      	ldr	r3, [sp, #16]
 80105b4:	4641      	mov	r1, r8
 80105b6:	b1fb      	cbz	r3, 80105f8 <_strtod_l+0x8c0>
 80105b8:	4b2e      	ldr	r3, [pc, #184]	; (8010674 <_strtod_l+0x93c>)
 80105ba:	ea09 0303 	and.w	r3, r9, r3
 80105be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80105c2:	f04f 32ff 	mov.w	r2, #4294967295
 80105c6:	d81a      	bhi.n	80105fe <_strtod_l+0x8c6>
 80105c8:	0d1b      	lsrs	r3, r3, #20
 80105ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80105ce:	fa02 f303 	lsl.w	r3, r2, r3
 80105d2:	4299      	cmp	r1, r3
 80105d4:	d118      	bne.n	8010608 <_strtod_l+0x8d0>
 80105d6:	4b2a      	ldr	r3, [pc, #168]	; (8010680 <_strtod_l+0x948>)
 80105d8:	459a      	cmp	sl, r3
 80105da:	d102      	bne.n	80105e2 <_strtod_l+0x8aa>
 80105dc:	3101      	adds	r1, #1
 80105de:	f43f adef 	beq.w	80101c0 <_strtod_l+0x488>
 80105e2:	4b24      	ldr	r3, [pc, #144]	; (8010674 <_strtod_l+0x93c>)
 80105e4:	ea0a 0303 	and.w	r3, sl, r3
 80105e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80105ec:	f04f 0800 	mov.w	r8, #0
 80105f0:	9b04      	ldr	r3, [sp, #16]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1a2      	bne.n	801053c <_strtod_l+0x804>
 80105f6:	e5ed      	b.n	80101d4 <_strtod_l+0x49c>
 80105f8:	f04f 33ff 	mov.w	r3, #4294967295
 80105fc:	e7e9      	b.n	80105d2 <_strtod_l+0x89a>
 80105fe:	4613      	mov	r3, r2
 8010600:	e7e7      	b.n	80105d2 <_strtod_l+0x89a>
 8010602:	ea53 0308 	orrs.w	r3, r3, r8
 8010606:	d08a      	beq.n	801051e <_strtod_l+0x7e6>
 8010608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801060a:	b1e3      	cbz	r3, 8010646 <_strtod_l+0x90e>
 801060c:	ea13 0f0a 	tst.w	r3, sl
 8010610:	d0ee      	beq.n	80105f0 <_strtod_l+0x8b8>
 8010612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010614:	9a04      	ldr	r2, [sp, #16]
 8010616:	4640      	mov	r0, r8
 8010618:	4649      	mov	r1, r9
 801061a:	b1c3      	cbz	r3, 801064e <_strtod_l+0x916>
 801061c:	f7ff fb6e 	bl	800fcfc <sulp>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	ec51 0b18 	vmov	r0, r1, d8
 8010628:	f7ef fe30 	bl	800028c <__adddf3>
 801062c:	4680      	mov	r8, r0
 801062e:	4689      	mov	r9, r1
 8010630:	e7de      	b.n	80105f0 <_strtod_l+0x8b8>
 8010632:	4013      	ands	r3, r2
 8010634:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010638:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801063c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010640:	f04f 38ff 	mov.w	r8, #4294967295
 8010644:	e7d4      	b.n	80105f0 <_strtod_l+0x8b8>
 8010646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010648:	ea13 0f08 	tst.w	r3, r8
 801064c:	e7e0      	b.n	8010610 <_strtod_l+0x8d8>
 801064e:	f7ff fb55 	bl	800fcfc <sulp>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	ec51 0b18 	vmov	r0, r1, d8
 801065a:	f7ef fe15 	bl	8000288 <__aeabi_dsub>
 801065e:	2200      	movs	r2, #0
 8010660:	2300      	movs	r3, #0
 8010662:	4680      	mov	r8, r0
 8010664:	4689      	mov	r9, r1
 8010666:	f7f0 fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801066a:	2800      	cmp	r0, #0
 801066c:	d0c0      	beq.n	80105f0 <_strtod_l+0x8b8>
 801066e:	e618      	b.n	80102a2 <_strtod_l+0x56a>
 8010670:	fffffc02 	.word	0xfffffc02
 8010674:	7ff00000 	.word	0x7ff00000
 8010678:	39500000 	.word	0x39500000
 801067c:	000fffff 	.word	0x000fffff
 8010680:	7fefffff 	.word	0x7fefffff
 8010684:	08015948 	.word	0x08015948
 8010688:	4659      	mov	r1, fp
 801068a:	4628      	mov	r0, r5
 801068c:	f003 f882 	bl	8013794 <__ratio>
 8010690:	ec57 6b10 	vmov	r6, r7, d0
 8010694:	ee10 0a10 	vmov	r0, s0
 8010698:	2200      	movs	r2, #0
 801069a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801069e:	4639      	mov	r1, r7
 80106a0:	f7f0 fa26 	bl	8000af0 <__aeabi_dcmple>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d071      	beq.n	801078c <_strtod_l+0xa54>
 80106a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d17c      	bne.n	80107a8 <_strtod_l+0xa70>
 80106ae:	f1b8 0f00 	cmp.w	r8, #0
 80106b2:	d15a      	bne.n	801076a <_strtod_l+0xa32>
 80106b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d15d      	bne.n	8010778 <_strtod_l+0xa40>
 80106bc:	4b90      	ldr	r3, [pc, #576]	; (8010900 <_strtod_l+0xbc8>)
 80106be:	2200      	movs	r2, #0
 80106c0:	4630      	mov	r0, r6
 80106c2:	4639      	mov	r1, r7
 80106c4:	f7f0 fa0a 	bl	8000adc <__aeabi_dcmplt>
 80106c8:	2800      	cmp	r0, #0
 80106ca:	d15c      	bne.n	8010786 <_strtod_l+0xa4e>
 80106cc:	4630      	mov	r0, r6
 80106ce:	4639      	mov	r1, r7
 80106d0:	4b8c      	ldr	r3, [pc, #560]	; (8010904 <_strtod_l+0xbcc>)
 80106d2:	2200      	movs	r2, #0
 80106d4:	f7ef ff90 	bl	80005f8 <__aeabi_dmul>
 80106d8:	4606      	mov	r6, r0
 80106da:	460f      	mov	r7, r1
 80106dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80106e0:	9606      	str	r6, [sp, #24]
 80106e2:	9307      	str	r3, [sp, #28]
 80106e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80106e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80106ec:	4b86      	ldr	r3, [pc, #536]	; (8010908 <_strtod_l+0xbd0>)
 80106ee:	ea0a 0303 	and.w	r3, sl, r3
 80106f2:	930d      	str	r3, [sp, #52]	; 0x34
 80106f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80106f6:	4b85      	ldr	r3, [pc, #532]	; (801090c <_strtod_l+0xbd4>)
 80106f8:	429a      	cmp	r2, r3
 80106fa:	f040 8090 	bne.w	801081e <_strtod_l+0xae6>
 80106fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8010702:	ec49 8b10 	vmov	d0, r8, r9
 8010706:	f002 ff7b 	bl	8013600 <__ulp>
 801070a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801070e:	ec51 0b10 	vmov	r0, r1, d0
 8010712:	f7ef ff71 	bl	80005f8 <__aeabi_dmul>
 8010716:	4642      	mov	r2, r8
 8010718:	464b      	mov	r3, r9
 801071a:	f7ef fdb7 	bl	800028c <__adddf3>
 801071e:	460b      	mov	r3, r1
 8010720:	4979      	ldr	r1, [pc, #484]	; (8010908 <_strtod_l+0xbd0>)
 8010722:	4a7b      	ldr	r2, [pc, #492]	; (8010910 <_strtod_l+0xbd8>)
 8010724:	4019      	ands	r1, r3
 8010726:	4291      	cmp	r1, r2
 8010728:	4680      	mov	r8, r0
 801072a:	d944      	bls.n	80107b6 <_strtod_l+0xa7e>
 801072c:	ee18 2a90 	vmov	r2, s17
 8010730:	4b78      	ldr	r3, [pc, #480]	; (8010914 <_strtod_l+0xbdc>)
 8010732:	429a      	cmp	r2, r3
 8010734:	d104      	bne.n	8010740 <_strtod_l+0xa08>
 8010736:	ee18 3a10 	vmov	r3, s16
 801073a:	3301      	adds	r3, #1
 801073c:	f43f ad40 	beq.w	80101c0 <_strtod_l+0x488>
 8010740:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010914 <_strtod_l+0xbdc>
 8010744:	f04f 38ff 	mov.w	r8, #4294967295
 8010748:	9916      	ldr	r1, [sp, #88]	; 0x58
 801074a:	4620      	mov	r0, r4
 801074c:	f002 fc2c 	bl	8012fa8 <_Bfree>
 8010750:	9905      	ldr	r1, [sp, #20]
 8010752:	4620      	mov	r0, r4
 8010754:	f002 fc28 	bl	8012fa8 <_Bfree>
 8010758:	4659      	mov	r1, fp
 801075a:	4620      	mov	r0, r4
 801075c:	f002 fc24 	bl	8012fa8 <_Bfree>
 8010760:	4629      	mov	r1, r5
 8010762:	4620      	mov	r0, r4
 8010764:	f002 fc20 	bl	8012fa8 <_Bfree>
 8010768:	e609      	b.n	801037e <_strtod_l+0x646>
 801076a:	f1b8 0f01 	cmp.w	r8, #1
 801076e:	d103      	bne.n	8010778 <_strtod_l+0xa40>
 8010770:	f1b9 0f00 	cmp.w	r9, #0
 8010774:	f43f ad95 	beq.w	80102a2 <_strtod_l+0x56a>
 8010778:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80108d0 <_strtod_l+0xb98>
 801077c:	4f60      	ldr	r7, [pc, #384]	; (8010900 <_strtod_l+0xbc8>)
 801077e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010782:	2600      	movs	r6, #0
 8010784:	e7ae      	b.n	80106e4 <_strtod_l+0x9ac>
 8010786:	4f5f      	ldr	r7, [pc, #380]	; (8010904 <_strtod_l+0xbcc>)
 8010788:	2600      	movs	r6, #0
 801078a:	e7a7      	b.n	80106dc <_strtod_l+0x9a4>
 801078c:	4b5d      	ldr	r3, [pc, #372]	; (8010904 <_strtod_l+0xbcc>)
 801078e:	4630      	mov	r0, r6
 8010790:	4639      	mov	r1, r7
 8010792:	2200      	movs	r2, #0
 8010794:	f7ef ff30 	bl	80005f8 <__aeabi_dmul>
 8010798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801079a:	4606      	mov	r6, r0
 801079c:	460f      	mov	r7, r1
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d09c      	beq.n	80106dc <_strtod_l+0x9a4>
 80107a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80107a6:	e79d      	b.n	80106e4 <_strtod_l+0x9ac>
 80107a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80108d8 <_strtod_l+0xba0>
 80107ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107b0:	ec57 6b17 	vmov	r6, r7, d7
 80107b4:	e796      	b.n	80106e4 <_strtod_l+0x9ac>
 80107b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80107ba:	9b04      	ldr	r3, [sp, #16]
 80107bc:	46ca      	mov	sl, r9
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1c2      	bne.n	8010748 <_strtod_l+0xa10>
 80107c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80107c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107c8:	0d1b      	lsrs	r3, r3, #20
 80107ca:	051b      	lsls	r3, r3, #20
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d1bb      	bne.n	8010748 <_strtod_l+0xa10>
 80107d0:	4630      	mov	r0, r6
 80107d2:	4639      	mov	r1, r7
 80107d4:	f7f0 fa70 	bl	8000cb8 <__aeabi_d2lz>
 80107d8:	f7ef fee0 	bl	800059c <__aeabi_l2d>
 80107dc:	4602      	mov	r2, r0
 80107de:	460b      	mov	r3, r1
 80107e0:	4630      	mov	r0, r6
 80107e2:	4639      	mov	r1, r7
 80107e4:	f7ef fd50 	bl	8000288 <__aeabi_dsub>
 80107e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80107ee:	ea43 0308 	orr.w	r3, r3, r8
 80107f2:	4313      	orrs	r3, r2
 80107f4:	4606      	mov	r6, r0
 80107f6:	460f      	mov	r7, r1
 80107f8:	d054      	beq.n	80108a4 <_strtod_l+0xb6c>
 80107fa:	a339      	add	r3, pc, #228	; (adr r3, 80108e0 <_strtod_l+0xba8>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	f7f0 f96c 	bl	8000adc <__aeabi_dcmplt>
 8010804:	2800      	cmp	r0, #0
 8010806:	f47f ace5 	bne.w	80101d4 <_strtod_l+0x49c>
 801080a:	a337      	add	r3, pc, #220	; (adr r3, 80108e8 <_strtod_l+0xbb0>)
 801080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010810:	4630      	mov	r0, r6
 8010812:	4639      	mov	r1, r7
 8010814:	f7f0 f980 	bl	8000b18 <__aeabi_dcmpgt>
 8010818:	2800      	cmp	r0, #0
 801081a:	d095      	beq.n	8010748 <_strtod_l+0xa10>
 801081c:	e4da      	b.n	80101d4 <_strtod_l+0x49c>
 801081e:	9b04      	ldr	r3, [sp, #16]
 8010820:	b333      	cbz	r3, 8010870 <_strtod_l+0xb38>
 8010822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010824:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010828:	d822      	bhi.n	8010870 <_strtod_l+0xb38>
 801082a:	a331      	add	r3, pc, #196	; (adr r3, 80108f0 <_strtod_l+0xbb8>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	4630      	mov	r0, r6
 8010832:	4639      	mov	r1, r7
 8010834:	f7f0 f95c 	bl	8000af0 <__aeabi_dcmple>
 8010838:	b1a0      	cbz	r0, 8010864 <_strtod_l+0xb2c>
 801083a:	4639      	mov	r1, r7
 801083c:	4630      	mov	r0, r6
 801083e:	f7f0 f9b3 	bl	8000ba8 <__aeabi_d2uiz>
 8010842:	2801      	cmp	r0, #1
 8010844:	bf38      	it	cc
 8010846:	2001      	movcc	r0, #1
 8010848:	f7ef fe5c 	bl	8000504 <__aeabi_ui2d>
 801084c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801084e:	4606      	mov	r6, r0
 8010850:	460f      	mov	r7, r1
 8010852:	bb23      	cbnz	r3, 801089e <_strtod_l+0xb66>
 8010854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010858:	9010      	str	r0, [sp, #64]	; 0x40
 801085a:	9311      	str	r3, [sp, #68]	; 0x44
 801085c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010860:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010868:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801086c:	1a9b      	subs	r3, r3, r2
 801086e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010870:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010874:	eeb0 0a48 	vmov.f32	s0, s16
 8010878:	eef0 0a68 	vmov.f32	s1, s17
 801087c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010880:	f002 febe 	bl	8013600 <__ulp>
 8010884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010888:	ec53 2b10 	vmov	r2, r3, d0
 801088c:	f7ef feb4 	bl	80005f8 <__aeabi_dmul>
 8010890:	ec53 2b18 	vmov	r2, r3, d8
 8010894:	f7ef fcfa 	bl	800028c <__adddf3>
 8010898:	4680      	mov	r8, r0
 801089a:	4689      	mov	r9, r1
 801089c:	e78d      	b.n	80107ba <_strtod_l+0xa82>
 801089e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80108a2:	e7db      	b.n	801085c <_strtod_l+0xb24>
 80108a4:	a314      	add	r3, pc, #80	; (adr r3, 80108f8 <_strtod_l+0xbc0>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	f7f0 f917 	bl	8000adc <__aeabi_dcmplt>
 80108ae:	e7b3      	b.n	8010818 <_strtod_l+0xae0>
 80108b0:	2300      	movs	r3, #0
 80108b2:	930a      	str	r3, [sp, #40]	; 0x28
 80108b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80108b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108b8:	6013      	str	r3, [r2, #0]
 80108ba:	f7ff ba7c 	b.w	800fdb6 <_strtod_l+0x7e>
 80108be:	2a65      	cmp	r2, #101	; 0x65
 80108c0:	f43f ab75 	beq.w	800ffae <_strtod_l+0x276>
 80108c4:	2a45      	cmp	r2, #69	; 0x45
 80108c6:	f43f ab72 	beq.w	800ffae <_strtod_l+0x276>
 80108ca:	2301      	movs	r3, #1
 80108cc:	f7ff bbaa 	b.w	8010024 <_strtod_l+0x2ec>
 80108d0:	00000000 	.word	0x00000000
 80108d4:	bff00000 	.word	0xbff00000
 80108d8:	00000000 	.word	0x00000000
 80108dc:	3ff00000 	.word	0x3ff00000
 80108e0:	94a03595 	.word	0x94a03595
 80108e4:	3fdfffff 	.word	0x3fdfffff
 80108e8:	35afe535 	.word	0x35afe535
 80108ec:	3fe00000 	.word	0x3fe00000
 80108f0:	ffc00000 	.word	0xffc00000
 80108f4:	41dfffff 	.word	0x41dfffff
 80108f8:	94a03595 	.word	0x94a03595
 80108fc:	3fcfffff 	.word	0x3fcfffff
 8010900:	3ff00000 	.word	0x3ff00000
 8010904:	3fe00000 	.word	0x3fe00000
 8010908:	7ff00000 	.word	0x7ff00000
 801090c:	7fe00000 	.word	0x7fe00000
 8010910:	7c9fffff 	.word	0x7c9fffff
 8010914:	7fefffff 	.word	0x7fefffff

08010918 <strtof>:
 8010918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801091c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80109e0 <strtof+0xc8>
 8010920:	4b2a      	ldr	r3, [pc, #168]	; (80109cc <strtof+0xb4>)
 8010922:	460a      	mov	r2, r1
 8010924:	ed2d 8b02 	vpush	{d8}
 8010928:	4601      	mov	r1, r0
 801092a:	f8d8 0000 	ldr.w	r0, [r8]
 801092e:	f7ff fa03 	bl	800fd38 <_strtod_l>
 8010932:	ec55 4b10 	vmov	r4, r5, d0
 8010936:	ee10 2a10 	vmov	r2, s0
 801093a:	ee10 0a10 	vmov	r0, s0
 801093e:	462b      	mov	r3, r5
 8010940:	4629      	mov	r1, r5
 8010942:	f7f0 f8f3 	bl	8000b2c <__aeabi_dcmpun>
 8010946:	b190      	cbz	r0, 801096e <strtof+0x56>
 8010948:	2d00      	cmp	r5, #0
 801094a:	4821      	ldr	r0, [pc, #132]	; (80109d0 <strtof+0xb8>)
 801094c:	da09      	bge.n	8010962 <strtof+0x4a>
 801094e:	f001 f897 	bl	8011a80 <nanf>
 8010952:	eeb1 8a40 	vneg.f32	s16, s0
 8010956:	eeb0 0a48 	vmov.f32	s0, s16
 801095a:	ecbd 8b02 	vpop	{d8}
 801095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010962:	ecbd 8b02 	vpop	{d8}
 8010966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801096a:	f001 b889 	b.w	8011a80 <nanf>
 801096e:	4620      	mov	r0, r4
 8010970:	4629      	mov	r1, r5
 8010972:	f7f0 f939 	bl	8000be8 <__aeabi_d2f>
 8010976:	ee08 0a10 	vmov	s16, r0
 801097a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80109d4 <strtof+0xbc>
 801097e:	eeb0 7ac8 	vabs.f32	s14, s16
 8010982:	eeb4 7a67 	vcmp.f32	s14, s15
 8010986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098a:	dd11      	ble.n	80109b0 <strtof+0x98>
 801098c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8010990:	4b11      	ldr	r3, [pc, #68]	; (80109d8 <strtof+0xc0>)
 8010992:	f04f 32ff 	mov.w	r2, #4294967295
 8010996:	4620      	mov	r0, r4
 8010998:	4639      	mov	r1, r7
 801099a:	f7f0 f8c7 	bl	8000b2c <__aeabi_dcmpun>
 801099e:	b980      	cbnz	r0, 80109c2 <strtof+0xaa>
 80109a0:	4b0d      	ldr	r3, [pc, #52]	; (80109d8 <strtof+0xc0>)
 80109a2:	f04f 32ff 	mov.w	r2, #4294967295
 80109a6:	4620      	mov	r0, r4
 80109a8:	4639      	mov	r1, r7
 80109aa:	f7f0 f8a1 	bl	8000af0 <__aeabi_dcmple>
 80109ae:	b940      	cbnz	r0, 80109c2 <strtof+0xaa>
 80109b0:	ee18 3a10 	vmov	r3, s16
 80109b4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80109b8:	d1cd      	bne.n	8010956 <strtof+0x3e>
 80109ba:	4b08      	ldr	r3, [pc, #32]	; (80109dc <strtof+0xc4>)
 80109bc:	402b      	ands	r3, r5
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d0c9      	beq.n	8010956 <strtof+0x3e>
 80109c2:	f8d8 3000 	ldr.w	r3, [r8]
 80109c6:	2222      	movs	r2, #34	; 0x22
 80109c8:	601a      	str	r2, [r3, #0]
 80109ca:	e7c4      	b.n	8010956 <strtof+0x3e>
 80109cc:	20000038 	.word	0x20000038
 80109d0:	08015b59 	.word	0x08015b59
 80109d4:	7f7fffff 	.word	0x7f7fffff
 80109d8:	7fefffff 	.word	0x7fefffff
 80109dc:	7ff00000 	.word	0x7ff00000
 80109e0:	200001f0 	.word	0x200001f0

080109e4 <_strtol_l.constprop.0>:
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ea:	d001      	beq.n	80109f0 <_strtol_l.constprop.0+0xc>
 80109ec:	2b24      	cmp	r3, #36	; 0x24
 80109ee:	d906      	bls.n	80109fe <_strtol_l.constprop.0+0x1a>
 80109f0:	f000 fff8 	bl	80119e4 <__errno>
 80109f4:	2316      	movs	r3, #22
 80109f6:	6003      	str	r3, [r0, #0]
 80109f8:	2000      	movs	r0, #0
 80109fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010ae4 <_strtol_l.constprop.0+0x100>
 8010a02:	460d      	mov	r5, r1
 8010a04:	462e      	mov	r6, r5
 8010a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a0a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010a0e:	f017 0708 	ands.w	r7, r7, #8
 8010a12:	d1f7      	bne.n	8010a04 <_strtol_l.constprop.0+0x20>
 8010a14:	2c2d      	cmp	r4, #45	; 0x2d
 8010a16:	d132      	bne.n	8010a7e <_strtol_l.constprop.0+0x9a>
 8010a18:	782c      	ldrb	r4, [r5, #0]
 8010a1a:	2701      	movs	r7, #1
 8010a1c:	1cb5      	adds	r5, r6, #2
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d05b      	beq.n	8010ada <_strtol_l.constprop.0+0xf6>
 8010a22:	2b10      	cmp	r3, #16
 8010a24:	d109      	bne.n	8010a3a <_strtol_l.constprop.0+0x56>
 8010a26:	2c30      	cmp	r4, #48	; 0x30
 8010a28:	d107      	bne.n	8010a3a <_strtol_l.constprop.0+0x56>
 8010a2a:	782c      	ldrb	r4, [r5, #0]
 8010a2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010a30:	2c58      	cmp	r4, #88	; 0x58
 8010a32:	d14d      	bne.n	8010ad0 <_strtol_l.constprop.0+0xec>
 8010a34:	786c      	ldrb	r4, [r5, #1]
 8010a36:	2310      	movs	r3, #16
 8010a38:	3502      	adds	r5, #2
 8010a3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010a3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a42:	f04f 0e00 	mov.w	lr, #0
 8010a46:	fbb8 f9f3 	udiv	r9, r8, r3
 8010a4a:	4676      	mov	r6, lr
 8010a4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8010a50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010a54:	f1bc 0f09 	cmp.w	ip, #9
 8010a58:	d816      	bhi.n	8010a88 <_strtol_l.constprop.0+0xa4>
 8010a5a:	4664      	mov	r4, ip
 8010a5c:	42a3      	cmp	r3, r4
 8010a5e:	dd24      	ble.n	8010aaa <_strtol_l.constprop.0+0xc6>
 8010a60:	f1be 3fff 	cmp.w	lr, #4294967295
 8010a64:	d008      	beq.n	8010a78 <_strtol_l.constprop.0+0x94>
 8010a66:	45b1      	cmp	r9, r6
 8010a68:	d31c      	bcc.n	8010aa4 <_strtol_l.constprop.0+0xc0>
 8010a6a:	d101      	bne.n	8010a70 <_strtol_l.constprop.0+0x8c>
 8010a6c:	45a2      	cmp	sl, r4
 8010a6e:	db19      	blt.n	8010aa4 <_strtol_l.constprop.0+0xc0>
 8010a70:	fb06 4603 	mla	r6, r6, r3, r4
 8010a74:	f04f 0e01 	mov.w	lr, #1
 8010a78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a7c:	e7e8      	b.n	8010a50 <_strtol_l.constprop.0+0x6c>
 8010a7e:	2c2b      	cmp	r4, #43	; 0x2b
 8010a80:	bf04      	itt	eq
 8010a82:	782c      	ldrbeq	r4, [r5, #0]
 8010a84:	1cb5      	addeq	r5, r6, #2
 8010a86:	e7ca      	b.n	8010a1e <_strtol_l.constprop.0+0x3a>
 8010a88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010a8c:	f1bc 0f19 	cmp.w	ip, #25
 8010a90:	d801      	bhi.n	8010a96 <_strtol_l.constprop.0+0xb2>
 8010a92:	3c37      	subs	r4, #55	; 0x37
 8010a94:	e7e2      	b.n	8010a5c <_strtol_l.constprop.0+0x78>
 8010a96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010a9a:	f1bc 0f19 	cmp.w	ip, #25
 8010a9e:	d804      	bhi.n	8010aaa <_strtol_l.constprop.0+0xc6>
 8010aa0:	3c57      	subs	r4, #87	; 0x57
 8010aa2:	e7db      	b.n	8010a5c <_strtol_l.constprop.0+0x78>
 8010aa4:	f04f 3eff 	mov.w	lr, #4294967295
 8010aa8:	e7e6      	b.n	8010a78 <_strtol_l.constprop.0+0x94>
 8010aaa:	f1be 3fff 	cmp.w	lr, #4294967295
 8010aae:	d105      	bne.n	8010abc <_strtol_l.constprop.0+0xd8>
 8010ab0:	2322      	movs	r3, #34	; 0x22
 8010ab2:	6003      	str	r3, [r0, #0]
 8010ab4:	4646      	mov	r6, r8
 8010ab6:	b942      	cbnz	r2, 8010aca <_strtol_l.constprop.0+0xe6>
 8010ab8:	4630      	mov	r0, r6
 8010aba:	e79e      	b.n	80109fa <_strtol_l.constprop.0+0x16>
 8010abc:	b107      	cbz	r7, 8010ac0 <_strtol_l.constprop.0+0xdc>
 8010abe:	4276      	negs	r6, r6
 8010ac0:	2a00      	cmp	r2, #0
 8010ac2:	d0f9      	beq.n	8010ab8 <_strtol_l.constprop.0+0xd4>
 8010ac4:	f1be 0f00 	cmp.w	lr, #0
 8010ac8:	d000      	beq.n	8010acc <_strtol_l.constprop.0+0xe8>
 8010aca:	1e69      	subs	r1, r5, #1
 8010acc:	6011      	str	r1, [r2, #0]
 8010ace:	e7f3      	b.n	8010ab8 <_strtol_l.constprop.0+0xd4>
 8010ad0:	2430      	movs	r4, #48	; 0x30
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d1b1      	bne.n	8010a3a <_strtol_l.constprop.0+0x56>
 8010ad6:	2308      	movs	r3, #8
 8010ad8:	e7af      	b.n	8010a3a <_strtol_l.constprop.0+0x56>
 8010ada:	2c30      	cmp	r4, #48	; 0x30
 8010adc:	d0a5      	beq.n	8010a2a <_strtol_l.constprop.0+0x46>
 8010ade:	230a      	movs	r3, #10
 8010ae0:	e7ab      	b.n	8010a3a <_strtol_l.constprop.0+0x56>
 8010ae2:	bf00      	nop
 8010ae4:	08015971 	.word	0x08015971

08010ae8 <strtol>:
 8010ae8:	4613      	mov	r3, r2
 8010aea:	460a      	mov	r2, r1
 8010aec:	4601      	mov	r1, r0
 8010aee:	4802      	ldr	r0, [pc, #8]	; (8010af8 <strtol+0x10>)
 8010af0:	6800      	ldr	r0, [r0, #0]
 8010af2:	f7ff bf77 	b.w	80109e4 <_strtol_l.constprop.0>
 8010af6:	bf00      	nop
 8010af8:	200001f0 	.word	0x200001f0

08010afc <__cvt>:
 8010afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b00:	ec55 4b10 	vmov	r4, r5, d0
 8010b04:	2d00      	cmp	r5, #0
 8010b06:	460e      	mov	r6, r1
 8010b08:	4619      	mov	r1, r3
 8010b0a:	462b      	mov	r3, r5
 8010b0c:	bfbb      	ittet	lt
 8010b0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010b12:	461d      	movlt	r5, r3
 8010b14:	2300      	movge	r3, #0
 8010b16:	232d      	movlt	r3, #45	; 0x2d
 8010b18:	700b      	strb	r3, [r1, #0]
 8010b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010b20:	4691      	mov	r9, r2
 8010b22:	f023 0820 	bic.w	r8, r3, #32
 8010b26:	bfbc      	itt	lt
 8010b28:	4622      	movlt	r2, r4
 8010b2a:	4614      	movlt	r4, r2
 8010b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b30:	d005      	beq.n	8010b3e <__cvt+0x42>
 8010b32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010b36:	d100      	bne.n	8010b3a <__cvt+0x3e>
 8010b38:	3601      	adds	r6, #1
 8010b3a:	2102      	movs	r1, #2
 8010b3c:	e000      	b.n	8010b40 <__cvt+0x44>
 8010b3e:	2103      	movs	r1, #3
 8010b40:	ab03      	add	r3, sp, #12
 8010b42:	9301      	str	r3, [sp, #4]
 8010b44:	ab02      	add	r3, sp, #8
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	ec45 4b10 	vmov	d0, r4, r5
 8010b4c:	4653      	mov	r3, sl
 8010b4e:	4632      	mov	r2, r6
 8010b50:	f001 f842 	bl	8011bd8 <_dtoa_r>
 8010b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010b58:	4607      	mov	r7, r0
 8010b5a:	d102      	bne.n	8010b62 <__cvt+0x66>
 8010b5c:	f019 0f01 	tst.w	r9, #1
 8010b60:	d022      	beq.n	8010ba8 <__cvt+0xac>
 8010b62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b66:	eb07 0906 	add.w	r9, r7, r6
 8010b6a:	d110      	bne.n	8010b8e <__cvt+0x92>
 8010b6c:	783b      	ldrb	r3, [r7, #0]
 8010b6e:	2b30      	cmp	r3, #48	; 0x30
 8010b70:	d10a      	bne.n	8010b88 <__cvt+0x8c>
 8010b72:	2200      	movs	r2, #0
 8010b74:	2300      	movs	r3, #0
 8010b76:	4620      	mov	r0, r4
 8010b78:	4629      	mov	r1, r5
 8010b7a:	f7ef ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b7e:	b918      	cbnz	r0, 8010b88 <__cvt+0x8c>
 8010b80:	f1c6 0601 	rsb	r6, r6, #1
 8010b84:	f8ca 6000 	str.w	r6, [sl]
 8010b88:	f8da 3000 	ldr.w	r3, [sl]
 8010b8c:	4499      	add	r9, r3
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2300      	movs	r3, #0
 8010b92:	4620      	mov	r0, r4
 8010b94:	4629      	mov	r1, r5
 8010b96:	f7ef ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b9a:	b108      	cbz	r0, 8010ba0 <__cvt+0xa4>
 8010b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ba0:	2230      	movs	r2, #48	; 0x30
 8010ba2:	9b03      	ldr	r3, [sp, #12]
 8010ba4:	454b      	cmp	r3, r9
 8010ba6:	d307      	bcc.n	8010bb8 <__cvt+0xbc>
 8010ba8:	9b03      	ldr	r3, [sp, #12]
 8010baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010bac:	1bdb      	subs	r3, r3, r7
 8010bae:	4638      	mov	r0, r7
 8010bb0:	6013      	str	r3, [r2, #0]
 8010bb2:	b004      	add	sp, #16
 8010bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bb8:	1c59      	adds	r1, r3, #1
 8010bba:	9103      	str	r1, [sp, #12]
 8010bbc:	701a      	strb	r2, [r3, #0]
 8010bbe:	e7f0      	b.n	8010ba2 <__cvt+0xa6>

08010bc0 <__exponent>:
 8010bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	bfb8      	it	lt
 8010bc8:	4249      	neglt	r1, r1
 8010bca:	f803 2b02 	strb.w	r2, [r3], #2
 8010bce:	bfb4      	ite	lt
 8010bd0:	222d      	movlt	r2, #45	; 0x2d
 8010bd2:	222b      	movge	r2, #43	; 0x2b
 8010bd4:	2909      	cmp	r1, #9
 8010bd6:	7042      	strb	r2, [r0, #1]
 8010bd8:	dd2a      	ble.n	8010c30 <__exponent+0x70>
 8010bda:	f10d 0207 	add.w	r2, sp, #7
 8010bde:	4617      	mov	r7, r2
 8010be0:	260a      	movs	r6, #10
 8010be2:	4694      	mov	ip, r2
 8010be4:	fb91 f5f6 	sdiv	r5, r1, r6
 8010be8:	fb06 1415 	mls	r4, r6, r5, r1
 8010bec:	3430      	adds	r4, #48	; 0x30
 8010bee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010bf2:	460c      	mov	r4, r1
 8010bf4:	2c63      	cmp	r4, #99	; 0x63
 8010bf6:	f102 32ff 	add.w	r2, r2, #4294967295
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	dcf1      	bgt.n	8010be2 <__exponent+0x22>
 8010bfe:	3130      	adds	r1, #48	; 0x30
 8010c00:	f1ac 0402 	sub.w	r4, ip, #2
 8010c04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010c08:	1c41      	adds	r1, r0, #1
 8010c0a:	4622      	mov	r2, r4
 8010c0c:	42ba      	cmp	r2, r7
 8010c0e:	d30a      	bcc.n	8010c26 <__exponent+0x66>
 8010c10:	f10d 0209 	add.w	r2, sp, #9
 8010c14:	eba2 020c 	sub.w	r2, r2, ip
 8010c18:	42bc      	cmp	r4, r7
 8010c1a:	bf88      	it	hi
 8010c1c:	2200      	movhi	r2, #0
 8010c1e:	4413      	add	r3, r2
 8010c20:	1a18      	subs	r0, r3, r0
 8010c22:	b003      	add	sp, #12
 8010c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010c2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010c2e:	e7ed      	b.n	8010c0c <__exponent+0x4c>
 8010c30:	2330      	movs	r3, #48	; 0x30
 8010c32:	3130      	adds	r1, #48	; 0x30
 8010c34:	7083      	strb	r3, [r0, #2]
 8010c36:	70c1      	strb	r1, [r0, #3]
 8010c38:	1d03      	adds	r3, r0, #4
 8010c3a:	e7f1      	b.n	8010c20 <__exponent+0x60>

08010c3c <_printf_float>:
 8010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	ed2d 8b02 	vpush	{d8}
 8010c44:	b08d      	sub	sp, #52	; 0x34
 8010c46:	460c      	mov	r4, r1
 8010c48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010c4c:	4616      	mov	r6, r2
 8010c4e:	461f      	mov	r7, r3
 8010c50:	4605      	mov	r5, r0
 8010c52:	f000 fe6d 	bl	8011930 <_localeconv_r>
 8010c56:	f8d0 a000 	ldr.w	sl, [r0]
 8010c5a:	4650      	mov	r0, sl
 8010c5c:	f7ef fb08 	bl	8000270 <strlen>
 8010c60:	2300      	movs	r3, #0
 8010c62:	930a      	str	r3, [sp, #40]	; 0x28
 8010c64:	6823      	ldr	r3, [r4, #0]
 8010c66:	9305      	str	r3, [sp, #20]
 8010c68:	f8d8 3000 	ldr.w	r3, [r8]
 8010c6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c70:	3307      	adds	r3, #7
 8010c72:	f023 0307 	bic.w	r3, r3, #7
 8010c76:	f103 0208 	add.w	r2, r3, #8
 8010c7a:	f8c8 2000 	str.w	r2, [r8]
 8010c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c86:	9307      	str	r3, [sp, #28]
 8010c88:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c8c:	ee08 0a10 	vmov	s16, r0
 8010c90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c98:	4b9e      	ldr	r3, [pc, #632]	; (8010f14 <_printf_float+0x2d8>)
 8010c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c9e:	f7ef ff45 	bl	8000b2c <__aeabi_dcmpun>
 8010ca2:	bb88      	cbnz	r0, 8010d08 <_printf_float+0xcc>
 8010ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ca8:	4b9a      	ldr	r3, [pc, #616]	; (8010f14 <_printf_float+0x2d8>)
 8010caa:	f04f 32ff 	mov.w	r2, #4294967295
 8010cae:	f7ef ff1f 	bl	8000af0 <__aeabi_dcmple>
 8010cb2:	bb48      	cbnz	r0, 8010d08 <_printf_float+0xcc>
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	4640      	mov	r0, r8
 8010cba:	4649      	mov	r1, r9
 8010cbc:	f7ef ff0e 	bl	8000adc <__aeabi_dcmplt>
 8010cc0:	b110      	cbz	r0, 8010cc8 <_printf_float+0x8c>
 8010cc2:	232d      	movs	r3, #45	; 0x2d
 8010cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cc8:	4a93      	ldr	r2, [pc, #588]	; (8010f18 <_printf_float+0x2dc>)
 8010cca:	4b94      	ldr	r3, [pc, #592]	; (8010f1c <_printf_float+0x2e0>)
 8010ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010cd0:	bf94      	ite	ls
 8010cd2:	4690      	movls	r8, r2
 8010cd4:	4698      	movhi	r8, r3
 8010cd6:	2303      	movs	r3, #3
 8010cd8:	6123      	str	r3, [r4, #16]
 8010cda:	9b05      	ldr	r3, [sp, #20]
 8010cdc:	f023 0304 	bic.w	r3, r3, #4
 8010ce0:	6023      	str	r3, [r4, #0]
 8010ce2:	f04f 0900 	mov.w	r9, #0
 8010ce6:	9700      	str	r7, [sp, #0]
 8010ce8:	4633      	mov	r3, r6
 8010cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8010cec:	4621      	mov	r1, r4
 8010cee:	4628      	mov	r0, r5
 8010cf0:	f000 f9da 	bl	80110a8 <_printf_common>
 8010cf4:	3001      	adds	r0, #1
 8010cf6:	f040 8090 	bne.w	8010e1a <_printf_float+0x1de>
 8010cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010cfe:	b00d      	add	sp, #52	; 0x34
 8010d00:	ecbd 8b02 	vpop	{d8}
 8010d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d08:	4642      	mov	r2, r8
 8010d0a:	464b      	mov	r3, r9
 8010d0c:	4640      	mov	r0, r8
 8010d0e:	4649      	mov	r1, r9
 8010d10:	f7ef ff0c 	bl	8000b2c <__aeabi_dcmpun>
 8010d14:	b140      	cbz	r0, 8010d28 <_printf_float+0xec>
 8010d16:	464b      	mov	r3, r9
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	bfbc      	itt	lt
 8010d1c:	232d      	movlt	r3, #45	; 0x2d
 8010d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010d22:	4a7f      	ldr	r2, [pc, #508]	; (8010f20 <_printf_float+0x2e4>)
 8010d24:	4b7f      	ldr	r3, [pc, #508]	; (8010f24 <_printf_float+0x2e8>)
 8010d26:	e7d1      	b.n	8010ccc <_printf_float+0x90>
 8010d28:	6863      	ldr	r3, [r4, #4]
 8010d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010d2e:	9206      	str	r2, [sp, #24]
 8010d30:	1c5a      	adds	r2, r3, #1
 8010d32:	d13f      	bne.n	8010db4 <_printf_float+0x178>
 8010d34:	2306      	movs	r3, #6
 8010d36:	6063      	str	r3, [r4, #4]
 8010d38:	9b05      	ldr	r3, [sp, #20]
 8010d3a:	6861      	ldr	r1, [r4, #4]
 8010d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010d40:	2300      	movs	r3, #0
 8010d42:	9303      	str	r3, [sp, #12]
 8010d44:	ab0a      	add	r3, sp, #40	; 0x28
 8010d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010d4a:	ab09      	add	r3, sp, #36	; 0x24
 8010d4c:	ec49 8b10 	vmov	d0, r8, r9
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	6022      	str	r2, [r4, #0]
 8010d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f7ff fecf 	bl	8010afc <__cvt>
 8010d5e:	9b06      	ldr	r3, [sp, #24]
 8010d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d62:	2b47      	cmp	r3, #71	; 0x47
 8010d64:	4680      	mov	r8, r0
 8010d66:	d108      	bne.n	8010d7a <_printf_float+0x13e>
 8010d68:	1cc8      	adds	r0, r1, #3
 8010d6a:	db02      	blt.n	8010d72 <_printf_float+0x136>
 8010d6c:	6863      	ldr	r3, [r4, #4]
 8010d6e:	4299      	cmp	r1, r3
 8010d70:	dd41      	ble.n	8010df6 <_printf_float+0x1ba>
 8010d72:	f1ab 0302 	sub.w	r3, fp, #2
 8010d76:	fa5f fb83 	uxtb.w	fp, r3
 8010d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d7e:	d820      	bhi.n	8010dc2 <_printf_float+0x186>
 8010d80:	3901      	subs	r1, #1
 8010d82:	465a      	mov	r2, fp
 8010d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d88:	9109      	str	r1, [sp, #36]	; 0x24
 8010d8a:	f7ff ff19 	bl	8010bc0 <__exponent>
 8010d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d90:	1813      	adds	r3, r2, r0
 8010d92:	2a01      	cmp	r2, #1
 8010d94:	4681      	mov	r9, r0
 8010d96:	6123      	str	r3, [r4, #16]
 8010d98:	dc02      	bgt.n	8010da0 <_printf_float+0x164>
 8010d9a:	6822      	ldr	r2, [r4, #0]
 8010d9c:	07d2      	lsls	r2, r2, #31
 8010d9e:	d501      	bpl.n	8010da4 <_printf_float+0x168>
 8010da0:	3301      	adds	r3, #1
 8010da2:	6123      	str	r3, [r4, #16]
 8010da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d09c      	beq.n	8010ce6 <_printf_float+0xaa>
 8010dac:	232d      	movs	r3, #45	; 0x2d
 8010dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010db2:	e798      	b.n	8010ce6 <_printf_float+0xaa>
 8010db4:	9a06      	ldr	r2, [sp, #24]
 8010db6:	2a47      	cmp	r2, #71	; 0x47
 8010db8:	d1be      	bne.n	8010d38 <_printf_float+0xfc>
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1bc      	bne.n	8010d38 <_printf_float+0xfc>
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e7b9      	b.n	8010d36 <_printf_float+0xfa>
 8010dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010dc6:	d118      	bne.n	8010dfa <_printf_float+0x1be>
 8010dc8:	2900      	cmp	r1, #0
 8010dca:	6863      	ldr	r3, [r4, #4]
 8010dcc:	dd0b      	ble.n	8010de6 <_printf_float+0x1aa>
 8010dce:	6121      	str	r1, [r4, #16]
 8010dd0:	b913      	cbnz	r3, 8010dd8 <_printf_float+0x19c>
 8010dd2:	6822      	ldr	r2, [r4, #0]
 8010dd4:	07d0      	lsls	r0, r2, #31
 8010dd6:	d502      	bpl.n	8010dde <_printf_float+0x1a2>
 8010dd8:	3301      	adds	r3, #1
 8010dda:	440b      	add	r3, r1
 8010ddc:	6123      	str	r3, [r4, #16]
 8010dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8010de0:	f04f 0900 	mov.w	r9, #0
 8010de4:	e7de      	b.n	8010da4 <_printf_float+0x168>
 8010de6:	b913      	cbnz	r3, 8010dee <_printf_float+0x1b2>
 8010de8:	6822      	ldr	r2, [r4, #0]
 8010dea:	07d2      	lsls	r2, r2, #31
 8010dec:	d501      	bpl.n	8010df2 <_printf_float+0x1b6>
 8010dee:	3302      	adds	r3, #2
 8010df0:	e7f4      	b.n	8010ddc <_printf_float+0x1a0>
 8010df2:	2301      	movs	r3, #1
 8010df4:	e7f2      	b.n	8010ddc <_printf_float+0x1a0>
 8010df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dfc:	4299      	cmp	r1, r3
 8010dfe:	db05      	blt.n	8010e0c <_printf_float+0x1d0>
 8010e00:	6823      	ldr	r3, [r4, #0]
 8010e02:	6121      	str	r1, [r4, #16]
 8010e04:	07d8      	lsls	r0, r3, #31
 8010e06:	d5ea      	bpl.n	8010dde <_printf_float+0x1a2>
 8010e08:	1c4b      	adds	r3, r1, #1
 8010e0a:	e7e7      	b.n	8010ddc <_printf_float+0x1a0>
 8010e0c:	2900      	cmp	r1, #0
 8010e0e:	bfd4      	ite	le
 8010e10:	f1c1 0202 	rsble	r2, r1, #2
 8010e14:	2201      	movgt	r2, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	e7e0      	b.n	8010ddc <_printf_float+0x1a0>
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	055a      	lsls	r2, r3, #21
 8010e1e:	d407      	bmi.n	8010e30 <_printf_float+0x1f4>
 8010e20:	6923      	ldr	r3, [r4, #16]
 8010e22:	4642      	mov	r2, r8
 8010e24:	4631      	mov	r1, r6
 8010e26:	4628      	mov	r0, r5
 8010e28:	47b8      	blx	r7
 8010e2a:	3001      	adds	r0, #1
 8010e2c:	d12c      	bne.n	8010e88 <_printf_float+0x24c>
 8010e2e:	e764      	b.n	8010cfa <_printf_float+0xbe>
 8010e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010e34:	f240 80e0 	bls.w	8010ff8 <_printf_float+0x3bc>
 8010e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	f7ef fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d034      	beq.n	8010eb2 <_printf_float+0x276>
 8010e48:	4a37      	ldr	r2, [pc, #220]	; (8010f28 <_printf_float+0x2ec>)
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4628      	mov	r0, r5
 8010e50:	47b8      	blx	r7
 8010e52:	3001      	adds	r0, #1
 8010e54:	f43f af51 	beq.w	8010cfa <_printf_float+0xbe>
 8010e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	db02      	blt.n	8010e66 <_printf_float+0x22a>
 8010e60:	6823      	ldr	r3, [r4, #0]
 8010e62:	07d8      	lsls	r0, r3, #31
 8010e64:	d510      	bpl.n	8010e88 <_printf_float+0x24c>
 8010e66:	ee18 3a10 	vmov	r3, s16
 8010e6a:	4652      	mov	r2, sl
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4628      	mov	r0, r5
 8010e70:	47b8      	blx	r7
 8010e72:	3001      	adds	r0, #1
 8010e74:	f43f af41 	beq.w	8010cfa <_printf_float+0xbe>
 8010e78:	f04f 0800 	mov.w	r8, #0
 8010e7c:	f104 091a 	add.w	r9, r4, #26
 8010e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e82:	3b01      	subs	r3, #1
 8010e84:	4543      	cmp	r3, r8
 8010e86:	dc09      	bgt.n	8010e9c <_printf_float+0x260>
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	079b      	lsls	r3, r3, #30
 8010e8c:	f100 8107 	bmi.w	801109e <_printf_float+0x462>
 8010e90:	68e0      	ldr	r0, [r4, #12]
 8010e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e94:	4298      	cmp	r0, r3
 8010e96:	bfb8      	it	lt
 8010e98:	4618      	movlt	r0, r3
 8010e9a:	e730      	b.n	8010cfe <_printf_float+0xc2>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	464a      	mov	r2, r9
 8010ea0:	4631      	mov	r1, r6
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	47b8      	blx	r7
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	f43f af27 	beq.w	8010cfa <_printf_float+0xbe>
 8010eac:	f108 0801 	add.w	r8, r8, #1
 8010eb0:	e7e6      	b.n	8010e80 <_printf_float+0x244>
 8010eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	dc39      	bgt.n	8010f2c <_printf_float+0x2f0>
 8010eb8:	4a1b      	ldr	r2, [pc, #108]	; (8010f28 <_printf_float+0x2ec>)
 8010eba:	2301      	movs	r3, #1
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	47b8      	blx	r7
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	f43f af19 	beq.w	8010cfa <_printf_float+0xbe>
 8010ec8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010ecc:	4313      	orrs	r3, r2
 8010ece:	d102      	bne.n	8010ed6 <_printf_float+0x29a>
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	07d9      	lsls	r1, r3, #31
 8010ed4:	d5d8      	bpl.n	8010e88 <_printf_float+0x24c>
 8010ed6:	ee18 3a10 	vmov	r3, s16
 8010eda:	4652      	mov	r2, sl
 8010edc:	4631      	mov	r1, r6
 8010ede:	4628      	mov	r0, r5
 8010ee0:	47b8      	blx	r7
 8010ee2:	3001      	adds	r0, #1
 8010ee4:	f43f af09 	beq.w	8010cfa <_printf_float+0xbe>
 8010ee8:	f04f 0900 	mov.w	r9, #0
 8010eec:	f104 0a1a 	add.w	sl, r4, #26
 8010ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ef2:	425b      	negs	r3, r3
 8010ef4:	454b      	cmp	r3, r9
 8010ef6:	dc01      	bgt.n	8010efc <_printf_float+0x2c0>
 8010ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010efa:	e792      	b.n	8010e22 <_printf_float+0x1e6>
 8010efc:	2301      	movs	r3, #1
 8010efe:	4652      	mov	r2, sl
 8010f00:	4631      	mov	r1, r6
 8010f02:	4628      	mov	r0, r5
 8010f04:	47b8      	blx	r7
 8010f06:	3001      	adds	r0, #1
 8010f08:	f43f aef7 	beq.w	8010cfa <_printf_float+0xbe>
 8010f0c:	f109 0901 	add.w	r9, r9, #1
 8010f10:	e7ee      	b.n	8010ef0 <_printf_float+0x2b4>
 8010f12:	bf00      	nop
 8010f14:	7fefffff 	.word	0x7fefffff
 8010f18:	08015a71 	.word	0x08015a71
 8010f1c:	08015a75 	.word	0x08015a75
 8010f20:	08015a79 	.word	0x08015a79
 8010f24:	08015a7d 	.word	0x08015a7d
 8010f28:	08015a81 	.word	0x08015a81
 8010f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f30:	429a      	cmp	r2, r3
 8010f32:	bfa8      	it	ge
 8010f34:	461a      	movge	r2, r3
 8010f36:	2a00      	cmp	r2, #0
 8010f38:	4691      	mov	r9, r2
 8010f3a:	dc37      	bgt.n	8010fac <_printf_float+0x370>
 8010f3c:	f04f 0b00 	mov.w	fp, #0
 8010f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f44:	f104 021a 	add.w	r2, r4, #26
 8010f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010f4a:	9305      	str	r3, [sp, #20]
 8010f4c:	eba3 0309 	sub.w	r3, r3, r9
 8010f50:	455b      	cmp	r3, fp
 8010f52:	dc33      	bgt.n	8010fbc <_printf_float+0x380>
 8010f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	db3b      	blt.n	8010fd4 <_printf_float+0x398>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	07da      	lsls	r2, r3, #31
 8010f60:	d438      	bmi.n	8010fd4 <_printf_float+0x398>
 8010f62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010f66:	eba2 0903 	sub.w	r9, r2, r3
 8010f6a:	9b05      	ldr	r3, [sp, #20]
 8010f6c:	1ad2      	subs	r2, r2, r3
 8010f6e:	4591      	cmp	r9, r2
 8010f70:	bfa8      	it	ge
 8010f72:	4691      	movge	r9, r2
 8010f74:	f1b9 0f00 	cmp.w	r9, #0
 8010f78:	dc35      	bgt.n	8010fe6 <_printf_float+0x3aa>
 8010f7a:	f04f 0800 	mov.w	r8, #0
 8010f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f82:	f104 0a1a 	add.w	sl, r4, #26
 8010f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f8a:	1a9b      	subs	r3, r3, r2
 8010f8c:	eba3 0309 	sub.w	r3, r3, r9
 8010f90:	4543      	cmp	r3, r8
 8010f92:	f77f af79 	ble.w	8010e88 <_printf_float+0x24c>
 8010f96:	2301      	movs	r3, #1
 8010f98:	4652      	mov	r2, sl
 8010f9a:	4631      	mov	r1, r6
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	47b8      	blx	r7
 8010fa0:	3001      	adds	r0, #1
 8010fa2:	f43f aeaa 	beq.w	8010cfa <_printf_float+0xbe>
 8010fa6:	f108 0801 	add.w	r8, r8, #1
 8010faa:	e7ec      	b.n	8010f86 <_printf_float+0x34a>
 8010fac:	4613      	mov	r3, r2
 8010fae:	4631      	mov	r1, r6
 8010fb0:	4642      	mov	r2, r8
 8010fb2:	4628      	mov	r0, r5
 8010fb4:	47b8      	blx	r7
 8010fb6:	3001      	adds	r0, #1
 8010fb8:	d1c0      	bne.n	8010f3c <_printf_float+0x300>
 8010fba:	e69e      	b.n	8010cfa <_printf_float+0xbe>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	4631      	mov	r1, r6
 8010fc0:	4628      	mov	r0, r5
 8010fc2:	9205      	str	r2, [sp, #20]
 8010fc4:	47b8      	blx	r7
 8010fc6:	3001      	adds	r0, #1
 8010fc8:	f43f ae97 	beq.w	8010cfa <_printf_float+0xbe>
 8010fcc:	9a05      	ldr	r2, [sp, #20]
 8010fce:	f10b 0b01 	add.w	fp, fp, #1
 8010fd2:	e7b9      	b.n	8010f48 <_printf_float+0x30c>
 8010fd4:	ee18 3a10 	vmov	r3, s16
 8010fd8:	4652      	mov	r2, sl
 8010fda:	4631      	mov	r1, r6
 8010fdc:	4628      	mov	r0, r5
 8010fde:	47b8      	blx	r7
 8010fe0:	3001      	adds	r0, #1
 8010fe2:	d1be      	bne.n	8010f62 <_printf_float+0x326>
 8010fe4:	e689      	b.n	8010cfa <_printf_float+0xbe>
 8010fe6:	9a05      	ldr	r2, [sp, #20]
 8010fe8:	464b      	mov	r3, r9
 8010fea:	4442      	add	r2, r8
 8010fec:	4631      	mov	r1, r6
 8010fee:	4628      	mov	r0, r5
 8010ff0:	47b8      	blx	r7
 8010ff2:	3001      	adds	r0, #1
 8010ff4:	d1c1      	bne.n	8010f7a <_printf_float+0x33e>
 8010ff6:	e680      	b.n	8010cfa <_printf_float+0xbe>
 8010ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ffa:	2a01      	cmp	r2, #1
 8010ffc:	dc01      	bgt.n	8011002 <_printf_float+0x3c6>
 8010ffe:	07db      	lsls	r3, r3, #31
 8011000:	d53a      	bpl.n	8011078 <_printf_float+0x43c>
 8011002:	2301      	movs	r3, #1
 8011004:	4642      	mov	r2, r8
 8011006:	4631      	mov	r1, r6
 8011008:	4628      	mov	r0, r5
 801100a:	47b8      	blx	r7
 801100c:	3001      	adds	r0, #1
 801100e:	f43f ae74 	beq.w	8010cfa <_printf_float+0xbe>
 8011012:	ee18 3a10 	vmov	r3, s16
 8011016:	4652      	mov	r2, sl
 8011018:	4631      	mov	r1, r6
 801101a:	4628      	mov	r0, r5
 801101c:	47b8      	blx	r7
 801101e:	3001      	adds	r0, #1
 8011020:	f43f ae6b 	beq.w	8010cfa <_printf_float+0xbe>
 8011024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011028:	2200      	movs	r2, #0
 801102a:	2300      	movs	r3, #0
 801102c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011030:	f7ef fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011034:	b9d8      	cbnz	r0, 801106e <_printf_float+0x432>
 8011036:	f10a 33ff 	add.w	r3, sl, #4294967295
 801103a:	f108 0201 	add.w	r2, r8, #1
 801103e:	4631      	mov	r1, r6
 8011040:	4628      	mov	r0, r5
 8011042:	47b8      	blx	r7
 8011044:	3001      	adds	r0, #1
 8011046:	d10e      	bne.n	8011066 <_printf_float+0x42a>
 8011048:	e657      	b.n	8010cfa <_printf_float+0xbe>
 801104a:	2301      	movs	r3, #1
 801104c:	4652      	mov	r2, sl
 801104e:	4631      	mov	r1, r6
 8011050:	4628      	mov	r0, r5
 8011052:	47b8      	blx	r7
 8011054:	3001      	adds	r0, #1
 8011056:	f43f ae50 	beq.w	8010cfa <_printf_float+0xbe>
 801105a:	f108 0801 	add.w	r8, r8, #1
 801105e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011060:	3b01      	subs	r3, #1
 8011062:	4543      	cmp	r3, r8
 8011064:	dcf1      	bgt.n	801104a <_printf_float+0x40e>
 8011066:	464b      	mov	r3, r9
 8011068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801106c:	e6da      	b.n	8010e24 <_printf_float+0x1e8>
 801106e:	f04f 0800 	mov.w	r8, #0
 8011072:	f104 0a1a 	add.w	sl, r4, #26
 8011076:	e7f2      	b.n	801105e <_printf_float+0x422>
 8011078:	2301      	movs	r3, #1
 801107a:	4642      	mov	r2, r8
 801107c:	e7df      	b.n	801103e <_printf_float+0x402>
 801107e:	2301      	movs	r3, #1
 8011080:	464a      	mov	r2, r9
 8011082:	4631      	mov	r1, r6
 8011084:	4628      	mov	r0, r5
 8011086:	47b8      	blx	r7
 8011088:	3001      	adds	r0, #1
 801108a:	f43f ae36 	beq.w	8010cfa <_printf_float+0xbe>
 801108e:	f108 0801 	add.w	r8, r8, #1
 8011092:	68e3      	ldr	r3, [r4, #12]
 8011094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011096:	1a5b      	subs	r3, r3, r1
 8011098:	4543      	cmp	r3, r8
 801109a:	dcf0      	bgt.n	801107e <_printf_float+0x442>
 801109c:	e6f8      	b.n	8010e90 <_printf_float+0x254>
 801109e:	f04f 0800 	mov.w	r8, #0
 80110a2:	f104 0919 	add.w	r9, r4, #25
 80110a6:	e7f4      	b.n	8011092 <_printf_float+0x456>

080110a8 <_printf_common>:
 80110a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110ac:	4616      	mov	r6, r2
 80110ae:	4699      	mov	r9, r3
 80110b0:	688a      	ldr	r2, [r1, #8]
 80110b2:	690b      	ldr	r3, [r1, #16]
 80110b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110b8:	4293      	cmp	r3, r2
 80110ba:	bfb8      	it	lt
 80110bc:	4613      	movlt	r3, r2
 80110be:	6033      	str	r3, [r6, #0]
 80110c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110c4:	4607      	mov	r7, r0
 80110c6:	460c      	mov	r4, r1
 80110c8:	b10a      	cbz	r2, 80110ce <_printf_common+0x26>
 80110ca:	3301      	adds	r3, #1
 80110cc:	6033      	str	r3, [r6, #0]
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	0699      	lsls	r1, r3, #26
 80110d2:	bf42      	ittt	mi
 80110d4:	6833      	ldrmi	r3, [r6, #0]
 80110d6:	3302      	addmi	r3, #2
 80110d8:	6033      	strmi	r3, [r6, #0]
 80110da:	6825      	ldr	r5, [r4, #0]
 80110dc:	f015 0506 	ands.w	r5, r5, #6
 80110e0:	d106      	bne.n	80110f0 <_printf_common+0x48>
 80110e2:	f104 0a19 	add.w	sl, r4, #25
 80110e6:	68e3      	ldr	r3, [r4, #12]
 80110e8:	6832      	ldr	r2, [r6, #0]
 80110ea:	1a9b      	subs	r3, r3, r2
 80110ec:	42ab      	cmp	r3, r5
 80110ee:	dc26      	bgt.n	801113e <_printf_common+0x96>
 80110f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80110f4:	1e13      	subs	r3, r2, #0
 80110f6:	6822      	ldr	r2, [r4, #0]
 80110f8:	bf18      	it	ne
 80110fa:	2301      	movne	r3, #1
 80110fc:	0692      	lsls	r2, r2, #26
 80110fe:	d42b      	bmi.n	8011158 <_printf_common+0xb0>
 8011100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011104:	4649      	mov	r1, r9
 8011106:	4638      	mov	r0, r7
 8011108:	47c0      	blx	r8
 801110a:	3001      	adds	r0, #1
 801110c:	d01e      	beq.n	801114c <_printf_common+0xa4>
 801110e:	6823      	ldr	r3, [r4, #0]
 8011110:	6922      	ldr	r2, [r4, #16]
 8011112:	f003 0306 	and.w	r3, r3, #6
 8011116:	2b04      	cmp	r3, #4
 8011118:	bf02      	ittt	eq
 801111a:	68e5      	ldreq	r5, [r4, #12]
 801111c:	6833      	ldreq	r3, [r6, #0]
 801111e:	1aed      	subeq	r5, r5, r3
 8011120:	68a3      	ldr	r3, [r4, #8]
 8011122:	bf0c      	ite	eq
 8011124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011128:	2500      	movne	r5, #0
 801112a:	4293      	cmp	r3, r2
 801112c:	bfc4      	itt	gt
 801112e:	1a9b      	subgt	r3, r3, r2
 8011130:	18ed      	addgt	r5, r5, r3
 8011132:	2600      	movs	r6, #0
 8011134:	341a      	adds	r4, #26
 8011136:	42b5      	cmp	r5, r6
 8011138:	d11a      	bne.n	8011170 <_printf_common+0xc8>
 801113a:	2000      	movs	r0, #0
 801113c:	e008      	b.n	8011150 <_printf_common+0xa8>
 801113e:	2301      	movs	r3, #1
 8011140:	4652      	mov	r2, sl
 8011142:	4649      	mov	r1, r9
 8011144:	4638      	mov	r0, r7
 8011146:	47c0      	blx	r8
 8011148:	3001      	adds	r0, #1
 801114a:	d103      	bne.n	8011154 <_printf_common+0xac>
 801114c:	f04f 30ff 	mov.w	r0, #4294967295
 8011150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011154:	3501      	adds	r5, #1
 8011156:	e7c6      	b.n	80110e6 <_printf_common+0x3e>
 8011158:	18e1      	adds	r1, r4, r3
 801115a:	1c5a      	adds	r2, r3, #1
 801115c:	2030      	movs	r0, #48	; 0x30
 801115e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011162:	4422      	add	r2, r4
 8011164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801116c:	3302      	adds	r3, #2
 801116e:	e7c7      	b.n	8011100 <_printf_common+0x58>
 8011170:	2301      	movs	r3, #1
 8011172:	4622      	mov	r2, r4
 8011174:	4649      	mov	r1, r9
 8011176:	4638      	mov	r0, r7
 8011178:	47c0      	blx	r8
 801117a:	3001      	adds	r0, #1
 801117c:	d0e6      	beq.n	801114c <_printf_common+0xa4>
 801117e:	3601      	adds	r6, #1
 8011180:	e7d9      	b.n	8011136 <_printf_common+0x8e>
	...

08011184 <_printf_i>:
 8011184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011188:	7e0f      	ldrb	r7, [r1, #24]
 801118a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801118c:	2f78      	cmp	r7, #120	; 0x78
 801118e:	4691      	mov	r9, r2
 8011190:	4680      	mov	r8, r0
 8011192:	460c      	mov	r4, r1
 8011194:	469a      	mov	sl, r3
 8011196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801119a:	d807      	bhi.n	80111ac <_printf_i+0x28>
 801119c:	2f62      	cmp	r7, #98	; 0x62
 801119e:	d80a      	bhi.n	80111b6 <_printf_i+0x32>
 80111a0:	2f00      	cmp	r7, #0
 80111a2:	f000 80d4 	beq.w	801134e <_printf_i+0x1ca>
 80111a6:	2f58      	cmp	r7, #88	; 0x58
 80111a8:	f000 80c0 	beq.w	801132c <_printf_i+0x1a8>
 80111ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80111b4:	e03a      	b.n	801122c <_printf_i+0xa8>
 80111b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80111ba:	2b15      	cmp	r3, #21
 80111bc:	d8f6      	bhi.n	80111ac <_printf_i+0x28>
 80111be:	a101      	add	r1, pc, #4	; (adr r1, 80111c4 <_printf_i+0x40>)
 80111c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111c4:	0801121d 	.word	0x0801121d
 80111c8:	08011231 	.word	0x08011231
 80111cc:	080111ad 	.word	0x080111ad
 80111d0:	080111ad 	.word	0x080111ad
 80111d4:	080111ad 	.word	0x080111ad
 80111d8:	080111ad 	.word	0x080111ad
 80111dc:	08011231 	.word	0x08011231
 80111e0:	080111ad 	.word	0x080111ad
 80111e4:	080111ad 	.word	0x080111ad
 80111e8:	080111ad 	.word	0x080111ad
 80111ec:	080111ad 	.word	0x080111ad
 80111f0:	08011335 	.word	0x08011335
 80111f4:	0801125d 	.word	0x0801125d
 80111f8:	080112ef 	.word	0x080112ef
 80111fc:	080111ad 	.word	0x080111ad
 8011200:	080111ad 	.word	0x080111ad
 8011204:	08011357 	.word	0x08011357
 8011208:	080111ad 	.word	0x080111ad
 801120c:	0801125d 	.word	0x0801125d
 8011210:	080111ad 	.word	0x080111ad
 8011214:	080111ad 	.word	0x080111ad
 8011218:	080112f7 	.word	0x080112f7
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	1d1a      	adds	r2, r3, #4
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	602a      	str	r2, [r5, #0]
 8011224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801122c:	2301      	movs	r3, #1
 801122e:	e09f      	b.n	8011370 <_printf_i+0x1ec>
 8011230:	6820      	ldr	r0, [r4, #0]
 8011232:	682b      	ldr	r3, [r5, #0]
 8011234:	0607      	lsls	r7, r0, #24
 8011236:	f103 0104 	add.w	r1, r3, #4
 801123a:	6029      	str	r1, [r5, #0]
 801123c:	d501      	bpl.n	8011242 <_printf_i+0xbe>
 801123e:	681e      	ldr	r6, [r3, #0]
 8011240:	e003      	b.n	801124a <_printf_i+0xc6>
 8011242:	0646      	lsls	r6, r0, #25
 8011244:	d5fb      	bpl.n	801123e <_printf_i+0xba>
 8011246:	f9b3 6000 	ldrsh.w	r6, [r3]
 801124a:	2e00      	cmp	r6, #0
 801124c:	da03      	bge.n	8011256 <_printf_i+0xd2>
 801124e:	232d      	movs	r3, #45	; 0x2d
 8011250:	4276      	negs	r6, r6
 8011252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011256:	485a      	ldr	r0, [pc, #360]	; (80113c0 <_printf_i+0x23c>)
 8011258:	230a      	movs	r3, #10
 801125a:	e012      	b.n	8011282 <_printf_i+0xfe>
 801125c:	682b      	ldr	r3, [r5, #0]
 801125e:	6820      	ldr	r0, [r4, #0]
 8011260:	1d19      	adds	r1, r3, #4
 8011262:	6029      	str	r1, [r5, #0]
 8011264:	0605      	lsls	r5, r0, #24
 8011266:	d501      	bpl.n	801126c <_printf_i+0xe8>
 8011268:	681e      	ldr	r6, [r3, #0]
 801126a:	e002      	b.n	8011272 <_printf_i+0xee>
 801126c:	0641      	lsls	r1, r0, #25
 801126e:	d5fb      	bpl.n	8011268 <_printf_i+0xe4>
 8011270:	881e      	ldrh	r6, [r3, #0]
 8011272:	4853      	ldr	r0, [pc, #332]	; (80113c0 <_printf_i+0x23c>)
 8011274:	2f6f      	cmp	r7, #111	; 0x6f
 8011276:	bf0c      	ite	eq
 8011278:	2308      	moveq	r3, #8
 801127a:	230a      	movne	r3, #10
 801127c:	2100      	movs	r1, #0
 801127e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011282:	6865      	ldr	r5, [r4, #4]
 8011284:	60a5      	str	r5, [r4, #8]
 8011286:	2d00      	cmp	r5, #0
 8011288:	bfa2      	ittt	ge
 801128a:	6821      	ldrge	r1, [r4, #0]
 801128c:	f021 0104 	bicge.w	r1, r1, #4
 8011290:	6021      	strge	r1, [r4, #0]
 8011292:	b90e      	cbnz	r6, 8011298 <_printf_i+0x114>
 8011294:	2d00      	cmp	r5, #0
 8011296:	d04b      	beq.n	8011330 <_printf_i+0x1ac>
 8011298:	4615      	mov	r5, r2
 801129a:	fbb6 f1f3 	udiv	r1, r6, r3
 801129e:	fb03 6711 	mls	r7, r3, r1, r6
 80112a2:	5dc7      	ldrb	r7, [r0, r7]
 80112a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80112a8:	4637      	mov	r7, r6
 80112aa:	42bb      	cmp	r3, r7
 80112ac:	460e      	mov	r6, r1
 80112ae:	d9f4      	bls.n	801129a <_printf_i+0x116>
 80112b0:	2b08      	cmp	r3, #8
 80112b2:	d10b      	bne.n	80112cc <_printf_i+0x148>
 80112b4:	6823      	ldr	r3, [r4, #0]
 80112b6:	07de      	lsls	r6, r3, #31
 80112b8:	d508      	bpl.n	80112cc <_printf_i+0x148>
 80112ba:	6923      	ldr	r3, [r4, #16]
 80112bc:	6861      	ldr	r1, [r4, #4]
 80112be:	4299      	cmp	r1, r3
 80112c0:	bfde      	ittt	le
 80112c2:	2330      	movle	r3, #48	; 0x30
 80112c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80112c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80112cc:	1b52      	subs	r2, r2, r5
 80112ce:	6122      	str	r2, [r4, #16]
 80112d0:	f8cd a000 	str.w	sl, [sp]
 80112d4:	464b      	mov	r3, r9
 80112d6:	aa03      	add	r2, sp, #12
 80112d8:	4621      	mov	r1, r4
 80112da:	4640      	mov	r0, r8
 80112dc:	f7ff fee4 	bl	80110a8 <_printf_common>
 80112e0:	3001      	adds	r0, #1
 80112e2:	d14a      	bne.n	801137a <_printf_i+0x1f6>
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	b004      	add	sp, #16
 80112ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ee:	6823      	ldr	r3, [r4, #0]
 80112f0:	f043 0320 	orr.w	r3, r3, #32
 80112f4:	6023      	str	r3, [r4, #0]
 80112f6:	4833      	ldr	r0, [pc, #204]	; (80113c4 <_printf_i+0x240>)
 80112f8:	2778      	movs	r7, #120	; 0x78
 80112fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80112fe:	6823      	ldr	r3, [r4, #0]
 8011300:	6829      	ldr	r1, [r5, #0]
 8011302:	061f      	lsls	r7, r3, #24
 8011304:	f851 6b04 	ldr.w	r6, [r1], #4
 8011308:	d402      	bmi.n	8011310 <_printf_i+0x18c>
 801130a:	065f      	lsls	r7, r3, #25
 801130c:	bf48      	it	mi
 801130e:	b2b6      	uxthmi	r6, r6
 8011310:	07df      	lsls	r7, r3, #31
 8011312:	bf48      	it	mi
 8011314:	f043 0320 	orrmi.w	r3, r3, #32
 8011318:	6029      	str	r1, [r5, #0]
 801131a:	bf48      	it	mi
 801131c:	6023      	strmi	r3, [r4, #0]
 801131e:	b91e      	cbnz	r6, 8011328 <_printf_i+0x1a4>
 8011320:	6823      	ldr	r3, [r4, #0]
 8011322:	f023 0320 	bic.w	r3, r3, #32
 8011326:	6023      	str	r3, [r4, #0]
 8011328:	2310      	movs	r3, #16
 801132a:	e7a7      	b.n	801127c <_printf_i+0xf8>
 801132c:	4824      	ldr	r0, [pc, #144]	; (80113c0 <_printf_i+0x23c>)
 801132e:	e7e4      	b.n	80112fa <_printf_i+0x176>
 8011330:	4615      	mov	r5, r2
 8011332:	e7bd      	b.n	80112b0 <_printf_i+0x12c>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	6826      	ldr	r6, [r4, #0]
 8011338:	6961      	ldr	r1, [r4, #20]
 801133a:	1d18      	adds	r0, r3, #4
 801133c:	6028      	str	r0, [r5, #0]
 801133e:	0635      	lsls	r5, r6, #24
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	d501      	bpl.n	8011348 <_printf_i+0x1c4>
 8011344:	6019      	str	r1, [r3, #0]
 8011346:	e002      	b.n	801134e <_printf_i+0x1ca>
 8011348:	0670      	lsls	r0, r6, #25
 801134a:	d5fb      	bpl.n	8011344 <_printf_i+0x1c0>
 801134c:	8019      	strh	r1, [r3, #0]
 801134e:	2300      	movs	r3, #0
 8011350:	6123      	str	r3, [r4, #16]
 8011352:	4615      	mov	r5, r2
 8011354:	e7bc      	b.n	80112d0 <_printf_i+0x14c>
 8011356:	682b      	ldr	r3, [r5, #0]
 8011358:	1d1a      	adds	r2, r3, #4
 801135a:	602a      	str	r2, [r5, #0]
 801135c:	681d      	ldr	r5, [r3, #0]
 801135e:	6862      	ldr	r2, [r4, #4]
 8011360:	2100      	movs	r1, #0
 8011362:	4628      	mov	r0, r5
 8011364:	f7ee ff34 	bl	80001d0 <memchr>
 8011368:	b108      	cbz	r0, 801136e <_printf_i+0x1ea>
 801136a:	1b40      	subs	r0, r0, r5
 801136c:	6060      	str	r0, [r4, #4]
 801136e:	6863      	ldr	r3, [r4, #4]
 8011370:	6123      	str	r3, [r4, #16]
 8011372:	2300      	movs	r3, #0
 8011374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011378:	e7aa      	b.n	80112d0 <_printf_i+0x14c>
 801137a:	6923      	ldr	r3, [r4, #16]
 801137c:	462a      	mov	r2, r5
 801137e:	4649      	mov	r1, r9
 8011380:	4640      	mov	r0, r8
 8011382:	47d0      	blx	sl
 8011384:	3001      	adds	r0, #1
 8011386:	d0ad      	beq.n	80112e4 <_printf_i+0x160>
 8011388:	6823      	ldr	r3, [r4, #0]
 801138a:	079b      	lsls	r3, r3, #30
 801138c:	d413      	bmi.n	80113b6 <_printf_i+0x232>
 801138e:	68e0      	ldr	r0, [r4, #12]
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	4298      	cmp	r0, r3
 8011394:	bfb8      	it	lt
 8011396:	4618      	movlt	r0, r3
 8011398:	e7a6      	b.n	80112e8 <_printf_i+0x164>
 801139a:	2301      	movs	r3, #1
 801139c:	4632      	mov	r2, r6
 801139e:	4649      	mov	r1, r9
 80113a0:	4640      	mov	r0, r8
 80113a2:	47d0      	blx	sl
 80113a4:	3001      	adds	r0, #1
 80113a6:	d09d      	beq.n	80112e4 <_printf_i+0x160>
 80113a8:	3501      	adds	r5, #1
 80113aa:	68e3      	ldr	r3, [r4, #12]
 80113ac:	9903      	ldr	r1, [sp, #12]
 80113ae:	1a5b      	subs	r3, r3, r1
 80113b0:	42ab      	cmp	r3, r5
 80113b2:	dcf2      	bgt.n	801139a <_printf_i+0x216>
 80113b4:	e7eb      	b.n	801138e <_printf_i+0x20a>
 80113b6:	2500      	movs	r5, #0
 80113b8:	f104 0619 	add.w	r6, r4, #25
 80113bc:	e7f5      	b.n	80113aa <_printf_i+0x226>
 80113be:	bf00      	nop
 80113c0:	08015a83 	.word	0x08015a83
 80113c4:	08015a94 	.word	0x08015a94

080113c8 <std>:
 80113c8:	2300      	movs	r3, #0
 80113ca:	b510      	push	{r4, lr}
 80113cc:	4604      	mov	r4, r0
 80113ce:	e9c0 3300 	strd	r3, r3, [r0]
 80113d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113d6:	6083      	str	r3, [r0, #8]
 80113d8:	8181      	strh	r1, [r0, #12]
 80113da:	6643      	str	r3, [r0, #100]	; 0x64
 80113dc:	81c2      	strh	r2, [r0, #14]
 80113de:	6183      	str	r3, [r0, #24]
 80113e0:	4619      	mov	r1, r3
 80113e2:	2208      	movs	r2, #8
 80113e4:	305c      	adds	r0, #92	; 0x5c
 80113e6:	f000 fa17 	bl	8011818 <memset>
 80113ea:	4b0d      	ldr	r3, [pc, #52]	; (8011420 <std+0x58>)
 80113ec:	6263      	str	r3, [r4, #36]	; 0x24
 80113ee:	4b0d      	ldr	r3, [pc, #52]	; (8011424 <std+0x5c>)
 80113f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80113f2:	4b0d      	ldr	r3, [pc, #52]	; (8011428 <std+0x60>)
 80113f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80113f6:	4b0d      	ldr	r3, [pc, #52]	; (801142c <std+0x64>)
 80113f8:	6323      	str	r3, [r4, #48]	; 0x30
 80113fa:	4b0d      	ldr	r3, [pc, #52]	; (8011430 <std+0x68>)
 80113fc:	6224      	str	r4, [r4, #32]
 80113fe:	429c      	cmp	r4, r3
 8011400:	d006      	beq.n	8011410 <std+0x48>
 8011402:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011406:	4294      	cmp	r4, r2
 8011408:	d002      	beq.n	8011410 <std+0x48>
 801140a:	33d0      	adds	r3, #208	; 0xd0
 801140c:	429c      	cmp	r4, r3
 801140e:	d105      	bne.n	801141c <std+0x54>
 8011410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011418:	f000 bb0e 	b.w	8011a38 <__retarget_lock_init_recursive>
 801141c:	bd10      	pop	{r4, pc}
 801141e:	bf00      	nop
 8011420:	08011669 	.word	0x08011669
 8011424:	0801168b 	.word	0x0801168b
 8011428:	080116c3 	.word	0x080116c3
 801142c:	080116e7 	.word	0x080116e7
 8011430:	200035f8 	.word	0x200035f8

08011434 <stdio_exit_handler>:
 8011434:	4a02      	ldr	r2, [pc, #8]	; (8011440 <stdio_exit_handler+0xc>)
 8011436:	4903      	ldr	r1, [pc, #12]	; (8011444 <stdio_exit_handler+0x10>)
 8011438:	4803      	ldr	r0, [pc, #12]	; (8011448 <stdio_exit_handler+0x14>)
 801143a:	f000 b869 	b.w	8011510 <_fwalk_sglue>
 801143e:	bf00      	nop
 8011440:	2000002c 	.word	0x2000002c
 8011444:	08013ee1 	.word	0x08013ee1
 8011448:	200001a4 	.word	0x200001a4

0801144c <cleanup_stdio>:
 801144c:	6841      	ldr	r1, [r0, #4]
 801144e:	4b0c      	ldr	r3, [pc, #48]	; (8011480 <cleanup_stdio+0x34>)
 8011450:	4299      	cmp	r1, r3
 8011452:	b510      	push	{r4, lr}
 8011454:	4604      	mov	r4, r0
 8011456:	d001      	beq.n	801145c <cleanup_stdio+0x10>
 8011458:	f002 fd42 	bl	8013ee0 <_fflush_r>
 801145c:	68a1      	ldr	r1, [r4, #8]
 801145e:	4b09      	ldr	r3, [pc, #36]	; (8011484 <cleanup_stdio+0x38>)
 8011460:	4299      	cmp	r1, r3
 8011462:	d002      	beq.n	801146a <cleanup_stdio+0x1e>
 8011464:	4620      	mov	r0, r4
 8011466:	f002 fd3b 	bl	8013ee0 <_fflush_r>
 801146a:	68e1      	ldr	r1, [r4, #12]
 801146c:	4b06      	ldr	r3, [pc, #24]	; (8011488 <cleanup_stdio+0x3c>)
 801146e:	4299      	cmp	r1, r3
 8011470:	d004      	beq.n	801147c <cleanup_stdio+0x30>
 8011472:	4620      	mov	r0, r4
 8011474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011478:	f002 bd32 	b.w	8013ee0 <_fflush_r>
 801147c:	bd10      	pop	{r4, pc}
 801147e:	bf00      	nop
 8011480:	200035f8 	.word	0x200035f8
 8011484:	20003660 	.word	0x20003660
 8011488:	200036c8 	.word	0x200036c8

0801148c <global_stdio_init.part.0>:
 801148c:	b510      	push	{r4, lr}
 801148e:	4b0b      	ldr	r3, [pc, #44]	; (80114bc <global_stdio_init.part.0+0x30>)
 8011490:	4c0b      	ldr	r4, [pc, #44]	; (80114c0 <global_stdio_init.part.0+0x34>)
 8011492:	4a0c      	ldr	r2, [pc, #48]	; (80114c4 <global_stdio_init.part.0+0x38>)
 8011494:	601a      	str	r2, [r3, #0]
 8011496:	4620      	mov	r0, r4
 8011498:	2200      	movs	r2, #0
 801149a:	2104      	movs	r1, #4
 801149c:	f7ff ff94 	bl	80113c8 <std>
 80114a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80114a4:	2201      	movs	r2, #1
 80114a6:	2109      	movs	r1, #9
 80114a8:	f7ff ff8e 	bl	80113c8 <std>
 80114ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80114b0:	2202      	movs	r2, #2
 80114b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b6:	2112      	movs	r1, #18
 80114b8:	f7ff bf86 	b.w	80113c8 <std>
 80114bc:	20003730 	.word	0x20003730
 80114c0:	200035f8 	.word	0x200035f8
 80114c4:	08011435 	.word	0x08011435

080114c8 <__sfp_lock_acquire>:
 80114c8:	4801      	ldr	r0, [pc, #4]	; (80114d0 <__sfp_lock_acquire+0x8>)
 80114ca:	f000 bab6 	b.w	8011a3a <__retarget_lock_acquire_recursive>
 80114ce:	bf00      	nop
 80114d0:	20003739 	.word	0x20003739

080114d4 <__sfp_lock_release>:
 80114d4:	4801      	ldr	r0, [pc, #4]	; (80114dc <__sfp_lock_release+0x8>)
 80114d6:	f000 bab1 	b.w	8011a3c <__retarget_lock_release_recursive>
 80114da:	bf00      	nop
 80114dc:	20003739 	.word	0x20003739

080114e0 <__sinit>:
 80114e0:	b510      	push	{r4, lr}
 80114e2:	4604      	mov	r4, r0
 80114e4:	f7ff fff0 	bl	80114c8 <__sfp_lock_acquire>
 80114e8:	6a23      	ldr	r3, [r4, #32]
 80114ea:	b11b      	cbz	r3, 80114f4 <__sinit+0x14>
 80114ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114f0:	f7ff bff0 	b.w	80114d4 <__sfp_lock_release>
 80114f4:	4b04      	ldr	r3, [pc, #16]	; (8011508 <__sinit+0x28>)
 80114f6:	6223      	str	r3, [r4, #32]
 80114f8:	4b04      	ldr	r3, [pc, #16]	; (801150c <__sinit+0x2c>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1f5      	bne.n	80114ec <__sinit+0xc>
 8011500:	f7ff ffc4 	bl	801148c <global_stdio_init.part.0>
 8011504:	e7f2      	b.n	80114ec <__sinit+0xc>
 8011506:	bf00      	nop
 8011508:	0801144d 	.word	0x0801144d
 801150c:	20003730 	.word	0x20003730

08011510 <_fwalk_sglue>:
 8011510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011514:	4607      	mov	r7, r0
 8011516:	4688      	mov	r8, r1
 8011518:	4614      	mov	r4, r2
 801151a:	2600      	movs	r6, #0
 801151c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011520:	f1b9 0901 	subs.w	r9, r9, #1
 8011524:	d505      	bpl.n	8011532 <_fwalk_sglue+0x22>
 8011526:	6824      	ldr	r4, [r4, #0]
 8011528:	2c00      	cmp	r4, #0
 801152a:	d1f7      	bne.n	801151c <_fwalk_sglue+0xc>
 801152c:	4630      	mov	r0, r6
 801152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011532:	89ab      	ldrh	r3, [r5, #12]
 8011534:	2b01      	cmp	r3, #1
 8011536:	d907      	bls.n	8011548 <_fwalk_sglue+0x38>
 8011538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801153c:	3301      	adds	r3, #1
 801153e:	d003      	beq.n	8011548 <_fwalk_sglue+0x38>
 8011540:	4629      	mov	r1, r5
 8011542:	4638      	mov	r0, r7
 8011544:	47c0      	blx	r8
 8011546:	4306      	orrs	r6, r0
 8011548:	3568      	adds	r5, #104	; 0x68
 801154a:	e7e9      	b.n	8011520 <_fwalk_sglue+0x10>

0801154c <iprintf>:
 801154c:	b40f      	push	{r0, r1, r2, r3}
 801154e:	b507      	push	{r0, r1, r2, lr}
 8011550:	4906      	ldr	r1, [pc, #24]	; (801156c <iprintf+0x20>)
 8011552:	ab04      	add	r3, sp, #16
 8011554:	6808      	ldr	r0, [r1, #0]
 8011556:	f853 2b04 	ldr.w	r2, [r3], #4
 801155a:	6881      	ldr	r1, [r0, #8]
 801155c:	9301      	str	r3, [sp, #4]
 801155e:	f002 fb1f 	bl	8013ba0 <_vfiprintf_r>
 8011562:	b003      	add	sp, #12
 8011564:	f85d eb04 	ldr.w	lr, [sp], #4
 8011568:	b004      	add	sp, #16
 801156a:	4770      	bx	lr
 801156c:	200001f0 	.word	0x200001f0

08011570 <_puts_r>:
 8011570:	6a03      	ldr	r3, [r0, #32]
 8011572:	b570      	push	{r4, r5, r6, lr}
 8011574:	6884      	ldr	r4, [r0, #8]
 8011576:	4605      	mov	r5, r0
 8011578:	460e      	mov	r6, r1
 801157a:	b90b      	cbnz	r3, 8011580 <_puts_r+0x10>
 801157c:	f7ff ffb0 	bl	80114e0 <__sinit>
 8011580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011582:	07db      	lsls	r3, r3, #31
 8011584:	d405      	bmi.n	8011592 <_puts_r+0x22>
 8011586:	89a3      	ldrh	r3, [r4, #12]
 8011588:	0598      	lsls	r0, r3, #22
 801158a:	d402      	bmi.n	8011592 <_puts_r+0x22>
 801158c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801158e:	f000 fa54 	bl	8011a3a <__retarget_lock_acquire_recursive>
 8011592:	89a3      	ldrh	r3, [r4, #12]
 8011594:	0719      	lsls	r1, r3, #28
 8011596:	d513      	bpl.n	80115c0 <_puts_r+0x50>
 8011598:	6923      	ldr	r3, [r4, #16]
 801159a:	b18b      	cbz	r3, 80115c0 <_puts_r+0x50>
 801159c:	3e01      	subs	r6, #1
 801159e:	68a3      	ldr	r3, [r4, #8]
 80115a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80115a4:	3b01      	subs	r3, #1
 80115a6:	60a3      	str	r3, [r4, #8]
 80115a8:	b9e9      	cbnz	r1, 80115e6 <_puts_r+0x76>
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	da2e      	bge.n	801160c <_puts_r+0x9c>
 80115ae:	4622      	mov	r2, r4
 80115b0:	210a      	movs	r1, #10
 80115b2:	4628      	mov	r0, r5
 80115b4:	f000 f89b 	bl	80116ee <__swbuf_r>
 80115b8:	3001      	adds	r0, #1
 80115ba:	d007      	beq.n	80115cc <_puts_r+0x5c>
 80115bc:	250a      	movs	r5, #10
 80115be:	e007      	b.n	80115d0 <_puts_r+0x60>
 80115c0:	4621      	mov	r1, r4
 80115c2:	4628      	mov	r0, r5
 80115c4:	f000 f8d0 	bl	8011768 <__swsetup_r>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d0e7      	beq.n	801159c <_puts_r+0x2c>
 80115cc:	f04f 35ff 	mov.w	r5, #4294967295
 80115d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115d2:	07da      	lsls	r2, r3, #31
 80115d4:	d405      	bmi.n	80115e2 <_puts_r+0x72>
 80115d6:	89a3      	ldrh	r3, [r4, #12]
 80115d8:	059b      	lsls	r3, r3, #22
 80115da:	d402      	bmi.n	80115e2 <_puts_r+0x72>
 80115dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115de:	f000 fa2d 	bl	8011a3c <__retarget_lock_release_recursive>
 80115e2:	4628      	mov	r0, r5
 80115e4:	bd70      	pop	{r4, r5, r6, pc}
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	da04      	bge.n	80115f4 <_puts_r+0x84>
 80115ea:	69a2      	ldr	r2, [r4, #24]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	dc06      	bgt.n	80115fe <_puts_r+0x8e>
 80115f0:	290a      	cmp	r1, #10
 80115f2:	d004      	beq.n	80115fe <_puts_r+0x8e>
 80115f4:	6823      	ldr	r3, [r4, #0]
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	6022      	str	r2, [r4, #0]
 80115fa:	7019      	strb	r1, [r3, #0]
 80115fc:	e7cf      	b.n	801159e <_puts_r+0x2e>
 80115fe:	4622      	mov	r2, r4
 8011600:	4628      	mov	r0, r5
 8011602:	f000 f874 	bl	80116ee <__swbuf_r>
 8011606:	3001      	adds	r0, #1
 8011608:	d1c9      	bne.n	801159e <_puts_r+0x2e>
 801160a:	e7df      	b.n	80115cc <_puts_r+0x5c>
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	250a      	movs	r5, #10
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	6022      	str	r2, [r4, #0]
 8011614:	701d      	strb	r5, [r3, #0]
 8011616:	e7db      	b.n	80115d0 <_puts_r+0x60>

08011618 <puts>:
 8011618:	4b02      	ldr	r3, [pc, #8]	; (8011624 <puts+0xc>)
 801161a:	4601      	mov	r1, r0
 801161c:	6818      	ldr	r0, [r3, #0]
 801161e:	f7ff bfa7 	b.w	8011570 <_puts_r>
 8011622:	bf00      	nop
 8011624:	200001f0 	.word	0x200001f0

08011628 <siprintf>:
 8011628:	b40e      	push	{r1, r2, r3}
 801162a:	b500      	push	{lr}
 801162c:	b09c      	sub	sp, #112	; 0x70
 801162e:	ab1d      	add	r3, sp, #116	; 0x74
 8011630:	9002      	str	r0, [sp, #8]
 8011632:	9006      	str	r0, [sp, #24]
 8011634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011638:	4809      	ldr	r0, [pc, #36]	; (8011660 <siprintf+0x38>)
 801163a:	9107      	str	r1, [sp, #28]
 801163c:	9104      	str	r1, [sp, #16]
 801163e:	4909      	ldr	r1, [pc, #36]	; (8011664 <siprintf+0x3c>)
 8011640:	f853 2b04 	ldr.w	r2, [r3], #4
 8011644:	9105      	str	r1, [sp, #20]
 8011646:	6800      	ldr	r0, [r0, #0]
 8011648:	9301      	str	r3, [sp, #4]
 801164a:	a902      	add	r1, sp, #8
 801164c:	f002 f980 	bl	8013950 <_svfiprintf_r>
 8011650:	9b02      	ldr	r3, [sp, #8]
 8011652:	2200      	movs	r2, #0
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	b01c      	add	sp, #112	; 0x70
 8011658:	f85d eb04 	ldr.w	lr, [sp], #4
 801165c:	b003      	add	sp, #12
 801165e:	4770      	bx	lr
 8011660:	200001f0 	.word	0x200001f0
 8011664:	ffff0208 	.word	0xffff0208

08011668 <__sread>:
 8011668:	b510      	push	{r4, lr}
 801166a:	460c      	mov	r4, r1
 801166c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011670:	f000 f984 	bl	801197c <_read_r>
 8011674:	2800      	cmp	r0, #0
 8011676:	bfab      	itete	ge
 8011678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801167a:	89a3      	ldrhlt	r3, [r4, #12]
 801167c:	181b      	addge	r3, r3, r0
 801167e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011682:	bfac      	ite	ge
 8011684:	6563      	strge	r3, [r4, #84]	; 0x54
 8011686:	81a3      	strhlt	r3, [r4, #12]
 8011688:	bd10      	pop	{r4, pc}

0801168a <__swrite>:
 801168a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168e:	461f      	mov	r7, r3
 8011690:	898b      	ldrh	r3, [r1, #12]
 8011692:	05db      	lsls	r3, r3, #23
 8011694:	4605      	mov	r5, r0
 8011696:	460c      	mov	r4, r1
 8011698:	4616      	mov	r6, r2
 801169a:	d505      	bpl.n	80116a8 <__swrite+0x1e>
 801169c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a0:	2302      	movs	r3, #2
 80116a2:	2200      	movs	r2, #0
 80116a4:	f000 f958 	bl	8011958 <_lseek_r>
 80116a8:	89a3      	ldrh	r3, [r4, #12]
 80116aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	4632      	mov	r2, r6
 80116b6:	463b      	mov	r3, r7
 80116b8:	4628      	mov	r0, r5
 80116ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116be:	f000 b97f 	b.w	80119c0 <_write_r>

080116c2 <__sseek>:
 80116c2:	b510      	push	{r4, lr}
 80116c4:	460c      	mov	r4, r1
 80116c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116ca:	f000 f945 	bl	8011958 <_lseek_r>
 80116ce:	1c43      	adds	r3, r0, #1
 80116d0:	89a3      	ldrh	r3, [r4, #12]
 80116d2:	bf15      	itete	ne
 80116d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80116d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80116da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80116de:	81a3      	strheq	r3, [r4, #12]
 80116e0:	bf18      	it	ne
 80116e2:	81a3      	strhne	r3, [r4, #12]
 80116e4:	bd10      	pop	{r4, pc}

080116e6 <__sclose>:
 80116e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116ea:	f000 b925 	b.w	8011938 <_close_r>

080116ee <__swbuf_r>:
 80116ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116f0:	460e      	mov	r6, r1
 80116f2:	4614      	mov	r4, r2
 80116f4:	4605      	mov	r5, r0
 80116f6:	b118      	cbz	r0, 8011700 <__swbuf_r+0x12>
 80116f8:	6a03      	ldr	r3, [r0, #32]
 80116fa:	b90b      	cbnz	r3, 8011700 <__swbuf_r+0x12>
 80116fc:	f7ff fef0 	bl	80114e0 <__sinit>
 8011700:	69a3      	ldr	r3, [r4, #24]
 8011702:	60a3      	str	r3, [r4, #8]
 8011704:	89a3      	ldrh	r3, [r4, #12]
 8011706:	071a      	lsls	r2, r3, #28
 8011708:	d525      	bpl.n	8011756 <__swbuf_r+0x68>
 801170a:	6923      	ldr	r3, [r4, #16]
 801170c:	b31b      	cbz	r3, 8011756 <__swbuf_r+0x68>
 801170e:	6823      	ldr	r3, [r4, #0]
 8011710:	6922      	ldr	r2, [r4, #16]
 8011712:	1a98      	subs	r0, r3, r2
 8011714:	6963      	ldr	r3, [r4, #20]
 8011716:	b2f6      	uxtb	r6, r6
 8011718:	4283      	cmp	r3, r0
 801171a:	4637      	mov	r7, r6
 801171c:	dc04      	bgt.n	8011728 <__swbuf_r+0x3a>
 801171e:	4621      	mov	r1, r4
 8011720:	4628      	mov	r0, r5
 8011722:	f002 fbdd 	bl	8013ee0 <_fflush_r>
 8011726:	b9e0      	cbnz	r0, 8011762 <__swbuf_r+0x74>
 8011728:	68a3      	ldr	r3, [r4, #8]
 801172a:	3b01      	subs	r3, #1
 801172c:	60a3      	str	r3, [r4, #8]
 801172e:	6823      	ldr	r3, [r4, #0]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	6022      	str	r2, [r4, #0]
 8011734:	701e      	strb	r6, [r3, #0]
 8011736:	6962      	ldr	r2, [r4, #20]
 8011738:	1c43      	adds	r3, r0, #1
 801173a:	429a      	cmp	r2, r3
 801173c:	d004      	beq.n	8011748 <__swbuf_r+0x5a>
 801173e:	89a3      	ldrh	r3, [r4, #12]
 8011740:	07db      	lsls	r3, r3, #31
 8011742:	d506      	bpl.n	8011752 <__swbuf_r+0x64>
 8011744:	2e0a      	cmp	r6, #10
 8011746:	d104      	bne.n	8011752 <__swbuf_r+0x64>
 8011748:	4621      	mov	r1, r4
 801174a:	4628      	mov	r0, r5
 801174c:	f002 fbc8 	bl	8013ee0 <_fflush_r>
 8011750:	b938      	cbnz	r0, 8011762 <__swbuf_r+0x74>
 8011752:	4638      	mov	r0, r7
 8011754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011756:	4621      	mov	r1, r4
 8011758:	4628      	mov	r0, r5
 801175a:	f000 f805 	bl	8011768 <__swsetup_r>
 801175e:	2800      	cmp	r0, #0
 8011760:	d0d5      	beq.n	801170e <__swbuf_r+0x20>
 8011762:	f04f 37ff 	mov.w	r7, #4294967295
 8011766:	e7f4      	b.n	8011752 <__swbuf_r+0x64>

08011768 <__swsetup_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4b2a      	ldr	r3, [pc, #168]	; (8011814 <__swsetup_r+0xac>)
 801176c:	4605      	mov	r5, r0
 801176e:	6818      	ldr	r0, [r3, #0]
 8011770:	460c      	mov	r4, r1
 8011772:	b118      	cbz	r0, 801177c <__swsetup_r+0x14>
 8011774:	6a03      	ldr	r3, [r0, #32]
 8011776:	b90b      	cbnz	r3, 801177c <__swsetup_r+0x14>
 8011778:	f7ff feb2 	bl	80114e0 <__sinit>
 801177c:	89a3      	ldrh	r3, [r4, #12]
 801177e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011782:	0718      	lsls	r0, r3, #28
 8011784:	d422      	bmi.n	80117cc <__swsetup_r+0x64>
 8011786:	06d9      	lsls	r1, r3, #27
 8011788:	d407      	bmi.n	801179a <__swsetup_r+0x32>
 801178a:	2309      	movs	r3, #9
 801178c:	602b      	str	r3, [r5, #0]
 801178e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011792:	81a3      	strh	r3, [r4, #12]
 8011794:	f04f 30ff 	mov.w	r0, #4294967295
 8011798:	e034      	b.n	8011804 <__swsetup_r+0x9c>
 801179a:	0758      	lsls	r0, r3, #29
 801179c:	d512      	bpl.n	80117c4 <__swsetup_r+0x5c>
 801179e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80117a0:	b141      	cbz	r1, 80117b4 <__swsetup_r+0x4c>
 80117a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117a6:	4299      	cmp	r1, r3
 80117a8:	d002      	beq.n	80117b0 <__swsetup_r+0x48>
 80117aa:	4628      	mov	r0, r5
 80117ac:	f001 f806 	bl	80127bc <_free_r>
 80117b0:	2300      	movs	r3, #0
 80117b2:	6363      	str	r3, [r4, #52]	; 0x34
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80117ba:	81a3      	strh	r3, [r4, #12]
 80117bc:	2300      	movs	r3, #0
 80117be:	6063      	str	r3, [r4, #4]
 80117c0:	6923      	ldr	r3, [r4, #16]
 80117c2:	6023      	str	r3, [r4, #0]
 80117c4:	89a3      	ldrh	r3, [r4, #12]
 80117c6:	f043 0308 	orr.w	r3, r3, #8
 80117ca:	81a3      	strh	r3, [r4, #12]
 80117cc:	6923      	ldr	r3, [r4, #16]
 80117ce:	b94b      	cbnz	r3, 80117e4 <__swsetup_r+0x7c>
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117da:	d003      	beq.n	80117e4 <__swsetup_r+0x7c>
 80117dc:	4621      	mov	r1, r4
 80117de:	4628      	mov	r0, r5
 80117e0:	f002 fbde 	bl	8013fa0 <__smakebuf_r>
 80117e4:	89a0      	ldrh	r0, [r4, #12]
 80117e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117ea:	f010 0301 	ands.w	r3, r0, #1
 80117ee:	d00a      	beq.n	8011806 <__swsetup_r+0x9e>
 80117f0:	2300      	movs	r3, #0
 80117f2:	60a3      	str	r3, [r4, #8]
 80117f4:	6963      	ldr	r3, [r4, #20]
 80117f6:	425b      	negs	r3, r3
 80117f8:	61a3      	str	r3, [r4, #24]
 80117fa:	6923      	ldr	r3, [r4, #16]
 80117fc:	b943      	cbnz	r3, 8011810 <__swsetup_r+0xa8>
 80117fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011802:	d1c4      	bne.n	801178e <__swsetup_r+0x26>
 8011804:	bd38      	pop	{r3, r4, r5, pc}
 8011806:	0781      	lsls	r1, r0, #30
 8011808:	bf58      	it	pl
 801180a:	6963      	ldrpl	r3, [r4, #20]
 801180c:	60a3      	str	r3, [r4, #8]
 801180e:	e7f4      	b.n	80117fa <__swsetup_r+0x92>
 8011810:	2000      	movs	r0, #0
 8011812:	e7f7      	b.n	8011804 <__swsetup_r+0x9c>
 8011814:	200001f0 	.word	0x200001f0

08011818 <memset>:
 8011818:	4402      	add	r2, r0
 801181a:	4603      	mov	r3, r0
 801181c:	4293      	cmp	r3, r2
 801181e:	d100      	bne.n	8011822 <memset+0xa>
 8011820:	4770      	bx	lr
 8011822:	f803 1b01 	strb.w	r1, [r3], #1
 8011826:	e7f9      	b.n	801181c <memset+0x4>

08011828 <strncmp>:
 8011828:	b510      	push	{r4, lr}
 801182a:	b16a      	cbz	r2, 8011848 <strncmp+0x20>
 801182c:	3901      	subs	r1, #1
 801182e:	1884      	adds	r4, r0, r2
 8011830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011834:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011838:	429a      	cmp	r2, r3
 801183a:	d103      	bne.n	8011844 <strncmp+0x1c>
 801183c:	42a0      	cmp	r0, r4
 801183e:	d001      	beq.n	8011844 <strncmp+0x1c>
 8011840:	2a00      	cmp	r2, #0
 8011842:	d1f5      	bne.n	8011830 <strncmp+0x8>
 8011844:	1ad0      	subs	r0, r2, r3
 8011846:	bd10      	pop	{r4, pc}
 8011848:	4610      	mov	r0, r2
 801184a:	e7fc      	b.n	8011846 <strncmp+0x1e>

0801184c <strtok>:
 801184c:	4b16      	ldr	r3, [pc, #88]	; (80118a8 <strtok+0x5c>)
 801184e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011850:	681e      	ldr	r6, [r3, #0]
 8011852:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8011854:	4605      	mov	r5, r0
 8011856:	b9fc      	cbnz	r4, 8011898 <strtok+0x4c>
 8011858:	2050      	movs	r0, #80	; 0x50
 801185a:	9101      	str	r1, [sp, #4]
 801185c:	f7fe f992 	bl	800fb84 <malloc>
 8011860:	9901      	ldr	r1, [sp, #4]
 8011862:	6470      	str	r0, [r6, #68]	; 0x44
 8011864:	4602      	mov	r2, r0
 8011866:	b920      	cbnz	r0, 8011872 <strtok+0x26>
 8011868:	4b10      	ldr	r3, [pc, #64]	; (80118ac <strtok+0x60>)
 801186a:	4811      	ldr	r0, [pc, #68]	; (80118b0 <strtok+0x64>)
 801186c:	215b      	movs	r1, #91	; 0x5b
 801186e:	f000 f90d 	bl	8011a8c <__assert_func>
 8011872:	e9c0 4400 	strd	r4, r4, [r0]
 8011876:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801187a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801187e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011882:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011886:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801188a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801188e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011892:	6184      	str	r4, [r0, #24]
 8011894:	7704      	strb	r4, [r0, #28]
 8011896:	6244      	str	r4, [r0, #36]	; 0x24
 8011898:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801189a:	2301      	movs	r3, #1
 801189c:	4628      	mov	r0, r5
 801189e:	b002      	add	sp, #8
 80118a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118a4:	f000 b806 	b.w	80118b4 <__strtok_r>
 80118a8:	200001f0 	.word	0x200001f0
 80118ac:	08015aa5 	.word	0x08015aa5
 80118b0:	08015abc 	.word	0x08015abc

080118b4 <__strtok_r>:
 80118b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118b6:	b908      	cbnz	r0, 80118bc <__strtok_r+0x8>
 80118b8:	6810      	ldr	r0, [r2, #0]
 80118ba:	b188      	cbz	r0, 80118e0 <__strtok_r+0x2c>
 80118bc:	4604      	mov	r4, r0
 80118be:	4620      	mov	r0, r4
 80118c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80118c4:	460f      	mov	r7, r1
 80118c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80118ca:	b91e      	cbnz	r6, 80118d4 <__strtok_r+0x20>
 80118cc:	b965      	cbnz	r5, 80118e8 <__strtok_r+0x34>
 80118ce:	6015      	str	r5, [r2, #0]
 80118d0:	4628      	mov	r0, r5
 80118d2:	e005      	b.n	80118e0 <__strtok_r+0x2c>
 80118d4:	42b5      	cmp	r5, r6
 80118d6:	d1f6      	bne.n	80118c6 <__strtok_r+0x12>
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1f0      	bne.n	80118be <__strtok_r+0xa>
 80118dc:	6014      	str	r4, [r2, #0]
 80118de:	7003      	strb	r3, [r0, #0]
 80118e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118e2:	461c      	mov	r4, r3
 80118e4:	e00c      	b.n	8011900 <__strtok_r+0x4c>
 80118e6:	b915      	cbnz	r5, 80118ee <__strtok_r+0x3a>
 80118e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80118ec:	460e      	mov	r6, r1
 80118ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80118f2:	42ab      	cmp	r3, r5
 80118f4:	d1f7      	bne.n	80118e6 <__strtok_r+0x32>
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d0f3      	beq.n	80118e2 <__strtok_r+0x2e>
 80118fa:	2300      	movs	r3, #0
 80118fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011900:	6014      	str	r4, [r2, #0]
 8011902:	e7ed      	b.n	80118e0 <__strtok_r+0x2c>

08011904 <strstr>:
 8011904:	780a      	ldrb	r2, [r1, #0]
 8011906:	b570      	push	{r4, r5, r6, lr}
 8011908:	b96a      	cbnz	r2, 8011926 <strstr+0x22>
 801190a:	bd70      	pop	{r4, r5, r6, pc}
 801190c:	429a      	cmp	r2, r3
 801190e:	d109      	bne.n	8011924 <strstr+0x20>
 8011910:	460c      	mov	r4, r1
 8011912:	4605      	mov	r5, r0
 8011914:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011918:	2b00      	cmp	r3, #0
 801191a:	d0f6      	beq.n	801190a <strstr+0x6>
 801191c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011920:	429e      	cmp	r6, r3
 8011922:	d0f7      	beq.n	8011914 <strstr+0x10>
 8011924:	3001      	adds	r0, #1
 8011926:	7803      	ldrb	r3, [r0, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1ef      	bne.n	801190c <strstr+0x8>
 801192c:	4618      	mov	r0, r3
 801192e:	e7ec      	b.n	801190a <strstr+0x6>

08011930 <_localeconv_r>:
 8011930:	4800      	ldr	r0, [pc, #0]	; (8011934 <_localeconv_r+0x4>)
 8011932:	4770      	bx	lr
 8011934:	20000128 	.word	0x20000128

08011938 <_close_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4d06      	ldr	r5, [pc, #24]	; (8011954 <_close_r+0x1c>)
 801193c:	2300      	movs	r3, #0
 801193e:	4604      	mov	r4, r0
 8011940:	4608      	mov	r0, r1
 8011942:	602b      	str	r3, [r5, #0]
 8011944:	f7f3 f805 	bl	8004952 <_close>
 8011948:	1c43      	adds	r3, r0, #1
 801194a:	d102      	bne.n	8011952 <_close_r+0x1a>
 801194c:	682b      	ldr	r3, [r5, #0]
 801194e:	b103      	cbz	r3, 8011952 <_close_r+0x1a>
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	bd38      	pop	{r3, r4, r5, pc}
 8011954:	20003734 	.word	0x20003734

08011958 <_lseek_r>:
 8011958:	b538      	push	{r3, r4, r5, lr}
 801195a:	4d07      	ldr	r5, [pc, #28]	; (8011978 <_lseek_r+0x20>)
 801195c:	4604      	mov	r4, r0
 801195e:	4608      	mov	r0, r1
 8011960:	4611      	mov	r1, r2
 8011962:	2200      	movs	r2, #0
 8011964:	602a      	str	r2, [r5, #0]
 8011966:	461a      	mov	r2, r3
 8011968:	f7f3 f81a 	bl	80049a0 <_lseek>
 801196c:	1c43      	adds	r3, r0, #1
 801196e:	d102      	bne.n	8011976 <_lseek_r+0x1e>
 8011970:	682b      	ldr	r3, [r5, #0]
 8011972:	b103      	cbz	r3, 8011976 <_lseek_r+0x1e>
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	bd38      	pop	{r3, r4, r5, pc}
 8011978:	20003734 	.word	0x20003734

0801197c <_read_r>:
 801197c:	b538      	push	{r3, r4, r5, lr}
 801197e:	4d07      	ldr	r5, [pc, #28]	; (801199c <_read_r+0x20>)
 8011980:	4604      	mov	r4, r0
 8011982:	4608      	mov	r0, r1
 8011984:	4611      	mov	r1, r2
 8011986:	2200      	movs	r2, #0
 8011988:	602a      	str	r2, [r5, #0]
 801198a:	461a      	mov	r2, r3
 801198c:	f7f2 ffa8 	bl	80048e0 <_read>
 8011990:	1c43      	adds	r3, r0, #1
 8011992:	d102      	bne.n	801199a <_read_r+0x1e>
 8011994:	682b      	ldr	r3, [r5, #0]
 8011996:	b103      	cbz	r3, 801199a <_read_r+0x1e>
 8011998:	6023      	str	r3, [r4, #0]
 801199a:	bd38      	pop	{r3, r4, r5, pc}
 801199c:	20003734 	.word	0x20003734

080119a0 <_sbrk_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4d06      	ldr	r5, [pc, #24]	; (80119bc <_sbrk_r+0x1c>)
 80119a4:	2300      	movs	r3, #0
 80119a6:	4604      	mov	r4, r0
 80119a8:	4608      	mov	r0, r1
 80119aa:	602b      	str	r3, [r5, #0]
 80119ac:	f7f3 f806 	bl	80049bc <_sbrk>
 80119b0:	1c43      	adds	r3, r0, #1
 80119b2:	d102      	bne.n	80119ba <_sbrk_r+0x1a>
 80119b4:	682b      	ldr	r3, [r5, #0]
 80119b6:	b103      	cbz	r3, 80119ba <_sbrk_r+0x1a>
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	20003734 	.word	0x20003734

080119c0 <_write_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	4d07      	ldr	r5, [pc, #28]	; (80119e0 <_write_r+0x20>)
 80119c4:	4604      	mov	r4, r0
 80119c6:	4608      	mov	r0, r1
 80119c8:	4611      	mov	r1, r2
 80119ca:	2200      	movs	r2, #0
 80119cc:	602a      	str	r2, [r5, #0]
 80119ce:	461a      	mov	r2, r3
 80119d0:	f7f2 ffa3 	bl	800491a <_write>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_write_r+0x1e>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_write_r+0x1e>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	20003734 	.word	0x20003734

080119e4 <__errno>:
 80119e4:	4b01      	ldr	r3, [pc, #4]	; (80119ec <__errno+0x8>)
 80119e6:	6818      	ldr	r0, [r3, #0]
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	200001f0 	.word	0x200001f0

080119f0 <__libc_init_array>:
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	4d0d      	ldr	r5, [pc, #52]	; (8011a28 <__libc_init_array+0x38>)
 80119f4:	4c0d      	ldr	r4, [pc, #52]	; (8011a2c <__libc_init_array+0x3c>)
 80119f6:	1b64      	subs	r4, r4, r5
 80119f8:	10a4      	asrs	r4, r4, #2
 80119fa:	2600      	movs	r6, #0
 80119fc:	42a6      	cmp	r6, r4
 80119fe:	d109      	bne.n	8011a14 <__libc_init_array+0x24>
 8011a00:	4d0b      	ldr	r5, [pc, #44]	; (8011a30 <__libc_init_array+0x40>)
 8011a02:	4c0c      	ldr	r4, [pc, #48]	; (8011a34 <__libc_init_array+0x44>)
 8011a04:	f003 fb94 	bl	8015130 <_init>
 8011a08:	1b64      	subs	r4, r4, r5
 8011a0a:	10a4      	asrs	r4, r4, #2
 8011a0c:	2600      	movs	r6, #0
 8011a0e:	42a6      	cmp	r6, r4
 8011a10:	d105      	bne.n	8011a1e <__libc_init_array+0x2e>
 8011a12:	bd70      	pop	{r4, r5, r6, pc}
 8011a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a18:	4798      	blx	r3
 8011a1a:	3601      	adds	r6, #1
 8011a1c:	e7ee      	b.n	80119fc <__libc_init_array+0xc>
 8011a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a22:	4798      	blx	r3
 8011a24:	3601      	adds	r6, #1
 8011a26:	e7f2      	b.n	8011a0e <__libc_init_array+0x1e>
 8011a28:	08015dd8 	.word	0x08015dd8
 8011a2c:	08015dd8 	.word	0x08015dd8
 8011a30:	08015dd8 	.word	0x08015dd8
 8011a34:	08015ddc 	.word	0x08015ddc

08011a38 <__retarget_lock_init_recursive>:
 8011a38:	4770      	bx	lr

08011a3a <__retarget_lock_acquire_recursive>:
 8011a3a:	4770      	bx	lr

08011a3c <__retarget_lock_release_recursive>:
 8011a3c:	4770      	bx	lr

08011a3e <strcpy>:
 8011a3e:	4603      	mov	r3, r0
 8011a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a44:	f803 2b01 	strb.w	r2, [r3], #1
 8011a48:	2a00      	cmp	r2, #0
 8011a4a:	d1f9      	bne.n	8011a40 <strcpy+0x2>
 8011a4c:	4770      	bx	lr

08011a4e <memcpy>:
 8011a4e:	440a      	add	r2, r1
 8011a50:	4291      	cmp	r1, r2
 8011a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a56:	d100      	bne.n	8011a5a <memcpy+0xc>
 8011a58:	4770      	bx	lr
 8011a5a:	b510      	push	{r4, lr}
 8011a5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a64:	4291      	cmp	r1, r2
 8011a66:	d1f9      	bne.n	8011a5c <memcpy+0xe>
 8011a68:	bd10      	pop	{r4, pc}
 8011a6a:	0000      	movs	r0, r0
 8011a6c:	0000      	movs	r0, r0
	...

08011a70 <nan>:
 8011a70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011a78 <nan+0x8>
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	00000000 	.word	0x00000000
 8011a7c:	7ff80000 	.word	0x7ff80000

08011a80 <nanf>:
 8011a80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011a88 <nanf+0x8>
 8011a84:	4770      	bx	lr
 8011a86:	bf00      	nop
 8011a88:	7fc00000 	.word	0x7fc00000

08011a8c <__assert_func>:
 8011a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a8e:	4614      	mov	r4, r2
 8011a90:	461a      	mov	r2, r3
 8011a92:	4b09      	ldr	r3, [pc, #36]	; (8011ab8 <__assert_func+0x2c>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	4605      	mov	r5, r0
 8011a98:	68d8      	ldr	r0, [r3, #12]
 8011a9a:	b14c      	cbz	r4, 8011ab0 <__assert_func+0x24>
 8011a9c:	4b07      	ldr	r3, [pc, #28]	; (8011abc <__assert_func+0x30>)
 8011a9e:	9100      	str	r1, [sp, #0]
 8011aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011aa4:	4906      	ldr	r1, [pc, #24]	; (8011ac0 <__assert_func+0x34>)
 8011aa6:	462b      	mov	r3, r5
 8011aa8:	f002 fa42 	bl	8013f30 <fiprintf>
 8011aac:	f002 faf0 	bl	8014090 <abort>
 8011ab0:	4b04      	ldr	r3, [pc, #16]	; (8011ac4 <__assert_func+0x38>)
 8011ab2:	461c      	mov	r4, r3
 8011ab4:	e7f3      	b.n	8011a9e <__assert_func+0x12>
 8011ab6:	bf00      	nop
 8011ab8:	200001f0 	.word	0x200001f0
 8011abc:	08015b1e 	.word	0x08015b1e
 8011ac0:	08015b2b 	.word	0x08015b2b
 8011ac4:	08015b59 	.word	0x08015b59

08011ac8 <quorem>:
 8011ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011acc:	6903      	ldr	r3, [r0, #16]
 8011ace:	690c      	ldr	r4, [r1, #16]
 8011ad0:	42a3      	cmp	r3, r4
 8011ad2:	4607      	mov	r7, r0
 8011ad4:	db7e      	blt.n	8011bd4 <quorem+0x10c>
 8011ad6:	3c01      	subs	r4, #1
 8011ad8:	f101 0814 	add.w	r8, r1, #20
 8011adc:	f100 0514 	add.w	r5, r0, #20
 8011ae0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011aea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aee:	3301      	adds	r3, #1
 8011af0:	429a      	cmp	r2, r3
 8011af2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011af6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011afa:	fbb2 f6f3 	udiv	r6, r2, r3
 8011afe:	d331      	bcc.n	8011b64 <quorem+0x9c>
 8011b00:	f04f 0e00 	mov.w	lr, #0
 8011b04:	4640      	mov	r0, r8
 8011b06:	46ac      	mov	ip, r5
 8011b08:	46f2      	mov	sl, lr
 8011b0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8011b0e:	b293      	uxth	r3, r2
 8011b10:	fb06 e303 	mla	r3, r6, r3, lr
 8011b14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011b18:	0c1a      	lsrs	r2, r3, #16
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8011b20:	f8dc a000 	ldr.w	sl, [ip]
 8011b24:	fa13 f38a 	uxtah	r3, r3, sl
 8011b28:	fb06 220e 	mla	r2, r6, lr, r2
 8011b2c:	9300      	str	r3, [sp, #0]
 8011b2e:	9b00      	ldr	r3, [sp, #0]
 8011b30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011b34:	b292      	uxth	r2, r2
 8011b36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011b3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b3e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011b42:	4581      	cmp	r9, r0
 8011b44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b48:	f84c 3b04 	str.w	r3, [ip], #4
 8011b4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011b50:	d2db      	bcs.n	8011b0a <quorem+0x42>
 8011b52:	f855 300b 	ldr.w	r3, [r5, fp]
 8011b56:	b92b      	cbnz	r3, 8011b64 <quorem+0x9c>
 8011b58:	9b01      	ldr	r3, [sp, #4]
 8011b5a:	3b04      	subs	r3, #4
 8011b5c:	429d      	cmp	r5, r3
 8011b5e:	461a      	mov	r2, r3
 8011b60:	d32c      	bcc.n	8011bbc <quorem+0xf4>
 8011b62:	613c      	str	r4, [r7, #16]
 8011b64:	4638      	mov	r0, r7
 8011b66:	f001 fca5 	bl	80134b4 <__mcmp>
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	db22      	blt.n	8011bb4 <quorem+0xec>
 8011b6e:	3601      	adds	r6, #1
 8011b70:	4629      	mov	r1, r5
 8011b72:	2000      	movs	r0, #0
 8011b74:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b78:	f8d1 c000 	ldr.w	ip, [r1]
 8011b7c:	b293      	uxth	r3, r2
 8011b7e:	1ac3      	subs	r3, r0, r3
 8011b80:	0c12      	lsrs	r2, r2, #16
 8011b82:	fa13 f38c 	uxtah	r3, r3, ip
 8011b86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011b8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b8e:	b29b      	uxth	r3, r3
 8011b90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b94:	45c1      	cmp	r9, r8
 8011b96:	f841 3b04 	str.w	r3, [r1], #4
 8011b9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011b9e:	d2e9      	bcs.n	8011b74 <quorem+0xac>
 8011ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011ba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ba8:	b922      	cbnz	r2, 8011bb4 <quorem+0xec>
 8011baa:	3b04      	subs	r3, #4
 8011bac:	429d      	cmp	r5, r3
 8011bae:	461a      	mov	r2, r3
 8011bb0:	d30a      	bcc.n	8011bc8 <quorem+0x100>
 8011bb2:	613c      	str	r4, [r7, #16]
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	b003      	add	sp, #12
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	6812      	ldr	r2, [r2, #0]
 8011bbe:	3b04      	subs	r3, #4
 8011bc0:	2a00      	cmp	r2, #0
 8011bc2:	d1ce      	bne.n	8011b62 <quorem+0x9a>
 8011bc4:	3c01      	subs	r4, #1
 8011bc6:	e7c9      	b.n	8011b5c <quorem+0x94>
 8011bc8:	6812      	ldr	r2, [r2, #0]
 8011bca:	3b04      	subs	r3, #4
 8011bcc:	2a00      	cmp	r2, #0
 8011bce:	d1f0      	bne.n	8011bb2 <quorem+0xea>
 8011bd0:	3c01      	subs	r4, #1
 8011bd2:	e7eb      	b.n	8011bac <quorem+0xe4>
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e7ee      	b.n	8011bb6 <quorem+0xee>

08011bd8 <_dtoa_r>:
 8011bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bdc:	ed2d 8b04 	vpush	{d8-d9}
 8011be0:	69c5      	ldr	r5, [r0, #28]
 8011be2:	b093      	sub	sp, #76	; 0x4c
 8011be4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011be8:	ec57 6b10 	vmov	r6, r7, d0
 8011bec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011bf0:	9107      	str	r1, [sp, #28]
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	920a      	str	r2, [sp, #40]	; 0x28
 8011bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8011bf8:	b975      	cbnz	r5, 8011c18 <_dtoa_r+0x40>
 8011bfa:	2010      	movs	r0, #16
 8011bfc:	f7fd ffc2 	bl	800fb84 <malloc>
 8011c00:	4602      	mov	r2, r0
 8011c02:	61e0      	str	r0, [r4, #28]
 8011c04:	b920      	cbnz	r0, 8011c10 <_dtoa_r+0x38>
 8011c06:	4bae      	ldr	r3, [pc, #696]	; (8011ec0 <_dtoa_r+0x2e8>)
 8011c08:	21ef      	movs	r1, #239	; 0xef
 8011c0a:	48ae      	ldr	r0, [pc, #696]	; (8011ec4 <_dtoa_r+0x2ec>)
 8011c0c:	f7ff ff3e 	bl	8011a8c <__assert_func>
 8011c10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011c14:	6005      	str	r5, [r0, #0]
 8011c16:	60c5      	str	r5, [r0, #12]
 8011c18:	69e3      	ldr	r3, [r4, #28]
 8011c1a:	6819      	ldr	r1, [r3, #0]
 8011c1c:	b151      	cbz	r1, 8011c34 <_dtoa_r+0x5c>
 8011c1e:	685a      	ldr	r2, [r3, #4]
 8011c20:	604a      	str	r2, [r1, #4]
 8011c22:	2301      	movs	r3, #1
 8011c24:	4093      	lsls	r3, r2
 8011c26:	608b      	str	r3, [r1, #8]
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f001 f9bd 	bl	8012fa8 <_Bfree>
 8011c2e:	69e3      	ldr	r3, [r4, #28]
 8011c30:	2200      	movs	r2, #0
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	1e3b      	subs	r3, r7, #0
 8011c36:	bfbb      	ittet	lt
 8011c38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011c3c:	9303      	strlt	r3, [sp, #12]
 8011c3e:	2300      	movge	r3, #0
 8011c40:	2201      	movlt	r2, #1
 8011c42:	bfac      	ite	ge
 8011c44:	f8c8 3000 	strge.w	r3, [r8]
 8011c48:	f8c8 2000 	strlt.w	r2, [r8]
 8011c4c:	4b9e      	ldr	r3, [pc, #632]	; (8011ec8 <_dtoa_r+0x2f0>)
 8011c4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011c52:	ea33 0308 	bics.w	r3, r3, r8
 8011c56:	d11b      	bne.n	8011c90 <_dtoa_r+0xb8>
 8011c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011c64:	4333      	orrs	r3, r6
 8011c66:	f000 8593 	beq.w	8012790 <_dtoa_r+0xbb8>
 8011c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c6c:	b963      	cbnz	r3, 8011c88 <_dtoa_r+0xb0>
 8011c6e:	4b97      	ldr	r3, [pc, #604]	; (8011ecc <_dtoa_r+0x2f4>)
 8011c70:	e027      	b.n	8011cc2 <_dtoa_r+0xea>
 8011c72:	4b97      	ldr	r3, [pc, #604]	; (8011ed0 <_dtoa_r+0x2f8>)
 8011c74:	9300      	str	r3, [sp, #0]
 8011c76:	3308      	adds	r3, #8
 8011c78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011c7a:	6013      	str	r3, [r2, #0]
 8011c7c:	9800      	ldr	r0, [sp, #0]
 8011c7e:	b013      	add	sp, #76	; 0x4c
 8011c80:	ecbd 8b04 	vpop	{d8-d9}
 8011c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c88:	4b90      	ldr	r3, [pc, #576]	; (8011ecc <_dtoa_r+0x2f4>)
 8011c8a:	9300      	str	r3, [sp, #0]
 8011c8c:	3303      	adds	r3, #3
 8011c8e:	e7f3      	b.n	8011c78 <_dtoa_r+0xa0>
 8011c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c94:	2200      	movs	r2, #0
 8011c96:	ec51 0b17 	vmov	r0, r1, d7
 8011c9a:	eeb0 8a47 	vmov.f32	s16, s14
 8011c9e:	eef0 8a67 	vmov.f32	s17, s15
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	f7ee ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ca8:	4681      	mov	r9, r0
 8011caa:	b160      	cbz	r0, 8011cc6 <_dtoa_r+0xee>
 8011cac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011cae:	2301      	movs	r3, #1
 8011cb0:	6013      	str	r3, [r2, #0]
 8011cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	f000 8568 	beq.w	801278a <_dtoa_r+0xbb2>
 8011cba:	4b86      	ldr	r3, [pc, #536]	; (8011ed4 <_dtoa_r+0x2fc>)
 8011cbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	e7da      	b.n	8011c7c <_dtoa_r+0xa4>
 8011cc6:	aa10      	add	r2, sp, #64	; 0x40
 8011cc8:	a911      	add	r1, sp, #68	; 0x44
 8011cca:	4620      	mov	r0, r4
 8011ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8011cd0:	eef0 0a68 	vmov.f32	s1, s17
 8011cd4:	f001 fd04 	bl	80136e0 <__d2b>
 8011cd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011cdc:	4682      	mov	sl, r0
 8011cde:	2d00      	cmp	r5, #0
 8011ce0:	d07f      	beq.n	8011de2 <_dtoa_r+0x20a>
 8011ce2:	ee18 3a90 	vmov	r3, s17
 8011ce6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011cea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011cee:	ec51 0b18 	vmov	r0, r1, d8
 8011cf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011cfa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011cfe:	4619      	mov	r1, r3
 8011d00:	2200      	movs	r2, #0
 8011d02:	4b75      	ldr	r3, [pc, #468]	; (8011ed8 <_dtoa_r+0x300>)
 8011d04:	f7ee fac0 	bl	8000288 <__aeabi_dsub>
 8011d08:	a367      	add	r3, pc, #412	; (adr r3, 8011ea8 <_dtoa_r+0x2d0>)
 8011d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0e:	f7ee fc73 	bl	80005f8 <__aeabi_dmul>
 8011d12:	a367      	add	r3, pc, #412	; (adr r3, 8011eb0 <_dtoa_r+0x2d8>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	f7ee fab8 	bl	800028c <__adddf3>
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	4628      	mov	r0, r5
 8011d20:	460f      	mov	r7, r1
 8011d22:	f7ee fbff 	bl	8000524 <__aeabi_i2d>
 8011d26:	a364      	add	r3, pc, #400	; (adr r3, 8011eb8 <_dtoa_r+0x2e0>)
 8011d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2c:	f7ee fc64 	bl	80005f8 <__aeabi_dmul>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4630      	mov	r0, r6
 8011d36:	4639      	mov	r1, r7
 8011d38:	f7ee faa8 	bl	800028c <__adddf3>
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	f7ee ff0a 	bl	8000b58 <__aeabi_d2iz>
 8011d44:	2200      	movs	r2, #0
 8011d46:	4683      	mov	fp, r0
 8011d48:	2300      	movs	r3, #0
 8011d4a:	4630      	mov	r0, r6
 8011d4c:	4639      	mov	r1, r7
 8011d4e:	f7ee fec5 	bl	8000adc <__aeabi_dcmplt>
 8011d52:	b148      	cbz	r0, 8011d68 <_dtoa_r+0x190>
 8011d54:	4658      	mov	r0, fp
 8011d56:	f7ee fbe5 	bl	8000524 <__aeabi_i2d>
 8011d5a:	4632      	mov	r2, r6
 8011d5c:	463b      	mov	r3, r7
 8011d5e:	f7ee feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d62:	b908      	cbnz	r0, 8011d68 <_dtoa_r+0x190>
 8011d64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d68:	f1bb 0f16 	cmp.w	fp, #22
 8011d6c:	d857      	bhi.n	8011e1e <_dtoa_r+0x246>
 8011d6e:	4b5b      	ldr	r3, [pc, #364]	; (8011edc <_dtoa_r+0x304>)
 8011d70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	ec51 0b18 	vmov	r0, r1, d8
 8011d7c:	f7ee feae 	bl	8000adc <__aeabi_dcmplt>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d04e      	beq.n	8011e22 <_dtoa_r+0x24a>
 8011d84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d88:	2300      	movs	r3, #0
 8011d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8011d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d8e:	1b5b      	subs	r3, r3, r5
 8011d90:	1e5a      	subs	r2, r3, #1
 8011d92:	bf45      	ittet	mi
 8011d94:	f1c3 0301 	rsbmi	r3, r3, #1
 8011d98:	9305      	strmi	r3, [sp, #20]
 8011d9a:	2300      	movpl	r3, #0
 8011d9c:	2300      	movmi	r3, #0
 8011d9e:	9206      	str	r2, [sp, #24]
 8011da0:	bf54      	ite	pl
 8011da2:	9305      	strpl	r3, [sp, #20]
 8011da4:	9306      	strmi	r3, [sp, #24]
 8011da6:	f1bb 0f00 	cmp.w	fp, #0
 8011daa:	db3c      	blt.n	8011e26 <_dtoa_r+0x24e>
 8011dac:	9b06      	ldr	r3, [sp, #24]
 8011dae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011db2:	445b      	add	r3, fp
 8011db4:	9306      	str	r3, [sp, #24]
 8011db6:	2300      	movs	r3, #0
 8011db8:	9308      	str	r3, [sp, #32]
 8011dba:	9b07      	ldr	r3, [sp, #28]
 8011dbc:	2b09      	cmp	r3, #9
 8011dbe:	d868      	bhi.n	8011e92 <_dtoa_r+0x2ba>
 8011dc0:	2b05      	cmp	r3, #5
 8011dc2:	bfc4      	itt	gt
 8011dc4:	3b04      	subgt	r3, #4
 8011dc6:	9307      	strgt	r3, [sp, #28]
 8011dc8:	9b07      	ldr	r3, [sp, #28]
 8011dca:	f1a3 0302 	sub.w	r3, r3, #2
 8011dce:	bfcc      	ite	gt
 8011dd0:	2500      	movgt	r5, #0
 8011dd2:	2501      	movle	r5, #1
 8011dd4:	2b03      	cmp	r3, #3
 8011dd6:	f200 8085 	bhi.w	8011ee4 <_dtoa_r+0x30c>
 8011dda:	e8df f003 	tbb	[pc, r3]
 8011dde:	3b2e      	.short	0x3b2e
 8011de0:	5839      	.short	0x5839
 8011de2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011de6:	441d      	add	r5, r3
 8011de8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011dec:	2b20      	cmp	r3, #32
 8011dee:	bfc1      	itttt	gt
 8011df0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011df4:	fa08 f803 	lslgt.w	r8, r8, r3
 8011df8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011dfc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011e00:	bfd6      	itet	le
 8011e02:	f1c3 0320 	rsble	r3, r3, #32
 8011e06:	ea48 0003 	orrgt.w	r0, r8, r3
 8011e0a:	fa06 f003 	lslle.w	r0, r6, r3
 8011e0e:	f7ee fb79 	bl	8000504 <__aeabi_ui2d>
 8011e12:	2201      	movs	r2, #1
 8011e14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011e18:	3d01      	subs	r5, #1
 8011e1a:	920e      	str	r2, [sp, #56]	; 0x38
 8011e1c:	e76f      	b.n	8011cfe <_dtoa_r+0x126>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e7b3      	b.n	8011d8a <_dtoa_r+0x1b2>
 8011e22:	900c      	str	r0, [sp, #48]	; 0x30
 8011e24:	e7b2      	b.n	8011d8c <_dtoa_r+0x1b4>
 8011e26:	9b05      	ldr	r3, [sp, #20]
 8011e28:	eba3 030b 	sub.w	r3, r3, fp
 8011e2c:	9305      	str	r3, [sp, #20]
 8011e2e:	f1cb 0300 	rsb	r3, fp, #0
 8011e32:	9308      	str	r3, [sp, #32]
 8011e34:	2300      	movs	r3, #0
 8011e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e38:	e7bf      	b.n	8011dba <_dtoa_r+0x1e2>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	dc52      	bgt.n	8011eea <_dtoa_r+0x312>
 8011e44:	2301      	movs	r3, #1
 8011e46:	9301      	str	r3, [sp, #4]
 8011e48:	9304      	str	r3, [sp, #16]
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	920a      	str	r2, [sp, #40]	; 0x28
 8011e4e:	e00b      	b.n	8011e68 <_dtoa_r+0x290>
 8011e50:	2301      	movs	r3, #1
 8011e52:	e7f3      	b.n	8011e3c <_dtoa_r+0x264>
 8011e54:	2300      	movs	r3, #0
 8011e56:	9309      	str	r3, [sp, #36]	; 0x24
 8011e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e5a:	445b      	add	r3, fp
 8011e5c:	9301      	str	r3, [sp, #4]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	9304      	str	r3, [sp, #16]
 8011e64:	bfb8      	it	lt
 8011e66:	2301      	movlt	r3, #1
 8011e68:	69e0      	ldr	r0, [r4, #28]
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	2204      	movs	r2, #4
 8011e6e:	f102 0614 	add.w	r6, r2, #20
 8011e72:	429e      	cmp	r6, r3
 8011e74:	d93d      	bls.n	8011ef2 <_dtoa_r+0x31a>
 8011e76:	6041      	str	r1, [r0, #4]
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f001 f855 	bl	8012f28 <_Balloc>
 8011e7e:	9000      	str	r0, [sp, #0]
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d139      	bne.n	8011ef8 <_dtoa_r+0x320>
 8011e84:	4b16      	ldr	r3, [pc, #88]	; (8011ee0 <_dtoa_r+0x308>)
 8011e86:	4602      	mov	r2, r0
 8011e88:	f240 11af 	movw	r1, #431	; 0x1af
 8011e8c:	e6bd      	b.n	8011c0a <_dtoa_r+0x32>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e7e1      	b.n	8011e56 <_dtoa_r+0x27e>
 8011e92:	2501      	movs	r5, #1
 8011e94:	2300      	movs	r3, #0
 8011e96:	9307      	str	r3, [sp, #28]
 8011e98:	9509      	str	r5, [sp, #36]	; 0x24
 8011e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e9e:	9301      	str	r3, [sp, #4]
 8011ea0:	9304      	str	r3, [sp, #16]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	2312      	movs	r3, #18
 8011ea6:	e7d1      	b.n	8011e4c <_dtoa_r+0x274>
 8011ea8:	636f4361 	.word	0x636f4361
 8011eac:	3fd287a7 	.word	0x3fd287a7
 8011eb0:	8b60c8b3 	.word	0x8b60c8b3
 8011eb4:	3fc68a28 	.word	0x3fc68a28
 8011eb8:	509f79fb 	.word	0x509f79fb
 8011ebc:	3fd34413 	.word	0x3fd34413
 8011ec0:	08015aa5 	.word	0x08015aa5
 8011ec4:	08015b67 	.word	0x08015b67
 8011ec8:	7ff00000 	.word	0x7ff00000
 8011ecc:	08015b63 	.word	0x08015b63
 8011ed0:	08015b5a 	.word	0x08015b5a
 8011ed4:	08015a82 	.word	0x08015a82
 8011ed8:	3ff80000 	.word	0x3ff80000
 8011edc:	08015cb8 	.word	0x08015cb8
 8011ee0:	08015bbf 	.word	0x08015bbf
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ee8:	e7d7      	b.n	8011e9a <_dtoa_r+0x2c2>
 8011eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eec:	9301      	str	r3, [sp, #4]
 8011eee:	9304      	str	r3, [sp, #16]
 8011ef0:	e7ba      	b.n	8011e68 <_dtoa_r+0x290>
 8011ef2:	3101      	adds	r1, #1
 8011ef4:	0052      	lsls	r2, r2, #1
 8011ef6:	e7ba      	b.n	8011e6e <_dtoa_r+0x296>
 8011ef8:	69e3      	ldr	r3, [r4, #28]
 8011efa:	9a00      	ldr	r2, [sp, #0]
 8011efc:	601a      	str	r2, [r3, #0]
 8011efe:	9b04      	ldr	r3, [sp, #16]
 8011f00:	2b0e      	cmp	r3, #14
 8011f02:	f200 80a8 	bhi.w	8012056 <_dtoa_r+0x47e>
 8011f06:	2d00      	cmp	r5, #0
 8011f08:	f000 80a5 	beq.w	8012056 <_dtoa_r+0x47e>
 8011f0c:	f1bb 0f00 	cmp.w	fp, #0
 8011f10:	dd38      	ble.n	8011f84 <_dtoa_r+0x3ac>
 8011f12:	4bc0      	ldr	r3, [pc, #768]	; (8012214 <_dtoa_r+0x63c>)
 8011f14:	f00b 020f 	and.w	r2, fp, #15
 8011f18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011f20:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011f24:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011f28:	d019      	beq.n	8011f5e <_dtoa_r+0x386>
 8011f2a:	4bbb      	ldr	r3, [pc, #748]	; (8012218 <_dtoa_r+0x640>)
 8011f2c:	ec51 0b18 	vmov	r0, r1, d8
 8011f30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011f34:	f7ee fc8a 	bl	800084c <__aeabi_ddiv>
 8011f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f3c:	f008 080f 	and.w	r8, r8, #15
 8011f40:	2503      	movs	r5, #3
 8011f42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012218 <_dtoa_r+0x640>
 8011f46:	f1b8 0f00 	cmp.w	r8, #0
 8011f4a:	d10a      	bne.n	8011f62 <_dtoa_r+0x38a>
 8011f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f50:	4632      	mov	r2, r6
 8011f52:	463b      	mov	r3, r7
 8011f54:	f7ee fc7a 	bl	800084c <__aeabi_ddiv>
 8011f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f5c:	e02b      	b.n	8011fb6 <_dtoa_r+0x3de>
 8011f5e:	2502      	movs	r5, #2
 8011f60:	e7ef      	b.n	8011f42 <_dtoa_r+0x36a>
 8011f62:	f018 0f01 	tst.w	r8, #1
 8011f66:	d008      	beq.n	8011f7a <_dtoa_r+0x3a2>
 8011f68:	4630      	mov	r0, r6
 8011f6a:	4639      	mov	r1, r7
 8011f6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011f70:	f7ee fb42 	bl	80005f8 <__aeabi_dmul>
 8011f74:	3501      	adds	r5, #1
 8011f76:	4606      	mov	r6, r0
 8011f78:	460f      	mov	r7, r1
 8011f7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f7e:	f109 0908 	add.w	r9, r9, #8
 8011f82:	e7e0      	b.n	8011f46 <_dtoa_r+0x36e>
 8011f84:	f000 809f 	beq.w	80120c6 <_dtoa_r+0x4ee>
 8011f88:	f1cb 0600 	rsb	r6, fp, #0
 8011f8c:	4ba1      	ldr	r3, [pc, #644]	; (8012214 <_dtoa_r+0x63c>)
 8011f8e:	4fa2      	ldr	r7, [pc, #648]	; (8012218 <_dtoa_r+0x640>)
 8011f90:	f006 020f 	and.w	r2, r6, #15
 8011f94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	ec51 0b18 	vmov	r0, r1, d8
 8011fa0:	f7ee fb2a 	bl	80005f8 <__aeabi_dmul>
 8011fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fa8:	1136      	asrs	r6, r6, #4
 8011faa:	2300      	movs	r3, #0
 8011fac:	2502      	movs	r5, #2
 8011fae:	2e00      	cmp	r6, #0
 8011fb0:	d17e      	bne.n	80120b0 <_dtoa_r+0x4d8>
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1d0      	bne.n	8011f58 <_dtoa_r+0x380>
 8011fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 8084 	beq.w	80120ca <_dtoa_r+0x4f2>
 8011fc2:	4b96      	ldr	r3, [pc, #600]	; (801221c <_dtoa_r+0x644>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	4640      	mov	r0, r8
 8011fc8:	4649      	mov	r1, r9
 8011fca:	f7ee fd87 	bl	8000adc <__aeabi_dcmplt>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d07b      	beq.n	80120ca <_dtoa_r+0x4f2>
 8011fd2:	9b04      	ldr	r3, [sp, #16]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d078      	beq.n	80120ca <_dtoa_r+0x4f2>
 8011fd8:	9b01      	ldr	r3, [sp, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	dd39      	ble.n	8012052 <_dtoa_r+0x47a>
 8011fde:	4b90      	ldr	r3, [pc, #576]	; (8012220 <_dtoa_r+0x648>)
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	4640      	mov	r0, r8
 8011fe4:	4649      	mov	r1, r9
 8011fe6:	f7ee fb07 	bl	80005f8 <__aeabi_dmul>
 8011fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fee:	9e01      	ldr	r6, [sp, #4]
 8011ff0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011ff4:	3501      	adds	r5, #1
 8011ff6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	f7ee fa92 	bl	8000524 <__aeabi_i2d>
 8012000:	4642      	mov	r2, r8
 8012002:	464b      	mov	r3, r9
 8012004:	f7ee faf8 	bl	80005f8 <__aeabi_dmul>
 8012008:	4b86      	ldr	r3, [pc, #536]	; (8012224 <_dtoa_r+0x64c>)
 801200a:	2200      	movs	r2, #0
 801200c:	f7ee f93e 	bl	800028c <__adddf3>
 8012010:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012018:	9303      	str	r3, [sp, #12]
 801201a:	2e00      	cmp	r6, #0
 801201c:	d158      	bne.n	80120d0 <_dtoa_r+0x4f8>
 801201e:	4b82      	ldr	r3, [pc, #520]	; (8012228 <_dtoa_r+0x650>)
 8012020:	2200      	movs	r2, #0
 8012022:	4640      	mov	r0, r8
 8012024:	4649      	mov	r1, r9
 8012026:	f7ee f92f 	bl	8000288 <__aeabi_dsub>
 801202a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801202e:	4680      	mov	r8, r0
 8012030:	4689      	mov	r9, r1
 8012032:	f7ee fd71 	bl	8000b18 <__aeabi_dcmpgt>
 8012036:	2800      	cmp	r0, #0
 8012038:	f040 8296 	bne.w	8012568 <_dtoa_r+0x990>
 801203c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012040:	4640      	mov	r0, r8
 8012042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012046:	4649      	mov	r1, r9
 8012048:	f7ee fd48 	bl	8000adc <__aeabi_dcmplt>
 801204c:	2800      	cmp	r0, #0
 801204e:	f040 8289 	bne.w	8012564 <_dtoa_r+0x98c>
 8012052:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012056:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012058:	2b00      	cmp	r3, #0
 801205a:	f2c0 814e 	blt.w	80122fa <_dtoa_r+0x722>
 801205e:	f1bb 0f0e 	cmp.w	fp, #14
 8012062:	f300 814a 	bgt.w	80122fa <_dtoa_r+0x722>
 8012066:	4b6b      	ldr	r3, [pc, #428]	; (8012214 <_dtoa_r+0x63c>)
 8012068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801206c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012072:	2b00      	cmp	r3, #0
 8012074:	f280 80dc 	bge.w	8012230 <_dtoa_r+0x658>
 8012078:	9b04      	ldr	r3, [sp, #16]
 801207a:	2b00      	cmp	r3, #0
 801207c:	f300 80d8 	bgt.w	8012230 <_dtoa_r+0x658>
 8012080:	f040 826f 	bne.w	8012562 <_dtoa_r+0x98a>
 8012084:	4b68      	ldr	r3, [pc, #416]	; (8012228 <_dtoa_r+0x650>)
 8012086:	2200      	movs	r2, #0
 8012088:	4640      	mov	r0, r8
 801208a:	4649      	mov	r1, r9
 801208c:	f7ee fab4 	bl	80005f8 <__aeabi_dmul>
 8012090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012094:	f7ee fd36 	bl	8000b04 <__aeabi_dcmpge>
 8012098:	9e04      	ldr	r6, [sp, #16]
 801209a:	4637      	mov	r7, r6
 801209c:	2800      	cmp	r0, #0
 801209e:	f040 8245 	bne.w	801252c <_dtoa_r+0x954>
 80120a2:	9d00      	ldr	r5, [sp, #0]
 80120a4:	2331      	movs	r3, #49	; 0x31
 80120a6:	f805 3b01 	strb.w	r3, [r5], #1
 80120aa:	f10b 0b01 	add.w	fp, fp, #1
 80120ae:	e241      	b.n	8012534 <_dtoa_r+0x95c>
 80120b0:	07f2      	lsls	r2, r6, #31
 80120b2:	d505      	bpl.n	80120c0 <_dtoa_r+0x4e8>
 80120b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120b8:	f7ee fa9e 	bl	80005f8 <__aeabi_dmul>
 80120bc:	3501      	adds	r5, #1
 80120be:	2301      	movs	r3, #1
 80120c0:	1076      	asrs	r6, r6, #1
 80120c2:	3708      	adds	r7, #8
 80120c4:	e773      	b.n	8011fae <_dtoa_r+0x3d6>
 80120c6:	2502      	movs	r5, #2
 80120c8:	e775      	b.n	8011fb6 <_dtoa_r+0x3de>
 80120ca:	9e04      	ldr	r6, [sp, #16]
 80120cc:	465f      	mov	r7, fp
 80120ce:	e792      	b.n	8011ff6 <_dtoa_r+0x41e>
 80120d0:	9900      	ldr	r1, [sp, #0]
 80120d2:	4b50      	ldr	r3, [pc, #320]	; (8012214 <_dtoa_r+0x63c>)
 80120d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120d8:	4431      	add	r1, r6
 80120da:	9102      	str	r1, [sp, #8]
 80120dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120de:	eeb0 9a47 	vmov.f32	s18, s14
 80120e2:	eef0 9a67 	vmov.f32	s19, s15
 80120e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80120ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80120ee:	2900      	cmp	r1, #0
 80120f0:	d044      	beq.n	801217c <_dtoa_r+0x5a4>
 80120f2:	494e      	ldr	r1, [pc, #312]	; (801222c <_dtoa_r+0x654>)
 80120f4:	2000      	movs	r0, #0
 80120f6:	f7ee fba9 	bl	800084c <__aeabi_ddiv>
 80120fa:	ec53 2b19 	vmov	r2, r3, d9
 80120fe:	f7ee f8c3 	bl	8000288 <__aeabi_dsub>
 8012102:	9d00      	ldr	r5, [sp, #0]
 8012104:	ec41 0b19 	vmov	d9, r0, r1
 8012108:	4649      	mov	r1, r9
 801210a:	4640      	mov	r0, r8
 801210c:	f7ee fd24 	bl	8000b58 <__aeabi_d2iz>
 8012110:	4606      	mov	r6, r0
 8012112:	f7ee fa07 	bl	8000524 <__aeabi_i2d>
 8012116:	4602      	mov	r2, r0
 8012118:	460b      	mov	r3, r1
 801211a:	4640      	mov	r0, r8
 801211c:	4649      	mov	r1, r9
 801211e:	f7ee f8b3 	bl	8000288 <__aeabi_dsub>
 8012122:	3630      	adds	r6, #48	; 0x30
 8012124:	f805 6b01 	strb.w	r6, [r5], #1
 8012128:	ec53 2b19 	vmov	r2, r3, d9
 801212c:	4680      	mov	r8, r0
 801212e:	4689      	mov	r9, r1
 8012130:	f7ee fcd4 	bl	8000adc <__aeabi_dcmplt>
 8012134:	2800      	cmp	r0, #0
 8012136:	d164      	bne.n	8012202 <_dtoa_r+0x62a>
 8012138:	4642      	mov	r2, r8
 801213a:	464b      	mov	r3, r9
 801213c:	4937      	ldr	r1, [pc, #220]	; (801221c <_dtoa_r+0x644>)
 801213e:	2000      	movs	r0, #0
 8012140:	f7ee f8a2 	bl	8000288 <__aeabi_dsub>
 8012144:	ec53 2b19 	vmov	r2, r3, d9
 8012148:	f7ee fcc8 	bl	8000adc <__aeabi_dcmplt>
 801214c:	2800      	cmp	r0, #0
 801214e:	f040 80b6 	bne.w	80122be <_dtoa_r+0x6e6>
 8012152:	9b02      	ldr	r3, [sp, #8]
 8012154:	429d      	cmp	r5, r3
 8012156:	f43f af7c 	beq.w	8012052 <_dtoa_r+0x47a>
 801215a:	4b31      	ldr	r3, [pc, #196]	; (8012220 <_dtoa_r+0x648>)
 801215c:	ec51 0b19 	vmov	r0, r1, d9
 8012160:	2200      	movs	r2, #0
 8012162:	f7ee fa49 	bl	80005f8 <__aeabi_dmul>
 8012166:	4b2e      	ldr	r3, [pc, #184]	; (8012220 <_dtoa_r+0x648>)
 8012168:	ec41 0b19 	vmov	d9, r0, r1
 801216c:	2200      	movs	r2, #0
 801216e:	4640      	mov	r0, r8
 8012170:	4649      	mov	r1, r9
 8012172:	f7ee fa41 	bl	80005f8 <__aeabi_dmul>
 8012176:	4680      	mov	r8, r0
 8012178:	4689      	mov	r9, r1
 801217a:	e7c5      	b.n	8012108 <_dtoa_r+0x530>
 801217c:	ec51 0b17 	vmov	r0, r1, d7
 8012180:	f7ee fa3a 	bl	80005f8 <__aeabi_dmul>
 8012184:	9b02      	ldr	r3, [sp, #8]
 8012186:	9d00      	ldr	r5, [sp, #0]
 8012188:	930f      	str	r3, [sp, #60]	; 0x3c
 801218a:	ec41 0b19 	vmov	d9, r0, r1
 801218e:	4649      	mov	r1, r9
 8012190:	4640      	mov	r0, r8
 8012192:	f7ee fce1 	bl	8000b58 <__aeabi_d2iz>
 8012196:	4606      	mov	r6, r0
 8012198:	f7ee f9c4 	bl	8000524 <__aeabi_i2d>
 801219c:	3630      	adds	r6, #48	; 0x30
 801219e:	4602      	mov	r2, r0
 80121a0:	460b      	mov	r3, r1
 80121a2:	4640      	mov	r0, r8
 80121a4:	4649      	mov	r1, r9
 80121a6:	f7ee f86f 	bl	8000288 <__aeabi_dsub>
 80121aa:	f805 6b01 	strb.w	r6, [r5], #1
 80121ae:	9b02      	ldr	r3, [sp, #8]
 80121b0:	429d      	cmp	r5, r3
 80121b2:	4680      	mov	r8, r0
 80121b4:	4689      	mov	r9, r1
 80121b6:	f04f 0200 	mov.w	r2, #0
 80121ba:	d124      	bne.n	8012206 <_dtoa_r+0x62e>
 80121bc:	4b1b      	ldr	r3, [pc, #108]	; (801222c <_dtoa_r+0x654>)
 80121be:	ec51 0b19 	vmov	r0, r1, d9
 80121c2:	f7ee f863 	bl	800028c <__adddf3>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	4640      	mov	r0, r8
 80121cc:	4649      	mov	r1, r9
 80121ce:	f7ee fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d173      	bne.n	80122be <_dtoa_r+0x6e6>
 80121d6:	ec53 2b19 	vmov	r2, r3, d9
 80121da:	4914      	ldr	r1, [pc, #80]	; (801222c <_dtoa_r+0x654>)
 80121dc:	2000      	movs	r0, #0
 80121de:	f7ee f853 	bl	8000288 <__aeabi_dsub>
 80121e2:	4602      	mov	r2, r0
 80121e4:	460b      	mov	r3, r1
 80121e6:	4640      	mov	r0, r8
 80121e8:	4649      	mov	r1, r9
 80121ea:	f7ee fc77 	bl	8000adc <__aeabi_dcmplt>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	f43f af2f 	beq.w	8012052 <_dtoa_r+0x47a>
 80121f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80121f6:	1e6b      	subs	r3, r5, #1
 80121f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80121fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80121fe:	2b30      	cmp	r3, #48	; 0x30
 8012200:	d0f8      	beq.n	80121f4 <_dtoa_r+0x61c>
 8012202:	46bb      	mov	fp, r7
 8012204:	e04a      	b.n	801229c <_dtoa_r+0x6c4>
 8012206:	4b06      	ldr	r3, [pc, #24]	; (8012220 <_dtoa_r+0x648>)
 8012208:	f7ee f9f6 	bl	80005f8 <__aeabi_dmul>
 801220c:	4680      	mov	r8, r0
 801220e:	4689      	mov	r9, r1
 8012210:	e7bd      	b.n	801218e <_dtoa_r+0x5b6>
 8012212:	bf00      	nop
 8012214:	08015cb8 	.word	0x08015cb8
 8012218:	08015c90 	.word	0x08015c90
 801221c:	3ff00000 	.word	0x3ff00000
 8012220:	40240000 	.word	0x40240000
 8012224:	401c0000 	.word	0x401c0000
 8012228:	40140000 	.word	0x40140000
 801222c:	3fe00000 	.word	0x3fe00000
 8012230:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012234:	9d00      	ldr	r5, [sp, #0]
 8012236:	4642      	mov	r2, r8
 8012238:	464b      	mov	r3, r9
 801223a:	4630      	mov	r0, r6
 801223c:	4639      	mov	r1, r7
 801223e:	f7ee fb05 	bl	800084c <__aeabi_ddiv>
 8012242:	f7ee fc89 	bl	8000b58 <__aeabi_d2iz>
 8012246:	9001      	str	r0, [sp, #4]
 8012248:	f7ee f96c 	bl	8000524 <__aeabi_i2d>
 801224c:	4642      	mov	r2, r8
 801224e:	464b      	mov	r3, r9
 8012250:	f7ee f9d2 	bl	80005f8 <__aeabi_dmul>
 8012254:	4602      	mov	r2, r0
 8012256:	460b      	mov	r3, r1
 8012258:	4630      	mov	r0, r6
 801225a:	4639      	mov	r1, r7
 801225c:	f7ee f814 	bl	8000288 <__aeabi_dsub>
 8012260:	9e01      	ldr	r6, [sp, #4]
 8012262:	9f04      	ldr	r7, [sp, #16]
 8012264:	3630      	adds	r6, #48	; 0x30
 8012266:	f805 6b01 	strb.w	r6, [r5], #1
 801226a:	9e00      	ldr	r6, [sp, #0]
 801226c:	1bae      	subs	r6, r5, r6
 801226e:	42b7      	cmp	r7, r6
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	d134      	bne.n	80122e0 <_dtoa_r+0x708>
 8012276:	f7ee f809 	bl	800028c <__adddf3>
 801227a:	4642      	mov	r2, r8
 801227c:	464b      	mov	r3, r9
 801227e:	4606      	mov	r6, r0
 8012280:	460f      	mov	r7, r1
 8012282:	f7ee fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8012286:	b9c8      	cbnz	r0, 80122bc <_dtoa_r+0x6e4>
 8012288:	4642      	mov	r2, r8
 801228a:	464b      	mov	r3, r9
 801228c:	4630      	mov	r0, r6
 801228e:	4639      	mov	r1, r7
 8012290:	f7ee fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8012294:	b110      	cbz	r0, 801229c <_dtoa_r+0x6c4>
 8012296:	9b01      	ldr	r3, [sp, #4]
 8012298:	07db      	lsls	r3, r3, #31
 801229a:	d40f      	bmi.n	80122bc <_dtoa_r+0x6e4>
 801229c:	4651      	mov	r1, sl
 801229e:	4620      	mov	r0, r4
 80122a0:	f000 fe82 	bl	8012fa8 <_Bfree>
 80122a4:	2300      	movs	r3, #0
 80122a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122a8:	702b      	strb	r3, [r5, #0]
 80122aa:	f10b 0301 	add.w	r3, fp, #1
 80122ae:	6013      	str	r3, [r2, #0]
 80122b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f43f ace2 	beq.w	8011c7c <_dtoa_r+0xa4>
 80122b8:	601d      	str	r5, [r3, #0]
 80122ba:	e4df      	b.n	8011c7c <_dtoa_r+0xa4>
 80122bc:	465f      	mov	r7, fp
 80122be:	462b      	mov	r3, r5
 80122c0:	461d      	mov	r5, r3
 80122c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122c6:	2a39      	cmp	r2, #57	; 0x39
 80122c8:	d106      	bne.n	80122d8 <_dtoa_r+0x700>
 80122ca:	9a00      	ldr	r2, [sp, #0]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d1f7      	bne.n	80122c0 <_dtoa_r+0x6e8>
 80122d0:	9900      	ldr	r1, [sp, #0]
 80122d2:	2230      	movs	r2, #48	; 0x30
 80122d4:	3701      	adds	r7, #1
 80122d6:	700a      	strb	r2, [r1, #0]
 80122d8:	781a      	ldrb	r2, [r3, #0]
 80122da:	3201      	adds	r2, #1
 80122dc:	701a      	strb	r2, [r3, #0]
 80122de:	e790      	b.n	8012202 <_dtoa_r+0x62a>
 80122e0:	4ba3      	ldr	r3, [pc, #652]	; (8012570 <_dtoa_r+0x998>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	f7ee f988 	bl	80005f8 <__aeabi_dmul>
 80122e8:	2200      	movs	r2, #0
 80122ea:	2300      	movs	r3, #0
 80122ec:	4606      	mov	r6, r0
 80122ee:	460f      	mov	r7, r1
 80122f0:	f7ee fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d09e      	beq.n	8012236 <_dtoa_r+0x65e>
 80122f8:	e7d0      	b.n	801229c <_dtoa_r+0x6c4>
 80122fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122fc:	2a00      	cmp	r2, #0
 80122fe:	f000 80ca 	beq.w	8012496 <_dtoa_r+0x8be>
 8012302:	9a07      	ldr	r2, [sp, #28]
 8012304:	2a01      	cmp	r2, #1
 8012306:	f300 80ad 	bgt.w	8012464 <_dtoa_r+0x88c>
 801230a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801230c:	2a00      	cmp	r2, #0
 801230e:	f000 80a5 	beq.w	801245c <_dtoa_r+0x884>
 8012312:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012316:	9e08      	ldr	r6, [sp, #32]
 8012318:	9d05      	ldr	r5, [sp, #20]
 801231a:	9a05      	ldr	r2, [sp, #20]
 801231c:	441a      	add	r2, r3
 801231e:	9205      	str	r2, [sp, #20]
 8012320:	9a06      	ldr	r2, [sp, #24]
 8012322:	2101      	movs	r1, #1
 8012324:	441a      	add	r2, r3
 8012326:	4620      	mov	r0, r4
 8012328:	9206      	str	r2, [sp, #24]
 801232a:	f000 ff3d 	bl	80131a8 <__i2b>
 801232e:	4607      	mov	r7, r0
 8012330:	b165      	cbz	r5, 801234c <_dtoa_r+0x774>
 8012332:	9b06      	ldr	r3, [sp, #24]
 8012334:	2b00      	cmp	r3, #0
 8012336:	dd09      	ble.n	801234c <_dtoa_r+0x774>
 8012338:	42ab      	cmp	r3, r5
 801233a:	9a05      	ldr	r2, [sp, #20]
 801233c:	bfa8      	it	ge
 801233e:	462b      	movge	r3, r5
 8012340:	1ad2      	subs	r2, r2, r3
 8012342:	9205      	str	r2, [sp, #20]
 8012344:	9a06      	ldr	r2, [sp, #24]
 8012346:	1aed      	subs	r5, r5, r3
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	9306      	str	r3, [sp, #24]
 801234c:	9b08      	ldr	r3, [sp, #32]
 801234e:	b1f3      	cbz	r3, 801238e <_dtoa_r+0x7b6>
 8012350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012352:	2b00      	cmp	r3, #0
 8012354:	f000 80a3 	beq.w	801249e <_dtoa_r+0x8c6>
 8012358:	2e00      	cmp	r6, #0
 801235a:	dd10      	ble.n	801237e <_dtoa_r+0x7a6>
 801235c:	4639      	mov	r1, r7
 801235e:	4632      	mov	r2, r6
 8012360:	4620      	mov	r0, r4
 8012362:	f000 ffe1 	bl	8013328 <__pow5mult>
 8012366:	4652      	mov	r2, sl
 8012368:	4601      	mov	r1, r0
 801236a:	4607      	mov	r7, r0
 801236c:	4620      	mov	r0, r4
 801236e:	f000 ff31 	bl	80131d4 <__multiply>
 8012372:	4651      	mov	r1, sl
 8012374:	4680      	mov	r8, r0
 8012376:	4620      	mov	r0, r4
 8012378:	f000 fe16 	bl	8012fa8 <_Bfree>
 801237c:	46c2      	mov	sl, r8
 801237e:	9b08      	ldr	r3, [sp, #32]
 8012380:	1b9a      	subs	r2, r3, r6
 8012382:	d004      	beq.n	801238e <_dtoa_r+0x7b6>
 8012384:	4651      	mov	r1, sl
 8012386:	4620      	mov	r0, r4
 8012388:	f000 ffce 	bl	8013328 <__pow5mult>
 801238c:	4682      	mov	sl, r0
 801238e:	2101      	movs	r1, #1
 8012390:	4620      	mov	r0, r4
 8012392:	f000 ff09 	bl	80131a8 <__i2b>
 8012396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012398:	2b00      	cmp	r3, #0
 801239a:	4606      	mov	r6, r0
 801239c:	f340 8081 	ble.w	80124a2 <_dtoa_r+0x8ca>
 80123a0:	461a      	mov	r2, r3
 80123a2:	4601      	mov	r1, r0
 80123a4:	4620      	mov	r0, r4
 80123a6:	f000 ffbf 	bl	8013328 <__pow5mult>
 80123aa:	9b07      	ldr	r3, [sp, #28]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	4606      	mov	r6, r0
 80123b0:	dd7a      	ble.n	80124a8 <_dtoa_r+0x8d0>
 80123b2:	f04f 0800 	mov.w	r8, #0
 80123b6:	6933      	ldr	r3, [r6, #16]
 80123b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80123bc:	6918      	ldr	r0, [r3, #16]
 80123be:	f000 fea5 	bl	801310c <__hi0bits>
 80123c2:	f1c0 0020 	rsb	r0, r0, #32
 80123c6:	9b06      	ldr	r3, [sp, #24]
 80123c8:	4418      	add	r0, r3
 80123ca:	f010 001f 	ands.w	r0, r0, #31
 80123ce:	f000 8094 	beq.w	80124fa <_dtoa_r+0x922>
 80123d2:	f1c0 0320 	rsb	r3, r0, #32
 80123d6:	2b04      	cmp	r3, #4
 80123d8:	f340 8085 	ble.w	80124e6 <_dtoa_r+0x90e>
 80123dc:	9b05      	ldr	r3, [sp, #20]
 80123de:	f1c0 001c 	rsb	r0, r0, #28
 80123e2:	4403      	add	r3, r0
 80123e4:	9305      	str	r3, [sp, #20]
 80123e6:	9b06      	ldr	r3, [sp, #24]
 80123e8:	4403      	add	r3, r0
 80123ea:	4405      	add	r5, r0
 80123ec:	9306      	str	r3, [sp, #24]
 80123ee:	9b05      	ldr	r3, [sp, #20]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	dd05      	ble.n	8012400 <_dtoa_r+0x828>
 80123f4:	4651      	mov	r1, sl
 80123f6:	461a      	mov	r2, r3
 80123f8:	4620      	mov	r0, r4
 80123fa:	f000 ffef 	bl	80133dc <__lshift>
 80123fe:	4682      	mov	sl, r0
 8012400:	9b06      	ldr	r3, [sp, #24]
 8012402:	2b00      	cmp	r3, #0
 8012404:	dd05      	ble.n	8012412 <_dtoa_r+0x83a>
 8012406:	4631      	mov	r1, r6
 8012408:	461a      	mov	r2, r3
 801240a:	4620      	mov	r0, r4
 801240c:	f000 ffe6 	bl	80133dc <__lshift>
 8012410:	4606      	mov	r6, r0
 8012412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012414:	2b00      	cmp	r3, #0
 8012416:	d072      	beq.n	80124fe <_dtoa_r+0x926>
 8012418:	4631      	mov	r1, r6
 801241a:	4650      	mov	r0, sl
 801241c:	f001 f84a 	bl	80134b4 <__mcmp>
 8012420:	2800      	cmp	r0, #0
 8012422:	da6c      	bge.n	80124fe <_dtoa_r+0x926>
 8012424:	2300      	movs	r3, #0
 8012426:	4651      	mov	r1, sl
 8012428:	220a      	movs	r2, #10
 801242a:	4620      	mov	r0, r4
 801242c:	f000 fdde 	bl	8012fec <__multadd>
 8012430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012432:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012436:	4682      	mov	sl, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	f000 81b0 	beq.w	801279e <_dtoa_r+0xbc6>
 801243e:	2300      	movs	r3, #0
 8012440:	4639      	mov	r1, r7
 8012442:	220a      	movs	r2, #10
 8012444:	4620      	mov	r0, r4
 8012446:	f000 fdd1 	bl	8012fec <__multadd>
 801244a:	9b01      	ldr	r3, [sp, #4]
 801244c:	2b00      	cmp	r3, #0
 801244e:	4607      	mov	r7, r0
 8012450:	f300 8096 	bgt.w	8012580 <_dtoa_r+0x9a8>
 8012454:	9b07      	ldr	r3, [sp, #28]
 8012456:	2b02      	cmp	r3, #2
 8012458:	dc59      	bgt.n	801250e <_dtoa_r+0x936>
 801245a:	e091      	b.n	8012580 <_dtoa_r+0x9a8>
 801245c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801245e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012462:	e758      	b.n	8012316 <_dtoa_r+0x73e>
 8012464:	9b04      	ldr	r3, [sp, #16]
 8012466:	1e5e      	subs	r6, r3, #1
 8012468:	9b08      	ldr	r3, [sp, #32]
 801246a:	42b3      	cmp	r3, r6
 801246c:	bfbf      	itttt	lt
 801246e:	9b08      	ldrlt	r3, [sp, #32]
 8012470:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012472:	9608      	strlt	r6, [sp, #32]
 8012474:	1af3      	sublt	r3, r6, r3
 8012476:	bfb4      	ite	lt
 8012478:	18d2      	addlt	r2, r2, r3
 801247a:	1b9e      	subge	r6, r3, r6
 801247c:	9b04      	ldr	r3, [sp, #16]
 801247e:	bfbc      	itt	lt
 8012480:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012482:	2600      	movlt	r6, #0
 8012484:	2b00      	cmp	r3, #0
 8012486:	bfb7      	itett	lt
 8012488:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801248c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012490:	1a9d      	sublt	r5, r3, r2
 8012492:	2300      	movlt	r3, #0
 8012494:	e741      	b.n	801231a <_dtoa_r+0x742>
 8012496:	9e08      	ldr	r6, [sp, #32]
 8012498:	9d05      	ldr	r5, [sp, #20]
 801249a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801249c:	e748      	b.n	8012330 <_dtoa_r+0x758>
 801249e:	9a08      	ldr	r2, [sp, #32]
 80124a0:	e770      	b.n	8012384 <_dtoa_r+0x7ac>
 80124a2:	9b07      	ldr	r3, [sp, #28]
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	dc19      	bgt.n	80124dc <_dtoa_r+0x904>
 80124a8:	9b02      	ldr	r3, [sp, #8]
 80124aa:	b9bb      	cbnz	r3, 80124dc <_dtoa_r+0x904>
 80124ac:	9b03      	ldr	r3, [sp, #12]
 80124ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80124b2:	b99b      	cbnz	r3, 80124dc <_dtoa_r+0x904>
 80124b4:	9b03      	ldr	r3, [sp, #12]
 80124b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124ba:	0d1b      	lsrs	r3, r3, #20
 80124bc:	051b      	lsls	r3, r3, #20
 80124be:	b183      	cbz	r3, 80124e2 <_dtoa_r+0x90a>
 80124c0:	9b05      	ldr	r3, [sp, #20]
 80124c2:	3301      	adds	r3, #1
 80124c4:	9305      	str	r3, [sp, #20]
 80124c6:	9b06      	ldr	r3, [sp, #24]
 80124c8:	3301      	adds	r3, #1
 80124ca:	9306      	str	r3, [sp, #24]
 80124cc:	f04f 0801 	mov.w	r8, #1
 80124d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f47f af6f 	bne.w	80123b6 <_dtoa_r+0x7de>
 80124d8:	2001      	movs	r0, #1
 80124da:	e774      	b.n	80123c6 <_dtoa_r+0x7ee>
 80124dc:	f04f 0800 	mov.w	r8, #0
 80124e0:	e7f6      	b.n	80124d0 <_dtoa_r+0x8f8>
 80124e2:	4698      	mov	r8, r3
 80124e4:	e7f4      	b.n	80124d0 <_dtoa_r+0x8f8>
 80124e6:	d082      	beq.n	80123ee <_dtoa_r+0x816>
 80124e8:	9a05      	ldr	r2, [sp, #20]
 80124ea:	331c      	adds	r3, #28
 80124ec:	441a      	add	r2, r3
 80124ee:	9205      	str	r2, [sp, #20]
 80124f0:	9a06      	ldr	r2, [sp, #24]
 80124f2:	441a      	add	r2, r3
 80124f4:	441d      	add	r5, r3
 80124f6:	9206      	str	r2, [sp, #24]
 80124f8:	e779      	b.n	80123ee <_dtoa_r+0x816>
 80124fa:	4603      	mov	r3, r0
 80124fc:	e7f4      	b.n	80124e8 <_dtoa_r+0x910>
 80124fe:	9b04      	ldr	r3, [sp, #16]
 8012500:	2b00      	cmp	r3, #0
 8012502:	dc37      	bgt.n	8012574 <_dtoa_r+0x99c>
 8012504:	9b07      	ldr	r3, [sp, #28]
 8012506:	2b02      	cmp	r3, #2
 8012508:	dd34      	ble.n	8012574 <_dtoa_r+0x99c>
 801250a:	9b04      	ldr	r3, [sp, #16]
 801250c:	9301      	str	r3, [sp, #4]
 801250e:	9b01      	ldr	r3, [sp, #4]
 8012510:	b963      	cbnz	r3, 801252c <_dtoa_r+0x954>
 8012512:	4631      	mov	r1, r6
 8012514:	2205      	movs	r2, #5
 8012516:	4620      	mov	r0, r4
 8012518:	f000 fd68 	bl	8012fec <__multadd>
 801251c:	4601      	mov	r1, r0
 801251e:	4606      	mov	r6, r0
 8012520:	4650      	mov	r0, sl
 8012522:	f000 ffc7 	bl	80134b4 <__mcmp>
 8012526:	2800      	cmp	r0, #0
 8012528:	f73f adbb 	bgt.w	80120a2 <_dtoa_r+0x4ca>
 801252c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801252e:	9d00      	ldr	r5, [sp, #0]
 8012530:	ea6f 0b03 	mvn.w	fp, r3
 8012534:	f04f 0800 	mov.w	r8, #0
 8012538:	4631      	mov	r1, r6
 801253a:	4620      	mov	r0, r4
 801253c:	f000 fd34 	bl	8012fa8 <_Bfree>
 8012540:	2f00      	cmp	r7, #0
 8012542:	f43f aeab 	beq.w	801229c <_dtoa_r+0x6c4>
 8012546:	f1b8 0f00 	cmp.w	r8, #0
 801254a:	d005      	beq.n	8012558 <_dtoa_r+0x980>
 801254c:	45b8      	cmp	r8, r7
 801254e:	d003      	beq.n	8012558 <_dtoa_r+0x980>
 8012550:	4641      	mov	r1, r8
 8012552:	4620      	mov	r0, r4
 8012554:	f000 fd28 	bl	8012fa8 <_Bfree>
 8012558:	4639      	mov	r1, r7
 801255a:	4620      	mov	r0, r4
 801255c:	f000 fd24 	bl	8012fa8 <_Bfree>
 8012560:	e69c      	b.n	801229c <_dtoa_r+0x6c4>
 8012562:	2600      	movs	r6, #0
 8012564:	4637      	mov	r7, r6
 8012566:	e7e1      	b.n	801252c <_dtoa_r+0x954>
 8012568:	46bb      	mov	fp, r7
 801256a:	4637      	mov	r7, r6
 801256c:	e599      	b.n	80120a2 <_dtoa_r+0x4ca>
 801256e:	bf00      	nop
 8012570:	40240000 	.word	0x40240000
 8012574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012576:	2b00      	cmp	r3, #0
 8012578:	f000 80c8 	beq.w	801270c <_dtoa_r+0xb34>
 801257c:	9b04      	ldr	r3, [sp, #16]
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	2d00      	cmp	r5, #0
 8012582:	dd05      	ble.n	8012590 <_dtoa_r+0x9b8>
 8012584:	4639      	mov	r1, r7
 8012586:	462a      	mov	r2, r5
 8012588:	4620      	mov	r0, r4
 801258a:	f000 ff27 	bl	80133dc <__lshift>
 801258e:	4607      	mov	r7, r0
 8012590:	f1b8 0f00 	cmp.w	r8, #0
 8012594:	d05b      	beq.n	801264e <_dtoa_r+0xa76>
 8012596:	6879      	ldr	r1, [r7, #4]
 8012598:	4620      	mov	r0, r4
 801259a:	f000 fcc5 	bl	8012f28 <_Balloc>
 801259e:	4605      	mov	r5, r0
 80125a0:	b928      	cbnz	r0, 80125ae <_dtoa_r+0x9d6>
 80125a2:	4b83      	ldr	r3, [pc, #524]	; (80127b0 <_dtoa_r+0xbd8>)
 80125a4:	4602      	mov	r2, r0
 80125a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80125aa:	f7ff bb2e 	b.w	8011c0a <_dtoa_r+0x32>
 80125ae:	693a      	ldr	r2, [r7, #16]
 80125b0:	3202      	adds	r2, #2
 80125b2:	0092      	lsls	r2, r2, #2
 80125b4:	f107 010c 	add.w	r1, r7, #12
 80125b8:	300c      	adds	r0, #12
 80125ba:	f7ff fa48 	bl	8011a4e <memcpy>
 80125be:	2201      	movs	r2, #1
 80125c0:	4629      	mov	r1, r5
 80125c2:	4620      	mov	r0, r4
 80125c4:	f000 ff0a 	bl	80133dc <__lshift>
 80125c8:	9b00      	ldr	r3, [sp, #0]
 80125ca:	3301      	adds	r3, #1
 80125cc:	9304      	str	r3, [sp, #16]
 80125ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125d2:	4413      	add	r3, r2
 80125d4:	9308      	str	r3, [sp, #32]
 80125d6:	9b02      	ldr	r3, [sp, #8]
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	46b8      	mov	r8, r7
 80125de:	9306      	str	r3, [sp, #24]
 80125e0:	4607      	mov	r7, r0
 80125e2:	9b04      	ldr	r3, [sp, #16]
 80125e4:	4631      	mov	r1, r6
 80125e6:	3b01      	subs	r3, #1
 80125e8:	4650      	mov	r0, sl
 80125ea:	9301      	str	r3, [sp, #4]
 80125ec:	f7ff fa6c 	bl	8011ac8 <quorem>
 80125f0:	4641      	mov	r1, r8
 80125f2:	9002      	str	r0, [sp, #8]
 80125f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80125f8:	4650      	mov	r0, sl
 80125fa:	f000 ff5b 	bl	80134b4 <__mcmp>
 80125fe:	463a      	mov	r2, r7
 8012600:	9005      	str	r0, [sp, #20]
 8012602:	4631      	mov	r1, r6
 8012604:	4620      	mov	r0, r4
 8012606:	f000 ff71 	bl	80134ec <__mdiff>
 801260a:	68c2      	ldr	r2, [r0, #12]
 801260c:	4605      	mov	r5, r0
 801260e:	bb02      	cbnz	r2, 8012652 <_dtoa_r+0xa7a>
 8012610:	4601      	mov	r1, r0
 8012612:	4650      	mov	r0, sl
 8012614:	f000 ff4e 	bl	80134b4 <__mcmp>
 8012618:	4602      	mov	r2, r0
 801261a:	4629      	mov	r1, r5
 801261c:	4620      	mov	r0, r4
 801261e:	9209      	str	r2, [sp, #36]	; 0x24
 8012620:	f000 fcc2 	bl	8012fa8 <_Bfree>
 8012624:	9b07      	ldr	r3, [sp, #28]
 8012626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012628:	9d04      	ldr	r5, [sp, #16]
 801262a:	ea43 0102 	orr.w	r1, r3, r2
 801262e:	9b06      	ldr	r3, [sp, #24]
 8012630:	4319      	orrs	r1, r3
 8012632:	d110      	bne.n	8012656 <_dtoa_r+0xa7e>
 8012634:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012638:	d029      	beq.n	801268e <_dtoa_r+0xab6>
 801263a:	9b05      	ldr	r3, [sp, #20]
 801263c:	2b00      	cmp	r3, #0
 801263e:	dd02      	ble.n	8012646 <_dtoa_r+0xa6e>
 8012640:	9b02      	ldr	r3, [sp, #8]
 8012642:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012646:	9b01      	ldr	r3, [sp, #4]
 8012648:	f883 9000 	strb.w	r9, [r3]
 801264c:	e774      	b.n	8012538 <_dtoa_r+0x960>
 801264e:	4638      	mov	r0, r7
 8012650:	e7ba      	b.n	80125c8 <_dtoa_r+0x9f0>
 8012652:	2201      	movs	r2, #1
 8012654:	e7e1      	b.n	801261a <_dtoa_r+0xa42>
 8012656:	9b05      	ldr	r3, [sp, #20]
 8012658:	2b00      	cmp	r3, #0
 801265a:	db04      	blt.n	8012666 <_dtoa_r+0xa8e>
 801265c:	9907      	ldr	r1, [sp, #28]
 801265e:	430b      	orrs	r3, r1
 8012660:	9906      	ldr	r1, [sp, #24]
 8012662:	430b      	orrs	r3, r1
 8012664:	d120      	bne.n	80126a8 <_dtoa_r+0xad0>
 8012666:	2a00      	cmp	r2, #0
 8012668:	dded      	ble.n	8012646 <_dtoa_r+0xa6e>
 801266a:	4651      	mov	r1, sl
 801266c:	2201      	movs	r2, #1
 801266e:	4620      	mov	r0, r4
 8012670:	f000 feb4 	bl	80133dc <__lshift>
 8012674:	4631      	mov	r1, r6
 8012676:	4682      	mov	sl, r0
 8012678:	f000 ff1c 	bl	80134b4 <__mcmp>
 801267c:	2800      	cmp	r0, #0
 801267e:	dc03      	bgt.n	8012688 <_dtoa_r+0xab0>
 8012680:	d1e1      	bne.n	8012646 <_dtoa_r+0xa6e>
 8012682:	f019 0f01 	tst.w	r9, #1
 8012686:	d0de      	beq.n	8012646 <_dtoa_r+0xa6e>
 8012688:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801268c:	d1d8      	bne.n	8012640 <_dtoa_r+0xa68>
 801268e:	9a01      	ldr	r2, [sp, #4]
 8012690:	2339      	movs	r3, #57	; 0x39
 8012692:	7013      	strb	r3, [r2, #0]
 8012694:	462b      	mov	r3, r5
 8012696:	461d      	mov	r5, r3
 8012698:	3b01      	subs	r3, #1
 801269a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801269e:	2a39      	cmp	r2, #57	; 0x39
 80126a0:	d06c      	beq.n	801277c <_dtoa_r+0xba4>
 80126a2:	3201      	adds	r2, #1
 80126a4:	701a      	strb	r2, [r3, #0]
 80126a6:	e747      	b.n	8012538 <_dtoa_r+0x960>
 80126a8:	2a00      	cmp	r2, #0
 80126aa:	dd07      	ble.n	80126bc <_dtoa_r+0xae4>
 80126ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80126b0:	d0ed      	beq.n	801268e <_dtoa_r+0xab6>
 80126b2:	9a01      	ldr	r2, [sp, #4]
 80126b4:	f109 0301 	add.w	r3, r9, #1
 80126b8:	7013      	strb	r3, [r2, #0]
 80126ba:	e73d      	b.n	8012538 <_dtoa_r+0x960>
 80126bc:	9b04      	ldr	r3, [sp, #16]
 80126be:	9a08      	ldr	r2, [sp, #32]
 80126c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d043      	beq.n	8012750 <_dtoa_r+0xb78>
 80126c8:	4651      	mov	r1, sl
 80126ca:	2300      	movs	r3, #0
 80126cc:	220a      	movs	r2, #10
 80126ce:	4620      	mov	r0, r4
 80126d0:	f000 fc8c 	bl	8012fec <__multadd>
 80126d4:	45b8      	cmp	r8, r7
 80126d6:	4682      	mov	sl, r0
 80126d8:	f04f 0300 	mov.w	r3, #0
 80126dc:	f04f 020a 	mov.w	r2, #10
 80126e0:	4641      	mov	r1, r8
 80126e2:	4620      	mov	r0, r4
 80126e4:	d107      	bne.n	80126f6 <_dtoa_r+0xb1e>
 80126e6:	f000 fc81 	bl	8012fec <__multadd>
 80126ea:	4680      	mov	r8, r0
 80126ec:	4607      	mov	r7, r0
 80126ee:	9b04      	ldr	r3, [sp, #16]
 80126f0:	3301      	adds	r3, #1
 80126f2:	9304      	str	r3, [sp, #16]
 80126f4:	e775      	b.n	80125e2 <_dtoa_r+0xa0a>
 80126f6:	f000 fc79 	bl	8012fec <__multadd>
 80126fa:	4639      	mov	r1, r7
 80126fc:	4680      	mov	r8, r0
 80126fe:	2300      	movs	r3, #0
 8012700:	220a      	movs	r2, #10
 8012702:	4620      	mov	r0, r4
 8012704:	f000 fc72 	bl	8012fec <__multadd>
 8012708:	4607      	mov	r7, r0
 801270a:	e7f0      	b.n	80126ee <_dtoa_r+0xb16>
 801270c:	9b04      	ldr	r3, [sp, #16]
 801270e:	9301      	str	r3, [sp, #4]
 8012710:	9d00      	ldr	r5, [sp, #0]
 8012712:	4631      	mov	r1, r6
 8012714:	4650      	mov	r0, sl
 8012716:	f7ff f9d7 	bl	8011ac8 <quorem>
 801271a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801271e:	9b00      	ldr	r3, [sp, #0]
 8012720:	f805 9b01 	strb.w	r9, [r5], #1
 8012724:	1aea      	subs	r2, r5, r3
 8012726:	9b01      	ldr	r3, [sp, #4]
 8012728:	4293      	cmp	r3, r2
 801272a:	dd07      	ble.n	801273c <_dtoa_r+0xb64>
 801272c:	4651      	mov	r1, sl
 801272e:	2300      	movs	r3, #0
 8012730:	220a      	movs	r2, #10
 8012732:	4620      	mov	r0, r4
 8012734:	f000 fc5a 	bl	8012fec <__multadd>
 8012738:	4682      	mov	sl, r0
 801273a:	e7ea      	b.n	8012712 <_dtoa_r+0xb3a>
 801273c:	9b01      	ldr	r3, [sp, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	bfc8      	it	gt
 8012742:	461d      	movgt	r5, r3
 8012744:	9b00      	ldr	r3, [sp, #0]
 8012746:	bfd8      	it	le
 8012748:	2501      	movle	r5, #1
 801274a:	441d      	add	r5, r3
 801274c:	f04f 0800 	mov.w	r8, #0
 8012750:	4651      	mov	r1, sl
 8012752:	2201      	movs	r2, #1
 8012754:	4620      	mov	r0, r4
 8012756:	f000 fe41 	bl	80133dc <__lshift>
 801275a:	4631      	mov	r1, r6
 801275c:	4682      	mov	sl, r0
 801275e:	f000 fea9 	bl	80134b4 <__mcmp>
 8012762:	2800      	cmp	r0, #0
 8012764:	dc96      	bgt.n	8012694 <_dtoa_r+0xabc>
 8012766:	d102      	bne.n	801276e <_dtoa_r+0xb96>
 8012768:	f019 0f01 	tst.w	r9, #1
 801276c:	d192      	bne.n	8012694 <_dtoa_r+0xabc>
 801276e:	462b      	mov	r3, r5
 8012770:	461d      	mov	r5, r3
 8012772:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012776:	2a30      	cmp	r2, #48	; 0x30
 8012778:	d0fa      	beq.n	8012770 <_dtoa_r+0xb98>
 801277a:	e6dd      	b.n	8012538 <_dtoa_r+0x960>
 801277c:	9a00      	ldr	r2, [sp, #0]
 801277e:	429a      	cmp	r2, r3
 8012780:	d189      	bne.n	8012696 <_dtoa_r+0xabe>
 8012782:	f10b 0b01 	add.w	fp, fp, #1
 8012786:	2331      	movs	r3, #49	; 0x31
 8012788:	e796      	b.n	80126b8 <_dtoa_r+0xae0>
 801278a:	4b0a      	ldr	r3, [pc, #40]	; (80127b4 <_dtoa_r+0xbdc>)
 801278c:	f7ff ba99 	b.w	8011cc2 <_dtoa_r+0xea>
 8012790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012792:	2b00      	cmp	r3, #0
 8012794:	f47f aa6d 	bne.w	8011c72 <_dtoa_r+0x9a>
 8012798:	4b07      	ldr	r3, [pc, #28]	; (80127b8 <_dtoa_r+0xbe0>)
 801279a:	f7ff ba92 	b.w	8011cc2 <_dtoa_r+0xea>
 801279e:	9b01      	ldr	r3, [sp, #4]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	dcb5      	bgt.n	8012710 <_dtoa_r+0xb38>
 80127a4:	9b07      	ldr	r3, [sp, #28]
 80127a6:	2b02      	cmp	r3, #2
 80127a8:	f73f aeb1 	bgt.w	801250e <_dtoa_r+0x936>
 80127ac:	e7b0      	b.n	8012710 <_dtoa_r+0xb38>
 80127ae:	bf00      	nop
 80127b0:	08015bbf 	.word	0x08015bbf
 80127b4:	08015a81 	.word	0x08015a81
 80127b8:	08015b5a 	.word	0x08015b5a

080127bc <_free_r>:
 80127bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127be:	2900      	cmp	r1, #0
 80127c0:	d044      	beq.n	801284c <_free_r+0x90>
 80127c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127c6:	9001      	str	r0, [sp, #4]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f1a1 0404 	sub.w	r4, r1, #4
 80127ce:	bfb8      	it	lt
 80127d0:	18e4      	addlt	r4, r4, r3
 80127d2:	f7fd fa87 	bl	800fce4 <__malloc_lock>
 80127d6:	4a1e      	ldr	r2, [pc, #120]	; (8012850 <_free_r+0x94>)
 80127d8:	9801      	ldr	r0, [sp, #4]
 80127da:	6813      	ldr	r3, [r2, #0]
 80127dc:	b933      	cbnz	r3, 80127ec <_free_r+0x30>
 80127de:	6063      	str	r3, [r4, #4]
 80127e0:	6014      	str	r4, [r2, #0]
 80127e2:	b003      	add	sp, #12
 80127e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80127e8:	f7fd ba82 	b.w	800fcf0 <__malloc_unlock>
 80127ec:	42a3      	cmp	r3, r4
 80127ee:	d908      	bls.n	8012802 <_free_r+0x46>
 80127f0:	6825      	ldr	r5, [r4, #0]
 80127f2:	1961      	adds	r1, r4, r5
 80127f4:	428b      	cmp	r3, r1
 80127f6:	bf01      	itttt	eq
 80127f8:	6819      	ldreq	r1, [r3, #0]
 80127fa:	685b      	ldreq	r3, [r3, #4]
 80127fc:	1949      	addeq	r1, r1, r5
 80127fe:	6021      	streq	r1, [r4, #0]
 8012800:	e7ed      	b.n	80127de <_free_r+0x22>
 8012802:	461a      	mov	r2, r3
 8012804:	685b      	ldr	r3, [r3, #4]
 8012806:	b10b      	cbz	r3, 801280c <_free_r+0x50>
 8012808:	42a3      	cmp	r3, r4
 801280a:	d9fa      	bls.n	8012802 <_free_r+0x46>
 801280c:	6811      	ldr	r1, [r2, #0]
 801280e:	1855      	adds	r5, r2, r1
 8012810:	42a5      	cmp	r5, r4
 8012812:	d10b      	bne.n	801282c <_free_r+0x70>
 8012814:	6824      	ldr	r4, [r4, #0]
 8012816:	4421      	add	r1, r4
 8012818:	1854      	adds	r4, r2, r1
 801281a:	42a3      	cmp	r3, r4
 801281c:	6011      	str	r1, [r2, #0]
 801281e:	d1e0      	bne.n	80127e2 <_free_r+0x26>
 8012820:	681c      	ldr	r4, [r3, #0]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	6053      	str	r3, [r2, #4]
 8012826:	440c      	add	r4, r1
 8012828:	6014      	str	r4, [r2, #0]
 801282a:	e7da      	b.n	80127e2 <_free_r+0x26>
 801282c:	d902      	bls.n	8012834 <_free_r+0x78>
 801282e:	230c      	movs	r3, #12
 8012830:	6003      	str	r3, [r0, #0]
 8012832:	e7d6      	b.n	80127e2 <_free_r+0x26>
 8012834:	6825      	ldr	r5, [r4, #0]
 8012836:	1961      	adds	r1, r4, r5
 8012838:	428b      	cmp	r3, r1
 801283a:	bf04      	itt	eq
 801283c:	6819      	ldreq	r1, [r3, #0]
 801283e:	685b      	ldreq	r3, [r3, #4]
 8012840:	6063      	str	r3, [r4, #4]
 8012842:	bf04      	itt	eq
 8012844:	1949      	addeq	r1, r1, r5
 8012846:	6021      	streq	r1, [r4, #0]
 8012848:	6054      	str	r4, [r2, #4]
 801284a:	e7ca      	b.n	80127e2 <_free_r+0x26>
 801284c:	b003      	add	sp, #12
 801284e:	bd30      	pop	{r4, r5, pc}
 8012850:	200035f0 	.word	0x200035f0

08012854 <rshift>:
 8012854:	6903      	ldr	r3, [r0, #16]
 8012856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801285a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801285e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012862:	f100 0414 	add.w	r4, r0, #20
 8012866:	dd45      	ble.n	80128f4 <rshift+0xa0>
 8012868:	f011 011f 	ands.w	r1, r1, #31
 801286c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012874:	d10c      	bne.n	8012890 <rshift+0x3c>
 8012876:	f100 0710 	add.w	r7, r0, #16
 801287a:	4629      	mov	r1, r5
 801287c:	42b1      	cmp	r1, r6
 801287e:	d334      	bcc.n	80128ea <rshift+0x96>
 8012880:	1a9b      	subs	r3, r3, r2
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	1eea      	subs	r2, r5, #3
 8012886:	4296      	cmp	r6, r2
 8012888:	bf38      	it	cc
 801288a:	2300      	movcc	r3, #0
 801288c:	4423      	add	r3, r4
 801288e:	e015      	b.n	80128bc <rshift+0x68>
 8012890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012894:	f1c1 0820 	rsb	r8, r1, #32
 8012898:	40cf      	lsrs	r7, r1
 801289a:	f105 0e04 	add.w	lr, r5, #4
 801289e:	46a1      	mov	r9, r4
 80128a0:	4576      	cmp	r6, lr
 80128a2:	46f4      	mov	ip, lr
 80128a4:	d815      	bhi.n	80128d2 <rshift+0x7e>
 80128a6:	1a9a      	subs	r2, r3, r2
 80128a8:	0092      	lsls	r2, r2, #2
 80128aa:	3a04      	subs	r2, #4
 80128ac:	3501      	adds	r5, #1
 80128ae:	42ae      	cmp	r6, r5
 80128b0:	bf38      	it	cc
 80128b2:	2200      	movcc	r2, #0
 80128b4:	18a3      	adds	r3, r4, r2
 80128b6:	50a7      	str	r7, [r4, r2]
 80128b8:	b107      	cbz	r7, 80128bc <rshift+0x68>
 80128ba:	3304      	adds	r3, #4
 80128bc:	1b1a      	subs	r2, r3, r4
 80128be:	42a3      	cmp	r3, r4
 80128c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80128c4:	bf08      	it	eq
 80128c6:	2300      	moveq	r3, #0
 80128c8:	6102      	str	r2, [r0, #16]
 80128ca:	bf08      	it	eq
 80128cc:	6143      	streq	r3, [r0, #20]
 80128ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128d2:	f8dc c000 	ldr.w	ip, [ip]
 80128d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80128da:	ea4c 0707 	orr.w	r7, ip, r7
 80128de:	f849 7b04 	str.w	r7, [r9], #4
 80128e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80128e6:	40cf      	lsrs	r7, r1
 80128e8:	e7da      	b.n	80128a0 <rshift+0x4c>
 80128ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80128ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80128f2:	e7c3      	b.n	801287c <rshift+0x28>
 80128f4:	4623      	mov	r3, r4
 80128f6:	e7e1      	b.n	80128bc <rshift+0x68>

080128f8 <__hexdig_fun>:
 80128f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80128fc:	2b09      	cmp	r3, #9
 80128fe:	d802      	bhi.n	8012906 <__hexdig_fun+0xe>
 8012900:	3820      	subs	r0, #32
 8012902:	b2c0      	uxtb	r0, r0
 8012904:	4770      	bx	lr
 8012906:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801290a:	2b05      	cmp	r3, #5
 801290c:	d801      	bhi.n	8012912 <__hexdig_fun+0x1a>
 801290e:	3847      	subs	r0, #71	; 0x47
 8012910:	e7f7      	b.n	8012902 <__hexdig_fun+0xa>
 8012912:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012916:	2b05      	cmp	r3, #5
 8012918:	d801      	bhi.n	801291e <__hexdig_fun+0x26>
 801291a:	3827      	subs	r0, #39	; 0x27
 801291c:	e7f1      	b.n	8012902 <__hexdig_fun+0xa>
 801291e:	2000      	movs	r0, #0
 8012920:	4770      	bx	lr
	...

08012924 <__gethex>:
 8012924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012928:	4617      	mov	r7, r2
 801292a:	680a      	ldr	r2, [r1, #0]
 801292c:	b085      	sub	sp, #20
 801292e:	f102 0b02 	add.w	fp, r2, #2
 8012932:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012936:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801293a:	4681      	mov	r9, r0
 801293c:	468a      	mov	sl, r1
 801293e:	9302      	str	r3, [sp, #8]
 8012940:	32fe      	adds	r2, #254	; 0xfe
 8012942:	eb02 030b 	add.w	r3, r2, fp
 8012946:	46d8      	mov	r8, fp
 8012948:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801294c:	9301      	str	r3, [sp, #4]
 801294e:	2830      	cmp	r0, #48	; 0x30
 8012950:	d0f7      	beq.n	8012942 <__gethex+0x1e>
 8012952:	f7ff ffd1 	bl	80128f8 <__hexdig_fun>
 8012956:	4604      	mov	r4, r0
 8012958:	2800      	cmp	r0, #0
 801295a:	d138      	bne.n	80129ce <__gethex+0xaa>
 801295c:	49a7      	ldr	r1, [pc, #668]	; (8012bfc <__gethex+0x2d8>)
 801295e:	2201      	movs	r2, #1
 8012960:	4640      	mov	r0, r8
 8012962:	f7fe ff61 	bl	8011828 <strncmp>
 8012966:	4606      	mov	r6, r0
 8012968:	2800      	cmp	r0, #0
 801296a:	d169      	bne.n	8012a40 <__gethex+0x11c>
 801296c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012970:	465d      	mov	r5, fp
 8012972:	f7ff ffc1 	bl	80128f8 <__hexdig_fun>
 8012976:	2800      	cmp	r0, #0
 8012978:	d064      	beq.n	8012a44 <__gethex+0x120>
 801297a:	465a      	mov	r2, fp
 801297c:	7810      	ldrb	r0, [r2, #0]
 801297e:	2830      	cmp	r0, #48	; 0x30
 8012980:	4690      	mov	r8, r2
 8012982:	f102 0201 	add.w	r2, r2, #1
 8012986:	d0f9      	beq.n	801297c <__gethex+0x58>
 8012988:	f7ff ffb6 	bl	80128f8 <__hexdig_fun>
 801298c:	2301      	movs	r3, #1
 801298e:	fab0 f480 	clz	r4, r0
 8012992:	0964      	lsrs	r4, r4, #5
 8012994:	465e      	mov	r6, fp
 8012996:	9301      	str	r3, [sp, #4]
 8012998:	4642      	mov	r2, r8
 801299a:	4615      	mov	r5, r2
 801299c:	3201      	adds	r2, #1
 801299e:	7828      	ldrb	r0, [r5, #0]
 80129a0:	f7ff ffaa 	bl	80128f8 <__hexdig_fun>
 80129a4:	2800      	cmp	r0, #0
 80129a6:	d1f8      	bne.n	801299a <__gethex+0x76>
 80129a8:	4994      	ldr	r1, [pc, #592]	; (8012bfc <__gethex+0x2d8>)
 80129aa:	2201      	movs	r2, #1
 80129ac:	4628      	mov	r0, r5
 80129ae:	f7fe ff3b 	bl	8011828 <strncmp>
 80129b2:	b978      	cbnz	r0, 80129d4 <__gethex+0xb0>
 80129b4:	b946      	cbnz	r6, 80129c8 <__gethex+0xa4>
 80129b6:	1c6e      	adds	r6, r5, #1
 80129b8:	4632      	mov	r2, r6
 80129ba:	4615      	mov	r5, r2
 80129bc:	3201      	adds	r2, #1
 80129be:	7828      	ldrb	r0, [r5, #0]
 80129c0:	f7ff ff9a 	bl	80128f8 <__hexdig_fun>
 80129c4:	2800      	cmp	r0, #0
 80129c6:	d1f8      	bne.n	80129ba <__gethex+0x96>
 80129c8:	1b73      	subs	r3, r6, r5
 80129ca:	009e      	lsls	r6, r3, #2
 80129cc:	e004      	b.n	80129d8 <__gethex+0xb4>
 80129ce:	2400      	movs	r4, #0
 80129d0:	4626      	mov	r6, r4
 80129d2:	e7e1      	b.n	8012998 <__gethex+0x74>
 80129d4:	2e00      	cmp	r6, #0
 80129d6:	d1f7      	bne.n	80129c8 <__gethex+0xa4>
 80129d8:	782b      	ldrb	r3, [r5, #0]
 80129da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80129de:	2b50      	cmp	r3, #80	; 0x50
 80129e0:	d13d      	bne.n	8012a5e <__gethex+0x13a>
 80129e2:	786b      	ldrb	r3, [r5, #1]
 80129e4:	2b2b      	cmp	r3, #43	; 0x2b
 80129e6:	d02f      	beq.n	8012a48 <__gethex+0x124>
 80129e8:	2b2d      	cmp	r3, #45	; 0x2d
 80129ea:	d031      	beq.n	8012a50 <__gethex+0x12c>
 80129ec:	1c69      	adds	r1, r5, #1
 80129ee:	f04f 0b00 	mov.w	fp, #0
 80129f2:	7808      	ldrb	r0, [r1, #0]
 80129f4:	f7ff ff80 	bl	80128f8 <__hexdig_fun>
 80129f8:	1e42      	subs	r2, r0, #1
 80129fa:	b2d2      	uxtb	r2, r2
 80129fc:	2a18      	cmp	r2, #24
 80129fe:	d82e      	bhi.n	8012a5e <__gethex+0x13a>
 8012a00:	f1a0 0210 	sub.w	r2, r0, #16
 8012a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012a08:	f7ff ff76 	bl	80128f8 <__hexdig_fun>
 8012a0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012a10:	fa5f fc8c 	uxtb.w	ip, ip
 8012a14:	f1bc 0f18 	cmp.w	ip, #24
 8012a18:	d91d      	bls.n	8012a56 <__gethex+0x132>
 8012a1a:	f1bb 0f00 	cmp.w	fp, #0
 8012a1e:	d000      	beq.n	8012a22 <__gethex+0xfe>
 8012a20:	4252      	negs	r2, r2
 8012a22:	4416      	add	r6, r2
 8012a24:	f8ca 1000 	str.w	r1, [sl]
 8012a28:	b1dc      	cbz	r4, 8012a62 <__gethex+0x13e>
 8012a2a:	9b01      	ldr	r3, [sp, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	bf14      	ite	ne
 8012a30:	f04f 0800 	movne.w	r8, #0
 8012a34:	f04f 0806 	moveq.w	r8, #6
 8012a38:	4640      	mov	r0, r8
 8012a3a:	b005      	add	sp, #20
 8012a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a40:	4645      	mov	r5, r8
 8012a42:	4626      	mov	r6, r4
 8012a44:	2401      	movs	r4, #1
 8012a46:	e7c7      	b.n	80129d8 <__gethex+0xb4>
 8012a48:	f04f 0b00 	mov.w	fp, #0
 8012a4c:	1ca9      	adds	r1, r5, #2
 8012a4e:	e7d0      	b.n	80129f2 <__gethex+0xce>
 8012a50:	f04f 0b01 	mov.w	fp, #1
 8012a54:	e7fa      	b.n	8012a4c <__gethex+0x128>
 8012a56:	230a      	movs	r3, #10
 8012a58:	fb03 0002 	mla	r0, r3, r2, r0
 8012a5c:	e7d0      	b.n	8012a00 <__gethex+0xdc>
 8012a5e:	4629      	mov	r1, r5
 8012a60:	e7e0      	b.n	8012a24 <__gethex+0x100>
 8012a62:	eba5 0308 	sub.w	r3, r5, r8
 8012a66:	3b01      	subs	r3, #1
 8012a68:	4621      	mov	r1, r4
 8012a6a:	2b07      	cmp	r3, #7
 8012a6c:	dc0a      	bgt.n	8012a84 <__gethex+0x160>
 8012a6e:	4648      	mov	r0, r9
 8012a70:	f000 fa5a 	bl	8012f28 <_Balloc>
 8012a74:	4604      	mov	r4, r0
 8012a76:	b940      	cbnz	r0, 8012a8a <__gethex+0x166>
 8012a78:	4b61      	ldr	r3, [pc, #388]	; (8012c00 <__gethex+0x2dc>)
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	21e4      	movs	r1, #228	; 0xe4
 8012a7e:	4861      	ldr	r0, [pc, #388]	; (8012c04 <__gethex+0x2e0>)
 8012a80:	f7ff f804 	bl	8011a8c <__assert_func>
 8012a84:	3101      	adds	r1, #1
 8012a86:	105b      	asrs	r3, r3, #1
 8012a88:	e7ef      	b.n	8012a6a <__gethex+0x146>
 8012a8a:	f100 0a14 	add.w	sl, r0, #20
 8012a8e:	2300      	movs	r3, #0
 8012a90:	495a      	ldr	r1, [pc, #360]	; (8012bfc <__gethex+0x2d8>)
 8012a92:	f8cd a004 	str.w	sl, [sp, #4]
 8012a96:	469b      	mov	fp, r3
 8012a98:	45a8      	cmp	r8, r5
 8012a9a:	d342      	bcc.n	8012b22 <__gethex+0x1fe>
 8012a9c:	9801      	ldr	r0, [sp, #4]
 8012a9e:	f840 bb04 	str.w	fp, [r0], #4
 8012aa2:	eba0 000a 	sub.w	r0, r0, sl
 8012aa6:	1080      	asrs	r0, r0, #2
 8012aa8:	6120      	str	r0, [r4, #16]
 8012aaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012aae:	4658      	mov	r0, fp
 8012ab0:	f000 fb2c 	bl	801310c <__hi0bits>
 8012ab4:	683d      	ldr	r5, [r7, #0]
 8012ab6:	eba8 0000 	sub.w	r0, r8, r0
 8012aba:	42a8      	cmp	r0, r5
 8012abc:	dd59      	ble.n	8012b72 <__gethex+0x24e>
 8012abe:	eba0 0805 	sub.w	r8, r0, r5
 8012ac2:	4641      	mov	r1, r8
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f000 febb 	bl	8013840 <__any_on>
 8012aca:	4683      	mov	fp, r0
 8012acc:	b1b8      	cbz	r0, 8012afe <__gethex+0x1da>
 8012ace:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ad2:	1159      	asrs	r1, r3, #5
 8012ad4:	f003 021f 	and.w	r2, r3, #31
 8012ad8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012adc:	f04f 0b01 	mov.w	fp, #1
 8012ae0:	fa0b f202 	lsl.w	r2, fp, r2
 8012ae4:	420a      	tst	r2, r1
 8012ae6:	d00a      	beq.n	8012afe <__gethex+0x1da>
 8012ae8:	455b      	cmp	r3, fp
 8012aea:	dd06      	ble.n	8012afa <__gethex+0x1d6>
 8012aec:	f1a8 0102 	sub.w	r1, r8, #2
 8012af0:	4620      	mov	r0, r4
 8012af2:	f000 fea5 	bl	8013840 <__any_on>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d138      	bne.n	8012b6c <__gethex+0x248>
 8012afa:	f04f 0b02 	mov.w	fp, #2
 8012afe:	4641      	mov	r1, r8
 8012b00:	4620      	mov	r0, r4
 8012b02:	f7ff fea7 	bl	8012854 <rshift>
 8012b06:	4446      	add	r6, r8
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	42b3      	cmp	r3, r6
 8012b0c:	da41      	bge.n	8012b92 <__gethex+0x26e>
 8012b0e:	4621      	mov	r1, r4
 8012b10:	4648      	mov	r0, r9
 8012b12:	f000 fa49 	bl	8012fa8 <_Bfree>
 8012b16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b18:	2300      	movs	r3, #0
 8012b1a:	6013      	str	r3, [r2, #0]
 8012b1c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012b20:	e78a      	b.n	8012a38 <__gethex+0x114>
 8012b22:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012b26:	2a2e      	cmp	r2, #46	; 0x2e
 8012b28:	d014      	beq.n	8012b54 <__gethex+0x230>
 8012b2a:	2b20      	cmp	r3, #32
 8012b2c:	d106      	bne.n	8012b3c <__gethex+0x218>
 8012b2e:	9b01      	ldr	r3, [sp, #4]
 8012b30:	f843 bb04 	str.w	fp, [r3], #4
 8012b34:	f04f 0b00 	mov.w	fp, #0
 8012b38:	9301      	str	r3, [sp, #4]
 8012b3a:	465b      	mov	r3, fp
 8012b3c:	7828      	ldrb	r0, [r5, #0]
 8012b3e:	9303      	str	r3, [sp, #12]
 8012b40:	f7ff feda 	bl	80128f8 <__hexdig_fun>
 8012b44:	9b03      	ldr	r3, [sp, #12]
 8012b46:	f000 000f 	and.w	r0, r0, #15
 8012b4a:	4098      	lsls	r0, r3
 8012b4c:	ea4b 0b00 	orr.w	fp, fp, r0
 8012b50:	3304      	adds	r3, #4
 8012b52:	e7a1      	b.n	8012a98 <__gethex+0x174>
 8012b54:	45a8      	cmp	r8, r5
 8012b56:	d8e8      	bhi.n	8012b2a <__gethex+0x206>
 8012b58:	2201      	movs	r2, #1
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	9303      	str	r3, [sp, #12]
 8012b5e:	f7fe fe63 	bl	8011828 <strncmp>
 8012b62:	4926      	ldr	r1, [pc, #152]	; (8012bfc <__gethex+0x2d8>)
 8012b64:	9b03      	ldr	r3, [sp, #12]
 8012b66:	2800      	cmp	r0, #0
 8012b68:	d1df      	bne.n	8012b2a <__gethex+0x206>
 8012b6a:	e795      	b.n	8012a98 <__gethex+0x174>
 8012b6c:	f04f 0b03 	mov.w	fp, #3
 8012b70:	e7c5      	b.n	8012afe <__gethex+0x1da>
 8012b72:	da0b      	bge.n	8012b8c <__gethex+0x268>
 8012b74:	eba5 0800 	sub.w	r8, r5, r0
 8012b78:	4621      	mov	r1, r4
 8012b7a:	4642      	mov	r2, r8
 8012b7c:	4648      	mov	r0, r9
 8012b7e:	f000 fc2d 	bl	80133dc <__lshift>
 8012b82:	eba6 0608 	sub.w	r6, r6, r8
 8012b86:	4604      	mov	r4, r0
 8012b88:	f100 0a14 	add.w	sl, r0, #20
 8012b8c:	f04f 0b00 	mov.w	fp, #0
 8012b90:	e7ba      	b.n	8012b08 <__gethex+0x1e4>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	42b3      	cmp	r3, r6
 8012b96:	dd73      	ble.n	8012c80 <__gethex+0x35c>
 8012b98:	1b9e      	subs	r6, r3, r6
 8012b9a:	42b5      	cmp	r5, r6
 8012b9c:	dc34      	bgt.n	8012c08 <__gethex+0x2e4>
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	d023      	beq.n	8012bec <__gethex+0x2c8>
 8012ba4:	2b03      	cmp	r3, #3
 8012ba6:	d025      	beq.n	8012bf4 <__gethex+0x2d0>
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d115      	bne.n	8012bd8 <__gethex+0x2b4>
 8012bac:	42b5      	cmp	r5, r6
 8012bae:	d113      	bne.n	8012bd8 <__gethex+0x2b4>
 8012bb0:	2d01      	cmp	r5, #1
 8012bb2:	d10b      	bne.n	8012bcc <__gethex+0x2a8>
 8012bb4:	9a02      	ldr	r2, [sp, #8]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6013      	str	r3, [r2, #0]
 8012bba:	2301      	movs	r3, #1
 8012bbc:	6123      	str	r3, [r4, #16]
 8012bbe:	f8ca 3000 	str.w	r3, [sl]
 8012bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012bc4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012bc8:	601c      	str	r4, [r3, #0]
 8012bca:	e735      	b.n	8012a38 <__gethex+0x114>
 8012bcc:	1e69      	subs	r1, r5, #1
 8012bce:	4620      	mov	r0, r4
 8012bd0:	f000 fe36 	bl	8013840 <__any_on>
 8012bd4:	2800      	cmp	r0, #0
 8012bd6:	d1ed      	bne.n	8012bb4 <__gethex+0x290>
 8012bd8:	4621      	mov	r1, r4
 8012bda:	4648      	mov	r0, r9
 8012bdc:	f000 f9e4 	bl	8012fa8 <_Bfree>
 8012be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012be2:	2300      	movs	r3, #0
 8012be4:	6013      	str	r3, [r2, #0]
 8012be6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012bea:	e725      	b.n	8012a38 <__gethex+0x114>
 8012bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d1f2      	bne.n	8012bd8 <__gethex+0x2b4>
 8012bf2:	e7df      	b.n	8012bb4 <__gethex+0x290>
 8012bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1dc      	bne.n	8012bb4 <__gethex+0x290>
 8012bfa:	e7ed      	b.n	8012bd8 <__gethex+0x2b4>
 8012bfc:	08015918 	.word	0x08015918
 8012c00:	08015bbf 	.word	0x08015bbf
 8012c04:	08015bd0 	.word	0x08015bd0
 8012c08:	f106 38ff 	add.w	r8, r6, #4294967295
 8012c0c:	f1bb 0f00 	cmp.w	fp, #0
 8012c10:	d133      	bne.n	8012c7a <__gethex+0x356>
 8012c12:	f1b8 0f00 	cmp.w	r8, #0
 8012c16:	d004      	beq.n	8012c22 <__gethex+0x2fe>
 8012c18:	4641      	mov	r1, r8
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f000 fe10 	bl	8013840 <__any_on>
 8012c20:	4683      	mov	fp, r0
 8012c22:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012c26:	2301      	movs	r3, #1
 8012c28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012c2c:	f008 081f 	and.w	r8, r8, #31
 8012c30:	fa03 f308 	lsl.w	r3, r3, r8
 8012c34:	4213      	tst	r3, r2
 8012c36:	4631      	mov	r1, r6
 8012c38:	4620      	mov	r0, r4
 8012c3a:	bf18      	it	ne
 8012c3c:	f04b 0b02 	orrne.w	fp, fp, #2
 8012c40:	1bad      	subs	r5, r5, r6
 8012c42:	f7ff fe07 	bl	8012854 <rshift>
 8012c46:	687e      	ldr	r6, [r7, #4]
 8012c48:	f04f 0802 	mov.w	r8, #2
 8012c4c:	f1bb 0f00 	cmp.w	fp, #0
 8012c50:	d04a      	beq.n	8012ce8 <__gethex+0x3c4>
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	d016      	beq.n	8012c86 <__gethex+0x362>
 8012c58:	2b03      	cmp	r3, #3
 8012c5a:	d018      	beq.n	8012c8e <__gethex+0x36a>
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d109      	bne.n	8012c74 <__gethex+0x350>
 8012c60:	f01b 0f02 	tst.w	fp, #2
 8012c64:	d006      	beq.n	8012c74 <__gethex+0x350>
 8012c66:	f8da 3000 	ldr.w	r3, [sl]
 8012c6a:	ea4b 0b03 	orr.w	fp, fp, r3
 8012c6e:	f01b 0f01 	tst.w	fp, #1
 8012c72:	d10f      	bne.n	8012c94 <__gethex+0x370>
 8012c74:	f048 0810 	orr.w	r8, r8, #16
 8012c78:	e036      	b.n	8012ce8 <__gethex+0x3c4>
 8012c7a:	f04f 0b01 	mov.w	fp, #1
 8012c7e:	e7d0      	b.n	8012c22 <__gethex+0x2fe>
 8012c80:	f04f 0801 	mov.w	r8, #1
 8012c84:	e7e2      	b.n	8012c4c <__gethex+0x328>
 8012c86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c88:	f1c3 0301 	rsb	r3, r3, #1
 8012c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d0ef      	beq.n	8012c74 <__gethex+0x350>
 8012c94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012c98:	f104 0214 	add.w	r2, r4, #20
 8012c9c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	4694      	mov	ip, r2
 8012caa:	f852 1b04 	ldr.w	r1, [r2], #4
 8012cae:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012cb2:	d01e      	beq.n	8012cf2 <__gethex+0x3ce>
 8012cb4:	3101      	adds	r1, #1
 8012cb6:	f8cc 1000 	str.w	r1, [ip]
 8012cba:	f1b8 0f02 	cmp.w	r8, #2
 8012cbe:	f104 0214 	add.w	r2, r4, #20
 8012cc2:	d13d      	bne.n	8012d40 <__gethex+0x41c>
 8012cc4:	683b      	ldr	r3, [r7, #0]
 8012cc6:	3b01      	subs	r3, #1
 8012cc8:	42ab      	cmp	r3, r5
 8012cca:	d10b      	bne.n	8012ce4 <__gethex+0x3c0>
 8012ccc:	1169      	asrs	r1, r5, #5
 8012cce:	2301      	movs	r3, #1
 8012cd0:	f005 051f 	and.w	r5, r5, #31
 8012cd4:	fa03 f505 	lsl.w	r5, r3, r5
 8012cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cdc:	421d      	tst	r5, r3
 8012cde:	bf18      	it	ne
 8012ce0:	f04f 0801 	movne.w	r8, #1
 8012ce4:	f048 0820 	orr.w	r8, r8, #32
 8012ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cea:	601c      	str	r4, [r3, #0]
 8012cec:	9b02      	ldr	r3, [sp, #8]
 8012cee:	601e      	str	r6, [r3, #0]
 8012cf0:	e6a2      	b.n	8012a38 <__gethex+0x114>
 8012cf2:	4290      	cmp	r0, r2
 8012cf4:	f842 3c04 	str.w	r3, [r2, #-4]
 8012cf8:	d8d6      	bhi.n	8012ca8 <__gethex+0x384>
 8012cfa:	68a2      	ldr	r2, [r4, #8]
 8012cfc:	4593      	cmp	fp, r2
 8012cfe:	db17      	blt.n	8012d30 <__gethex+0x40c>
 8012d00:	6861      	ldr	r1, [r4, #4]
 8012d02:	4648      	mov	r0, r9
 8012d04:	3101      	adds	r1, #1
 8012d06:	f000 f90f 	bl	8012f28 <_Balloc>
 8012d0a:	4682      	mov	sl, r0
 8012d0c:	b918      	cbnz	r0, 8012d16 <__gethex+0x3f2>
 8012d0e:	4b1b      	ldr	r3, [pc, #108]	; (8012d7c <__gethex+0x458>)
 8012d10:	4602      	mov	r2, r0
 8012d12:	2184      	movs	r1, #132	; 0x84
 8012d14:	e6b3      	b.n	8012a7e <__gethex+0x15a>
 8012d16:	6922      	ldr	r2, [r4, #16]
 8012d18:	3202      	adds	r2, #2
 8012d1a:	f104 010c 	add.w	r1, r4, #12
 8012d1e:	0092      	lsls	r2, r2, #2
 8012d20:	300c      	adds	r0, #12
 8012d22:	f7fe fe94 	bl	8011a4e <memcpy>
 8012d26:	4621      	mov	r1, r4
 8012d28:	4648      	mov	r0, r9
 8012d2a:	f000 f93d 	bl	8012fa8 <_Bfree>
 8012d2e:	4654      	mov	r4, sl
 8012d30:	6922      	ldr	r2, [r4, #16]
 8012d32:	1c51      	adds	r1, r2, #1
 8012d34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012d38:	6121      	str	r1, [r4, #16]
 8012d3a:	2101      	movs	r1, #1
 8012d3c:	6151      	str	r1, [r2, #20]
 8012d3e:	e7bc      	b.n	8012cba <__gethex+0x396>
 8012d40:	6921      	ldr	r1, [r4, #16]
 8012d42:	4559      	cmp	r1, fp
 8012d44:	dd0b      	ble.n	8012d5e <__gethex+0x43a>
 8012d46:	2101      	movs	r1, #1
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f7ff fd83 	bl	8012854 <rshift>
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	3601      	adds	r6, #1
 8012d52:	42b3      	cmp	r3, r6
 8012d54:	f6ff aedb 	blt.w	8012b0e <__gethex+0x1ea>
 8012d58:	f04f 0801 	mov.w	r8, #1
 8012d5c:	e7c2      	b.n	8012ce4 <__gethex+0x3c0>
 8012d5e:	f015 051f 	ands.w	r5, r5, #31
 8012d62:	d0f9      	beq.n	8012d58 <__gethex+0x434>
 8012d64:	9b01      	ldr	r3, [sp, #4]
 8012d66:	441a      	add	r2, r3
 8012d68:	f1c5 0520 	rsb	r5, r5, #32
 8012d6c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012d70:	f000 f9cc 	bl	801310c <__hi0bits>
 8012d74:	42a8      	cmp	r0, r5
 8012d76:	dbe6      	blt.n	8012d46 <__gethex+0x422>
 8012d78:	e7ee      	b.n	8012d58 <__gethex+0x434>
 8012d7a:	bf00      	nop
 8012d7c:	08015bbf 	.word	0x08015bbf

08012d80 <L_shift>:
 8012d80:	f1c2 0208 	rsb	r2, r2, #8
 8012d84:	0092      	lsls	r2, r2, #2
 8012d86:	b570      	push	{r4, r5, r6, lr}
 8012d88:	f1c2 0620 	rsb	r6, r2, #32
 8012d8c:	6843      	ldr	r3, [r0, #4]
 8012d8e:	6804      	ldr	r4, [r0, #0]
 8012d90:	fa03 f506 	lsl.w	r5, r3, r6
 8012d94:	432c      	orrs	r4, r5
 8012d96:	40d3      	lsrs	r3, r2
 8012d98:	6004      	str	r4, [r0, #0]
 8012d9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8012d9e:	4288      	cmp	r0, r1
 8012da0:	d3f4      	bcc.n	8012d8c <L_shift+0xc>
 8012da2:	bd70      	pop	{r4, r5, r6, pc}

08012da4 <__match>:
 8012da4:	b530      	push	{r4, r5, lr}
 8012da6:	6803      	ldr	r3, [r0, #0]
 8012da8:	3301      	adds	r3, #1
 8012daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dae:	b914      	cbnz	r4, 8012db6 <__match+0x12>
 8012db0:	6003      	str	r3, [r0, #0]
 8012db2:	2001      	movs	r0, #1
 8012db4:	bd30      	pop	{r4, r5, pc}
 8012db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012dbe:	2d19      	cmp	r5, #25
 8012dc0:	bf98      	it	ls
 8012dc2:	3220      	addls	r2, #32
 8012dc4:	42a2      	cmp	r2, r4
 8012dc6:	d0f0      	beq.n	8012daa <__match+0x6>
 8012dc8:	2000      	movs	r0, #0
 8012dca:	e7f3      	b.n	8012db4 <__match+0x10>

08012dcc <__hexnan>:
 8012dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd0:	680b      	ldr	r3, [r1, #0]
 8012dd2:	6801      	ldr	r1, [r0, #0]
 8012dd4:	115e      	asrs	r6, r3, #5
 8012dd6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012dda:	f013 031f 	ands.w	r3, r3, #31
 8012dde:	b087      	sub	sp, #28
 8012de0:	bf18      	it	ne
 8012de2:	3604      	addne	r6, #4
 8012de4:	2500      	movs	r5, #0
 8012de6:	1f37      	subs	r7, r6, #4
 8012de8:	4682      	mov	sl, r0
 8012dea:	4690      	mov	r8, r2
 8012dec:	9301      	str	r3, [sp, #4]
 8012dee:	f846 5c04 	str.w	r5, [r6, #-4]
 8012df2:	46b9      	mov	r9, r7
 8012df4:	463c      	mov	r4, r7
 8012df6:	9502      	str	r5, [sp, #8]
 8012df8:	46ab      	mov	fp, r5
 8012dfa:	784a      	ldrb	r2, [r1, #1]
 8012dfc:	1c4b      	adds	r3, r1, #1
 8012dfe:	9303      	str	r3, [sp, #12]
 8012e00:	b342      	cbz	r2, 8012e54 <__hexnan+0x88>
 8012e02:	4610      	mov	r0, r2
 8012e04:	9105      	str	r1, [sp, #20]
 8012e06:	9204      	str	r2, [sp, #16]
 8012e08:	f7ff fd76 	bl	80128f8 <__hexdig_fun>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d14f      	bne.n	8012eb0 <__hexnan+0xe4>
 8012e10:	9a04      	ldr	r2, [sp, #16]
 8012e12:	9905      	ldr	r1, [sp, #20]
 8012e14:	2a20      	cmp	r2, #32
 8012e16:	d818      	bhi.n	8012e4a <__hexnan+0x7e>
 8012e18:	9b02      	ldr	r3, [sp, #8]
 8012e1a:	459b      	cmp	fp, r3
 8012e1c:	dd13      	ble.n	8012e46 <__hexnan+0x7a>
 8012e1e:	454c      	cmp	r4, r9
 8012e20:	d206      	bcs.n	8012e30 <__hexnan+0x64>
 8012e22:	2d07      	cmp	r5, #7
 8012e24:	dc04      	bgt.n	8012e30 <__hexnan+0x64>
 8012e26:	462a      	mov	r2, r5
 8012e28:	4649      	mov	r1, r9
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f7ff ffa8 	bl	8012d80 <L_shift>
 8012e30:	4544      	cmp	r4, r8
 8012e32:	d950      	bls.n	8012ed6 <__hexnan+0x10a>
 8012e34:	2300      	movs	r3, #0
 8012e36:	f1a4 0904 	sub.w	r9, r4, #4
 8012e3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e3e:	f8cd b008 	str.w	fp, [sp, #8]
 8012e42:	464c      	mov	r4, r9
 8012e44:	461d      	mov	r5, r3
 8012e46:	9903      	ldr	r1, [sp, #12]
 8012e48:	e7d7      	b.n	8012dfa <__hexnan+0x2e>
 8012e4a:	2a29      	cmp	r2, #41	; 0x29
 8012e4c:	d155      	bne.n	8012efa <__hexnan+0x12e>
 8012e4e:	3102      	adds	r1, #2
 8012e50:	f8ca 1000 	str.w	r1, [sl]
 8012e54:	f1bb 0f00 	cmp.w	fp, #0
 8012e58:	d04f      	beq.n	8012efa <__hexnan+0x12e>
 8012e5a:	454c      	cmp	r4, r9
 8012e5c:	d206      	bcs.n	8012e6c <__hexnan+0xa0>
 8012e5e:	2d07      	cmp	r5, #7
 8012e60:	dc04      	bgt.n	8012e6c <__hexnan+0xa0>
 8012e62:	462a      	mov	r2, r5
 8012e64:	4649      	mov	r1, r9
 8012e66:	4620      	mov	r0, r4
 8012e68:	f7ff ff8a 	bl	8012d80 <L_shift>
 8012e6c:	4544      	cmp	r4, r8
 8012e6e:	d934      	bls.n	8012eda <__hexnan+0x10e>
 8012e70:	f1a8 0204 	sub.w	r2, r8, #4
 8012e74:	4623      	mov	r3, r4
 8012e76:	f853 1b04 	ldr.w	r1, [r3], #4
 8012e7a:	f842 1f04 	str.w	r1, [r2, #4]!
 8012e7e:	429f      	cmp	r7, r3
 8012e80:	d2f9      	bcs.n	8012e76 <__hexnan+0xaa>
 8012e82:	1b3b      	subs	r3, r7, r4
 8012e84:	f023 0303 	bic.w	r3, r3, #3
 8012e88:	3304      	adds	r3, #4
 8012e8a:	3e03      	subs	r6, #3
 8012e8c:	3401      	adds	r4, #1
 8012e8e:	42a6      	cmp	r6, r4
 8012e90:	bf38      	it	cc
 8012e92:	2304      	movcc	r3, #4
 8012e94:	4443      	add	r3, r8
 8012e96:	2200      	movs	r2, #0
 8012e98:	f843 2b04 	str.w	r2, [r3], #4
 8012e9c:	429f      	cmp	r7, r3
 8012e9e:	d2fb      	bcs.n	8012e98 <__hexnan+0xcc>
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	b91b      	cbnz	r3, 8012eac <__hexnan+0xe0>
 8012ea4:	4547      	cmp	r7, r8
 8012ea6:	d126      	bne.n	8012ef6 <__hexnan+0x12a>
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	603b      	str	r3, [r7, #0]
 8012eac:	2005      	movs	r0, #5
 8012eae:	e025      	b.n	8012efc <__hexnan+0x130>
 8012eb0:	3501      	adds	r5, #1
 8012eb2:	2d08      	cmp	r5, #8
 8012eb4:	f10b 0b01 	add.w	fp, fp, #1
 8012eb8:	dd06      	ble.n	8012ec8 <__hexnan+0xfc>
 8012eba:	4544      	cmp	r4, r8
 8012ebc:	d9c3      	bls.n	8012e46 <__hexnan+0x7a>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ec4:	2501      	movs	r5, #1
 8012ec6:	3c04      	subs	r4, #4
 8012ec8:	6822      	ldr	r2, [r4, #0]
 8012eca:	f000 000f 	and.w	r0, r0, #15
 8012ece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012ed2:	6020      	str	r0, [r4, #0]
 8012ed4:	e7b7      	b.n	8012e46 <__hexnan+0x7a>
 8012ed6:	2508      	movs	r5, #8
 8012ed8:	e7b5      	b.n	8012e46 <__hexnan+0x7a>
 8012eda:	9b01      	ldr	r3, [sp, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d0df      	beq.n	8012ea0 <__hexnan+0xd4>
 8012ee0:	f1c3 0320 	rsb	r3, r3, #32
 8012ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8012ee8:	40da      	lsrs	r2, r3
 8012eea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012eee:	4013      	ands	r3, r2
 8012ef0:	f846 3c04 	str.w	r3, [r6, #-4]
 8012ef4:	e7d4      	b.n	8012ea0 <__hexnan+0xd4>
 8012ef6:	3f04      	subs	r7, #4
 8012ef8:	e7d2      	b.n	8012ea0 <__hexnan+0xd4>
 8012efa:	2004      	movs	r0, #4
 8012efc:	b007      	add	sp, #28
 8012efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f02 <__ascii_mbtowc>:
 8012f02:	b082      	sub	sp, #8
 8012f04:	b901      	cbnz	r1, 8012f08 <__ascii_mbtowc+0x6>
 8012f06:	a901      	add	r1, sp, #4
 8012f08:	b142      	cbz	r2, 8012f1c <__ascii_mbtowc+0x1a>
 8012f0a:	b14b      	cbz	r3, 8012f20 <__ascii_mbtowc+0x1e>
 8012f0c:	7813      	ldrb	r3, [r2, #0]
 8012f0e:	600b      	str	r3, [r1, #0]
 8012f10:	7812      	ldrb	r2, [r2, #0]
 8012f12:	1e10      	subs	r0, r2, #0
 8012f14:	bf18      	it	ne
 8012f16:	2001      	movne	r0, #1
 8012f18:	b002      	add	sp, #8
 8012f1a:	4770      	bx	lr
 8012f1c:	4610      	mov	r0, r2
 8012f1e:	e7fb      	b.n	8012f18 <__ascii_mbtowc+0x16>
 8012f20:	f06f 0001 	mvn.w	r0, #1
 8012f24:	e7f8      	b.n	8012f18 <__ascii_mbtowc+0x16>
	...

08012f28 <_Balloc>:
 8012f28:	b570      	push	{r4, r5, r6, lr}
 8012f2a:	69c6      	ldr	r6, [r0, #28]
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	460d      	mov	r5, r1
 8012f30:	b976      	cbnz	r6, 8012f50 <_Balloc+0x28>
 8012f32:	2010      	movs	r0, #16
 8012f34:	f7fc fe26 	bl	800fb84 <malloc>
 8012f38:	4602      	mov	r2, r0
 8012f3a:	61e0      	str	r0, [r4, #28]
 8012f3c:	b920      	cbnz	r0, 8012f48 <_Balloc+0x20>
 8012f3e:	4b18      	ldr	r3, [pc, #96]	; (8012fa0 <_Balloc+0x78>)
 8012f40:	4818      	ldr	r0, [pc, #96]	; (8012fa4 <_Balloc+0x7c>)
 8012f42:	216b      	movs	r1, #107	; 0x6b
 8012f44:	f7fe fda2 	bl	8011a8c <__assert_func>
 8012f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f4c:	6006      	str	r6, [r0, #0]
 8012f4e:	60c6      	str	r6, [r0, #12]
 8012f50:	69e6      	ldr	r6, [r4, #28]
 8012f52:	68f3      	ldr	r3, [r6, #12]
 8012f54:	b183      	cbz	r3, 8012f78 <_Balloc+0x50>
 8012f56:	69e3      	ldr	r3, [r4, #28]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f5e:	b9b8      	cbnz	r0, 8012f90 <_Balloc+0x68>
 8012f60:	2101      	movs	r1, #1
 8012f62:	fa01 f605 	lsl.w	r6, r1, r5
 8012f66:	1d72      	adds	r2, r6, #5
 8012f68:	0092      	lsls	r2, r2, #2
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f001 f897 	bl	801409e <_calloc_r>
 8012f70:	b160      	cbz	r0, 8012f8c <_Balloc+0x64>
 8012f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012f76:	e00e      	b.n	8012f96 <_Balloc+0x6e>
 8012f78:	2221      	movs	r2, #33	; 0x21
 8012f7a:	2104      	movs	r1, #4
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f001 f88e 	bl	801409e <_calloc_r>
 8012f82:	69e3      	ldr	r3, [r4, #28]
 8012f84:	60f0      	str	r0, [r6, #12]
 8012f86:	68db      	ldr	r3, [r3, #12]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d1e4      	bne.n	8012f56 <_Balloc+0x2e>
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	bd70      	pop	{r4, r5, r6, pc}
 8012f90:	6802      	ldr	r2, [r0, #0]
 8012f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f96:	2300      	movs	r3, #0
 8012f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f9c:	e7f7      	b.n	8012f8e <_Balloc+0x66>
 8012f9e:	bf00      	nop
 8012fa0:	08015aa5 	.word	0x08015aa5
 8012fa4:	08015c30 	.word	0x08015c30

08012fa8 <_Bfree>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	69c6      	ldr	r6, [r0, #28]
 8012fac:	4605      	mov	r5, r0
 8012fae:	460c      	mov	r4, r1
 8012fb0:	b976      	cbnz	r6, 8012fd0 <_Bfree+0x28>
 8012fb2:	2010      	movs	r0, #16
 8012fb4:	f7fc fde6 	bl	800fb84 <malloc>
 8012fb8:	4602      	mov	r2, r0
 8012fba:	61e8      	str	r0, [r5, #28]
 8012fbc:	b920      	cbnz	r0, 8012fc8 <_Bfree+0x20>
 8012fbe:	4b09      	ldr	r3, [pc, #36]	; (8012fe4 <_Bfree+0x3c>)
 8012fc0:	4809      	ldr	r0, [pc, #36]	; (8012fe8 <_Bfree+0x40>)
 8012fc2:	218f      	movs	r1, #143	; 0x8f
 8012fc4:	f7fe fd62 	bl	8011a8c <__assert_func>
 8012fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fcc:	6006      	str	r6, [r0, #0]
 8012fce:	60c6      	str	r6, [r0, #12]
 8012fd0:	b13c      	cbz	r4, 8012fe2 <_Bfree+0x3a>
 8012fd2:	69eb      	ldr	r3, [r5, #28]
 8012fd4:	6862      	ldr	r2, [r4, #4]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fdc:	6021      	str	r1, [r4, #0]
 8012fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012fe2:	bd70      	pop	{r4, r5, r6, pc}
 8012fe4:	08015aa5 	.word	0x08015aa5
 8012fe8:	08015c30 	.word	0x08015c30

08012fec <__multadd>:
 8012fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff0:	690d      	ldr	r5, [r1, #16]
 8012ff2:	4607      	mov	r7, r0
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	461e      	mov	r6, r3
 8012ff8:	f101 0c14 	add.w	ip, r1, #20
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8013002:	b299      	uxth	r1, r3
 8013004:	fb02 6101 	mla	r1, r2, r1, r6
 8013008:	0c1e      	lsrs	r6, r3, #16
 801300a:	0c0b      	lsrs	r3, r1, #16
 801300c:	fb02 3306 	mla	r3, r2, r6, r3
 8013010:	b289      	uxth	r1, r1
 8013012:	3001      	adds	r0, #1
 8013014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013018:	4285      	cmp	r5, r0
 801301a:	f84c 1b04 	str.w	r1, [ip], #4
 801301e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013022:	dcec      	bgt.n	8012ffe <__multadd+0x12>
 8013024:	b30e      	cbz	r6, 801306a <__multadd+0x7e>
 8013026:	68a3      	ldr	r3, [r4, #8]
 8013028:	42ab      	cmp	r3, r5
 801302a:	dc19      	bgt.n	8013060 <__multadd+0x74>
 801302c:	6861      	ldr	r1, [r4, #4]
 801302e:	4638      	mov	r0, r7
 8013030:	3101      	adds	r1, #1
 8013032:	f7ff ff79 	bl	8012f28 <_Balloc>
 8013036:	4680      	mov	r8, r0
 8013038:	b928      	cbnz	r0, 8013046 <__multadd+0x5a>
 801303a:	4602      	mov	r2, r0
 801303c:	4b0c      	ldr	r3, [pc, #48]	; (8013070 <__multadd+0x84>)
 801303e:	480d      	ldr	r0, [pc, #52]	; (8013074 <__multadd+0x88>)
 8013040:	21ba      	movs	r1, #186	; 0xba
 8013042:	f7fe fd23 	bl	8011a8c <__assert_func>
 8013046:	6922      	ldr	r2, [r4, #16]
 8013048:	3202      	adds	r2, #2
 801304a:	f104 010c 	add.w	r1, r4, #12
 801304e:	0092      	lsls	r2, r2, #2
 8013050:	300c      	adds	r0, #12
 8013052:	f7fe fcfc 	bl	8011a4e <memcpy>
 8013056:	4621      	mov	r1, r4
 8013058:	4638      	mov	r0, r7
 801305a:	f7ff ffa5 	bl	8012fa8 <_Bfree>
 801305e:	4644      	mov	r4, r8
 8013060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013064:	3501      	adds	r5, #1
 8013066:	615e      	str	r6, [r3, #20]
 8013068:	6125      	str	r5, [r4, #16]
 801306a:	4620      	mov	r0, r4
 801306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013070:	08015bbf 	.word	0x08015bbf
 8013074:	08015c30 	.word	0x08015c30

08013078 <__s2b>:
 8013078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801307c:	460c      	mov	r4, r1
 801307e:	4615      	mov	r5, r2
 8013080:	461f      	mov	r7, r3
 8013082:	2209      	movs	r2, #9
 8013084:	3308      	adds	r3, #8
 8013086:	4606      	mov	r6, r0
 8013088:	fb93 f3f2 	sdiv	r3, r3, r2
 801308c:	2100      	movs	r1, #0
 801308e:	2201      	movs	r2, #1
 8013090:	429a      	cmp	r2, r3
 8013092:	db09      	blt.n	80130a8 <__s2b+0x30>
 8013094:	4630      	mov	r0, r6
 8013096:	f7ff ff47 	bl	8012f28 <_Balloc>
 801309a:	b940      	cbnz	r0, 80130ae <__s2b+0x36>
 801309c:	4602      	mov	r2, r0
 801309e:	4b19      	ldr	r3, [pc, #100]	; (8013104 <__s2b+0x8c>)
 80130a0:	4819      	ldr	r0, [pc, #100]	; (8013108 <__s2b+0x90>)
 80130a2:	21d3      	movs	r1, #211	; 0xd3
 80130a4:	f7fe fcf2 	bl	8011a8c <__assert_func>
 80130a8:	0052      	lsls	r2, r2, #1
 80130aa:	3101      	adds	r1, #1
 80130ac:	e7f0      	b.n	8013090 <__s2b+0x18>
 80130ae:	9b08      	ldr	r3, [sp, #32]
 80130b0:	6143      	str	r3, [r0, #20]
 80130b2:	2d09      	cmp	r5, #9
 80130b4:	f04f 0301 	mov.w	r3, #1
 80130b8:	6103      	str	r3, [r0, #16]
 80130ba:	dd16      	ble.n	80130ea <__s2b+0x72>
 80130bc:	f104 0909 	add.w	r9, r4, #9
 80130c0:	46c8      	mov	r8, r9
 80130c2:	442c      	add	r4, r5
 80130c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80130c8:	4601      	mov	r1, r0
 80130ca:	3b30      	subs	r3, #48	; 0x30
 80130cc:	220a      	movs	r2, #10
 80130ce:	4630      	mov	r0, r6
 80130d0:	f7ff ff8c 	bl	8012fec <__multadd>
 80130d4:	45a0      	cmp	r8, r4
 80130d6:	d1f5      	bne.n	80130c4 <__s2b+0x4c>
 80130d8:	f1a5 0408 	sub.w	r4, r5, #8
 80130dc:	444c      	add	r4, r9
 80130de:	1b2d      	subs	r5, r5, r4
 80130e0:	1963      	adds	r3, r4, r5
 80130e2:	42bb      	cmp	r3, r7
 80130e4:	db04      	blt.n	80130f0 <__s2b+0x78>
 80130e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ea:	340a      	adds	r4, #10
 80130ec:	2509      	movs	r5, #9
 80130ee:	e7f6      	b.n	80130de <__s2b+0x66>
 80130f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130f4:	4601      	mov	r1, r0
 80130f6:	3b30      	subs	r3, #48	; 0x30
 80130f8:	220a      	movs	r2, #10
 80130fa:	4630      	mov	r0, r6
 80130fc:	f7ff ff76 	bl	8012fec <__multadd>
 8013100:	e7ee      	b.n	80130e0 <__s2b+0x68>
 8013102:	bf00      	nop
 8013104:	08015bbf 	.word	0x08015bbf
 8013108:	08015c30 	.word	0x08015c30

0801310c <__hi0bits>:
 801310c:	0c03      	lsrs	r3, r0, #16
 801310e:	041b      	lsls	r3, r3, #16
 8013110:	b9d3      	cbnz	r3, 8013148 <__hi0bits+0x3c>
 8013112:	0400      	lsls	r0, r0, #16
 8013114:	2310      	movs	r3, #16
 8013116:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801311a:	bf04      	itt	eq
 801311c:	0200      	lsleq	r0, r0, #8
 801311e:	3308      	addeq	r3, #8
 8013120:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013124:	bf04      	itt	eq
 8013126:	0100      	lsleq	r0, r0, #4
 8013128:	3304      	addeq	r3, #4
 801312a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801312e:	bf04      	itt	eq
 8013130:	0080      	lsleq	r0, r0, #2
 8013132:	3302      	addeq	r3, #2
 8013134:	2800      	cmp	r0, #0
 8013136:	db05      	blt.n	8013144 <__hi0bits+0x38>
 8013138:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801313c:	f103 0301 	add.w	r3, r3, #1
 8013140:	bf08      	it	eq
 8013142:	2320      	moveq	r3, #32
 8013144:	4618      	mov	r0, r3
 8013146:	4770      	bx	lr
 8013148:	2300      	movs	r3, #0
 801314a:	e7e4      	b.n	8013116 <__hi0bits+0xa>

0801314c <__lo0bits>:
 801314c:	6803      	ldr	r3, [r0, #0]
 801314e:	f013 0207 	ands.w	r2, r3, #7
 8013152:	d00c      	beq.n	801316e <__lo0bits+0x22>
 8013154:	07d9      	lsls	r1, r3, #31
 8013156:	d422      	bmi.n	801319e <__lo0bits+0x52>
 8013158:	079a      	lsls	r2, r3, #30
 801315a:	bf49      	itett	mi
 801315c:	085b      	lsrmi	r3, r3, #1
 801315e:	089b      	lsrpl	r3, r3, #2
 8013160:	6003      	strmi	r3, [r0, #0]
 8013162:	2201      	movmi	r2, #1
 8013164:	bf5c      	itt	pl
 8013166:	6003      	strpl	r3, [r0, #0]
 8013168:	2202      	movpl	r2, #2
 801316a:	4610      	mov	r0, r2
 801316c:	4770      	bx	lr
 801316e:	b299      	uxth	r1, r3
 8013170:	b909      	cbnz	r1, 8013176 <__lo0bits+0x2a>
 8013172:	0c1b      	lsrs	r3, r3, #16
 8013174:	2210      	movs	r2, #16
 8013176:	b2d9      	uxtb	r1, r3
 8013178:	b909      	cbnz	r1, 801317e <__lo0bits+0x32>
 801317a:	3208      	adds	r2, #8
 801317c:	0a1b      	lsrs	r3, r3, #8
 801317e:	0719      	lsls	r1, r3, #28
 8013180:	bf04      	itt	eq
 8013182:	091b      	lsreq	r3, r3, #4
 8013184:	3204      	addeq	r2, #4
 8013186:	0799      	lsls	r1, r3, #30
 8013188:	bf04      	itt	eq
 801318a:	089b      	lsreq	r3, r3, #2
 801318c:	3202      	addeq	r2, #2
 801318e:	07d9      	lsls	r1, r3, #31
 8013190:	d403      	bmi.n	801319a <__lo0bits+0x4e>
 8013192:	085b      	lsrs	r3, r3, #1
 8013194:	f102 0201 	add.w	r2, r2, #1
 8013198:	d003      	beq.n	80131a2 <__lo0bits+0x56>
 801319a:	6003      	str	r3, [r0, #0]
 801319c:	e7e5      	b.n	801316a <__lo0bits+0x1e>
 801319e:	2200      	movs	r2, #0
 80131a0:	e7e3      	b.n	801316a <__lo0bits+0x1e>
 80131a2:	2220      	movs	r2, #32
 80131a4:	e7e1      	b.n	801316a <__lo0bits+0x1e>
	...

080131a8 <__i2b>:
 80131a8:	b510      	push	{r4, lr}
 80131aa:	460c      	mov	r4, r1
 80131ac:	2101      	movs	r1, #1
 80131ae:	f7ff febb 	bl	8012f28 <_Balloc>
 80131b2:	4602      	mov	r2, r0
 80131b4:	b928      	cbnz	r0, 80131c2 <__i2b+0x1a>
 80131b6:	4b05      	ldr	r3, [pc, #20]	; (80131cc <__i2b+0x24>)
 80131b8:	4805      	ldr	r0, [pc, #20]	; (80131d0 <__i2b+0x28>)
 80131ba:	f240 1145 	movw	r1, #325	; 0x145
 80131be:	f7fe fc65 	bl	8011a8c <__assert_func>
 80131c2:	2301      	movs	r3, #1
 80131c4:	6144      	str	r4, [r0, #20]
 80131c6:	6103      	str	r3, [r0, #16]
 80131c8:	bd10      	pop	{r4, pc}
 80131ca:	bf00      	nop
 80131cc:	08015bbf 	.word	0x08015bbf
 80131d0:	08015c30 	.word	0x08015c30

080131d4 <__multiply>:
 80131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d8:	4691      	mov	r9, r2
 80131da:	690a      	ldr	r2, [r1, #16]
 80131dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	bfb8      	it	lt
 80131e4:	460b      	movlt	r3, r1
 80131e6:	460c      	mov	r4, r1
 80131e8:	bfbc      	itt	lt
 80131ea:	464c      	movlt	r4, r9
 80131ec:	4699      	movlt	r9, r3
 80131ee:	6927      	ldr	r7, [r4, #16]
 80131f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80131f4:	68a3      	ldr	r3, [r4, #8]
 80131f6:	6861      	ldr	r1, [r4, #4]
 80131f8:	eb07 060a 	add.w	r6, r7, sl
 80131fc:	42b3      	cmp	r3, r6
 80131fe:	b085      	sub	sp, #20
 8013200:	bfb8      	it	lt
 8013202:	3101      	addlt	r1, #1
 8013204:	f7ff fe90 	bl	8012f28 <_Balloc>
 8013208:	b930      	cbnz	r0, 8013218 <__multiply+0x44>
 801320a:	4602      	mov	r2, r0
 801320c:	4b44      	ldr	r3, [pc, #272]	; (8013320 <__multiply+0x14c>)
 801320e:	4845      	ldr	r0, [pc, #276]	; (8013324 <__multiply+0x150>)
 8013210:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013214:	f7fe fc3a 	bl	8011a8c <__assert_func>
 8013218:	f100 0514 	add.w	r5, r0, #20
 801321c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013220:	462b      	mov	r3, r5
 8013222:	2200      	movs	r2, #0
 8013224:	4543      	cmp	r3, r8
 8013226:	d321      	bcc.n	801326c <__multiply+0x98>
 8013228:	f104 0314 	add.w	r3, r4, #20
 801322c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013230:	f109 0314 	add.w	r3, r9, #20
 8013234:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013238:	9202      	str	r2, [sp, #8]
 801323a:	1b3a      	subs	r2, r7, r4
 801323c:	3a15      	subs	r2, #21
 801323e:	f022 0203 	bic.w	r2, r2, #3
 8013242:	3204      	adds	r2, #4
 8013244:	f104 0115 	add.w	r1, r4, #21
 8013248:	428f      	cmp	r7, r1
 801324a:	bf38      	it	cc
 801324c:	2204      	movcc	r2, #4
 801324e:	9201      	str	r2, [sp, #4]
 8013250:	9a02      	ldr	r2, [sp, #8]
 8013252:	9303      	str	r3, [sp, #12]
 8013254:	429a      	cmp	r2, r3
 8013256:	d80c      	bhi.n	8013272 <__multiply+0x9e>
 8013258:	2e00      	cmp	r6, #0
 801325a:	dd03      	ble.n	8013264 <__multiply+0x90>
 801325c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013260:	2b00      	cmp	r3, #0
 8013262:	d05b      	beq.n	801331c <__multiply+0x148>
 8013264:	6106      	str	r6, [r0, #16]
 8013266:	b005      	add	sp, #20
 8013268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326c:	f843 2b04 	str.w	r2, [r3], #4
 8013270:	e7d8      	b.n	8013224 <__multiply+0x50>
 8013272:	f8b3 a000 	ldrh.w	sl, [r3]
 8013276:	f1ba 0f00 	cmp.w	sl, #0
 801327a:	d024      	beq.n	80132c6 <__multiply+0xf2>
 801327c:	f104 0e14 	add.w	lr, r4, #20
 8013280:	46a9      	mov	r9, r5
 8013282:	f04f 0c00 	mov.w	ip, #0
 8013286:	f85e 2b04 	ldr.w	r2, [lr], #4
 801328a:	f8d9 1000 	ldr.w	r1, [r9]
 801328e:	fa1f fb82 	uxth.w	fp, r2
 8013292:	b289      	uxth	r1, r1
 8013294:	fb0a 110b 	mla	r1, sl, fp, r1
 8013298:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801329c:	f8d9 2000 	ldr.w	r2, [r9]
 80132a0:	4461      	add	r1, ip
 80132a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80132a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80132aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80132ae:	b289      	uxth	r1, r1
 80132b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80132b4:	4577      	cmp	r7, lr
 80132b6:	f849 1b04 	str.w	r1, [r9], #4
 80132ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80132be:	d8e2      	bhi.n	8013286 <__multiply+0xb2>
 80132c0:	9a01      	ldr	r2, [sp, #4]
 80132c2:	f845 c002 	str.w	ip, [r5, r2]
 80132c6:	9a03      	ldr	r2, [sp, #12]
 80132c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80132cc:	3304      	adds	r3, #4
 80132ce:	f1b9 0f00 	cmp.w	r9, #0
 80132d2:	d021      	beq.n	8013318 <__multiply+0x144>
 80132d4:	6829      	ldr	r1, [r5, #0]
 80132d6:	f104 0c14 	add.w	ip, r4, #20
 80132da:	46ae      	mov	lr, r5
 80132dc:	f04f 0a00 	mov.w	sl, #0
 80132e0:	f8bc b000 	ldrh.w	fp, [ip]
 80132e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80132e8:	fb09 220b 	mla	r2, r9, fp, r2
 80132ec:	4452      	add	r2, sl
 80132ee:	b289      	uxth	r1, r1
 80132f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80132f4:	f84e 1b04 	str.w	r1, [lr], #4
 80132f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80132fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013300:	f8be 1000 	ldrh.w	r1, [lr]
 8013304:	fb09 110a 	mla	r1, r9, sl, r1
 8013308:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801330c:	4567      	cmp	r7, ip
 801330e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013312:	d8e5      	bhi.n	80132e0 <__multiply+0x10c>
 8013314:	9a01      	ldr	r2, [sp, #4]
 8013316:	50a9      	str	r1, [r5, r2]
 8013318:	3504      	adds	r5, #4
 801331a:	e799      	b.n	8013250 <__multiply+0x7c>
 801331c:	3e01      	subs	r6, #1
 801331e:	e79b      	b.n	8013258 <__multiply+0x84>
 8013320:	08015bbf 	.word	0x08015bbf
 8013324:	08015c30 	.word	0x08015c30

08013328 <__pow5mult>:
 8013328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801332c:	4615      	mov	r5, r2
 801332e:	f012 0203 	ands.w	r2, r2, #3
 8013332:	4606      	mov	r6, r0
 8013334:	460f      	mov	r7, r1
 8013336:	d007      	beq.n	8013348 <__pow5mult+0x20>
 8013338:	4c25      	ldr	r4, [pc, #148]	; (80133d0 <__pow5mult+0xa8>)
 801333a:	3a01      	subs	r2, #1
 801333c:	2300      	movs	r3, #0
 801333e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013342:	f7ff fe53 	bl	8012fec <__multadd>
 8013346:	4607      	mov	r7, r0
 8013348:	10ad      	asrs	r5, r5, #2
 801334a:	d03d      	beq.n	80133c8 <__pow5mult+0xa0>
 801334c:	69f4      	ldr	r4, [r6, #28]
 801334e:	b97c      	cbnz	r4, 8013370 <__pow5mult+0x48>
 8013350:	2010      	movs	r0, #16
 8013352:	f7fc fc17 	bl	800fb84 <malloc>
 8013356:	4602      	mov	r2, r0
 8013358:	61f0      	str	r0, [r6, #28]
 801335a:	b928      	cbnz	r0, 8013368 <__pow5mult+0x40>
 801335c:	4b1d      	ldr	r3, [pc, #116]	; (80133d4 <__pow5mult+0xac>)
 801335e:	481e      	ldr	r0, [pc, #120]	; (80133d8 <__pow5mult+0xb0>)
 8013360:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013364:	f7fe fb92 	bl	8011a8c <__assert_func>
 8013368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801336c:	6004      	str	r4, [r0, #0]
 801336e:	60c4      	str	r4, [r0, #12]
 8013370:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013378:	b94c      	cbnz	r4, 801338e <__pow5mult+0x66>
 801337a:	f240 2171 	movw	r1, #625	; 0x271
 801337e:	4630      	mov	r0, r6
 8013380:	f7ff ff12 	bl	80131a8 <__i2b>
 8013384:	2300      	movs	r3, #0
 8013386:	f8c8 0008 	str.w	r0, [r8, #8]
 801338a:	4604      	mov	r4, r0
 801338c:	6003      	str	r3, [r0, #0]
 801338e:	f04f 0900 	mov.w	r9, #0
 8013392:	07eb      	lsls	r3, r5, #31
 8013394:	d50a      	bpl.n	80133ac <__pow5mult+0x84>
 8013396:	4639      	mov	r1, r7
 8013398:	4622      	mov	r2, r4
 801339a:	4630      	mov	r0, r6
 801339c:	f7ff ff1a 	bl	80131d4 <__multiply>
 80133a0:	4639      	mov	r1, r7
 80133a2:	4680      	mov	r8, r0
 80133a4:	4630      	mov	r0, r6
 80133a6:	f7ff fdff 	bl	8012fa8 <_Bfree>
 80133aa:	4647      	mov	r7, r8
 80133ac:	106d      	asrs	r5, r5, #1
 80133ae:	d00b      	beq.n	80133c8 <__pow5mult+0xa0>
 80133b0:	6820      	ldr	r0, [r4, #0]
 80133b2:	b938      	cbnz	r0, 80133c4 <__pow5mult+0x9c>
 80133b4:	4622      	mov	r2, r4
 80133b6:	4621      	mov	r1, r4
 80133b8:	4630      	mov	r0, r6
 80133ba:	f7ff ff0b 	bl	80131d4 <__multiply>
 80133be:	6020      	str	r0, [r4, #0]
 80133c0:	f8c0 9000 	str.w	r9, [r0]
 80133c4:	4604      	mov	r4, r0
 80133c6:	e7e4      	b.n	8013392 <__pow5mult+0x6a>
 80133c8:	4638      	mov	r0, r7
 80133ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ce:	bf00      	nop
 80133d0:	08015d80 	.word	0x08015d80
 80133d4:	08015aa5 	.word	0x08015aa5
 80133d8:	08015c30 	.word	0x08015c30

080133dc <__lshift>:
 80133dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133e0:	460c      	mov	r4, r1
 80133e2:	6849      	ldr	r1, [r1, #4]
 80133e4:	6923      	ldr	r3, [r4, #16]
 80133e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	4607      	mov	r7, r0
 80133ee:	4691      	mov	r9, r2
 80133f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133f4:	f108 0601 	add.w	r6, r8, #1
 80133f8:	42b3      	cmp	r3, r6
 80133fa:	db0b      	blt.n	8013414 <__lshift+0x38>
 80133fc:	4638      	mov	r0, r7
 80133fe:	f7ff fd93 	bl	8012f28 <_Balloc>
 8013402:	4605      	mov	r5, r0
 8013404:	b948      	cbnz	r0, 801341a <__lshift+0x3e>
 8013406:	4602      	mov	r2, r0
 8013408:	4b28      	ldr	r3, [pc, #160]	; (80134ac <__lshift+0xd0>)
 801340a:	4829      	ldr	r0, [pc, #164]	; (80134b0 <__lshift+0xd4>)
 801340c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013410:	f7fe fb3c 	bl	8011a8c <__assert_func>
 8013414:	3101      	adds	r1, #1
 8013416:	005b      	lsls	r3, r3, #1
 8013418:	e7ee      	b.n	80133f8 <__lshift+0x1c>
 801341a:	2300      	movs	r3, #0
 801341c:	f100 0114 	add.w	r1, r0, #20
 8013420:	f100 0210 	add.w	r2, r0, #16
 8013424:	4618      	mov	r0, r3
 8013426:	4553      	cmp	r3, sl
 8013428:	db33      	blt.n	8013492 <__lshift+0xb6>
 801342a:	6920      	ldr	r0, [r4, #16]
 801342c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013430:	f104 0314 	add.w	r3, r4, #20
 8013434:	f019 091f 	ands.w	r9, r9, #31
 8013438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801343c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013440:	d02b      	beq.n	801349a <__lshift+0xbe>
 8013442:	f1c9 0e20 	rsb	lr, r9, #32
 8013446:	468a      	mov	sl, r1
 8013448:	2200      	movs	r2, #0
 801344a:	6818      	ldr	r0, [r3, #0]
 801344c:	fa00 f009 	lsl.w	r0, r0, r9
 8013450:	4310      	orrs	r0, r2
 8013452:	f84a 0b04 	str.w	r0, [sl], #4
 8013456:	f853 2b04 	ldr.w	r2, [r3], #4
 801345a:	459c      	cmp	ip, r3
 801345c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013460:	d8f3      	bhi.n	801344a <__lshift+0x6e>
 8013462:	ebac 0304 	sub.w	r3, ip, r4
 8013466:	3b15      	subs	r3, #21
 8013468:	f023 0303 	bic.w	r3, r3, #3
 801346c:	3304      	adds	r3, #4
 801346e:	f104 0015 	add.w	r0, r4, #21
 8013472:	4584      	cmp	ip, r0
 8013474:	bf38      	it	cc
 8013476:	2304      	movcc	r3, #4
 8013478:	50ca      	str	r2, [r1, r3]
 801347a:	b10a      	cbz	r2, 8013480 <__lshift+0xa4>
 801347c:	f108 0602 	add.w	r6, r8, #2
 8013480:	3e01      	subs	r6, #1
 8013482:	4638      	mov	r0, r7
 8013484:	612e      	str	r6, [r5, #16]
 8013486:	4621      	mov	r1, r4
 8013488:	f7ff fd8e 	bl	8012fa8 <_Bfree>
 801348c:	4628      	mov	r0, r5
 801348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013492:	f842 0f04 	str.w	r0, [r2, #4]!
 8013496:	3301      	adds	r3, #1
 8013498:	e7c5      	b.n	8013426 <__lshift+0x4a>
 801349a:	3904      	subs	r1, #4
 801349c:	f853 2b04 	ldr.w	r2, [r3], #4
 80134a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80134a4:	459c      	cmp	ip, r3
 80134a6:	d8f9      	bhi.n	801349c <__lshift+0xc0>
 80134a8:	e7ea      	b.n	8013480 <__lshift+0xa4>
 80134aa:	bf00      	nop
 80134ac:	08015bbf 	.word	0x08015bbf
 80134b0:	08015c30 	.word	0x08015c30

080134b4 <__mcmp>:
 80134b4:	b530      	push	{r4, r5, lr}
 80134b6:	6902      	ldr	r2, [r0, #16]
 80134b8:	690c      	ldr	r4, [r1, #16]
 80134ba:	1b12      	subs	r2, r2, r4
 80134bc:	d10e      	bne.n	80134dc <__mcmp+0x28>
 80134be:	f100 0314 	add.w	r3, r0, #20
 80134c2:	3114      	adds	r1, #20
 80134c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80134c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80134cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80134d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80134d4:	42a5      	cmp	r5, r4
 80134d6:	d003      	beq.n	80134e0 <__mcmp+0x2c>
 80134d8:	d305      	bcc.n	80134e6 <__mcmp+0x32>
 80134da:	2201      	movs	r2, #1
 80134dc:	4610      	mov	r0, r2
 80134de:	bd30      	pop	{r4, r5, pc}
 80134e0:	4283      	cmp	r3, r0
 80134e2:	d3f3      	bcc.n	80134cc <__mcmp+0x18>
 80134e4:	e7fa      	b.n	80134dc <__mcmp+0x28>
 80134e6:	f04f 32ff 	mov.w	r2, #4294967295
 80134ea:	e7f7      	b.n	80134dc <__mcmp+0x28>

080134ec <__mdiff>:
 80134ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f0:	460c      	mov	r4, r1
 80134f2:	4606      	mov	r6, r0
 80134f4:	4611      	mov	r1, r2
 80134f6:	4620      	mov	r0, r4
 80134f8:	4690      	mov	r8, r2
 80134fa:	f7ff ffdb 	bl	80134b4 <__mcmp>
 80134fe:	1e05      	subs	r5, r0, #0
 8013500:	d110      	bne.n	8013524 <__mdiff+0x38>
 8013502:	4629      	mov	r1, r5
 8013504:	4630      	mov	r0, r6
 8013506:	f7ff fd0f 	bl	8012f28 <_Balloc>
 801350a:	b930      	cbnz	r0, 801351a <__mdiff+0x2e>
 801350c:	4b3a      	ldr	r3, [pc, #232]	; (80135f8 <__mdiff+0x10c>)
 801350e:	4602      	mov	r2, r0
 8013510:	f240 2137 	movw	r1, #567	; 0x237
 8013514:	4839      	ldr	r0, [pc, #228]	; (80135fc <__mdiff+0x110>)
 8013516:	f7fe fab9 	bl	8011a8c <__assert_func>
 801351a:	2301      	movs	r3, #1
 801351c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013524:	bfa4      	itt	ge
 8013526:	4643      	movge	r3, r8
 8013528:	46a0      	movge	r8, r4
 801352a:	4630      	mov	r0, r6
 801352c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013530:	bfa6      	itte	ge
 8013532:	461c      	movge	r4, r3
 8013534:	2500      	movge	r5, #0
 8013536:	2501      	movlt	r5, #1
 8013538:	f7ff fcf6 	bl	8012f28 <_Balloc>
 801353c:	b920      	cbnz	r0, 8013548 <__mdiff+0x5c>
 801353e:	4b2e      	ldr	r3, [pc, #184]	; (80135f8 <__mdiff+0x10c>)
 8013540:	4602      	mov	r2, r0
 8013542:	f240 2145 	movw	r1, #581	; 0x245
 8013546:	e7e5      	b.n	8013514 <__mdiff+0x28>
 8013548:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801354c:	6926      	ldr	r6, [r4, #16]
 801354e:	60c5      	str	r5, [r0, #12]
 8013550:	f104 0914 	add.w	r9, r4, #20
 8013554:	f108 0514 	add.w	r5, r8, #20
 8013558:	f100 0e14 	add.w	lr, r0, #20
 801355c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013560:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013564:	f108 0210 	add.w	r2, r8, #16
 8013568:	46f2      	mov	sl, lr
 801356a:	2100      	movs	r1, #0
 801356c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013570:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013574:	fa11 f88b 	uxtah	r8, r1, fp
 8013578:	b299      	uxth	r1, r3
 801357a:	0c1b      	lsrs	r3, r3, #16
 801357c:	eba8 0801 	sub.w	r8, r8, r1
 8013580:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013584:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013588:	fa1f f888 	uxth.w	r8, r8
 801358c:	1419      	asrs	r1, r3, #16
 801358e:	454e      	cmp	r6, r9
 8013590:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013594:	f84a 3b04 	str.w	r3, [sl], #4
 8013598:	d8e8      	bhi.n	801356c <__mdiff+0x80>
 801359a:	1b33      	subs	r3, r6, r4
 801359c:	3b15      	subs	r3, #21
 801359e:	f023 0303 	bic.w	r3, r3, #3
 80135a2:	3304      	adds	r3, #4
 80135a4:	3415      	adds	r4, #21
 80135a6:	42a6      	cmp	r6, r4
 80135a8:	bf38      	it	cc
 80135aa:	2304      	movcc	r3, #4
 80135ac:	441d      	add	r5, r3
 80135ae:	4473      	add	r3, lr
 80135b0:	469e      	mov	lr, r3
 80135b2:	462e      	mov	r6, r5
 80135b4:	4566      	cmp	r6, ip
 80135b6:	d30e      	bcc.n	80135d6 <__mdiff+0xea>
 80135b8:	f10c 0203 	add.w	r2, ip, #3
 80135bc:	1b52      	subs	r2, r2, r5
 80135be:	f022 0203 	bic.w	r2, r2, #3
 80135c2:	3d03      	subs	r5, #3
 80135c4:	45ac      	cmp	ip, r5
 80135c6:	bf38      	it	cc
 80135c8:	2200      	movcc	r2, #0
 80135ca:	4413      	add	r3, r2
 80135cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80135d0:	b17a      	cbz	r2, 80135f2 <__mdiff+0x106>
 80135d2:	6107      	str	r7, [r0, #16]
 80135d4:	e7a4      	b.n	8013520 <__mdiff+0x34>
 80135d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80135da:	fa11 f288 	uxtah	r2, r1, r8
 80135de:	1414      	asrs	r4, r2, #16
 80135e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80135e4:	b292      	uxth	r2, r2
 80135e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80135ea:	f84e 2b04 	str.w	r2, [lr], #4
 80135ee:	1421      	asrs	r1, r4, #16
 80135f0:	e7e0      	b.n	80135b4 <__mdiff+0xc8>
 80135f2:	3f01      	subs	r7, #1
 80135f4:	e7ea      	b.n	80135cc <__mdiff+0xe0>
 80135f6:	bf00      	nop
 80135f8:	08015bbf 	.word	0x08015bbf
 80135fc:	08015c30 	.word	0x08015c30

08013600 <__ulp>:
 8013600:	b082      	sub	sp, #8
 8013602:	ed8d 0b00 	vstr	d0, [sp]
 8013606:	9a01      	ldr	r2, [sp, #4]
 8013608:	4b0f      	ldr	r3, [pc, #60]	; (8013648 <__ulp+0x48>)
 801360a:	4013      	ands	r3, r2
 801360c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013610:	2b00      	cmp	r3, #0
 8013612:	dc08      	bgt.n	8013626 <__ulp+0x26>
 8013614:	425b      	negs	r3, r3
 8013616:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801361a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801361e:	da04      	bge.n	801362a <__ulp+0x2a>
 8013620:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013624:	4113      	asrs	r3, r2
 8013626:	2200      	movs	r2, #0
 8013628:	e008      	b.n	801363c <__ulp+0x3c>
 801362a:	f1a2 0314 	sub.w	r3, r2, #20
 801362e:	2b1e      	cmp	r3, #30
 8013630:	bfda      	itte	le
 8013632:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013636:	40da      	lsrle	r2, r3
 8013638:	2201      	movgt	r2, #1
 801363a:	2300      	movs	r3, #0
 801363c:	4619      	mov	r1, r3
 801363e:	4610      	mov	r0, r2
 8013640:	ec41 0b10 	vmov	d0, r0, r1
 8013644:	b002      	add	sp, #8
 8013646:	4770      	bx	lr
 8013648:	7ff00000 	.word	0x7ff00000

0801364c <__b2d>:
 801364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013650:	6906      	ldr	r6, [r0, #16]
 8013652:	f100 0814 	add.w	r8, r0, #20
 8013656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801365a:	1f37      	subs	r7, r6, #4
 801365c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013660:	4610      	mov	r0, r2
 8013662:	f7ff fd53 	bl	801310c <__hi0bits>
 8013666:	f1c0 0320 	rsb	r3, r0, #32
 801366a:	280a      	cmp	r0, #10
 801366c:	600b      	str	r3, [r1, #0]
 801366e:	491b      	ldr	r1, [pc, #108]	; (80136dc <__b2d+0x90>)
 8013670:	dc15      	bgt.n	801369e <__b2d+0x52>
 8013672:	f1c0 0c0b 	rsb	ip, r0, #11
 8013676:	fa22 f30c 	lsr.w	r3, r2, ip
 801367a:	45b8      	cmp	r8, r7
 801367c:	ea43 0501 	orr.w	r5, r3, r1
 8013680:	bf34      	ite	cc
 8013682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013686:	2300      	movcs	r3, #0
 8013688:	3015      	adds	r0, #21
 801368a:	fa02 f000 	lsl.w	r0, r2, r0
 801368e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013692:	4303      	orrs	r3, r0
 8013694:	461c      	mov	r4, r3
 8013696:	ec45 4b10 	vmov	d0, r4, r5
 801369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369e:	45b8      	cmp	r8, r7
 80136a0:	bf3a      	itte	cc
 80136a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80136a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80136aa:	2300      	movcs	r3, #0
 80136ac:	380b      	subs	r0, #11
 80136ae:	d012      	beq.n	80136d6 <__b2d+0x8a>
 80136b0:	f1c0 0120 	rsb	r1, r0, #32
 80136b4:	fa23 f401 	lsr.w	r4, r3, r1
 80136b8:	4082      	lsls	r2, r0
 80136ba:	4322      	orrs	r2, r4
 80136bc:	4547      	cmp	r7, r8
 80136be:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80136c2:	bf8c      	ite	hi
 80136c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80136c8:	2200      	movls	r2, #0
 80136ca:	4083      	lsls	r3, r0
 80136cc:	40ca      	lsrs	r2, r1
 80136ce:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80136d2:	4313      	orrs	r3, r2
 80136d4:	e7de      	b.n	8013694 <__b2d+0x48>
 80136d6:	ea42 0501 	orr.w	r5, r2, r1
 80136da:	e7db      	b.n	8013694 <__b2d+0x48>
 80136dc:	3ff00000 	.word	0x3ff00000

080136e0 <__d2b>:
 80136e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136e4:	460f      	mov	r7, r1
 80136e6:	2101      	movs	r1, #1
 80136e8:	ec59 8b10 	vmov	r8, r9, d0
 80136ec:	4616      	mov	r6, r2
 80136ee:	f7ff fc1b 	bl	8012f28 <_Balloc>
 80136f2:	4604      	mov	r4, r0
 80136f4:	b930      	cbnz	r0, 8013704 <__d2b+0x24>
 80136f6:	4602      	mov	r2, r0
 80136f8:	4b24      	ldr	r3, [pc, #144]	; (801378c <__d2b+0xac>)
 80136fa:	4825      	ldr	r0, [pc, #148]	; (8013790 <__d2b+0xb0>)
 80136fc:	f240 310f 	movw	r1, #783	; 0x30f
 8013700:	f7fe f9c4 	bl	8011a8c <__assert_func>
 8013704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801370c:	bb2d      	cbnz	r5, 801375a <__d2b+0x7a>
 801370e:	9301      	str	r3, [sp, #4]
 8013710:	f1b8 0300 	subs.w	r3, r8, #0
 8013714:	d026      	beq.n	8013764 <__d2b+0x84>
 8013716:	4668      	mov	r0, sp
 8013718:	9300      	str	r3, [sp, #0]
 801371a:	f7ff fd17 	bl	801314c <__lo0bits>
 801371e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013722:	b1e8      	cbz	r0, 8013760 <__d2b+0x80>
 8013724:	f1c0 0320 	rsb	r3, r0, #32
 8013728:	fa02 f303 	lsl.w	r3, r2, r3
 801372c:	430b      	orrs	r3, r1
 801372e:	40c2      	lsrs	r2, r0
 8013730:	6163      	str	r3, [r4, #20]
 8013732:	9201      	str	r2, [sp, #4]
 8013734:	9b01      	ldr	r3, [sp, #4]
 8013736:	61a3      	str	r3, [r4, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	bf14      	ite	ne
 801373c:	2202      	movne	r2, #2
 801373e:	2201      	moveq	r2, #1
 8013740:	6122      	str	r2, [r4, #16]
 8013742:	b1bd      	cbz	r5, 8013774 <__d2b+0x94>
 8013744:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013748:	4405      	add	r5, r0
 801374a:	603d      	str	r5, [r7, #0]
 801374c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013750:	6030      	str	r0, [r6, #0]
 8013752:	4620      	mov	r0, r4
 8013754:	b003      	add	sp, #12
 8013756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801375e:	e7d6      	b.n	801370e <__d2b+0x2e>
 8013760:	6161      	str	r1, [r4, #20]
 8013762:	e7e7      	b.n	8013734 <__d2b+0x54>
 8013764:	a801      	add	r0, sp, #4
 8013766:	f7ff fcf1 	bl	801314c <__lo0bits>
 801376a:	9b01      	ldr	r3, [sp, #4]
 801376c:	6163      	str	r3, [r4, #20]
 801376e:	3020      	adds	r0, #32
 8013770:	2201      	movs	r2, #1
 8013772:	e7e5      	b.n	8013740 <__d2b+0x60>
 8013774:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801377c:	6038      	str	r0, [r7, #0]
 801377e:	6918      	ldr	r0, [r3, #16]
 8013780:	f7ff fcc4 	bl	801310c <__hi0bits>
 8013784:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013788:	e7e2      	b.n	8013750 <__d2b+0x70>
 801378a:	bf00      	nop
 801378c:	08015bbf 	.word	0x08015bbf
 8013790:	08015c30 	.word	0x08015c30

08013794 <__ratio>:
 8013794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013798:	4688      	mov	r8, r1
 801379a:	4669      	mov	r1, sp
 801379c:	4681      	mov	r9, r0
 801379e:	f7ff ff55 	bl	801364c <__b2d>
 80137a2:	a901      	add	r1, sp, #4
 80137a4:	4640      	mov	r0, r8
 80137a6:	ec55 4b10 	vmov	r4, r5, d0
 80137aa:	f7ff ff4f 	bl	801364c <__b2d>
 80137ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80137b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80137b6:	eba3 0c02 	sub.w	ip, r3, r2
 80137ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80137be:	1a9b      	subs	r3, r3, r2
 80137c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80137c4:	ec51 0b10 	vmov	r0, r1, d0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bfd6      	itet	le
 80137cc:	460a      	movle	r2, r1
 80137ce:	462a      	movgt	r2, r5
 80137d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80137d4:	468b      	mov	fp, r1
 80137d6:	462f      	mov	r7, r5
 80137d8:	bfd4      	ite	le
 80137da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80137de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80137e2:	4620      	mov	r0, r4
 80137e4:	ee10 2a10 	vmov	r2, s0
 80137e8:	465b      	mov	r3, fp
 80137ea:	4639      	mov	r1, r7
 80137ec:	f7ed f82e 	bl	800084c <__aeabi_ddiv>
 80137f0:	ec41 0b10 	vmov	d0, r0, r1
 80137f4:	b003      	add	sp, #12
 80137f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137fa <__copybits>:
 80137fa:	3901      	subs	r1, #1
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	1149      	asrs	r1, r1, #5
 8013800:	6914      	ldr	r4, [r2, #16]
 8013802:	3101      	adds	r1, #1
 8013804:	f102 0314 	add.w	r3, r2, #20
 8013808:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801380c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013810:	1f05      	subs	r5, r0, #4
 8013812:	42a3      	cmp	r3, r4
 8013814:	d30c      	bcc.n	8013830 <__copybits+0x36>
 8013816:	1aa3      	subs	r3, r4, r2
 8013818:	3b11      	subs	r3, #17
 801381a:	f023 0303 	bic.w	r3, r3, #3
 801381e:	3211      	adds	r2, #17
 8013820:	42a2      	cmp	r2, r4
 8013822:	bf88      	it	hi
 8013824:	2300      	movhi	r3, #0
 8013826:	4418      	add	r0, r3
 8013828:	2300      	movs	r3, #0
 801382a:	4288      	cmp	r0, r1
 801382c:	d305      	bcc.n	801383a <__copybits+0x40>
 801382e:	bd70      	pop	{r4, r5, r6, pc}
 8013830:	f853 6b04 	ldr.w	r6, [r3], #4
 8013834:	f845 6f04 	str.w	r6, [r5, #4]!
 8013838:	e7eb      	b.n	8013812 <__copybits+0x18>
 801383a:	f840 3b04 	str.w	r3, [r0], #4
 801383e:	e7f4      	b.n	801382a <__copybits+0x30>

08013840 <__any_on>:
 8013840:	f100 0214 	add.w	r2, r0, #20
 8013844:	6900      	ldr	r0, [r0, #16]
 8013846:	114b      	asrs	r3, r1, #5
 8013848:	4298      	cmp	r0, r3
 801384a:	b510      	push	{r4, lr}
 801384c:	db11      	blt.n	8013872 <__any_on+0x32>
 801384e:	dd0a      	ble.n	8013866 <__any_on+0x26>
 8013850:	f011 011f 	ands.w	r1, r1, #31
 8013854:	d007      	beq.n	8013866 <__any_on+0x26>
 8013856:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801385a:	fa24 f001 	lsr.w	r0, r4, r1
 801385e:	fa00 f101 	lsl.w	r1, r0, r1
 8013862:	428c      	cmp	r4, r1
 8013864:	d10b      	bne.n	801387e <__any_on+0x3e>
 8013866:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801386a:	4293      	cmp	r3, r2
 801386c:	d803      	bhi.n	8013876 <__any_on+0x36>
 801386e:	2000      	movs	r0, #0
 8013870:	bd10      	pop	{r4, pc}
 8013872:	4603      	mov	r3, r0
 8013874:	e7f7      	b.n	8013866 <__any_on+0x26>
 8013876:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801387a:	2900      	cmp	r1, #0
 801387c:	d0f5      	beq.n	801386a <__any_on+0x2a>
 801387e:	2001      	movs	r0, #1
 8013880:	e7f6      	b.n	8013870 <__any_on+0x30>

08013882 <__ascii_wctomb>:
 8013882:	b149      	cbz	r1, 8013898 <__ascii_wctomb+0x16>
 8013884:	2aff      	cmp	r2, #255	; 0xff
 8013886:	bf85      	ittet	hi
 8013888:	238a      	movhi	r3, #138	; 0x8a
 801388a:	6003      	strhi	r3, [r0, #0]
 801388c:	700a      	strbls	r2, [r1, #0]
 801388e:	f04f 30ff 	movhi.w	r0, #4294967295
 8013892:	bf98      	it	ls
 8013894:	2001      	movls	r0, #1
 8013896:	4770      	bx	lr
 8013898:	4608      	mov	r0, r1
 801389a:	4770      	bx	lr

0801389c <__ssputs_r>:
 801389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138a0:	688e      	ldr	r6, [r1, #8]
 80138a2:	461f      	mov	r7, r3
 80138a4:	42be      	cmp	r6, r7
 80138a6:	680b      	ldr	r3, [r1, #0]
 80138a8:	4682      	mov	sl, r0
 80138aa:	460c      	mov	r4, r1
 80138ac:	4690      	mov	r8, r2
 80138ae:	d82c      	bhi.n	801390a <__ssputs_r+0x6e>
 80138b0:	898a      	ldrh	r2, [r1, #12]
 80138b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138b6:	d026      	beq.n	8013906 <__ssputs_r+0x6a>
 80138b8:	6965      	ldr	r5, [r4, #20]
 80138ba:	6909      	ldr	r1, [r1, #16]
 80138bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138c0:	eba3 0901 	sub.w	r9, r3, r1
 80138c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80138c8:	1c7b      	adds	r3, r7, #1
 80138ca:	444b      	add	r3, r9
 80138cc:	106d      	asrs	r5, r5, #1
 80138ce:	429d      	cmp	r5, r3
 80138d0:	bf38      	it	cc
 80138d2:	461d      	movcc	r5, r3
 80138d4:	0553      	lsls	r3, r2, #21
 80138d6:	d527      	bpl.n	8013928 <__ssputs_r+0x8c>
 80138d8:	4629      	mov	r1, r5
 80138da:	f7fc f983 	bl	800fbe4 <_malloc_r>
 80138de:	4606      	mov	r6, r0
 80138e0:	b360      	cbz	r0, 801393c <__ssputs_r+0xa0>
 80138e2:	6921      	ldr	r1, [r4, #16]
 80138e4:	464a      	mov	r2, r9
 80138e6:	f7fe f8b2 	bl	8011a4e <memcpy>
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138f4:	81a3      	strh	r3, [r4, #12]
 80138f6:	6126      	str	r6, [r4, #16]
 80138f8:	6165      	str	r5, [r4, #20]
 80138fa:	444e      	add	r6, r9
 80138fc:	eba5 0509 	sub.w	r5, r5, r9
 8013900:	6026      	str	r6, [r4, #0]
 8013902:	60a5      	str	r5, [r4, #8]
 8013904:	463e      	mov	r6, r7
 8013906:	42be      	cmp	r6, r7
 8013908:	d900      	bls.n	801390c <__ssputs_r+0x70>
 801390a:	463e      	mov	r6, r7
 801390c:	6820      	ldr	r0, [r4, #0]
 801390e:	4632      	mov	r2, r6
 8013910:	4641      	mov	r1, r8
 8013912:	f000 fb81 	bl	8014018 <memmove>
 8013916:	68a3      	ldr	r3, [r4, #8]
 8013918:	1b9b      	subs	r3, r3, r6
 801391a:	60a3      	str	r3, [r4, #8]
 801391c:	6823      	ldr	r3, [r4, #0]
 801391e:	4433      	add	r3, r6
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	2000      	movs	r0, #0
 8013924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013928:	462a      	mov	r2, r5
 801392a:	f000 fbce 	bl	80140ca <_realloc_r>
 801392e:	4606      	mov	r6, r0
 8013930:	2800      	cmp	r0, #0
 8013932:	d1e0      	bne.n	80138f6 <__ssputs_r+0x5a>
 8013934:	6921      	ldr	r1, [r4, #16]
 8013936:	4650      	mov	r0, sl
 8013938:	f7fe ff40 	bl	80127bc <_free_r>
 801393c:	230c      	movs	r3, #12
 801393e:	f8ca 3000 	str.w	r3, [sl]
 8013942:	89a3      	ldrh	r3, [r4, #12]
 8013944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013948:	81a3      	strh	r3, [r4, #12]
 801394a:	f04f 30ff 	mov.w	r0, #4294967295
 801394e:	e7e9      	b.n	8013924 <__ssputs_r+0x88>

08013950 <_svfiprintf_r>:
 8013950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013954:	4698      	mov	r8, r3
 8013956:	898b      	ldrh	r3, [r1, #12]
 8013958:	061b      	lsls	r3, r3, #24
 801395a:	b09d      	sub	sp, #116	; 0x74
 801395c:	4607      	mov	r7, r0
 801395e:	460d      	mov	r5, r1
 8013960:	4614      	mov	r4, r2
 8013962:	d50e      	bpl.n	8013982 <_svfiprintf_r+0x32>
 8013964:	690b      	ldr	r3, [r1, #16]
 8013966:	b963      	cbnz	r3, 8013982 <_svfiprintf_r+0x32>
 8013968:	2140      	movs	r1, #64	; 0x40
 801396a:	f7fc f93b 	bl	800fbe4 <_malloc_r>
 801396e:	6028      	str	r0, [r5, #0]
 8013970:	6128      	str	r0, [r5, #16]
 8013972:	b920      	cbnz	r0, 801397e <_svfiprintf_r+0x2e>
 8013974:	230c      	movs	r3, #12
 8013976:	603b      	str	r3, [r7, #0]
 8013978:	f04f 30ff 	mov.w	r0, #4294967295
 801397c:	e0d0      	b.n	8013b20 <_svfiprintf_r+0x1d0>
 801397e:	2340      	movs	r3, #64	; 0x40
 8013980:	616b      	str	r3, [r5, #20]
 8013982:	2300      	movs	r3, #0
 8013984:	9309      	str	r3, [sp, #36]	; 0x24
 8013986:	2320      	movs	r3, #32
 8013988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801398c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013990:	2330      	movs	r3, #48	; 0x30
 8013992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013b38 <_svfiprintf_r+0x1e8>
 8013996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801399a:	f04f 0901 	mov.w	r9, #1
 801399e:	4623      	mov	r3, r4
 80139a0:	469a      	mov	sl, r3
 80139a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139a6:	b10a      	cbz	r2, 80139ac <_svfiprintf_r+0x5c>
 80139a8:	2a25      	cmp	r2, #37	; 0x25
 80139aa:	d1f9      	bne.n	80139a0 <_svfiprintf_r+0x50>
 80139ac:	ebba 0b04 	subs.w	fp, sl, r4
 80139b0:	d00b      	beq.n	80139ca <_svfiprintf_r+0x7a>
 80139b2:	465b      	mov	r3, fp
 80139b4:	4622      	mov	r2, r4
 80139b6:	4629      	mov	r1, r5
 80139b8:	4638      	mov	r0, r7
 80139ba:	f7ff ff6f 	bl	801389c <__ssputs_r>
 80139be:	3001      	adds	r0, #1
 80139c0:	f000 80a9 	beq.w	8013b16 <_svfiprintf_r+0x1c6>
 80139c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139c6:	445a      	add	r2, fp
 80139c8:	9209      	str	r2, [sp, #36]	; 0x24
 80139ca:	f89a 3000 	ldrb.w	r3, [sl]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	f000 80a1 	beq.w	8013b16 <_svfiprintf_r+0x1c6>
 80139d4:	2300      	movs	r3, #0
 80139d6:	f04f 32ff 	mov.w	r2, #4294967295
 80139da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139de:	f10a 0a01 	add.w	sl, sl, #1
 80139e2:	9304      	str	r3, [sp, #16]
 80139e4:	9307      	str	r3, [sp, #28]
 80139e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139ea:	931a      	str	r3, [sp, #104]	; 0x68
 80139ec:	4654      	mov	r4, sl
 80139ee:	2205      	movs	r2, #5
 80139f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139f4:	4850      	ldr	r0, [pc, #320]	; (8013b38 <_svfiprintf_r+0x1e8>)
 80139f6:	f7ec fbeb 	bl	80001d0 <memchr>
 80139fa:	9a04      	ldr	r2, [sp, #16]
 80139fc:	b9d8      	cbnz	r0, 8013a36 <_svfiprintf_r+0xe6>
 80139fe:	06d0      	lsls	r0, r2, #27
 8013a00:	bf44      	itt	mi
 8013a02:	2320      	movmi	r3, #32
 8013a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a08:	0711      	lsls	r1, r2, #28
 8013a0a:	bf44      	itt	mi
 8013a0c:	232b      	movmi	r3, #43	; 0x2b
 8013a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a12:	f89a 3000 	ldrb.w	r3, [sl]
 8013a16:	2b2a      	cmp	r3, #42	; 0x2a
 8013a18:	d015      	beq.n	8013a46 <_svfiprintf_r+0xf6>
 8013a1a:	9a07      	ldr	r2, [sp, #28]
 8013a1c:	4654      	mov	r4, sl
 8013a1e:	2000      	movs	r0, #0
 8013a20:	f04f 0c0a 	mov.w	ip, #10
 8013a24:	4621      	mov	r1, r4
 8013a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a2a:	3b30      	subs	r3, #48	; 0x30
 8013a2c:	2b09      	cmp	r3, #9
 8013a2e:	d94d      	bls.n	8013acc <_svfiprintf_r+0x17c>
 8013a30:	b1b0      	cbz	r0, 8013a60 <_svfiprintf_r+0x110>
 8013a32:	9207      	str	r2, [sp, #28]
 8013a34:	e014      	b.n	8013a60 <_svfiprintf_r+0x110>
 8013a36:	eba0 0308 	sub.w	r3, r0, r8
 8013a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8013a3e:	4313      	orrs	r3, r2
 8013a40:	9304      	str	r3, [sp, #16]
 8013a42:	46a2      	mov	sl, r4
 8013a44:	e7d2      	b.n	80139ec <_svfiprintf_r+0x9c>
 8013a46:	9b03      	ldr	r3, [sp, #12]
 8013a48:	1d19      	adds	r1, r3, #4
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	9103      	str	r1, [sp, #12]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	bfbb      	ittet	lt
 8013a52:	425b      	neglt	r3, r3
 8013a54:	f042 0202 	orrlt.w	r2, r2, #2
 8013a58:	9307      	strge	r3, [sp, #28]
 8013a5a:	9307      	strlt	r3, [sp, #28]
 8013a5c:	bfb8      	it	lt
 8013a5e:	9204      	strlt	r2, [sp, #16]
 8013a60:	7823      	ldrb	r3, [r4, #0]
 8013a62:	2b2e      	cmp	r3, #46	; 0x2e
 8013a64:	d10c      	bne.n	8013a80 <_svfiprintf_r+0x130>
 8013a66:	7863      	ldrb	r3, [r4, #1]
 8013a68:	2b2a      	cmp	r3, #42	; 0x2a
 8013a6a:	d134      	bne.n	8013ad6 <_svfiprintf_r+0x186>
 8013a6c:	9b03      	ldr	r3, [sp, #12]
 8013a6e:	1d1a      	adds	r2, r3, #4
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	9203      	str	r2, [sp, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	bfb8      	it	lt
 8013a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8013a7c:	3402      	adds	r4, #2
 8013a7e:	9305      	str	r3, [sp, #20]
 8013a80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013b48 <_svfiprintf_r+0x1f8>
 8013a84:	7821      	ldrb	r1, [r4, #0]
 8013a86:	2203      	movs	r2, #3
 8013a88:	4650      	mov	r0, sl
 8013a8a:	f7ec fba1 	bl	80001d0 <memchr>
 8013a8e:	b138      	cbz	r0, 8013aa0 <_svfiprintf_r+0x150>
 8013a90:	9b04      	ldr	r3, [sp, #16]
 8013a92:	eba0 000a 	sub.w	r0, r0, sl
 8013a96:	2240      	movs	r2, #64	; 0x40
 8013a98:	4082      	lsls	r2, r0
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	3401      	adds	r4, #1
 8013a9e:	9304      	str	r3, [sp, #16]
 8013aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013aa4:	4825      	ldr	r0, [pc, #148]	; (8013b3c <_svfiprintf_r+0x1ec>)
 8013aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013aaa:	2206      	movs	r2, #6
 8013aac:	f7ec fb90 	bl	80001d0 <memchr>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d038      	beq.n	8013b26 <_svfiprintf_r+0x1d6>
 8013ab4:	4b22      	ldr	r3, [pc, #136]	; (8013b40 <_svfiprintf_r+0x1f0>)
 8013ab6:	bb1b      	cbnz	r3, 8013b00 <_svfiprintf_r+0x1b0>
 8013ab8:	9b03      	ldr	r3, [sp, #12]
 8013aba:	3307      	adds	r3, #7
 8013abc:	f023 0307 	bic.w	r3, r3, #7
 8013ac0:	3308      	adds	r3, #8
 8013ac2:	9303      	str	r3, [sp, #12]
 8013ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ac6:	4433      	add	r3, r6
 8013ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8013aca:	e768      	b.n	801399e <_svfiprintf_r+0x4e>
 8013acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ad0:	460c      	mov	r4, r1
 8013ad2:	2001      	movs	r0, #1
 8013ad4:	e7a6      	b.n	8013a24 <_svfiprintf_r+0xd4>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	3401      	adds	r4, #1
 8013ada:	9305      	str	r3, [sp, #20]
 8013adc:	4619      	mov	r1, r3
 8013ade:	f04f 0c0a 	mov.w	ip, #10
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ae8:	3a30      	subs	r2, #48	; 0x30
 8013aea:	2a09      	cmp	r2, #9
 8013aec:	d903      	bls.n	8013af6 <_svfiprintf_r+0x1a6>
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d0c6      	beq.n	8013a80 <_svfiprintf_r+0x130>
 8013af2:	9105      	str	r1, [sp, #20]
 8013af4:	e7c4      	b.n	8013a80 <_svfiprintf_r+0x130>
 8013af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8013afa:	4604      	mov	r4, r0
 8013afc:	2301      	movs	r3, #1
 8013afe:	e7f0      	b.n	8013ae2 <_svfiprintf_r+0x192>
 8013b00:	ab03      	add	r3, sp, #12
 8013b02:	9300      	str	r3, [sp, #0]
 8013b04:	462a      	mov	r2, r5
 8013b06:	4b0f      	ldr	r3, [pc, #60]	; (8013b44 <_svfiprintf_r+0x1f4>)
 8013b08:	a904      	add	r1, sp, #16
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	f7fd f896 	bl	8010c3c <_printf_float>
 8013b10:	1c42      	adds	r2, r0, #1
 8013b12:	4606      	mov	r6, r0
 8013b14:	d1d6      	bne.n	8013ac4 <_svfiprintf_r+0x174>
 8013b16:	89ab      	ldrh	r3, [r5, #12]
 8013b18:	065b      	lsls	r3, r3, #25
 8013b1a:	f53f af2d 	bmi.w	8013978 <_svfiprintf_r+0x28>
 8013b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b20:	b01d      	add	sp, #116	; 0x74
 8013b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b26:	ab03      	add	r3, sp, #12
 8013b28:	9300      	str	r3, [sp, #0]
 8013b2a:	462a      	mov	r2, r5
 8013b2c:	4b05      	ldr	r3, [pc, #20]	; (8013b44 <_svfiprintf_r+0x1f4>)
 8013b2e:	a904      	add	r1, sp, #16
 8013b30:	4638      	mov	r0, r7
 8013b32:	f7fd fb27 	bl	8011184 <_printf_i>
 8013b36:	e7eb      	b.n	8013b10 <_svfiprintf_r+0x1c0>
 8013b38:	08015d8c 	.word	0x08015d8c
 8013b3c:	08015d96 	.word	0x08015d96
 8013b40:	08010c3d 	.word	0x08010c3d
 8013b44:	0801389d 	.word	0x0801389d
 8013b48:	08015d92 	.word	0x08015d92

08013b4c <__sfputc_r>:
 8013b4c:	6893      	ldr	r3, [r2, #8]
 8013b4e:	3b01      	subs	r3, #1
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	b410      	push	{r4}
 8013b54:	6093      	str	r3, [r2, #8]
 8013b56:	da08      	bge.n	8013b6a <__sfputc_r+0x1e>
 8013b58:	6994      	ldr	r4, [r2, #24]
 8013b5a:	42a3      	cmp	r3, r4
 8013b5c:	db01      	blt.n	8013b62 <__sfputc_r+0x16>
 8013b5e:	290a      	cmp	r1, #10
 8013b60:	d103      	bne.n	8013b6a <__sfputc_r+0x1e>
 8013b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b66:	f7fd bdc2 	b.w	80116ee <__swbuf_r>
 8013b6a:	6813      	ldr	r3, [r2, #0]
 8013b6c:	1c58      	adds	r0, r3, #1
 8013b6e:	6010      	str	r0, [r2, #0]
 8013b70:	7019      	strb	r1, [r3, #0]
 8013b72:	4608      	mov	r0, r1
 8013b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b78:	4770      	bx	lr

08013b7a <__sfputs_r>:
 8013b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7c:	4606      	mov	r6, r0
 8013b7e:	460f      	mov	r7, r1
 8013b80:	4614      	mov	r4, r2
 8013b82:	18d5      	adds	r5, r2, r3
 8013b84:	42ac      	cmp	r4, r5
 8013b86:	d101      	bne.n	8013b8c <__sfputs_r+0x12>
 8013b88:	2000      	movs	r0, #0
 8013b8a:	e007      	b.n	8013b9c <__sfputs_r+0x22>
 8013b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b90:	463a      	mov	r2, r7
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7ff ffda 	bl	8013b4c <__sfputc_r>
 8013b98:	1c43      	adds	r3, r0, #1
 8013b9a:	d1f3      	bne.n	8013b84 <__sfputs_r+0xa>
 8013b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ba0 <_vfiprintf_r>:
 8013ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	460d      	mov	r5, r1
 8013ba6:	b09d      	sub	sp, #116	; 0x74
 8013ba8:	4614      	mov	r4, r2
 8013baa:	4698      	mov	r8, r3
 8013bac:	4606      	mov	r6, r0
 8013bae:	b118      	cbz	r0, 8013bb8 <_vfiprintf_r+0x18>
 8013bb0:	6a03      	ldr	r3, [r0, #32]
 8013bb2:	b90b      	cbnz	r3, 8013bb8 <_vfiprintf_r+0x18>
 8013bb4:	f7fd fc94 	bl	80114e0 <__sinit>
 8013bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bba:	07d9      	lsls	r1, r3, #31
 8013bbc:	d405      	bmi.n	8013bca <_vfiprintf_r+0x2a>
 8013bbe:	89ab      	ldrh	r3, [r5, #12]
 8013bc0:	059a      	lsls	r2, r3, #22
 8013bc2:	d402      	bmi.n	8013bca <_vfiprintf_r+0x2a>
 8013bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bc6:	f7fd ff38 	bl	8011a3a <__retarget_lock_acquire_recursive>
 8013bca:	89ab      	ldrh	r3, [r5, #12]
 8013bcc:	071b      	lsls	r3, r3, #28
 8013bce:	d501      	bpl.n	8013bd4 <_vfiprintf_r+0x34>
 8013bd0:	692b      	ldr	r3, [r5, #16]
 8013bd2:	b99b      	cbnz	r3, 8013bfc <_vfiprintf_r+0x5c>
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f7fd fdc6 	bl	8011768 <__swsetup_r>
 8013bdc:	b170      	cbz	r0, 8013bfc <_vfiprintf_r+0x5c>
 8013bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013be0:	07dc      	lsls	r4, r3, #31
 8013be2:	d504      	bpl.n	8013bee <_vfiprintf_r+0x4e>
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	b01d      	add	sp, #116	; 0x74
 8013bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bee:	89ab      	ldrh	r3, [r5, #12]
 8013bf0:	0598      	lsls	r0, r3, #22
 8013bf2:	d4f7      	bmi.n	8013be4 <_vfiprintf_r+0x44>
 8013bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bf6:	f7fd ff21 	bl	8011a3c <__retarget_lock_release_recursive>
 8013bfa:	e7f3      	b.n	8013be4 <_vfiprintf_r+0x44>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8013c00:	2320      	movs	r3, #32
 8013c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c0a:	2330      	movs	r3, #48	; 0x30
 8013c0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013dc0 <_vfiprintf_r+0x220>
 8013c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c14:	f04f 0901 	mov.w	r9, #1
 8013c18:	4623      	mov	r3, r4
 8013c1a:	469a      	mov	sl, r3
 8013c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c20:	b10a      	cbz	r2, 8013c26 <_vfiprintf_r+0x86>
 8013c22:	2a25      	cmp	r2, #37	; 0x25
 8013c24:	d1f9      	bne.n	8013c1a <_vfiprintf_r+0x7a>
 8013c26:	ebba 0b04 	subs.w	fp, sl, r4
 8013c2a:	d00b      	beq.n	8013c44 <_vfiprintf_r+0xa4>
 8013c2c:	465b      	mov	r3, fp
 8013c2e:	4622      	mov	r2, r4
 8013c30:	4629      	mov	r1, r5
 8013c32:	4630      	mov	r0, r6
 8013c34:	f7ff ffa1 	bl	8013b7a <__sfputs_r>
 8013c38:	3001      	adds	r0, #1
 8013c3a:	f000 80a9 	beq.w	8013d90 <_vfiprintf_r+0x1f0>
 8013c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c40:	445a      	add	r2, fp
 8013c42:	9209      	str	r2, [sp, #36]	; 0x24
 8013c44:	f89a 3000 	ldrb.w	r3, [sl]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	f000 80a1 	beq.w	8013d90 <_vfiprintf_r+0x1f0>
 8013c4e:	2300      	movs	r3, #0
 8013c50:	f04f 32ff 	mov.w	r2, #4294967295
 8013c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c58:	f10a 0a01 	add.w	sl, sl, #1
 8013c5c:	9304      	str	r3, [sp, #16]
 8013c5e:	9307      	str	r3, [sp, #28]
 8013c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c64:	931a      	str	r3, [sp, #104]	; 0x68
 8013c66:	4654      	mov	r4, sl
 8013c68:	2205      	movs	r2, #5
 8013c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c6e:	4854      	ldr	r0, [pc, #336]	; (8013dc0 <_vfiprintf_r+0x220>)
 8013c70:	f7ec faae 	bl	80001d0 <memchr>
 8013c74:	9a04      	ldr	r2, [sp, #16]
 8013c76:	b9d8      	cbnz	r0, 8013cb0 <_vfiprintf_r+0x110>
 8013c78:	06d1      	lsls	r1, r2, #27
 8013c7a:	bf44      	itt	mi
 8013c7c:	2320      	movmi	r3, #32
 8013c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c82:	0713      	lsls	r3, r2, #28
 8013c84:	bf44      	itt	mi
 8013c86:	232b      	movmi	r3, #43	; 0x2b
 8013c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8013c90:	2b2a      	cmp	r3, #42	; 0x2a
 8013c92:	d015      	beq.n	8013cc0 <_vfiprintf_r+0x120>
 8013c94:	9a07      	ldr	r2, [sp, #28]
 8013c96:	4654      	mov	r4, sl
 8013c98:	2000      	movs	r0, #0
 8013c9a:	f04f 0c0a 	mov.w	ip, #10
 8013c9e:	4621      	mov	r1, r4
 8013ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ca4:	3b30      	subs	r3, #48	; 0x30
 8013ca6:	2b09      	cmp	r3, #9
 8013ca8:	d94d      	bls.n	8013d46 <_vfiprintf_r+0x1a6>
 8013caa:	b1b0      	cbz	r0, 8013cda <_vfiprintf_r+0x13a>
 8013cac:	9207      	str	r2, [sp, #28]
 8013cae:	e014      	b.n	8013cda <_vfiprintf_r+0x13a>
 8013cb0:	eba0 0308 	sub.w	r3, r0, r8
 8013cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	9304      	str	r3, [sp, #16]
 8013cbc:	46a2      	mov	sl, r4
 8013cbe:	e7d2      	b.n	8013c66 <_vfiprintf_r+0xc6>
 8013cc0:	9b03      	ldr	r3, [sp, #12]
 8013cc2:	1d19      	adds	r1, r3, #4
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	9103      	str	r1, [sp, #12]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	bfbb      	ittet	lt
 8013ccc:	425b      	neglt	r3, r3
 8013cce:	f042 0202 	orrlt.w	r2, r2, #2
 8013cd2:	9307      	strge	r3, [sp, #28]
 8013cd4:	9307      	strlt	r3, [sp, #28]
 8013cd6:	bfb8      	it	lt
 8013cd8:	9204      	strlt	r2, [sp, #16]
 8013cda:	7823      	ldrb	r3, [r4, #0]
 8013cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8013cde:	d10c      	bne.n	8013cfa <_vfiprintf_r+0x15a>
 8013ce0:	7863      	ldrb	r3, [r4, #1]
 8013ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ce4:	d134      	bne.n	8013d50 <_vfiprintf_r+0x1b0>
 8013ce6:	9b03      	ldr	r3, [sp, #12]
 8013ce8:	1d1a      	adds	r2, r3, #4
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	9203      	str	r2, [sp, #12]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	bfb8      	it	lt
 8013cf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cf6:	3402      	adds	r4, #2
 8013cf8:	9305      	str	r3, [sp, #20]
 8013cfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013dd0 <_vfiprintf_r+0x230>
 8013cfe:	7821      	ldrb	r1, [r4, #0]
 8013d00:	2203      	movs	r2, #3
 8013d02:	4650      	mov	r0, sl
 8013d04:	f7ec fa64 	bl	80001d0 <memchr>
 8013d08:	b138      	cbz	r0, 8013d1a <_vfiprintf_r+0x17a>
 8013d0a:	9b04      	ldr	r3, [sp, #16]
 8013d0c:	eba0 000a 	sub.w	r0, r0, sl
 8013d10:	2240      	movs	r2, #64	; 0x40
 8013d12:	4082      	lsls	r2, r0
 8013d14:	4313      	orrs	r3, r2
 8013d16:	3401      	adds	r4, #1
 8013d18:	9304      	str	r3, [sp, #16]
 8013d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d1e:	4829      	ldr	r0, [pc, #164]	; (8013dc4 <_vfiprintf_r+0x224>)
 8013d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d24:	2206      	movs	r2, #6
 8013d26:	f7ec fa53 	bl	80001d0 <memchr>
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	d03f      	beq.n	8013dae <_vfiprintf_r+0x20e>
 8013d2e:	4b26      	ldr	r3, [pc, #152]	; (8013dc8 <_vfiprintf_r+0x228>)
 8013d30:	bb1b      	cbnz	r3, 8013d7a <_vfiprintf_r+0x1da>
 8013d32:	9b03      	ldr	r3, [sp, #12]
 8013d34:	3307      	adds	r3, #7
 8013d36:	f023 0307 	bic.w	r3, r3, #7
 8013d3a:	3308      	adds	r3, #8
 8013d3c:	9303      	str	r3, [sp, #12]
 8013d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d40:	443b      	add	r3, r7
 8013d42:	9309      	str	r3, [sp, #36]	; 0x24
 8013d44:	e768      	b.n	8013c18 <_vfiprintf_r+0x78>
 8013d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d4a:	460c      	mov	r4, r1
 8013d4c:	2001      	movs	r0, #1
 8013d4e:	e7a6      	b.n	8013c9e <_vfiprintf_r+0xfe>
 8013d50:	2300      	movs	r3, #0
 8013d52:	3401      	adds	r4, #1
 8013d54:	9305      	str	r3, [sp, #20]
 8013d56:	4619      	mov	r1, r3
 8013d58:	f04f 0c0a 	mov.w	ip, #10
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d62:	3a30      	subs	r2, #48	; 0x30
 8013d64:	2a09      	cmp	r2, #9
 8013d66:	d903      	bls.n	8013d70 <_vfiprintf_r+0x1d0>
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d0c6      	beq.n	8013cfa <_vfiprintf_r+0x15a>
 8013d6c:	9105      	str	r1, [sp, #20]
 8013d6e:	e7c4      	b.n	8013cfa <_vfiprintf_r+0x15a>
 8013d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d74:	4604      	mov	r4, r0
 8013d76:	2301      	movs	r3, #1
 8013d78:	e7f0      	b.n	8013d5c <_vfiprintf_r+0x1bc>
 8013d7a:	ab03      	add	r3, sp, #12
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	462a      	mov	r2, r5
 8013d80:	4b12      	ldr	r3, [pc, #72]	; (8013dcc <_vfiprintf_r+0x22c>)
 8013d82:	a904      	add	r1, sp, #16
 8013d84:	4630      	mov	r0, r6
 8013d86:	f7fc ff59 	bl	8010c3c <_printf_float>
 8013d8a:	4607      	mov	r7, r0
 8013d8c:	1c78      	adds	r0, r7, #1
 8013d8e:	d1d6      	bne.n	8013d3e <_vfiprintf_r+0x19e>
 8013d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d92:	07d9      	lsls	r1, r3, #31
 8013d94:	d405      	bmi.n	8013da2 <_vfiprintf_r+0x202>
 8013d96:	89ab      	ldrh	r3, [r5, #12]
 8013d98:	059a      	lsls	r2, r3, #22
 8013d9a:	d402      	bmi.n	8013da2 <_vfiprintf_r+0x202>
 8013d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d9e:	f7fd fe4d 	bl	8011a3c <__retarget_lock_release_recursive>
 8013da2:	89ab      	ldrh	r3, [r5, #12]
 8013da4:	065b      	lsls	r3, r3, #25
 8013da6:	f53f af1d 	bmi.w	8013be4 <_vfiprintf_r+0x44>
 8013daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dac:	e71c      	b.n	8013be8 <_vfiprintf_r+0x48>
 8013dae:	ab03      	add	r3, sp, #12
 8013db0:	9300      	str	r3, [sp, #0]
 8013db2:	462a      	mov	r2, r5
 8013db4:	4b05      	ldr	r3, [pc, #20]	; (8013dcc <_vfiprintf_r+0x22c>)
 8013db6:	a904      	add	r1, sp, #16
 8013db8:	4630      	mov	r0, r6
 8013dba:	f7fd f9e3 	bl	8011184 <_printf_i>
 8013dbe:	e7e4      	b.n	8013d8a <_vfiprintf_r+0x1ea>
 8013dc0:	08015d8c 	.word	0x08015d8c
 8013dc4:	08015d96 	.word	0x08015d96
 8013dc8:	08010c3d 	.word	0x08010c3d
 8013dcc:	08013b7b 	.word	0x08013b7b
 8013dd0:	08015d92 	.word	0x08015d92

08013dd4 <__sflush_r>:
 8013dd4:	898a      	ldrh	r2, [r1, #12]
 8013dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dda:	4605      	mov	r5, r0
 8013ddc:	0710      	lsls	r0, r2, #28
 8013dde:	460c      	mov	r4, r1
 8013de0:	d458      	bmi.n	8013e94 <__sflush_r+0xc0>
 8013de2:	684b      	ldr	r3, [r1, #4]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	dc05      	bgt.n	8013df4 <__sflush_r+0x20>
 8013de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	dc02      	bgt.n	8013df4 <__sflush_r+0x20>
 8013dee:	2000      	movs	r0, #0
 8013df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013df6:	2e00      	cmp	r6, #0
 8013df8:	d0f9      	beq.n	8013dee <__sflush_r+0x1a>
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e00:	682f      	ldr	r7, [r5, #0]
 8013e02:	6a21      	ldr	r1, [r4, #32]
 8013e04:	602b      	str	r3, [r5, #0]
 8013e06:	d032      	beq.n	8013e6e <__sflush_r+0x9a>
 8013e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e0a:	89a3      	ldrh	r3, [r4, #12]
 8013e0c:	075a      	lsls	r2, r3, #29
 8013e0e:	d505      	bpl.n	8013e1c <__sflush_r+0x48>
 8013e10:	6863      	ldr	r3, [r4, #4]
 8013e12:	1ac0      	subs	r0, r0, r3
 8013e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e16:	b10b      	cbz	r3, 8013e1c <__sflush_r+0x48>
 8013e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e1a:	1ac0      	subs	r0, r0, r3
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	4602      	mov	r2, r0
 8013e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e22:	6a21      	ldr	r1, [r4, #32]
 8013e24:	4628      	mov	r0, r5
 8013e26:	47b0      	blx	r6
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	89a3      	ldrh	r3, [r4, #12]
 8013e2c:	d106      	bne.n	8013e3c <__sflush_r+0x68>
 8013e2e:	6829      	ldr	r1, [r5, #0]
 8013e30:	291d      	cmp	r1, #29
 8013e32:	d82b      	bhi.n	8013e8c <__sflush_r+0xb8>
 8013e34:	4a29      	ldr	r2, [pc, #164]	; (8013edc <__sflush_r+0x108>)
 8013e36:	410a      	asrs	r2, r1
 8013e38:	07d6      	lsls	r6, r2, #31
 8013e3a:	d427      	bmi.n	8013e8c <__sflush_r+0xb8>
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	6062      	str	r2, [r4, #4]
 8013e40:	04d9      	lsls	r1, r3, #19
 8013e42:	6922      	ldr	r2, [r4, #16]
 8013e44:	6022      	str	r2, [r4, #0]
 8013e46:	d504      	bpl.n	8013e52 <__sflush_r+0x7e>
 8013e48:	1c42      	adds	r2, r0, #1
 8013e4a:	d101      	bne.n	8013e50 <__sflush_r+0x7c>
 8013e4c:	682b      	ldr	r3, [r5, #0]
 8013e4e:	b903      	cbnz	r3, 8013e52 <__sflush_r+0x7e>
 8013e50:	6560      	str	r0, [r4, #84]	; 0x54
 8013e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e54:	602f      	str	r7, [r5, #0]
 8013e56:	2900      	cmp	r1, #0
 8013e58:	d0c9      	beq.n	8013dee <__sflush_r+0x1a>
 8013e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e5e:	4299      	cmp	r1, r3
 8013e60:	d002      	beq.n	8013e68 <__sflush_r+0x94>
 8013e62:	4628      	mov	r0, r5
 8013e64:	f7fe fcaa 	bl	80127bc <_free_r>
 8013e68:	2000      	movs	r0, #0
 8013e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8013e6c:	e7c0      	b.n	8013df0 <__sflush_r+0x1c>
 8013e6e:	2301      	movs	r3, #1
 8013e70:	4628      	mov	r0, r5
 8013e72:	47b0      	blx	r6
 8013e74:	1c41      	adds	r1, r0, #1
 8013e76:	d1c8      	bne.n	8013e0a <__sflush_r+0x36>
 8013e78:	682b      	ldr	r3, [r5, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d0c5      	beq.n	8013e0a <__sflush_r+0x36>
 8013e7e:	2b1d      	cmp	r3, #29
 8013e80:	d001      	beq.n	8013e86 <__sflush_r+0xb2>
 8013e82:	2b16      	cmp	r3, #22
 8013e84:	d101      	bne.n	8013e8a <__sflush_r+0xb6>
 8013e86:	602f      	str	r7, [r5, #0]
 8013e88:	e7b1      	b.n	8013dee <__sflush_r+0x1a>
 8013e8a:	89a3      	ldrh	r3, [r4, #12]
 8013e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e90:	81a3      	strh	r3, [r4, #12]
 8013e92:	e7ad      	b.n	8013df0 <__sflush_r+0x1c>
 8013e94:	690f      	ldr	r7, [r1, #16]
 8013e96:	2f00      	cmp	r7, #0
 8013e98:	d0a9      	beq.n	8013dee <__sflush_r+0x1a>
 8013e9a:	0793      	lsls	r3, r2, #30
 8013e9c:	680e      	ldr	r6, [r1, #0]
 8013e9e:	bf08      	it	eq
 8013ea0:	694b      	ldreq	r3, [r1, #20]
 8013ea2:	600f      	str	r7, [r1, #0]
 8013ea4:	bf18      	it	ne
 8013ea6:	2300      	movne	r3, #0
 8013ea8:	eba6 0807 	sub.w	r8, r6, r7
 8013eac:	608b      	str	r3, [r1, #8]
 8013eae:	f1b8 0f00 	cmp.w	r8, #0
 8013eb2:	dd9c      	ble.n	8013dee <__sflush_r+0x1a>
 8013eb4:	6a21      	ldr	r1, [r4, #32]
 8013eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013eb8:	4643      	mov	r3, r8
 8013eba:	463a      	mov	r2, r7
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	47b0      	blx	r6
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	dc06      	bgt.n	8013ed2 <__sflush_r+0xfe>
 8013ec4:	89a3      	ldrh	r3, [r4, #12]
 8013ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eca:	81a3      	strh	r3, [r4, #12]
 8013ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed0:	e78e      	b.n	8013df0 <__sflush_r+0x1c>
 8013ed2:	4407      	add	r7, r0
 8013ed4:	eba8 0800 	sub.w	r8, r8, r0
 8013ed8:	e7e9      	b.n	8013eae <__sflush_r+0xda>
 8013eda:	bf00      	nop
 8013edc:	dfbffffe 	.word	0xdfbffffe

08013ee0 <_fflush_r>:
 8013ee0:	b538      	push	{r3, r4, r5, lr}
 8013ee2:	690b      	ldr	r3, [r1, #16]
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	b913      	cbnz	r3, 8013ef0 <_fflush_r+0x10>
 8013eea:	2500      	movs	r5, #0
 8013eec:	4628      	mov	r0, r5
 8013eee:	bd38      	pop	{r3, r4, r5, pc}
 8013ef0:	b118      	cbz	r0, 8013efa <_fflush_r+0x1a>
 8013ef2:	6a03      	ldr	r3, [r0, #32]
 8013ef4:	b90b      	cbnz	r3, 8013efa <_fflush_r+0x1a>
 8013ef6:	f7fd faf3 	bl	80114e0 <__sinit>
 8013efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d0f3      	beq.n	8013eea <_fflush_r+0xa>
 8013f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f04:	07d0      	lsls	r0, r2, #31
 8013f06:	d404      	bmi.n	8013f12 <_fflush_r+0x32>
 8013f08:	0599      	lsls	r1, r3, #22
 8013f0a:	d402      	bmi.n	8013f12 <_fflush_r+0x32>
 8013f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f0e:	f7fd fd94 	bl	8011a3a <__retarget_lock_acquire_recursive>
 8013f12:	4628      	mov	r0, r5
 8013f14:	4621      	mov	r1, r4
 8013f16:	f7ff ff5d 	bl	8013dd4 <__sflush_r>
 8013f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f1c:	07da      	lsls	r2, r3, #31
 8013f1e:	4605      	mov	r5, r0
 8013f20:	d4e4      	bmi.n	8013eec <_fflush_r+0xc>
 8013f22:	89a3      	ldrh	r3, [r4, #12]
 8013f24:	059b      	lsls	r3, r3, #22
 8013f26:	d4e1      	bmi.n	8013eec <_fflush_r+0xc>
 8013f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f2a:	f7fd fd87 	bl	8011a3c <__retarget_lock_release_recursive>
 8013f2e:	e7dd      	b.n	8013eec <_fflush_r+0xc>

08013f30 <fiprintf>:
 8013f30:	b40e      	push	{r1, r2, r3}
 8013f32:	b503      	push	{r0, r1, lr}
 8013f34:	4601      	mov	r1, r0
 8013f36:	ab03      	add	r3, sp, #12
 8013f38:	4805      	ldr	r0, [pc, #20]	; (8013f50 <fiprintf+0x20>)
 8013f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f3e:	6800      	ldr	r0, [r0, #0]
 8013f40:	9301      	str	r3, [sp, #4]
 8013f42:	f7ff fe2d 	bl	8013ba0 <_vfiprintf_r>
 8013f46:	b002      	add	sp, #8
 8013f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f4c:	b003      	add	sp, #12
 8013f4e:	4770      	bx	lr
 8013f50:	200001f0 	.word	0x200001f0

08013f54 <__swhatbuf_r>:
 8013f54:	b570      	push	{r4, r5, r6, lr}
 8013f56:	460c      	mov	r4, r1
 8013f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f5c:	2900      	cmp	r1, #0
 8013f5e:	b096      	sub	sp, #88	; 0x58
 8013f60:	4615      	mov	r5, r2
 8013f62:	461e      	mov	r6, r3
 8013f64:	da0d      	bge.n	8013f82 <__swhatbuf_r+0x2e>
 8013f66:	89a3      	ldrh	r3, [r4, #12]
 8013f68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013f6c:	f04f 0100 	mov.w	r1, #0
 8013f70:	bf0c      	ite	eq
 8013f72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013f76:	2340      	movne	r3, #64	; 0x40
 8013f78:	2000      	movs	r0, #0
 8013f7a:	6031      	str	r1, [r6, #0]
 8013f7c:	602b      	str	r3, [r5, #0]
 8013f7e:	b016      	add	sp, #88	; 0x58
 8013f80:	bd70      	pop	{r4, r5, r6, pc}
 8013f82:	466a      	mov	r2, sp
 8013f84:	f000 f862 	bl	801404c <_fstat_r>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	dbec      	blt.n	8013f66 <__swhatbuf_r+0x12>
 8013f8c:	9901      	ldr	r1, [sp, #4]
 8013f8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013f92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013f96:	4259      	negs	r1, r3
 8013f98:	4159      	adcs	r1, r3
 8013f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f9e:	e7eb      	b.n	8013f78 <__swhatbuf_r+0x24>

08013fa0 <__smakebuf_r>:
 8013fa0:	898b      	ldrh	r3, [r1, #12]
 8013fa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013fa4:	079d      	lsls	r5, r3, #30
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	460c      	mov	r4, r1
 8013faa:	d507      	bpl.n	8013fbc <__smakebuf_r+0x1c>
 8013fac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013fb0:	6023      	str	r3, [r4, #0]
 8013fb2:	6123      	str	r3, [r4, #16]
 8013fb4:	2301      	movs	r3, #1
 8013fb6:	6163      	str	r3, [r4, #20]
 8013fb8:	b002      	add	sp, #8
 8013fba:	bd70      	pop	{r4, r5, r6, pc}
 8013fbc:	ab01      	add	r3, sp, #4
 8013fbe:	466a      	mov	r2, sp
 8013fc0:	f7ff ffc8 	bl	8013f54 <__swhatbuf_r>
 8013fc4:	9900      	ldr	r1, [sp, #0]
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7fb fe0b 	bl	800fbe4 <_malloc_r>
 8013fce:	b948      	cbnz	r0, 8013fe4 <__smakebuf_r+0x44>
 8013fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fd4:	059a      	lsls	r2, r3, #22
 8013fd6:	d4ef      	bmi.n	8013fb8 <__smakebuf_r+0x18>
 8013fd8:	f023 0303 	bic.w	r3, r3, #3
 8013fdc:	f043 0302 	orr.w	r3, r3, #2
 8013fe0:	81a3      	strh	r3, [r4, #12]
 8013fe2:	e7e3      	b.n	8013fac <__smakebuf_r+0xc>
 8013fe4:	89a3      	ldrh	r3, [r4, #12]
 8013fe6:	6020      	str	r0, [r4, #0]
 8013fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fec:	81a3      	strh	r3, [r4, #12]
 8013fee:	9b00      	ldr	r3, [sp, #0]
 8013ff0:	6163      	str	r3, [r4, #20]
 8013ff2:	9b01      	ldr	r3, [sp, #4]
 8013ff4:	6120      	str	r0, [r4, #16]
 8013ff6:	b15b      	cbz	r3, 8014010 <__smakebuf_r+0x70>
 8013ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ffc:	4630      	mov	r0, r6
 8013ffe:	f000 f837 	bl	8014070 <_isatty_r>
 8014002:	b128      	cbz	r0, 8014010 <__smakebuf_r+0x70>
 8014004:	89a3      	ldrh	r3, [r4, #12]
 8014006:	f023 0303 	bic.w	r3, r3, #3
 801400a:	f043 0301 	orr.w	r3, r3, #1
 801400e:	81a3      	strh	r3, [r4, #12]
 8014010:	89a3      	ldrh	r3, [r4, #12]
 8014012:	431d      	orrs	r5, r3
 8014014:	81a5      	strh	r5, [r4, #12]
 8014016:	e7cf      	b.n	8013fb8 <__smakebuf_r+0x18>

08014018 <memmove>:
 8014018:	4288      	cmp	r0, r1
 801401a:	b510      	push	{r4, lr}
 801401c:	eb01 0402 	add.w	r4, r1, r2
 8014020:	d902      	bls.n	8014028 <memmove+0x10>
 8014022:	4284      	cmp	r4, r0
 8014024:	4623      	mov	r3, r4
 8014026:	d807      	bhi.n	8014038 <memmove+0x20>
 8014028:	1e43      	subs	r3, r0, #1
 801402a:	42a1      	cmp	r1, r4
 801402c:	d008      	beq.n	8014040 <memmove+0x28>
 801402e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014032:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014036:	e7f8      	b.n	801402a <memmove+0x12>
 8014038:	4402      	add	r2, r0
 801403a:	4601      	mov	r1, r0
 801403c:	428a      	cmp	r2, r1
 801403e:	d100      	bne.n	8014042 <memmove+0x2a>
 8014040:	bd10      	pop	{r4, pc}
 8014042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801404a:	e7f7      	b.n	801403c <memmove+0x24>

0801404c <_fstat_r>:
 801404c:	b538      	push	{r3, r4, r5, lr}
 801404e:	4d07      	ldr	r5, [pc, #28]	; (801406c <_fstat_r+0x20>)
 8014050:	2300      	movs	r3, #0
 8014052:	4604      	mov	r4, r0
 8014054:	4608      	mov	r0, r1
 8014056:	4611      	mov	r1, r2
 8014058:	602b      	str	r3, [r5, #0]
 801405a:	f7f0 fc86 	bl	800496a <_fstat>
 801405e:	1c43      	adds	r3, r0, #1
 8014060:	d102      	bne.n	8014068 <_fstat_r+0x1c>
 8014062:	682b      	ldr	r3, [r5, #0]
 8014064:	b103      	cbz	r3, 8014068 <_fstat_r+0x1c>
 8014066:	6023      	str	r3, [r4, #0]
 8014068:	bd38      	pop	{r3, r4, r5, pc}
 801406a:	bf00      	nop
 801406c:	20003734 	.word	0x20003734

08014070 <_isatty_r>:
 8014070:	b538      	push	{r3, r4, r5, lr}
 8014072:	4d06      	ldr	r5, [pc, #24]	; (801408c <_isatty_r+0x1c>)
 8014074:	2300      	movs	r3, #0
 8014076:	4604      	mov	r4, r0
 8014078:	4608      	mov	r0, r1
 801407a:	602b      	str	r3, [r5, #0]
 801407c:	f7f0 fc85 	bl	800498a <_isatty>
 8014080:	1c43      	adds	r3, r0, #1
 8014082:	d102      	bne.n	801408a <_isatty_r+0x1a>
 8014084:	682b      	ldr	r3, [r5, #0]
 8014086:	b103      	cbz	r3, 801408a <_isatty_r+0x1a>
 8014088:	6023      	str	r3, [r4, #0]
 801408a:	bd38      	pop	{r3, r4, r5, pc}
 801408c:	20003734 	.word	0x20003734

08014090 <abort>:
 8014090:	b508      	push	{r3, lr}
 8014092:	2006      	movs	r0, #6
 8014094:	f000 f870 	bl	8014178 <raise>
 8014098:	2001      	movs	r0, #1
 801409a:	f7f0 fc17 	bl	80048cc <_exit>

0801409e <_calloc_r>:
 801409e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140a0:	fba1 2402 	umull	r2, r4, r1, r2
 80140a4:	b94c      	cbnz	r4, 80140ba <_calloc_r+0x1c>
 80140a6:	4611      	mov	r1, r2
 80140a8:	9201      	str	r2, [sp, #4]
 80140aa:	f7fb fd9b 	bl	800fbe4 <_malloc_r>
 80140ae:	9a01      	ldr	r2, [sp, #4]
 80140b0:	4605      	mov	r5, r0
 80140b2:	b930      	cbnz	r0, 80140c2 <_calloc_r+0x24>
 80140b4:	4628      	mov	r0, r5
 80140b6:	b003      	add	sp, #12
 80140b8:	bd30      	pop	{r4, r5, pc}
 80140ba:	220c      	movs	r2, #12
 80140bc:	6002      	str	r2, [r0, #0]
 80140be:	2500      	movs	r5, #0
 80140c0:	e7f8      	b.n	80140b4 <_calloc_r+0x16>
 80140c2:	4621      	mov	r1, r4
 80140c4:	f7fd fba8 	bl	8011818 <memset>
 80140c8:	e7f4      	b.n	80140b4 <_calloc_r+0x16>

080140ca <_realloc_r>:
 80140ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ce:	4680      	mov	r8, r0
 80140d0:	4614      	mov	r4, r2
 80140d2:	460e      	mov	r6, r1
 80140d4:	b921      	cbnz	r1, 80140e0 <_realloc_r+0x16>
 80140d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140da:	4611      	mov	r1, r2
 80140dc:	f7fb bd82 	b.w	800fbe4 <_malloc_r>
 80140e0:	b92a      	cbnz	r2, 80140ee <_realloc_r+0x24>
 80140e2:	f7fe fb6b 	bl	80127bc <_free_r>
 80140e6:	4625      	mov	r5, r4
 80140e8:	4628      	mov	r0, r5
 80140ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ee:	f000 f85f 	bl	80141b0 <_malloc_usable_size_r>
 80140f2:	4284      	cmp	r4, r0
 80140f4:	4607      	mov	r7, r0
 80140f6:	d802      	bhi.n	80140fe <_realloc_r+0x34>
 80140f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80140fc:	d812      	bhi.n	8014124 <_realloc_r+0x5a>
 80140fe:	4621      	mov	r1, r4
 8014100:	4640      	mov	r0, r8
 8014102:	f7fb fd6f 	bl	800fbe4 <_malloc_r>
 8014106:	4605      	mov	r5, r0
 8014108:	2800      	cmp	r0, #0
 801410a:	d0ed      	beq.n	80140e8 <_realloc_r+0x1e>
 801410c:	42bc      	cmp	r4, r7
 801410e:	4622      	mov	r2, r4
 8014110:	4631      	mov	r1, r6
 8014112:	bf28      	it	cs
 8014114:	463a      	movcs	r2, r7
 8014116:	f7fd fc9a 	bl	8011a4e <memcpy>
 801411a:	4631      	mov	r1, r6
 801411c:	4640      	mov	r0, r8
 801411e:	f7fe fb4d 	bl	80127bc <_free_r>
 8014122:	e7e1      	b.n	80140e8 <_realloc_r+0x1e>
 8014124:	4635      	mov	r5, r6
 8014126:	e7df      	b.n	80140e8 <_realloc_r+0x1e>

08014128 <_raise_r>:
 8014128:	291f      	cmp	r1, #31
 801412a:	b538      	push	{r3, r4, r5, lr}
 801412c:	4604      	mov	r4, r0
 801412e:	460d      	mov	r5, r1
 8014130:	d904      	bls.n	801413c <_raise_r+0x14>
 8014132:	2316      	movs	r3, #22
 8014134:	6003      	str	r3, [r0, #0]
 8014136:	f04f 30ff 	mov.w	r0, #4294967295
 801413a:	bd38      	pop	{r3, r4, r5, pc}
 801413c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801413e:	b112      	cbz	r2, 8014146 <_raise_r+0x1e>
 8014140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014144:	b94b      	cbnz	r3, 801415a <_raise_r+0x32>
 8014146:	4620      	mov	r0, r4
 8014148:	f000 f830 	bl	80141ac <_getpid_r>
 801414c:	462a      	mov	r2, r5
 801414e:	4601      	mov	r1, r0
 8014150:	4620      	mov	r0, r4
 8014152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014156:	f000 b817 	b.w	8014188 <_kill_r>
 801415a:	2b01      	cmp	r3, #1
 801415c:	d00a      	beq.n	8014174 <_raise_r+0x4c>
 801415e:	1c59      	adds	r1, r3, #1
 8014160:	d103      	bne.n	801416a <_raise_r+0x42>
 8014162:	2316      	movs	r3, #22
 8014164:	6003      	str	r3, [r0, #0]
 8014166:	2001      	movs	r0, #1
 8014168:	e7e7      	b.n	801413a <_raise_r+0x12>
 801416a:	2400      	movs	r4, #0
 801416c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014170:	4628      	mov	r0, r5
 8014172:	4798      	blx	r3
 8014174:	2000      	movs	r0, #0
 8014176:	e7e0      	b.n	801413a <_raise_r+0x12>

08014178 <raise>:
 8014178:	4b02      	ldr	r3, [pc, #8]	; (8014184 <raise+0xc>)
 801417a:	4601      	mov	r1, r0
 801417c:	6818      	ldr	r0, [r3, #0]
 801417e:	f7ff bfd3 	b.w	8014128 <_raise_r>
 8014182:	bf00      	nop
 8014184:	200001f0 	.word	0x200001f0

08014188 <_kill_r>:
 8014188:	b538      	push	{r3, r4, r5, lr}
 801418a:	4d07      	ldr	r5, [pc, #28]	; (80141a8 <_kill_r+0x20>)
 801418c:	2300      	movs	r3, #0
 801418e:	4604      	mov	r4, r0
 8014190:	4608      	mov	r0, r1
 8014192:	4611      	mov	r1, r2
 8014194:	602b      	str	r3, [r5, #0]
 8014196:	f7f0 fb89 	bl	80048ac <_kill>
 801419a:	1c43      	adds	r3, r0, #1
 801419c:	d102      	bne.n	80141a4 <_kill_r+0x1c>
 801419e:	682b      	ldr	r3, [r5, #0]
 80141a0:	b103      	cbz	r3, 80141a4 <_kill_r+0x1c>
 80141a2:	6023      	str	r3, [r4, #0]
 80141a4:	bd38      	pop	{r3, r4, r5, pc}
 80141a6:	bf00      	nop
 80141a8:	20003734 	.word	0x20003734

080141ac <_getpid_r>:
 80141ac:	f7f0 bb76 	b.w	800489c <_getpid>

080141b0 <_malloc_usable_size_r>:
 80141b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141b4:	1f18      	subs	r0, r3, #4
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	bfbc      	itt	lt
 80141ba:	580b      	ldrlt	r3, [r1, r0]
 80141bc:	18c0      	addlt	r0, r0, r3
 80141be:	4770      	bx	lr

080141c0 <pow>:
 80141c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141c2:	ed2d 8b02 	vpush	{d8}
 80141c6:	eeb0 8a40 	vmov.f32	s16, s0
 80141ca:	eef0 8a60 	vmov.f32	s17, s1
 80141ce:	ec55 4b11 	vmov	r4, r5, d1
 80141d2:	f000 f8f1 	bl	80143b8 <__ieee754_pow>
 80141d6:	4622      	mov	r2, r4
 80141d8:	462b      	mov	r3, r5
 80141da:	4620      	mov	r0, r4
 80141dc:	4629      	mov	r1, r5
 80141de:	ec57 6b10 	vmov	r6, r7, d0
 80141e2:	f7ec fca3 	bl	8000b2c <__aeabi_dcmpun>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d13b      	bne.n	8014262 <pow+0xa2>
 80141ea:	ec51 0b18 	vmov	r0, r1, d8
 80141ee:	2200      	movs	r2, #0
 80141f0:	2300      	movs	r3, #0
 80141f2:	f7ec fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 80141f6:	b1b8      	cbz	r0, 8014228 <pow+0x68>
 80141f8:	2200      	movs	r2, #0
 80141fa:	2300      	movs	r3, #0
 80141fc:	4620      	mov	r0, r4
 80141fe:	4629      	mov	r1, r5
 8014200:	f7ec fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8014204:	2800      	cmp	r0, #0
 8014206:	d146      	bne.n	8014296 <pow+0xd6>
 8014208:	ec45 4b10 	vmov	d0, r4, r5
 801420c:	f000 f848 	bl	80142a0 <finite>
 8014210:	b338      	cbz	r0, 8014262 <pow+0xa2>
 8014212:	2200      	movs	r2, #0
 8014214:	2300      	movs	r3, #0
 8014216:	4620      	mov	r0, r4
 8014218:	4629      	mov	r1, r5
 801421a:	f7ec fc5f 	bl	8000adc <__aeabi_dcmplt>
 801421e:	b300      	cbz	r0, 8014262 <pow+0xa2>
 8014220:	f7fd fbe0 	bl	80119e4 <__errno>
 8014224:	2322      	movs	r3, #34	; 0x22
 8014226:	e01b      	b.n	8014260 <pow+0xa0>
 8014228:	ec47 6b10 	vmov	d0, r6, r7
 801422c:	f000 f838 	bl	80142a0 <finite>
 8014230:	b9e0      	cbnz	r0, 801426c <pow+0xac>
 8014232:	eeb0 0a48 	vmov.f32	s0, s16
 8014236:	eef0 0a68 	vmov.f32	s1, s17
 801423a:	f000 f831 	bl	80142a0 <finite>
 801423e:	b1a8      	cbz	r0, 801426c <pow+0xac>
 8014240:	ec45 4b10 	vmov	d0, r4, r5
 8014244:	f000 f82c 	bl	80142a0 <finite>
 8014248:	b180      	cbz	r0, 801426c <pow+0xac>
 801424a:	4632      	mov	r2, r6
 801424c:	463b      	mov	r3, r7
 801424e:	4630      	mov	r0, r6
 8014250:	4639      	mov	r1, r7
 8014252:	f7ec fc6b 	bl	8000b2c <__aeabi_dcmpun>
 8014256:	2800      	cmp	r0, #0
 8014258:	d0e2      	beq.n	8014220 <pow+0x60>
 801425a:	f7fd fbc3 	bl	80119e4 <__errno>
 801425e:	2321      	movs	r3, #33	; 0x21
 8014260:	6003      	str	r3, [r0, #0]
 8014262:	ecbd 8b02 	vpop	{d8}
 8014266:	ec47 6b10 	vmov	d0, r6, r7
 801426a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801426c:	2200      	movs	r2, #0
 801426e:	2300      	movs	r3, #0
 8014270:	4630      	mov	r0, r6
 8014272:	4639      	mov	r1, r7
 8014274:	f7ec fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8014278:	2800      	cmp	r0, #0
 801427a:	d0f2      	beq.n	8014262 <pow+0xa2>
 801427c:	eeb0 0a48 	vmov.f32	s0, s16
 8014280:	eef0 0a68 	vmov.f32	s1, s17
 8014284:	f000 f80c 	bl	80142a0 <finite>
 8014288:	2800      	cmp	r0, #0
 801428a:	d0ea      	beq.n	8014262 <pow+0xa2>
 801428c:	ec45 4b10 	vmov	d0, r4, r5
 8014290:	f000 f806 	bl	80142a0 <finite>
 8014294:	e7c3      	b.n	801421e <pow+0x5e>
 8014296:	4f01      	ldr	r7, [pc, #4]	; (801429c <pow+0xdc>)
 8014298:	2600      	movs	r6, #0
 801429a:	e7e2      	b.n	8014262 <pow+0xa2>
 801429c:	3ff00000 	.word	0x3ff00000

080142a0 <finite>:
 80142a0:	b082      	sub	sp, #8
 80142a2:	ed8d 0b00 	vstr	d0, [sp]
 80142a6:	9801      	ldr	r0, [sp, #4]
 80142a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80142ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80142b0:	0fc0      	lsrs	r0, r0, #31
 80142b2:	b002      	add	sp, #8
 80142b4:	4770      	bx	lr
	...

080142b8 <floor>:
 80142b8:	ec51 0b10 	vmov	r0, r1, d0
 80142bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80142c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80142c8:	2e13      	cmp	r6, #19
 80142ca:	ee10 5a10 	vmov	r5, s0
 80142ce:	ee10 8a10 	vmov	r8, s0
 80142d2:	460c      	mov	r4, r1
 80142d4:	dc31      	bgt.n	801433a <floor+0x82>
 80142d6:	2e00      	cmp	r6, #0
 80142d8:	da14      	bge.n	8014304 <floor+0x4c>
 80142da:	a333      	add	r3, pc, #204	; (adr r3, 80143a8 <floor+0xf0>)
 80142dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e0:	f7eb ffd4 	bl	800028c <__adddf3>
 80142e4:	2200      	movs	r2, #0
 80142e6:	2300      	movs	r3, #0
 80142e8:	f7ec fc16 	bl	8000b18 <__aeabi_dcmpgt>
 80142ec:	b138      	cbz	r0, 80142fe <floor+0x46>
 80142ee:	2c00      	cmp	r4, #0
 80142f0:	da53      	bge.n	801439a <floor+0xe2>
 80142f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80142f6:	4325      	orrs	r5, r4
 80142f8:	d052      	beq.n	80143a0 <floor+0xe8>
 80142fa:	4c2d      	ldr	r4, [pc, #180]	; (80143b0 <floor+0xf8>)
 80142fc:	2500      	movs	r5, #0
 80142fe:	4621      	mov	r1, r4
 8014300:	4628      	mov	r0, r5
 8014302:	e024      	b.n	801434e <floor+0x96>
 8014304:	4f2b      	ldr	r7, [pc, #172]	; (80143b4 <floor+0xfc>)
 8014306:	4137      	asrs	r7, r6
 8014308:	ea01 0307 	and.w	r3, r1, r7
 801430c:	4303      	orrs	r3, r0
 801430e:	d01e      	beq.n	801434e <floor+0x96>
 8014310:	a325      	add	r3, pc, #148	; (adr r3, 80143a8 <floor+0xf0>)
 8014312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014316:	f7eb ffb9 	bl	800028c <__adddf3>
 801431a:	2200      	movs	r2, #0
 801431c:	2300      	movs	r3, #0
 801431e:	f7ec fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 8014322:	2800      	cmp	r0, #0
 8014324:	d0eb      	beq.n	80142fe <floor+0x46>
 8014326:	2c00      	cmp	r4, #0
 8014328:	bfbe      	ittt	lt
 801432a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801432e:	4133      	asrlt	r3, r6
 8014330:	18e4      	addlt	r4, r4, r3
 8014332:	ea24 0407 	bic.w	r4, r4, r7
 8014336:	2500      	movs	r5, #0
 8014338:	e7e1      	b.n	80142fe <floor+0x46>
 801433a:	2e33      	cmp	r6, #51	; 0x33
 801433c:	dd0b      	ble.n	8014356 <floor+0x9e>
 801433e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014342:	d104      	bne.n	801434e <floor+0x96>
 8014344:	ee10 2a10 	vmov	r2, s0
 8014348:	460b      	mov	r3, r1
 801434a:	f7eb ff9f 	bl	800028c <__adddf3>
 801434e:	ec41 0b10 	vmov	d0, r0, r1
 8014352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014356:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801435a:	f04f 37ff 	mov.w	r7, #4294967295
 801435e:	40df      	lsrs	r7, r3
 8014360:	4238      	tst	r0, r7
 8014362:	d0f4      	beq.n	801434e <floor+0x96>
 8014364:	a310      	add	r3, pc, #64	; (adr r3, 80143a8 <floor+0xf0>)
 8014366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436a:	f7eb ff8f 	bl	800028c <__adddf3>
 801436e:	2200      	movs	r2, #0
 8014370:	2300      	movs	r3, #0
 8014372:	f7ec fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8014376:	2800      	cmp	r0, #0
 8014378:	d0c1      	beq.n	80142fe <floor+0x46>
 801437a:	2c00      	cmp	r4, #0
 801437c:	da0a      	bge.n	8014394 <floor+0xdc>
 801437e:	2e14      	cmp	r6, #20
 8014380:	d101      	bne.n	8014386 <floor+0xce>
 8014382:	3401      	adds	r4, #1
 8014384:	e006      	b.n	8014394 <floor+0xdc>
 8014386:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801438a:	2301      	movs	r3, #1
 801438c:	40b3      	lsls	r3, r6
 801438e:	441d      	add	r5, r3
 8014390:	45a8      	cmp	r8, r5
 8014392:	d8f6      	bhi.n	8014382 <floor+0xca>
 8014394:	ea25 0507 	bic.w	r5, r5, r7
 8014398:	e7b1      	b.n	80142fe <floor+0x46>
 801439a:	2500      	movs	r5, #0
 801439c:	462c      	mov	r4, r5
 801439e:	e7ae      	b.n	80142fe <floor+0x46>
 80143a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80143a4:	e7ab      	b.n	80142fe <floor+0x46>
 80143a6:	bf00      	nop
 80143a8:	8800759c 	.word	0x8800759c
 80143ac:	7e37e43c 	.word	0x7e37e43c
 80143b0:	bff00000 	.word	0xbff00000
 80143b4:	000fffff 	.word	0x000fffff

080143b8 <__ieee754_pow>:
 80143b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143bc:	ed2d 8b06 	vpush	{d8-d10}
 80143c0:	b089      	sub	sp, #36	; 0x24
 80143c2:	ed8d 1b00 	vstr	d1, [sp]
 80143c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80143ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80143ce:	ea58 0102 	orrs.w	r1, r8, r2
 80143d2:	ec57 6b10 	vmov	r6, r7, d0
 80143d6:	d115      	bne.n	8014404 <__ieee754_pow+0x4c>
 80143d8:	19b3      	adds	r3, r6, r6
 80143da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80143de:	4152      	adcs	r2, r2
 80143e0:	4299      	cmp	r1, r3
 80143e2:	4b89      	ldr	r3, [pc, #548]	; (8014608 <__ieee754_pow+0x250>)
 80143e4:	4193      	sbcs	r3, r2
 80143e6:	f080 84d1 	bcs.w	8014d8c <__ieee754_pow+0x9d4>
 80143ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143ee:	4630      	mov	r0, r6
 80143f0:	4639      	mov	r1, r7
 80143f2:	f7eb ff4b 	bl	800028c <__adddf3>
 80143f6:	ec41 0b10 	vmov	d0, r0, r1
 80143fa:	b009      	add	sp, #36	; 0x24
 80143fc:	ecbd 8b06 	vpop	{d8-d10}
 8014400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014404:	4b81      	ldr	r3, [pc, #516]	; (801460c <__ieee754_pow+0x254>)
 8014406:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801440a:	429c      	cmp	r4, r3
 801440c:	ee10 aa10 	vmov	sl, s0
 8014410:	463d      	mov	r5, r7
 8014412:	dc06      	bgt.n	8014422 <__ieee754_pow+0x6a>
 8014414:	d101      	bne.n	801441a <__ieee754_pow+0x62>
 8014416:	2e00      	cmp	r6, #0
 8014418:	d1e7      	bne.n	80143ea <__ieee754_pow+0x32>
 801441a:	4598      	cmp	r8, r3
 801441c:	dc01      	bgt.n	8014422 <__ieee754_pow+0x6a>
 801441e:	d10f      	bne.n	8014440 <__ieee754_pow+0x88>
 8014420:	b172      	cbz	r2, 8014440 <__ieee754_pow+0x88>
 8014422:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8014426:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801442a:	ea55 050a 	orrs.w	r5, r5, sl
 801442e:	d1dc      	bne.n	80143ea <__ieee754_pow+0x32>
 8014430:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014434:	18db      	adds	r3, r3, r3
 8014436:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801443a:	4152      	adcs	r2, r2
 801443c:	429d      	cmp	r5, r3
 801443e:	e7d0      	b.n	80143e2 <__ieee754_pow+0x2a>
 8014440:	2d00      	cmp	r5, #0
 8014442:	da3b      	bge.n	80144bc <__ieee754_pow+0x104>
 8014444:	4b72      	ldr	r3, [pc, #456]	; (8014610 <__ieee754_pow+0x258>)
 8014446:	4598      	cmp	r8, r3
 8014448:	dc51      	bgt.n	80144ee <__ieee754_pow+0x136>
 801444a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801444e:	4598      	cmp	r8, r3
 8014450:	f340 84ab 	ble.w	8014daa <__ieee754_pow+0x9f2>
 8014454:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014458:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801445c:	2b14      	cmp	r3, #20
 801445e:	dd0f      	ble.n	8014480 <__ieee754_pow+0xc8>
 8014460:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014464:	fa22 f103 	lsr.w	r1, r2, r3
 8014468:	fa01 f303 	lsl.w	r3, r1, r3
 801446c:	4293      	cmp	r3, r2
 801446e:	f040 849c 	bne.w	8014daa <__ieee754_pow+0x9f2>
 8014472:	f001 0101 	and.w	r1, r1, #1
 8014476:	f1c1 0302 	rsb	r3, r1, #2
 801447a:	9304      	str	r3, [sp, #16]
 801447c:	b182      	cbz	r2, 80144a0 <__ieee754_pow+0xe8>
 801447e:	e05f      	b.n	8014540 <__ieee754_pow+0x188>
 8014480:	2a00      	cmp	r2, #0
 8014482:	d15b      	bne.n	801453c <__ieee754_pow+0x184>
 8014484:	f1c3 0314 	rsb	r3, r3, #20
 8014488:	fa48 f103 	asr.w	r1, r8, r3
 801448c:	fa01 f303 	lsl.w	r3, r1, r3
 8014490:	4543      	cmp	r3, r8
 8014492:	f040 8487 	bne.w	8014da4 <__ieee754_pow+0x9ec>
 8014496:	f001 0101 	and.w	r1, r1, #1
 801449a:	f1c1 0302 	rsb	r3, r1, #2
 801449e:	9304      	str	r3, [sp, #16]
 80144a0:	4b5c      	ldr	r3, [pc, #368]	; (8014614 <__ieee754_pow+0x25c>)
 80144a2:	4598      	cmp	r8, r3
 80144a4:	d132      	bne.n	801450c <__ieee754_pow+0x154>
 80144a6:	f1b9 0f00 	cmp.w	r9, #0
 80144aa:	f280 8477 	bge.w	8014d9c <__ieee754_pow+0x9e4>
 80144ae:	4959      	ldr	r1, [pc, #356]	; (8014614 <__ieee754_pow+0x25c>)
 80144b0:	4632      	mov	r2, r6
 80144b2:	463b      	mov	r3, r7
 80144b4:	2000      	movs	r0, #0
 80144b6:	f7ec f9c9 	bl	800084c <__aeabi_ddiv>
 80144ba:	e79c      	b.n	80143f6 <__ieee754_pow+0x3e>
 80144bc:	2300      	movs	r3, #0
 80144be:	9304      	str	r3, [sp, #16]
 80144c0:	2a00      	cmp	r2, #0
 80144c2:	d13d      	bne.n	8014540 <__ieee754_pow+0x188>
 80144c4:	4b51      	ldr	r3, [pc, #324]	; (801460c <__ieee754_pow+0x254>)
 80144c6:	4598      	cmp	r8, r3
 80144c8:	d1ea      	bne.n	80144a0 <__ieee754_pow+0xe8>
 80144ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80144ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80144d2:	ea53 030a 	orrs.w	r3, r3, sl
 80144d6:	f000 8459 	beq.w	8014d8c <__ieee754_pow+0x9d4>
 80144da:	4b4f      	ldr	r3, [pc, #316]	; (8014618 <__ieee754_pow+0x260>)
 80144dc:	429c      	cmp	r4, r3
 80144de:	dd08      	ble.n	80144f2 <__ieee754_pow+0x13a>
 80144e0:	f1b9 0f00 	cmp.w	r9, #0
 80144e4:	f2c0 8456 	blt.w	8014d94 <__ieee754_pow+0x9dc>
 80144e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80144ec:	e783      	b.n	80143f6 <__ieee754_pow+0x3e>
 80144ee:	2302      	movs	r3, #2
 80144f0:	e7e5      	b.n	80144be <__ieee754_pow+0x106>
 80144f2:	f1b9 0f00 	cmp.w	r9, #0
 80144f6:	f04f 0000 	mov.w	r0, #0
 80144fa:	f04f 0100 	mov.w	r1, #0
 80144fe:	f6bf af7a 	bge.w	80143f6 <__ieee754_pow+0x3e>
 8014502:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801450a:	e774      	b.n	80143f6 <__ieee754_pow+0x3e>
 801450c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014510:	d106      	bne.n	8014520 <__ieee754_pow+0x168>
 8014512:	4632      	mov	r2, r6
 8014514:	463b      	mov	r3, r7
 8014516:	4630      	mov	r0, r6
 8014518:	4639      	mov	r1, r7
 801451a:	f7ec f86d 	bl	80005f8 <__aeabi_dmul>
 801451e:	e76a      	b.n	80143f6 <__ieee754_pow+0x3e>
 8014520:	4b3e      	ldr	r3, [pc, #248]	; (801461c <__ieee754_pow+0x264>)
 8014522:	4599      	cmp	r9, r3
 8014524:	d10c      	bne.n	8014540 <__ieee754_pow+0x188>
 8014526:	2d00      	cmp	r5, #0
 8014528:	db0a      	blt.n	8014540 <__ieee754_pow+0x188>
 801452a:	ec47 6b10 	vmov	d0, r6, r7
 801452e:	b009      	add	sp, #36	; 0x24
 8014530:	ecbd 8b06 	vpop	{d8-d10}
 8014534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014538:	f000 bd20 	b.w	8014f7c <__ieee754_sqrt>
 801453c:	2300      	movs	r3, #0
 801453e:	9304      	str	r3, [sp, #16]
 8014540:	ec47 6b10 	vmov	d0, r6, r7
 8014544:	f000 fc62 	bl	8014e0c <fabs>
 8014548:	ec51 0b10 	vmov	r0, r1, d0
 801454c:	f1ba 0f00 	cmp.w	sl, #0
 8014550:	d129      	bne.n	80145a6 <__ieee754_pow+0x1ee>
 8014552:	b124      	cbz	r4, 801455e <__ieee754_pow+0x1a6>
 8014554:	4b2f      	ldr	r3, [pc, #188]	; (8014614 <__ieee754_pow+0x25c>)
 8014556:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801455a:	429a      	cmp	r2, r3
 801455c:	d123      	bne.n	80145a6 <__ieee754_pow+0x1ee>
 801455e:	f1b9 0f00 	cmp.w	r9, #0
 8014562:	da05      	bge.n	8014570 <__ieee754_pow+0x1b8>
 8014564:	4602      	mov	r2, r0
 8014566:	460b      	mov	r3, r1
 8014568:	2000      	movs	r0, #0
 801456a:	492a      	ldr	r1, [pc, #168]	; (8014614 <__ieee754_pow+0x25c>)
 801456c:	f7ec f96e 	bl	800084c <__aeabi_ddiv>
 8014570:	2d00      	cmp	r5, #0
 8014572:	f6bf af40 	bge.w	80143f6 <__ieee754_pow+0x3e>
 8014576:	9b04      	ldr	r3, [sp, #16]
 8014578:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801457c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014580:	431c      	orrs	r4, r3
 8014582:	d108      	bne.n	8014596 <__ieee754_pow+0x1de>
 8014584:	4602      	mov	r2, r0
 8014586:	460b      	mov	r3, r1
 8014588:	4610      	mov	r0, r2
 801458a:	4619      	mov	r1, r3
 801458c:	f7eb fe7c 	bl	8000288 <__aeabi_dsub>
 8014590:	4602      	mov	r2, r0
 8014592:	460b      	mov	r3, r1
 8014594:	e78f      	b.n	80144b6 <__ieee754_pow+0xfe>
 8014596:	9b04      	ldr	r3, [sp, #16]
 8014598:	2b01      	cmp	r3, #1
 801459a:	f47f af2c 	bne.w	80143f6 <__ieee754_pow+0x3e>
 801459e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145a2:	4619      	mov	r1, r3
 80145a4:	e727      	b.n	80143f6 <__ieee754_pow+0x3e>
 80145a6:	0feb      	lsrs	r3, r5, #31
 80145a8:	3b01      	subs	r3, #1
 80145aa:	9306      	str	r3, [sp, #24]
 80145ac:	9a06      	ldr	r2, [sp, #24]
 80145ae:	9b04      	ldr	r3, [sp, #16]
 80145b0:	4313      	orrs	r3, r2
 80145b2:	d102      	bne.n	80145ba <__ieee754_pow+0x202>
 80145b4:	4632      	mov	r2, r6
 80145b6:	463b      	mov	r3, r7
 80145b8:	e7e6      	b.n	8014588 <__ieee754_pow+0x1d0>
 80145ba:	4b19      	ldr	r3, [pc, #100]	; (8014620 <__ieee754_pow+0x268>)
 80145bc:	4598      	cmp	r8, r3
 80145be:	f340 80fb 	ble.w	80147b8 <__ieee754_pow+0x400>
 80145c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80145c6:	4598      	cmp	r8, r3
 80145c8:	4b13      	ldr	r3, [pc, #76]	; (8014618 <__ieee754_pow+0x260>)
 80145ca:	dd0c      	ble.n	80145e6 <__ieee754_pow+0x22e>
 80145cc:	429c      	cmp	r4, r3
 80145ce:	dc0f      	bgt.n	80145f0 <__ieee754_pow+0x238>
 80145d0:	f1b9 0f00 	cmp.w	r9, #0
 80145d4:	da0f      	bge.n	80145f6 <__ieee754_pow+0x23e>
 80145d6:	2000      	movs	r0, #0
 80145d8:	b009      	add	sp, #36	; 0x24
 80145da:	ecbd 8b06 	vpop	{d8-d10}
 80145de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e2:	f000 bcc2 	b.w	8014f6a <__math_oflow>
 80145e6:	429c      	cmp	r4, r3
 80145e8:	dbf2      	blt.n	80145d0 <__ieee754_pow+0x218>
 80145ea:	4b0a      	ldr	r3, [pc, #40]	; (8014614 <__ieee754_pow+0x25c>)
 80145ec:	429c      	cmp	r4, r3
 80145ee:	dd19      	ble.n	8014624 <__ieee754_pow+0x26c>
 80145f0:	f1b9 0f00 	cmp.w	r9, #0
 80145f4:	dcef      	bgt.n	80145d6 <__ieee754_pow+0x21e>
 80145f6:	2000      	movs	r0, #0
 80145f8:	b009      	add	sp, #36	; 0x24
 80145fa:	ecbd 8b06 	vpop	{d8-d10}
 80145fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014602:	f000 bca9 	b.w	8014f58 <__math_uflow>
 8014606:	bf00      	nop
 8014608:	fff00000 	.word	0xfff00000
 801460c:	7ff00000 	.word	0x7ff00000
 8014610:	433fffff 	.word	0x433fffff
 8014614:	3ff00000 	.word	0x3ff00000
 8014618:	3fefffff 	.word	0x3fefffff
 801461c:	3fe00000 	.word	0x3fe00000
 8014620:	41e00000 	.word	0x41e00000
 8014624:	4b60      	ldr	r3, [pc, #384]	; (80147a8 <__ieee754_pow+0x3f0>)
 8014626:	2200      	movs	r2, #0
 8014628:	f7eb fe2e 	bl	8000288 <__aeabi_dsub>
 801462c:	a354      	add	r3, pc, #336	; (adr r3, 8014780 <__ieee754_pow+0x3c8>)
 801462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014632:	4604      	mov	r4, r0
 8014634:	460d      	mov	r5, r1
 8014636:	f7eb ffdf 	bl	80005f8 <__aeabi_dmul>
 801463a:	a353      	add	r3, pc, #332	; (adr r3, 8014788 <__ieee754_pow+0x3d0>)
 801463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014640:	4606      	mov	r6, r0
 8014642:	460f      	mov	r7, r1
 8014644:	4620      	mov	r0, r4
 8014646:	4629      	mov	r1, r5
 8014648:	f7eb ffd6 	bl	80005f8 <__aeabi_dmul>
 801464c:	4b57      	ldr	r3, [pc, #348]	; (80147ac <__ieee754_pow+0x3f4>)
 801464e:	4682      	mov	sl, r0
 8014650:	468b      	mov	fp, r1
 8014652:	2200      	movs	r2, #0
 8014654:	4620      	mov	r0, r4
 8014656:	4629      	mov	r1, r5
 8014658:	f7eb ffce 	bl	80005f8 <__aeabi_dmul>
 801465c:	4602      	mov	r2, r0
 801465e:	460b      	mov	r3, r1
 8014660:	a14b      	add	r1, pc, #300	; (adr r1, 8014790 <__ieee754_pow+0x3d8>)
 8014662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014666:	f7eb fe0f 	bl	8000288 <__aeabi_dsub>
 801466a:	4622      	mov	r2, r4
 801466c:	462b      	mov	r3, r5
 801466e:	f7eb ffc3 	bl	80005f8 <__aeabi_dmul>
 8014672:	4602      	mov	r2, r0
 8014674:	460b      	mov	r3, r1
 8014676:	2000      	movs	r0, #0
 8014678:	494d      	ldr	r1, [pc, #308]	; (80147b0 <__ieee754_pow+0x3f8>)
 801467a:	f7eb fe05 	bl	8000288 <__aeabi_dsub>
 801467e:	4622      	mov	r2, r4
 8014680:	4680      	mov	r8, r0
 8014682:	4689      	mov	r9, r1
 8014684:	462b      	mov	r3, r5
 8014686:	4620      	mov	r0, r4
 8014688:	4629      	mov	r1, r5
 801468a:	f7eb ffb5 	bl	80005f8 <__aeabi_dmul>
 801468e:	4602      	mov	r2, r0
 8014690:	460b      	mov	r3, r1
 8014692:	4640      	mov	r0, r8
 8014694:	4649      	mov	r1, r9
 8014696:	f7eb ffaf 	bl	80005f8 <__aeabi_dmul>
 801469a:	a33f      	add	r3, pc, #252	; (adr r3, 8014798 <__ieee754_pow+0x3e0>)
 801469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a0:	f7eb ffaa 	bl	80005f8 <__aeabi_dmul>
 80146a4:	4602      	mov	r2, r0
 80146a6:	460b      	mov	r3, r1
 80146a8:	4650      	mov	r0, sl
 80146aa:	4659      	mov	r1, fp
 80146ac:	f7eb fdec 	bl	8000288 <__aeabi_dsub>
 80146b0:	4602      	mov	r2, r0
 80146b2:	460b      	mov	r3, r1
 80146b4:	4680      	mov	r8, r0
 80146b6:	4689      	mov	r9, r1
 80146b8:	4630      	mov	r0, r6
 80146ba:	4639      	mov	r1, r7
 80146bc:	f7eb fde6 	bl	800028c <__adddf3>
 80146c0:	2000      	movs	r0, #0
 80146c2:	4632      	mov	r2, r6
 80146c4:	463b      	mov	r3, r7
 80146c6:	4604      	mov	r4, r0
 80146c8:	460d      	mov	r5, r1
 80146ca:	f7eb fddd 	bl	8000288 <__aeabi_dsub>
 80146ce:	4602      	mov	r2, r0
 80146d0:	460b      	mov	r3, r1
 80146d2:	4640      	mov	r0, r8
 80146d4:	4649      	mov	r1, r9
 80146d6:	f7eb fdd7 	bl	8000288 <__aeabi_dsub>
 80146da:	9b04      	ldr	r3, [sp, #16]
 80146dc:	9a06      	ldr	r2, [sp, #24]
 80146de:	3b01      	subs	r3, #1
 80146e0:	4313      	orrs	r3, r2
 80146e2:	4682      	mov	sl, r0
 80146e4:	468b      	mov	fp, r1
 80146e6:	f040 81e7 	bne.w	8014ab8 <__ieee754_pow+0x700>
 80146ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80147a0 <__ieee754_pow+0x3e8>
 80146ee:	eeb0 8a47 	vmov.f32	s16, s14
 80146f2:	eef0 8a67 	vmov.f32	s17, s15
 80146f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80146fa:	2600      	movs	r6, #0
 80146fc:	4632      	mov	r2, r6
 80146fe:	463b      	mov	r3, r7
 8014700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014704:	f7eb fdc0 	bl	8000288 <__aeabi_dsub>
 8014708:	4622      	mov	r2, r4
 801470a:	462b      	mov	r3, r5
 801470c:	f7eb ff74 	bl	80005f8 <__aeabi_dmul>
 8014710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014714:	4680      	mov	r8, r0
 8014716:	4689      	mov	r9, r1
 8014718:	4650      	mov	r0, sl
 801471a:	4659      	mov	r1, fp
 801471c:	f7eb ff6c 	bl	80005f8 <__aeabi_dmul>
 8014720:	4602      	mov	r2, r0
 8014722:	460b      	mov	r3, r1
 8014724:	4640      	mov	r0, r8
 8014726:	4649      	mov	r1, r9
 8014728:	f7eb fdb0 	bl	800028c <__adddf3>
 801472c:	4632      	mov	r2, r6
 801472e:	463b      	mov	r3, r7
 8014730:	4680      	mov	r8, r0
 8014732:	4689      	mov	r9, r1
 8014734:	4620      	mov	r0, r4
 8014736:	4629      	mov	r1, r5
 8014738:	f7eb ff5e 	bl	80005f8 <__aeabi_dmul>
 801473c:	460b      	mov	r3, r1
 801473e:	4604      	mov	r4, r0
 8014740:	460d      	mov	r5, r1
 8014742:	4602      	mov	r2, r0
 8014744:	4649      	mov	r1, r9
 8014746:	4640      	mov	r0, r8
 8014748:	f7eb fda0 	bl	800028c <__adddf3>
 801474c:	4b19      	ldr	r3, [pc, #100]	; (80147b4 <__ieee754_pow+0x3fc>)
 801474e:	4299      	cmp	r1, r3
 8014750:	ec45 4b19 	vmov	d9, r4, r5
 8014754:	4606      	mov	r6, r0
 8014756:	460f      	mov	r7, r1
 8014758:	468b      	mov	fp, r1
 801475a:	f340 82f0 	ble.w	8014d3e <__ieee754_pow+0x986>
 801475e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014762:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014766:	4303      	orrs	r3, r0
 8014768:	f000 81e4 	beq.w	8014b34 <__ieee754_pow+0x77c>
 801476c:	ec51 0b18 	vmov	r0, r1, d8
 8014770:	2200      	movs	r2, #0
 8014772:	2300      	movs	r3, #0
 8014774:	f7ec f9b2 	bl	8000adc <__aeabi_dcmplt>
 8014778:	3800      	subs	r0, #0
 801477a:	bf18      	it	ne
 801477c:	2001      	movne	r0, #1
 801477e:	e72b      	b.n	80145d8 <__ieee754_pow+0x220>
 8014780:	60000000 	.word	0x60000000
 8014784:	3ff71547 	.word	0x3ff71547
 8014788:	f85ddf44 	.word	0xf85ddf44
 801478c:	3e54ae0b 	.word	0x3e54ae0b
 8014790:	55555555 	.word	0x55555555
 8014794:	3fd55555 	.word	0x3fd55555
 8014798:	652b82fe 	.word	0x652b82fe
 801479c:	3ff71547 	.word	0x3ff71547
 80147a0:	00000000 	.word	0x00000000
 80147a4:	bff00000 	.word	0xbff00000
 80147a8:	3ff00000 	.word	0x3ff00000
 80147ac:	3fd00000 	.word	0x3fd00000
 80147b0:	3fe00000 	.word	0x3fe00000
 80147b4:	408fffff 	.word	0x408fffff
 80147b8:	4bd5      	ldr	r3, [pc, #852]	; (8014b10 <__ieee754_pow+0x758>)
 80147ba:	402b      	ands	r3, r5
 80147bc:	2200      	movs	r2, #0
 80147be:	b92b      	cbnz	r3, 80147cc <__ieee754_pow+0x414>
 80147c0:	4bd4      	ldr	r3, [pc, #848]	; (8014b14 <__ieee754_pow+0x75c>)
 80147c2:	f7eb ff19 	bl	80005f8 <__aeabi_dmul>
 80147c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80147ca:	460c      	mov	r4, r1
 80147cc:	1523      	asrs	r3, r4, #20
 80147ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80147d2:	4413      	add	r3, r2
 80147d4:	9305      	str	r3, [sp, #20]
 80147d6:	4bd0      	ldr	r3, [pc, #832]	; (8014b18 <__ieee754_pow+0x760>)
 80147d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80147dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80147e0:	429c      	cmp	r4, r3
 80147e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80147e6:	dd08      	ble.n	80147fa <__ieee754_pow+0x442>
 80147e8:	4bcc      	ldr	r3, [pc, #816]	; (8014b1c <__ieee754_pow+0x764>)
 80147ea:	429c      	cmp	r4, r3
 80147ec:	f340 8162 	ble.w	8014ab4 <__ieee754_pow+0x6fc>
 80147f0:	9b05      	ldr	r3, [sp, #20]
 80147f2:	3301      	adds	r3, #1
 80147f4:	9305      	str	r3, [sp, #20]
 80147f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80147fa:	2400      	movs	r4, #0
 80147fc:	00e3      	lsls	r3, r4, #3
 80147fe:	9307      	str	r3, [sp, #28]
 8014800:	4bc7      	ldr	r3, [pc, #796]	; (8014b20 <__ieee754_pow+0x768>)
 8014802:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014806:	ed93 7b00 	vldr	d7, [r3]
 801480a:	4629      	mov	r1, r5
 801480c:	ec53 2b17 	vmov	r2, r3, d7
 8014810:	eeb0 9a47 	vmov.f32	s18, s14
 8014814:	eef0 9a67 	vmov.f32	s19, s15
 8014818:	4682      	mov	sl, r0
 801481a:	f7eb fd35 	bl	8000288 <__aeabi_dsub>
 801481e:	4652      	mov	r2, sl
 8014820:	4606      	mov	r6, r0
 8014822:	460f      	mov	r7, r1
 8014824:	462b      	mov	r3, r5
 8014826:	ec51 0b19 	vmov	r0, r1, d9
 801482a:	f7eb fd2f 	bl	800028c <__adddf3>
 801482e:	4602      	mov	r2, r0
 8014830:	460b      	mov	r3, r1
 8014832:	2000      	movs	r0, #0
 8014834:	49bb      	ldr	r1, [pc, #748]	; (8014b24 <__ieee754_pow+0x76c>)
 8014836:	f7ec f809 	bl	800084c <__aeabi_ddiv>
 801483a:	ec41 0b1a 	vmov	d10, r0, r1
 801483e:	4602      	mov	r2, r0
 8014840:	460b      	mov	r3, r1
 8014842:	4630      	mov	r0, r6
 8014844:	4639      	mov	r1, r7
 8014846:	f7eb fed7 	bl	80005f8 <__aeabi_dmul>
 801484a:	2300      	movs	r3, #0
 801484c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014850:	9302      	str	r3, [sp, #8]
 8014852:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014856:	46ab      	mov	fp, r5
 8014858:	106d      	asrs	r5, r5, #1
 801485a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801485e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014862:	ec41 0b18 	vmov	d8, r0, r1
 8014866:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801486a:	2200      	movs	r2, #0
 801486c:	4640      	mov	r0, r8
 801486e:	4649      	mov	r1, r9
 8014870:	4614      	mov	r4, r2
 8014872:	461d      	mov	r5, r3
 8014874:	f7eb fec0 	bl	80005f8 <__aeabi_dmul>
 8014878:	4602      	mov	r2, r0
 801487a:	460b      	mov	r3, r1
 801487c:	4630      	mov	r0, r6
 801487e:	4639      	mov	r1, r7
 8014880:	f7eb fd02 	bl	8000288 <__aeabi_dsub>
 8014884:	ec53 2b19 	vmov	r2, r3, d9
 8014888:	4606      	mov	r6, r0
 801488a:	460f      	mov	r7, r1
 801488c:	4620      	mov	r0, r4
 801488e:	4629      	mov	r1, r5
 8014890:	f7eb fcfa 	bl	8000288 <__aeabi_dsub>
 8014894:	4602      	mov	r2, r0
 8014896:	460b      	mov	r3, r1
 8014898:	4650      	mov	r0, sl
 801489a:	4659      	mov	r1, fp
 801489c:	f7eb fcf4 	bl	8000288 <__aeabi_dsub>
 80148a0:	4642      	mov	r2, r8
 80148a2:	464b      	mov	r3, r9
 80148a4:	f7eb fea8 	bl	80005f8 <__aeabi_dmul>
 80148a8:	4602      	mov	r2, r0
 80148aa:	460b      	mov	r3, r1
 80148ac:	4630      	mov	r0, r6
 80148ae:	4639      	mov	r1, r7
 80148b0:	f7eb fcea 	bl	8000288 <__aeabi_dsub>
 80148b4:	ec53 2b1a 	vmov	r2, r3, d10
 80148b8:	f7eb fe9e 	bl	80005f8 <__aeabi_dmul>
 80148bc:	ec53 2b18 	vmov	r2, r3, d8
 80148c0:	ec41 0b19 	vmov	d9, r0, r1
 80148c4:	ec51 0b18 	vmov	r0, r1, d8
 80148c8:	f7eb fe96 	bl	80005f8 <__aeabi_dmul>
 80148cc:	a37c      	add	r3, pc, #496	; (adr r3, 8014ac0 <__ieee754_pow+0x708>)
 80148ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d2:	4604      	mov	r4, r0
 80148d4:	460d      	mov	r5, r1
 80148d6:	f7eb fe8f 	bl	80005f8 <__aeabi_dmul>
 80148da:	a37b      	add	r3, pc, #492	; (adr r3, 8014ac8 <__ieee754_pow+0x710>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	f7eb fcd4 	bl	800028c <__adddf3>
 80148e4:	4622      	mov	r2, r4
 80148e6:	462b      	mov	r3, r5
 80148e8:	f7eb fe86 	bl	80005f8 <__aeabi_dmul>
 80148ec:	a378      	add	r3, pc, #480	; (adr r3, 8014ad0 <__ieee754_pow+0x718>)
 80148ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f2:	f7eb fccb 	bl	800028c <__adddf3>
 80148f6:	4622      	mov	r2, r4
 80148f8:	462b      	mov	r3, r5
 80148fa:	f7eb fe7d 	bl	80005f8 <__aeabi_dmul>
 80148fe:	a376      	add	r3, pc, #472	; (adr r3, 8014ad8 <__ieee754_pow+0x720>)
 8014900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014904:	f7eb fcc2 	bl	800028c <__adddf3>
 8014908:	4622      	mov	r2, r4
 801490a:	462b      	mov	r3, r5
 801490c:	f7eb fe74 	bl	80005f8 <__aeabi_dmul>
 8014910:	a373      	add	r3, pc, #460	; (adr r3, 8014ae0 <__ieee754_pow+0x728>)
 8014912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014916:	f7eb fcb9 	bl	800028c <__adddf3>
 801491a:	4622      	mov	r2, r4
 801491c:	462b      	mov	r3, r5
 801491e:	f7eb fe6b 	bl	80005f8 <__aeabi_dmul>
 8014922:	a371      	add	r3, pc, #452	; (adr r3, 8014ae8 <__ieee754_pow+0x730>)
 8014924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014928:	f7eb fcb0 	bl	800028c <__adddf3>
 801492c:	4622      	mov	r2, r4
 801492e:	4606      	mov	r6, r0
 8014930:	460f      	mov	r7, r1
 8014932:	462b      	mov	r3, r5
 8014934:	4620      	mov	r0, r4
 8014936:	4629      	mov	r1, r5
 8014938:	f7eb fe5e 	bl	80005f8 <__aeabi_dmul>
 801493c:	4602      	mov	r2, r0
 801493e:	460b      	mov	r3, r1
 8014940:	4630      	mov	r0, r6
 8014942:	4639      	mov	r1, r7
 8014944:	f7eb fe58 	bl	80005f8 <__aeabi_dmul>
 8014948:	4642      	mov	r2, r8
 801494a:	4604      	mov	r4, r0
 801494c:	460d      	mov	r5, r1
 801494e:	464b      	mov	r3, r9
 8014950:	ec51 0b18 	vmov	r0, r1, d8
 8014954:	f7eb fc9a 	bl	800028c <__adddf3>
 8014958:	ec53 2b19 	vmov	r2, r3, d9
 801495c:	f7eb fe4c 	bl	80005f8 <__aeabi_dmul>
 8014960:	4622      	mov	r2, r4
 8014962:	462b      	mov	r3, r5
 8014964:	f7eb fc92 	bl	800028c <__adddf3>
 8014968:	4642      	mov	r2, r8
 801496a:	4682      	mov	sl, r0
 801496c:	468b      	mov	fp, r1
 801496e:	464b      	mov	r3, r9
 8014970:	4640      	mov	r0, r8
 8014972:	4649      	mov	r1, r9
 8014974:	f7eb fe40 	bl	80005f8 <__aeabi_dmul>
 8014978:	4b6b      	ldr	r3, [pc, #428]	; (8014b28 <__ieee754_pow+0x770>)
 801497a:	2200      	movs	r2, #0
 801497c:	4606      	mov	r6, r0
 801497e:	460f      	mov	r7, r1
 8014980:	f7eb fc84 	bl	800028c <__adddf3>
 8014984:	4652      	mov	r2, sl
 8014986:	465b      	mov	r3, fp
 8014988:	f7eb fc80 	bl	800028c <__adddf3>
 801498c:	2000      	movs	r0, #0
 801498e:	4604      	mov	r4, r0
 8014990:	460d      	mov	r5, r1
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	4640      	mov	r0, r8
 8014998:	4649      	mov	r1, r9
 801499a:	f7eb fe2d 	bl	80005f8 <__aeabi_dmul>
 801499e:	4b62      	ldr	r3, [pc, #392]	; (8014b28 <__ieee754_pow+0x770>)
 80149a0:	4680      	mov	r8, r0
 80149a2:	4689      	mov	r9, r1
 80149a4:	2200      	movs	r2, #0
 80149a6:	4620      	mov	r0, r4
 80149a8:	4629      	mov	r1, r5
 80149aa:	f7eb fc6d 	bl	8000288 <__aeabi_dsub>
 80149ae:	4632      	mov	r2, r6
 80149b0:	463b      	mov	r3, r7
 80149b2:	f7eb fc69 	bl	8000288 <__aeabi_dsub>
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	4650      	mov	r0, sl
 80149bc:	4659      	mov	r1, fp
 80149be:	f7eb fc63 	bl	8000288 <__aeabi_dsub>
 80149c2:	ec53 2b18 	vmov	r2, r3, d8
 80149c6:	f7eb fe17 	bl	80005f8 <__aeabi_dmul>
 80149ca:	4622      	mov	r2, r4
 80149cc:	4606      	mov	r6, r0
 80149ce:	460f      	mov	r7, r1
 80149d0:	462b      	mov	r3, r5
 80149d2:	ec51 0b19 	vmov	r0, r1, d9
 80149d6:	f7eb fe0f 	bl	80005f8 <__aeabi_dmul>
 80149da:	4602      	mov	r2, r0
 80149dc:	460b      	mov	r3, r1
 80149de:	4630      	mov	r0, r6
 80149e0:	4639      	mov	r1, r7
 80149e2:	f7eb fc53 	bl	800028c <__adddf3>
 80149e6:	4606      	mov	r6, r0
 80149e8:	460f      	mov	r7, r1
 80149ea:	4602      	mov	r2, r0
 80149ec:	460b      	mov	r3, r1
 80149ee:	4640      	mov	r0, r8
 80149f0:	4649      	mov	r1, r9
 80149f2:	f7eb fc4b 	bl	800028c <__adddf3>
 80149f6:	a33e      	add	r3, pc, #248	; (adr r3, 8014af0 <__ieee754_pow+0x738>)
 80149f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fc:	2000      	movs	r0, #0
 80149fe:	4604      	mov	r4, r0
 8014a00:	460d      	mov	r5, r1
 8014a02:	f7eb fdf9 	bl	80005f8 <__aeabi_dmul>
 8014a06:	4642      	mov	r2, r8
 8014a08:	ec41 0b18 	vmov	d8, r0, r1
 8014a0c:	464b      	mov	r3, r9
 8014a0e:	4620      	mov	r0, r4
 8014a10:	4629      	mov	r1, r5
 8014a12:	f7eb fc39 	bl	8000288 <__aeabi_dsub>
 8014a16:	4602      	mov	r2, r0
 8014a18:	460b      	mov	r3, r1
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	4639      	mov	r1, r7
 8014a1e:	f7eb fc33 	bl	8000288 <__aeabi_dsub>
 8014a22:	a335      	add	r3, pc, #212	; (adr r3, 8014af8 <__ieee754_pow+0x740>)
 8014a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a28:	f7eb fde6 	bl	80005f8 <__aeabi_dmul>
 8014a2c:	a334      	add	r3, pc, #208	; (adr r3, 8014b00 <__ieee754_pow+0x748>)
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	4606      	mov	r6, r0
 8014a34:	460f      	mov	r7, r1
 8014a36:	4620      	mov	r0, r4
 8014a38:	4629      	mov	r1, r5
 8014a3a:	f7eb fddd 	bl	80005f8 <__aeabi_dmul>
 8014a3e:	4602      	mov	r2, r0
 8014a40:	460b      	mov	r3, r1
 8014a42:	4630      	mov	r0, r6
 8014a44:	4639      	mov	r1, r7
 8014a46:	f7eb fc21 	bl	800028c <__adddf3>
 8014a4a:	9a07      	ldr	r2, [sp, #28]
 8014a4c:	4b37      	ldr	r3, [pc, #220]	; (8014b2c <__ieee754_pow+0x774>)
 8014a4e:	4413      	add	r3, r2
 8014a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a54:	f7eb fc1a 	bl	800028c <__adddf3>
 8014a58:	4682      	mov	sl, r0
 8014a5a:	9805      	ldr	r0, [sp, #20]
 8014a5c:	468b      	mov	fp, r1
 8014a5e:	f7eb fd61 	bl	8000524 <__aeabi_i2d>
 8014a62:	9a07      	ldr	r2, [sp, #28]
 8014a64:	4b32      	ldr	r3, [pc, #200]	; (8014b30 <__ieee754_pow+0x778>)
 8014a66:	4413      	add	r3, r2
 8014a68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	460f      	mov	r7, r1
 8014a70:	4652      	mov	r2, sl
 8014a72:	465b      	mov	r3, fp
 8014a74:	ec51 0b18 	vmov	r0, r1, d8
 8014a78:	f7eb fc08 	bl	800028c <__adddf3>
 8014a7c:	4642      	mov	r2, r8
 8014a7e:	464b      	mov	r3, r9
 8014a80:	f7eb fc04 	bl	800028c <__adddf3>
 8014a84:	4632      	mov	r2, r6
 8014a86:	463b      	mov	r3, r7
 8014a88:	f7eb fc00 	bl	800028c <__adddf3>
 8014a8c:	2000      	movs	r0, #0
 8014a8e:	4632      	mov	r2, r6
 8014a90:	463b      	mov	r3, r7
 8014a92:	4604      	mov	r4, r0
 8014a94:	460d      	mov	r5, r1
 8014a96:	f7eb fbf7 	bl	8000288 <__aeabi_dsub>
 8014a9a:	4642      	mov	r2, r8
 8014a9c:	464b      	mov	r3, r9
 8014a9e:	f7eb fbf3 	bl	8000288 <__aeabi_dsub>
 8014aa2:	ec53 2b18 	vmov	r2, r3, d8
 8014aa6:	f7eb fbef 	bl	8000288 <__aeabi_dsub>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	460b      	mov	r3, r1
 8014aae:	4650      	mov	r0, sl
 8014ab0:	4659      	mov	r1, fp
 8014ab2:	e610      	b.n	80146d6 <__ieee754_pow+0x31e>
 8014ab4:	2401      	movs	r4, #1
 8014ab6:	e6a1      	b.n	80147fc <__ieee754_pow+0x444>
 8014ab8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8014b08 <__ieee754_pow+0x750>
 8014abc:	e617      	b.n	80146ee <__ieee754_pow+0x336>
 8014abe:	bf00      	nop
 8014ac0:	4a454eef 	.word	0x4a454eef
 8014ac4:	3fca7e28 	.word	0x3fca7e28
 8014ac8:	93c9db65 	.word	0x93c9db65
 8014acc:	3fcd864a 	.word	0x3fcd864a
 8014ad0:	a91d4101 	.word	0xa91d4101
 8014ad4:	3fd17460 	.word	0x3fd17460
 8014ad8:	518f264d 	.word	0x518f264d
 8014adc:	3fd55555 	.word	0x3fd55555
 8014ae0:	db6fabff 	.word	0xdb6fabff
 8014ae4:	3fdb6db6 	.word	0x3fdb6db6
 8014ae8:	33333303 	.word	0x33333303
 8014aec:	3fe33333 	.word	0x3fe33333
 8014af0:	e0000000 	.word	0xe0000000
 8014af4:	3feec709 	.word	0x3feec709
 8014af8:	dc3a03fd 	.word	0xdc3a03fd
 8014afc:	3feec709 	.word	0x3feec709
 8014b00:	145b01f5 	.word	0x145b01f5
 8014b04:	be3e2fe0 	.word	0xbe3e2fe0
 8014b08:	00000000 	.word	0x00000000
 8014b0c:	3ff00000 	.word	0x3ff00000
 8014b10:	7ff00000 	.word	0x7ff00000
 8014b14:	43400000 	.word	0x43400000
 8014b18:	0003988e 	.word	0x0003988e
 8014b1c:	000bb679 	.word	0x000bb679
 8014b20:	08015da0 	.word	0x08015da0
 8014b24:	3ff00000 	.word	0x3ff00000
 8014b28:	40080000 	.word	0x40080000
 8014b2c:	08015dc0 	.word	0x08015dc0
 8014b30:	08015db0 	.word	0x08015db0
 8014b34:	a3b3      	add	r3, pc, #716	; (adr r3, 8014e04 <__ieee754_pow+0xa4c>)
 8014b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	4649      	mov	r1, r9
 8014b3e:	f7eb fba5 	bl	800028c <__adddf3>
 8014b42:	4622      	mov	r2, r4
 8014b44:	ec41 0b1a 	vmov	d10, r0, r1
 8014b48:	462b      	mov	r3, r5
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	4639      	mov	r1, r7
 8014b4e:	f7eb fb9b 	bl	8000288 <__aeabi_dsub>
 8014b52:	4602      	mov	r2, r0
 8014b54:	460b      	mov	r3, r1
 8014b56:	ec51 0b1a 	vmov	r0, r1, d10
 8014b5a:	f7eb ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	f47f ae04 	bne.w	801476c <__ieee754_pow+0x3b4>
 8014b64:	4aa2      	ldr	r2, [pc, #648]	; (8014df0 <__ieee754_pow+0xa38>)
 8014b66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	f340 8107 	ble.w	8014d7e <__ieee754_pow+0x9c6>
 8014b70:	151b      	asrs	r3, r3, #20
 8014b72:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014b76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014b7a:	fa4a fa03 	asr.w	sl, sl, r3
 8014b7e:	44da      	add	sl, fp
 8014b80:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8014b84:	489b      	ldr	r0, [pc, #620]	; (8014df4 <__ieee754_pow+0xa3c>)
 8014b86:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014b8a:	4108      	asrs	r0, r1
 8014b8c:	ea00 030a 	and.w	r3, r0, sl
 8014b90:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8014b94:	f1c1 0114 	rsb	r1, r1, #20
 8014b98:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014b9c:	fa4a fa01 	asr.w	sl, sl, r1
 8014ba0:	f1bb 0f00 	cmp.w	fp, #0
 8014ba4:	f04f 0200 	mov.w	r2, #0
 8014ba8:	4620      	mov	r0, r4
 8014baa:	4629      	mov	r1, r5
 8014bac:	bfb8      	it	lt
 8014bae:	f1ca 0a00 	rsblt	sl, sl, #0
 8014bb2:	f7eb fb69 	bl	8000288 <__aeabi_dsub>
 8014bb6:	ec41 0b19 	vmov	d9, r0, r1
 8014bba:	4642      	mov	r2, r8
 8014bbc:	464b      	mov	r3, r9
 8014bbe:	ec51 0b19 	vmov	r0, r1, d9
 8014bc2:	f7eb fb63 	bl	800028c <__adddf3>
 8014bc6:	a37a      	add	r3, pc, #488	; (adr r3, 8014db0 <__ieee754_pow+0x9f8>)
 8014bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bcc:	2000      	movs	r0, #0
 8014bce:	4604      	mov	r4, r0
 8014bd0:	460d      	mov	r5, r1
 8014bd2:	f7eb fd11 	bl	80005f8 <__aeabi_dmul>
 8014bd6:	ec53 2b19 	vmov	r2, r3, d9
 8014bda:	4606      	mov	r6, r0
 8014bdc:	460f      	mov	r7, r1
 8014bde:	4620      	mov	r0, r4
 8014be0:	4629      	mov	r1, r5
 8014be2:	f7eb fb51 	bl	8000288 <__aeabi_dsub>
 8014be6:	4602      	mov	r2, r0
 8014be8:	460b      	mov	r3, r1
 8014bea:	4640      	mov	r0, r8
 8014bec:	4649      	mov	r1, r9
 8014bee:	f7eb fb4b 	bl	8000288 <__aeabi_dsub>
 8014bf2:	a371      	add	r3, pc, #452	; (adr r3, 8014db8 <__ieee754_pow+0xa00>)
 8014bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf8:	f7eb fcfe 	bl	80005f8 <__aeabi_dmul>
 8014bfc:	a370      	add	r3, pc, #448	; (adr r3, 8014dc0 <__ieee754_pow+0xa08>)
 8014bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c02:	4680      	mov	r8, r0
 8014c04:	4689      	mov	r9, r1
 8014c06:	4620      	mov	r0, r4
 8014c08:	4629      	mov	r1, r5
 8014c0a:	f7eb fcf5 	bl	80005f8 <__aeabi_dmul>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	460b      	mov	r3, r1
 8014c12:	4640      	mov	r0, r8
 8014c14:	4649      	mov	r1, r9
 8014c16:	f7eb fb39 	bl	800028c <__adddf3>
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	460d      	mov	r5, r1
 8014c1e:	4602      	mov	r2, r0
 8014c20:	460b      	mov	r3, r1
 8014c22:	4630      	mov	r0, r6
 8014c24:	4639      	mov	r1, r7
 8014c26:	f7eb fb31 	bl	800028c <__adddf3>
 8014c2a:	4632      	mov	r2, r6
 8014c2c:	463b      	mov	r3, r7
 8014c2e:	4680      	mov	r8, r0
 8014c30:	4689      	mov	r9, r1
 8014c32:	f7eb fb29 	bl	8000288 <__aeabi_dsub>
 8014c36:	4602      	mov	r2, r0
 8014c38:	460b      	mov	r3, r1
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	f7eb fb23 	bl	8000288 <__aeabi_dsub>
 8014c42:	4642      	mov	r2, r8
 8014c44:	4606      	mov	r6, r0
 8014c46:	460f      	mov	r7, r1
 8014c48:	464b      	mov	r3, r9
 8014c4a:	4640      	mov	r0, r8
 8014c4c:	4649      	mov	r1, r9
 8014c4e:	f7eb fcd3 	bl	80005f8 <__aeabi_dmul>
 8014c52:	a35d      	add	r3, pc, #372	; (adr r3, 8014dc8 <__ieee754_pow+0xa10>)
 8014c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c58:	4604      	mov	r4, r0
 8014c5a:	460d      	mov	r5, r1
 8014c5c:	f7eb fccc 	bl	80005f8 <__aeabi_dmul>
 8014c60:	a35b      	add	r3, pc, #364	; (adr r3, 8014dd0 <__ieee754_pow+0xa18>)
 8014c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c66:	f7eb fb0f 	bl	8000288 <__aeabi_dsub>
 8014c6a:	4622      	mov	r2, r4
 8014c6c:	462b      	mov	r3, r5
 8014c6e:	f7eb fcc3 	bl	80005f8 <__aeabi_dmul>
 8014c72:	a359      	add	r3, pc, #356	; (adr r3, 8014dd8 <__ieee754_pow+0xa20>)
 8014c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c78:	f7eb fb08 	bl	800028c <__adddf3>
 8014c7c:	4622      	mov	r2, r4
 8014c7e:	462b      	mov	r3, r5
 8014c80:	f7eb fcba 	bl	80005f8 <__aeabi_dmul>
 8014c84:	a356      	add	r3, pc, #344	; (adr r3, 8014de0 <__ieee754_pow+0xa28>)
 8014c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8a:	f7eb fafd 	bl	8000288 <__aeabi_dsub>
 8014c8e:	4622      	mov	r2, r4
 8014c90:	462b      	mov	r3, r5
 8014c92:	f7eb fcb1 	bl	80005f8 <__aeabi_dmul>
 8014c96:	a354      	add	r3, pc, #336	; (adr r3, 8014de8 <__ieee754_pow+0xa30>)
 8014c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9c:	f7eb faf6 	bl	800028c <__adddf3>
 8014ca0:	4622      	mov	r2, r4
 8014ca2:	462b      	mov	r3, r5
 8014ca4:	f7eb fca8 	bl	80005f8 <__aeabi_dmul>
 8014ca8:	4602      	mov	r2, r0
 8014caa:	460b      	mov	r3, r1
 8014cac:	4640      	mov	r0, r8
 8014cae:	4649      	mov	r1, r9
 8014cb0:	f7eb faea 	bl	8000288 <__aeabi_dsub>
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	460d      	mov	r5, r1
 8014cb8:	4602      	mov	r2, r0
 8014cba:	460b      	mov	r3, r1
 8014cbc:	4640      	mov	r0, r8
 8014cbe:	4649      	mov	r1, r9
 8014cc0:	f7eb fc9a 	bl	80005f8 <__aeabi_dmul>
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	ec41 0b19 	vmov	d9, r0, r1
 8014cca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014cce:	4620      	mov	r0, r4
 8014cd0:	4629      	mov	r1, r5
 8014cd2:	f7eb fad9 	bl	8000288 <__aeabi_dsub>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	460b      	mov	r3, r1
 8014cda:	ec51 0b19 	vmov	r0, r1, d9
 8014cde:	f7eb fdb5 	bl	800084c <__aeabi_ddiv>
 8014ce2:	4632      	mov	r2, r6
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	460d      	mov	r5, r1
 8014ce8:	463b      	mov	r3, r7
 8014cea:	4640      	mov	r0, r8
 8014cec:	4649      	mov	r1, r9
 8014cee:	f7eb fc83 	bl	80005f8 <__aeabi_dmul>
 8014cf2:	4632      	mov	r2, r6
 8014cf4:	463b      	mov	r3, r7
 8014cf6:	f7eb fac9 	bl	800028c <__adddf3>
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	460b      	mov	r3, r1
 8014cfe:	4620      	mov	r0, r4
 8014d00:	4629      	mov	r1, r5
 8014d02:	f7eb fac1 	bl	8000288 <__aeabi_dsub>
 8014d06:	4642      	mov	r2, r8
 8014d08:	464b      	mov	r3, r9
 8014d0a:	f7eb fabd 	bl	8000288 <__aeabi_dsub>
 8014d0e:	460b      	mov	r3, r1
 8014d10:	4602      	mov	r2, r0
 8014d12:	4939      	ldr	r1, [pc, #228]	; (8014df8 <__ieee754_pow+0xa40>)
 8014d14:	2000      	movs	r0, #0
 8014d16:	f7eb fab7 	bl	8000288 <__aeabi_dsub>
 8014d1a:	ec41 0b10 	vmov	d0, r0, r1
 8014d1e:	ee10 3a90 	vmov	r3, s1
 8014d22:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014d2a:	da2b      	bge.n	8014d84 <__ieee754_pow+0x9cc>
 8014d2c:	4650      	mov	r0, sl
 8014d2e:	f000 f877 	bl	8014e20 <scalbn>
 8014d32:	ec51 0b10 	vmov	r0, r1, d0
 8014d36:	ec53 2b18 	vmov	r2, r3, d8
 8014d3a:	f7ff bbee 	b.w	801451a <__ieee754_pow+0x162>
 8014d3e:	4b2f      	ldr	r3, [pc, #188]	; (8014dfc <__ieee754_pow+0xa44>)
 8014d40:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014d44:	429e      	cmp	r6, r3
 8014d46:	f77f af0d 	ble.w	8014b64 <__ieee754_pow+0x7ac>
 8014d4a:	4b2d      	ldr	r3, [pc, #180]	; (8014e00 <__ieee754_pow+0xa48>)
 8014d4c:	440b      	add	r3, r1
 8014d4e:	4303      	orrs	r3, r0
 8014d50:	d009      	beq.n	8014d66 <__ieee754_pow+0x9ae>
 8014d52:	ec51 0b18 	vmov	r0, r1, d8
 8014d56:	2200      	movs	r2, #0
 8014d58:	2300      	movs	r3, #0
 8014d5a:	f7eb febf 	bl	8000adc <__aeabi_dcmplt>
 8014d5e:	3800      	subs	r0, #0
 8014d60:	bf18      	it	ne
 8014d62:	2001      	movne	r0, #1
 8014d64:	e448      	b.n	80145f8 <__ieee754_pow+0x240>
 8014d66:	4622      	mov	r2, r4
 8014d68:	462b      	mov	r3, r5
 8014d6a:	f7eb fa8d 	bl	8000288 <__aeabi_dsub>
 8014d6e:	4642      	mov	r2, r8
 8014d70:	464b      	mov	r3, r9
 8014d72:	f7eb fec7 	bl	8000b04 <__aeabi_dcmpge>
 8014d76:	2800      	cmp	r0, #0
 8014d78:	f43f aef4 	beq.w	8014b64 <__ieee754_pow+0x7ac>
 8014d7c:	e7e9      	b.n	8014d52 <__ieee754_pow+0x99a>
 8014d7e:	f04f 0a00 	mov.w	sl, #0
 8014d82:	e71a      	b.n	8014bba <__ieee754_pow+0x802>
 8014d84:	ec51 0b10 	vmov	r0, r1, d0
 8014d88:	4619      	mov	r1, r3
 8014d8a:	e7d4      	b.n	8014d36 <__ieee754_pow+0x97e>
 8014d8c:	491a      	ldr	r1, [pc, #104]	; (8014df8 <__ieee754_pow+0xa40>)
 8014d8e:	2000      	movs	r0, #0
 8014d90:	f7ff bb31 	b.w	80143f6 <__ieee754_pow+0x3e>
 8014d94:	2000      	movs	r0, #0
 8014d96:	2100      	movs	r1, #0
 8014d98:	f7ff bb2d 	b.w	80143f6 <__ieee754_pow+0x3e>
 8014d9c:	4630      	mov	r0, r6
 8014d9e:	4639      	mov	r1, r7
 8014da0:	f7ff bb29 	b.w	80143f6 <__ieee754_pow+0x3e>
 8014da4:	9204      	str	r2, [sp, #16]
 8014da6:	f7ff bb7b 	b.w	80144a0 <__ieee754_pow+0xe8>
 8014daa:	2300      	movs	r3, #0
 8014dac:	f7ff bb65 	b.w	801447a <__ieee754_pow+0xc2>
 8014db0:	00000000 	.word	0x00000000
 8014db4:	3fe62e43 	.word	0x3fe62e43
 8014db8:	fefa39ef 	.word	0xfefa39ef
 8014dbc:	3fe62e42 	.word	0x3fe62e42
 8014dc0:	0ca86c39 	.word	0x0ca86c39
 8014dc4:	be205c61 	.word	0xbe205c61
 8014dc8:	72bea4d0 	.word	0x72bea4d0
 8014dcc:	3e663769 	.word	0x3e663769
 8014dd0:	c5d26bf1 	.word	0xc5d26bf1
 8014dd4:	3ebbbd41 	.word	0x3ebbbd41
 8014dd8:	af25de2c 	.word	0xaf25de2c
 8014ddc:	3f11566a 	.word	0x3f11566a
 8014de0:	16bebd93 	.word	0x16bebd93
 8014de4:	3f66c16c 	.word	0x3f66c16c
 8014de8:	5555553e 	.word	0x5555553e
 8014dec:	3fc55555 	.word	0x3fc55555
 8014df0:	3fe00000 	.word	0x3fe00000
 8014df4:	fff00000 	.word	0xfff00000
 8014df8:	3ff00000 	.word	0x3ff00000
 8014dfc:	4090cbff 	.word	0x4090cbff
 8014e00:	3f6f3400 	.word	0x3f6f3400
 8014e04:	652b82fe 	.word	0x652b82fe
 8014e08:	3c971547 	.word	0x3c971547

08014e0c <fabs>:
 8014e0c:	ec51 0b10 	vmov	r0, r1, d0
 8014e10:	ee10 2a10 	vmov	r2, s0
 8014e14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e18:	ec43 2b10 	vmov	d0, r2, r3
 8014e1c:	4770      	bx	lr
	...

08014e20 <scalbn>:
 8014e20:	b570      	push	{r4, r5, r6, lr}
 8014e22:	ec55 4b10 	vmov	r4, r5, d0
 8014e26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014e2a:	4606      	mov	r6, r0
 8014e2c:	462b      	mov	r3, r5
 8014e2e:	b999      	cbnz	r1, 8014e58 <scalbn+0x38>
 8014e30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014e34:	4323      	orrs	r3, r4
 8014e36:	d03f      	beq.n	8014eb8 <scalbn+0x98>
 8014e38:	4b35      	ldr	r3, [pc, #212]	; (8014f10 <scalbn+0xf0>)
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	ee10 0a10 	vmov	r0, s0
 8014e40:	2200      	movs	r2, #0
 8014e42:	f7eb fbd9 	bl	80005f8 <__aeabi_dmul>
 8014e46:	4b33      	ldr	r3, [pc, #204]	; (8014f14 <scalbn+0xf4>)
 8014e48:	429e      	cmp	r6, r3
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	460d      	mov	r5, r1
 8014e4e:	da10      	bge.n	8014e72 <scalbn+0x52>
 8014e50:	a327      	add	r3, pc, #156	; (adr r3, 8014ef0 <scalbn+0xd0>)
 8014e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e56:	e01f      	b.n	8014e98 <scalbn+0x78>
 8014e58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014e5c:	4291      	cmp	r1, r2
 8014e5e:	d10c      	bne.n	8014e7a <scalbn+0x5a>
 8014e60:	ee10 2a10 	vmov	r2, s0
 8014e64:	4620      	mov	r0, r4
 8014e66:	4629      	mov	r1, r5
 8014e68:	f7eb fa10 	bl	800028c <__adddf3>
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	460d      	mov	r5, r1
 8014e70:	e022      	b.n	8014eb8 <scalbn+0x98>
 8014e72:	460b      	mov	r3, r1
 8014e74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014e78:	3936      	subs	r1, #54	; 0x36
 8014e7a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8014e7e:	4296      	cmp	r6, r2
 8014e80:	dd0d      	ble.n	8014e9e <scalbn+0x7e>
 8014e82:	2d00      	cmp	r5, #0
 8014e84:	a11c      	add	r1, pc, #112	; (adr r1, 8014ef8 <scalbn+0xd8>)
 8014e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e8a:	da02      	bge.n	8014e92 <scalbn+0x72>
 8014e8c:	a11c      	add	r1, pc, #112	; (adr r1, 8014f00 <scalbn+0xe0>)
 8014e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e92:	a319      	add	r3, pc, #100	; (adr r3, 8014ef8 <scalbn+0xd8>)
 8014e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e98:	f7eb fbae 	bl	80005f8 <__aeabi_dmul>
 8014e9c:	e7e6      	b.n	8014e6c <scalbn+0x4c>
 8014e9e:	1872      	adds	r2, r6, r1
 8014ea0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014ea4:	428a      	cmp	r2, r1
 8014ea6:	dcec      	bgt.n	8014e82 <scalbn+0x62>
 8014ea8:	2a00      	cmp	r2, #0
 8014eaa:	dd08      	ble.n	8014ebe <scalbn+0x9e>
 8014eac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014eb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014eb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014eb8:	ec45 4b10 	vmov	d0, r4, r5
 8014ebc:	bd70      	pop	{r4, r5, r6, pc}
 8014ebe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014ec2:	da08      	bge.n	8014ed6 <scalbn+0xb6>
 8014ec4:	2d00      	cmp	r5, #0
 8014ec6:	a10a      	add	r1, pc, #40	; (adr r1, 8014ef0 <scalbn+0xd0>)
 8014ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ecc:	dac0      	bge.n	8014e50 <scalbn+0x30>
 8014ece:	a10e      	add	r1, pc, #56	; (adr r1, 8014f08 <scalbn+0xe8>)
 8014ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ed4:	e7bc      	b.n	8014e50 <scalbn+0x30>
 8014ed6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014eda:	3236      	adds	r2, #54	; 0x36
 8014edc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ee0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	4b0c      	ldr	r3, [pc, #48]	; (8014f18 <scalbn+0xf8>)
 8014ee8:	2200      	movs	r2, #0
 8014eea:	e7d5      	b.n	8014e98 <scalbn+0x78>
 8014eec:	f3af 8000 	nop.w
 8014ef0:	c2f8f359 	.word	0xc2f8f359
 8014ef4:	01a56e1f 	.word	0x01a56e1f
 8014ef8:	8800759c 	.word	0x8800759c
 8014efc:	7e37e43c 	.word	0x7e37e43c
 8014f00:	8800759c 	.word	0x8800759c
 8014f04:	fe37e43c 	.word	0xfe37e43c
 8014f08:	c2f8f359 	.word	0xc2f8f359
 8014f0c:	81a56e1f 	.word	0x81a56e1f
 8014f10:	43500000 	.word	0x43500000
 8014f14:	ffff3cb0 	.word	0xffff3cb0
 8014f18:	3c900000 	.word	0x3c900000

08014f1c <with_errno>:
 8014f1c:	b570      	push	{r4, r5, r6, lr}
 8014f1e:	4604      	mov	r4, r0
 8014f20:	460d      	mov	r5, r1
 8014f22:	4616      	mov	r6, r2
 8014f24:	f7fc fd5e 	bl	80119e4 <__errno>
 8014f28:	4629      	mov	r1, r5
 8014f2a:	6006      	str	r6, [r0, #0]
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}

08014f30 <xflow>:
 8014f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f32:	4614      	mov	r4, r2
 8014f34:	461d      	mov	r5, r3
 8014f36:	b108      	cbz	r0, 8014f3c <xflow+0xc>
 8014f38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014f3c:	e9cd 2300 	strd	r2, r3, [sp]
 8014f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f44:	4620      	mov	r0, r4
 8014f46:	4629      	mov	r1, r5
 8014f48:	f7eb fb56 	bl	80005f8 <__aeabi_dmul>
 8014f4c:	2222      	movs	r2, #34	; 0x22
 8014f4e:	b003      	add	sp, #12
 8014f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f54:	f7ff bfe2 	b.w	8014f1c <with_errno>

08014f58 <__math_uflow>:
 8014f58:	b508      	push	{r3, lr}
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014f60:	f7ff ffe6 	bl	8014f30 <xflow>
 8014f64:	ec41 0b10 	vmov	d0, r0, r1
 8014f68:	bd08      	pop	{r3, pc}

08014f6a <__math_oflow>:
 8014f6a:	b508      	push	{r3, lr}
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014f72:	f7ff ffdd 	bl	8014f30 <xflow>
 8014f76:	ec41 0b10 	vmov	d0, r0, r1
 8014f7a:	bd08      	pop	{r3, pc}

08014f7c <__ieee754_sqrt>:
 8014f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f80:	ec55 4b10 	vmov	r4, r5, d0
 8014f84:	4e67      	ldr	r6, [pc, #412]	; (8015124 <__ieee754_sqrt+0x1a8>)
 8014f86:	43ae      	bics	r6, r5
 8014f88:	ee10 0a10 	vmov	r0, s0
 8014f8c:	ee10 2a10 	vmov	r2, s0
 8014f90:	4629      	mov	r1, r5
 8014f92:	462b      	mov	r3, r5
 8014f94:	d10d      	bne.n	8014fb2 <__ieee754_sqrt+0x36>
 8014f96:	f7eb fb2f 	bl	80005f8 <__aeabi_dmul>
 8014f9a:	4602      	mov	r2, r0
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	4620      	mov	r0, r4
 8014fa0:	4629      	mov	r1, r5
 8014fa2:	f7eb f973 	bl	800028c <__adddf3>
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	460d      	mov	r5, r1
 8014faa:	ec45 4b10 	vmov	d0, r4, r5
 8014fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb2:	2d00      	cmp	r5, #0
 8014fb4:	dc0b      	bgt.n	8014fce <__ieee754_sqrt+0x52>
 8014fb6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014fba:	4326      	orrs	r6, r4
 8014fbc:	d0f5      	beq.n	8014faa <__ieee754_sqrt+0x2e>
 8014fbe:	b135      	cbz	r5, 8014fce <__ieee754_sqrt+0x52>
 8014fc0:	f7eb f962 	bl	8000288 <__aeabi_dsub>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	460b      	mov	r3, r1
 8014fc8:	f7eb fc40 	bl	800084c <__aeabi_ddiv>
 8014fcc:	e7eb      	b.n	8014fa6 <__ieee754_sqrt+0x2a>
 8014fce:	1509      	asrs	r1, r1, #20
 8014fd0:	f000 808d 	beq.w	80150ee <__ieee754_sqrt+0x172>
 8014fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014fd8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014fe0:	07c9      	lsls	r1, r1, #31
 8014fe2:	bf5c      	itt	pl
 8014fe4:	005b      	lslpl	r3, r3, #1
 8014fe6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014fea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014fee:	bf58      	it	pl
 8014ff0:	0052      	lslpl	r2, r2, #1
 8014ff2:	2500      	movs	r5, #0
 8014ff4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014ff8:	1076      	asrs	r6, r6, #1
 8014ffa:	0052      	lsls	r2, r2, #1
 8014ffc:	f04f 0e16 	mov.w	lr, #22
 8015000:	46ac      	mov	ip, r5
 8015002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015006:	eb0c 0001 	add.w	r0, ip, r1
 801500a:	4298      	cmp	r0, r3
 801500c:	bfde      	ittt	le
 801500e:	1a1b      	suble	r3, r3, r0
 8015010:	eb00 0c01 	addle.w	ip, r0, r1
 8015014:	186d      	addle	r5, r5, r1
 8015016:	005b      	lsls	r3, r3, #1
 8015018:	f1be 0e01 	subs.w	lr, lr, #1
 801501c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8015020:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015024:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015028:	d1ed      	bne.n	8015006 <__ieee754_sqrt+0x8a>
 801502a:	4674      	mov	r4, lr
 801502c:	2720      	movs	r7, #32
 801502e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015032:	4563      	cmp	r3, ip
 8015034:	eb01 000e 	add.w	r0, r1, lr
 8015038:	dc02      	bgt.n	8015040 <__ieee754_sqrt+0xc4>
 801503a:	d113      	bne.n	8015064 <__ieee754_sqrt+0xe8>
 801503c:	4290      	cmp	r0, r2
 801503e:	d811      	bhi.n	8015064 <__ieee754_sqrt+0xe8>
 8015040:	2800      	cmp	r0, #0
 8015042:	eb00 0e01 	add.w	lr, r0, r1
 8015046:	da57      	bge.n	80150f8 <__ieee754_sqrt+0x17c>
 8015048:	f1be 0f00 	cmp.w	lr, #0
 801504c:	db54      	blt.n	80150f8 <__ieee754_sqrt+0x17c>
 801504e:	f10c 0801 	add.w	r8, ip, #1
 8015052:	eba3 030c 	sub.w	r3, r3, ip
 8015056:	4290      	cmp	r0, r2
 8015058:	bf88      	it	hi
 801505a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801505e:	1a12      	subs	r2, r2, r0
 8015060:	440c      	add	r4, r1
 8015062:	46c4      	mov	ip, r8
 8015064:	005b      	lsls	r3, r3, #1
 8015066:	3f01      	subs	r7, #1
 8015068:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801506c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015070:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8015074:	d1dd      	bne.n	8015032 <__ieee754_sqrt+0xb6>
 8015076:	4313      	orrs	r3, r2
 8015078:	d01b      	beq.n	80150b2 <__ieee754_sqrt+0x136>
 801507a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8015128 <__ieee754_sqrt+0x1ac>
 801507e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801512c <__ieee754_sqrt+0x1b0>
 8015082:	e9da 0100 	ldrd	r0, r1, [sl]
 8015086:	e9db 2300 	ldrd	r2, r3, [fp]
 801508a:	f7eb f8fd 	bl	8000288 <__aeabi_dsub>
 801508e:	e9da 8900 	ldrd	r8, r9, [sl]
 8015092:	4602      	mov	r2, r0
 8015094:	460b      	mov	r3, r1
 8015096:	4640      	mov	r0, r8
 8015098:	4649      	mov	r1, r9
 801509a:	f7eb fd29 	bl	8000af0 <__aeabi_dcmple>
 801509e:	b140      	cbz	r0, 80150b2 <__ieee754_sqrt+0x136>
 80150a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80150a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80150a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80150ac:	d126      	bne.n	80150fc <__ieee754_sqrt+0x180>
 80150ae:	3501      	adds	r5, #1
 80150b0:	463c      	mov	r4, r7
 80150b2:	106a      	asrs	r2, r5, #1
 80150b4:	0863      	lsrs	r3, r4, #1
 80150b6:	07e9      	lsls	r1, r5, #31
 80150b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80150bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80150c0:	bf48      	it	mi
 80150c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80150c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80150ca:	461c      	mov	r4, r3
 80150cc:	e76d      	b.n	8014faa <__ieee754_sqrt+0x2e>
 80150ce:	0ad3      	lsrs	r3, r2, #11
 80150d0:	3815      	subs	r0, #21
 80150d2:	0552      	lsls	r2, r2, #21
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d0fa      	beq.n	80150ce <__ieee754_sqrt+0x152>
 80150d8:	02dc      	lsls	r4, r3, #11
 80150da:	d50a      	bpl.n	80150f2 <__ieee754_sqrt+0x176>
 80150dc:	f1c1 0420 	rsb	r4, r1, #32
 80150e0:	fa22 f404 	lsr.w	r4, r2, r4
 80150e4:	1e4d      	subs	r5, r1, #1
 80150e6:	408a      	lsls	r2, r1
 80150e8:	4323      	orrs	r3, r4
 80150ea:	1b41      	subs	r1, r0, r5
 80150ec:	e772      	b.n	8014fd4 <__ieee754_sqrt+0x58>
 80150ee:	4608      	mov	r0, r1
 80150f0:	e7f0      	b.n	80150d4 <__ieee754_sqrt+0x158>
 80150f2:	005b      	lsls	r3, r3, #1
 80150f4:	3101      	adds	r1, #1
 80150f6:	e7ef      	b.n	80150d8 <__ieee754_sqrt+0x15c>
 80150f8:	46e0      	mov	r8, ip
 80150fa:	e7aa      	b.n	8015052 <__ieee754_sqrt+0xd6>
 80150fc:	f7eb f8c6 	bl	800028c <__adddf3>
 8015100:	e9da 8900 	ldrd	r8, r9, [sl]
 8015104:	4602      	mov	r2, r0
 8015106:	460b      	mov	r3, r1
 8015108:	4640      	mov	r0, r8
 801510a:	4649      	mov	r1, r9
 801510c:	f7eb fce6 	bl	8000adc <__aeabi_dcmplt>
 8015110:	b120      	cbz	r0, 801511c <__ieee754_sqrt+0x1a0>
 8015112:	1ca0      	adds	r0, r4, #2
 8015114:	bf08      	it	eq
 8015116:	3501      	addeq	r5, #1
 8015118:	3402      	adds	r4, #2
 801511a:	e7ca      	b.n	80150b2 <__ieee754_sqrt+0x136>
 801511c:	3401      	adds	r4, #1
 801511e:	f024 0401 	bic.w	r4, r4, #1
 8015122:	e7c6      	b.n	80150b2 <__ieee754_sqrt+0x136>
 8015124:	7ff00000 	.word	0x7ff00000
 8015128:	200001f8 	.word	0x200001f8
 801512c:	20000200 	.word	0x20000200

08015130 <_init>:
 8015130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015132:	bf00      	nop
 8015134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015136:	bc08      	pop	{r3}
 8015138:	469e      	mov	lr, r3
 801513a:	4770      	bx	lr

0801513c <_fini>:
 801513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801513e:	bf00      	nop
 8015140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015142:	bc08      	pop	{r3}
 8015144:	469e      	mov	lr, r3
 8015146:	4770      	bx	lr
