
rocket_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800c3f8  0800c3f8  0001c3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca44  0800ca44  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca44  0800ca44  0001ca44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca4c  0800ca4c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca50  0800ca50  0001ca50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ca54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000470  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20000660  20000660  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012dc2  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003576  00000000  00000000  00033025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c0  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7c  00000000  00000000  00037760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a2d  00000000  00000000  000384dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016515  00000000  00000000  0005cf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf145  00000000  00000000  0007341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b44  00000000  00000000  00142564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001480a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c3e0 	.word	0x0800c3e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800c3e0 	.word	0x0800c3e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_7

SPI_HandleTypeDef *hspi;
void CS_Select (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <CS_Select+0x14>)
 8000f8e:	f003 f87d 	bl	800408c <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020400 	.word	0x40020400

08000f9c <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <CS_UnSelect+0x14>)
 8000fa6:	f003 f871 	bl	800408c <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <CE_Enable>:


void CE_Enable (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <CE_Enable+0x14>)
 8000fbe:	f003 f865 	bl	800408c <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400

08000fcc <CE_Disable>:

void CE_Disable (void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <CE_Disable+0x14>)
 8000fd6:	f003 f859 	bl	800408c <HAL_GPIO_WritePin>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001002:	f7ff ffbf 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <nrf24_WriteReg+0x40>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f107 010c 	add.w	r1, r7, #12
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	2202      	movs	r2, #2
 8001014:	f006 fb4f 	bl	80076b6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001018:	f7ff ffc0 	bl	8000f9c <CS_UnSelect>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	2000020c 	.word	0x2000020c

08001028 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	b2db      	uxtb	r3, r3
 800103e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001040:	f7ff ffa0 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <nrf24_WriteRegMulti+0x4c>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 0114 	add.w	r1, r7, #20
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	2201      	movs	r2, #1
 8001050:	f006 fb31 	bl	80076b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <nrf24_WriteRegMulti+0x4c>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b29a      	uxth	r2, r3
 800105c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	f006 fb28 	bl	80076b6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001066:	f7ff ff99 	bl	8000f9c <CS_UnSelect>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000020c 	.word	0x2000020c

08001078 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001086:	f7ff ff7d 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <nrf24_ReadReg+0x40>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	2364      	movs	r3, #100	; 0x64
 8001092:	2201      	movs	r2, #1
 8001094:	f006 fb0f 	bl	80076b6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <nrf24_ReadReg+0x40>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f107 010f 	add.w	r1, r7, #15
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	2201      	movs	r2, #1
 80010a4:	f006 fc60 	bl	8007968 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010a8:	f7ff ff78 	bl	8000f9c <CS_UnSelect>

	return data;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000020c 	.word	0x2000020c

080010bc <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010c6:	f7ff ff5d 	bl	8000f84 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <nrfsendCmd+0x28>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	1df9      	adds	r1, r7, #7
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	2201      	movs	r2, #1
 80010d4:	f006 faef 	bl	80076b6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010d8:	f7ff ff60 	bl	8000f9c <CS_UnSelect>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000020c 	.word	0x2000020c

080010e8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d104      	bne.n	8001102 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80010f8:	2100      	movs	r1, #0
 80010fa:	2007      	movs	r0, #7
 80010fc:	f7ff ff72 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001100:	e090      	b.n	8001224 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b17      	cmp	r3, #23
 8001106:	d104      	bne.n	8001112 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001108:	2111      	movs	r1, #17
 800110a:	2017      	movs	r0, #23
 800110c:	f7ff ff6a 	bl	8000fe4 <nrf24_WriteReg>
}
 8001110:	e088      	b.n	8001224 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001112:	2108      	movs	r1, #8
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff65 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800111a:	213f      	movs	r1, #63	; 0x3f
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ff61 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001122:	2103      	movs	r1, #3
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff ff5d 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800112a:	2103      	movs	r1, #3
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff ff59 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x00);
 8001132:	2100      	movs	r1, #0
 8001134:	2004      	movs	r0, #4
 8001136:	f7ff ff55 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800113a:	2102      	movs	r1, #2
 800113c:	2005      	movs	r0, #5
 800113e:	f7ff ff51 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001142:	210e      	movs	r1, #14
 8001144:	2006      	movs	r0, #6
 8001146:	f7ff ff4d 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800114a:	2100      	movs	r1, #0
 800114c:	2007      	movs	r0, #7
 800114e:	f7ff ff49 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001152:	2100      	movs	r1, #0
 8001154:	2008      	movs	r0, #8
 8001156:	f7ff ff45 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800115a:	2100      	movs	r1, #0
 800115c:	2009      	movs	r0, #9
 800115e:	f7ff ff41 	bl	8000fe4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <nrf24_reset+0x144>)
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	2205      	movs	r2, #5
 8001178:	4619      	mov	r1, r3
 800117a:	200a      	movs	r0, #10
 800117c:	f7ff ff54 	bl	8001028 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001180:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <nrf24_reset+0x148>)
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118a:	6018      	str	r0, [r3, #0]
 800118c:	3304      	adds	r3, #4
 800118e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2205      	movs	r2, #5
 8001196:	4619      	mov	r1, r3
 8001198:	200b      	movs	r0, #11
 800119a:	f7ff ff45 	bl	8001028 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800119e:	21c3      	movs	r1, #195	; 0xc3
 80011a0:	200c      	movs	r0, #12
 80011a2:	f7ff ff1f 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80011a6:	21c4      	movs	r1, #196	; 0xc4
 80011a8:	200d      	movs	r0, #13
 80011aa:	f7ff ff1b 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80011ae:	21c5      	movs	r1, #197	; 0xc5
 80011b0:	200e      	movs	r0, #14
 80011b2:	f7ff ff17 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80011b6:	21c6      	movs	r1, #198	; 0xc6
 80011b8:	200f      	movs	r0, #15
 80011ba:	f7ff ff13 	bl	8000fe4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <nrf24_reset+0x144>)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	2205      	movs	r2, #5
 80011d4:	4619      	mov	r1, r3
 80011d6:	2010      	movs	r0, #16
 80011d8:	f7ff ff26 	bl	8001028 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2011      	movs	r0, #17
 80011e0:	f7ff ff00 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2012      	movs	r0, #18
 80011e8:	f7ff fefc 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2013      	movs	r0, #19
 80011f0:	f7ff fef8 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2014      	movs	r0, #20
 80011f8:	f7ff fef4 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2015      	movs	r0, #21
 8001200:	f7ff fef0 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2016      	movs	r0, #22
 8001208:	f7ff feec 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800120c:	2111      	movs	r1, #17
 800120e:	2017      	movs	r0, #23
 8001210:	f7ff fee8 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001214:	2100      	movs	r1, #0
 8001216:	201c      	movs	r0, #28
 8001218:	f7ff fee4 	bl	8000fe4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	201d      	movs	r0, #29
 8001220:	f7ff fee0 	bl	8000fe4 <nrf24_WriteReg>
}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	0800c3f8 	.word	0x0800c3f8
 8001230:	0800c400 	.word	0x0800c400

08001234 <NRF24_Init>:




void NRF24_Init (SPI_HandleTypeDef *spi)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	NRF24_SPI = spi;
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <NRF24_Init+0x68>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
	HAL_SPI_Abort(NRF24_SPI);
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <NRF24_Init+0x68>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f006 fe56 	bl	8007ef8 <HAL_SPI_Abort>
	// disable the chip before configuring the device
	CE_Disable();
 800124c:	f7ff febe 	bl	8000fcc <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001256:	2100      	movs	r1, #0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fec3 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800125e:	2100      	movs	r1, #0
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff febf 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001266:	2100      	movs	r1, #0
 8001268:	2002      	movs	r0, #2
 800126a:	f7ff febb 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800126e:	2103      	movs	r1, #3
 8001270:	2003      	movs	r0, #3
 8001272:	f7ff feb7 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001276:	2100      	movs	r1, #0
 8001278:	2004      	movs	r0, #4
 800127a:	f7ff feb3 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800127e:	2100      	movs	r1, #0
 8001280:	2005      	movs	r0, #5
 8001282:	f7ff feaf 	bl	8000fe4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0C);   // Power= 0db, data rate = 2Mbps
 8001286:	210c      	movs	r1, #12
 8001288:	2006      	movs	r0, #6
 800128a:	f7ff feab 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800128e:	f7ff fe91 	bl	8000fb4 <CE_Enable>

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000020c 	.word	0x2000020c

080012a0 <NRF24_TxRxMode>:
	// Enable the chip after configuring the device
	CE_Enable();
}

void NRF24_TxRxMode (uint8_t *TxAddress, uint8_t *RxAddress, uint8_t channel)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	4613      	mov	r3, r2
 80012ac:	71fb      	strb	r3, [r7, #7]
	// disable the chip before configuring the device
	CE_Disable();
 80012ae:	f7ff fe8d 	bl	8000fcc <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4619      	mov	r1, r3
 80012b6:	2005      	movs	r0, #5
 80012b8:	f7ff fe94 	bl	8000fe4 <nrf24_WriteReg>

	//TX Setup
	nrf24_WriteRegMulti(TX_ADDR, TxAddress, 5);  // Write the TX address
 80012bc:	2205      	movs	r2, #5
 80012be:	68f9      	ldr	r1, [r7, #12]
 80012c0:	2010      	movs	r0, #16
 80012c2:	f7ff feb1 	bl	8001028 <nrf24_WriteRegMulti>

	nrf24_WriteReg (SETUP_RETR, 0x33);
 80012c6:	2133      	movs	r1, #51	; 0x33
 80012c8:	2004      	movs	r0, #4
 80012ca:	f7ff fe8b 	bl	8000fe4 <nrf24_WriteReg>

	//RX Setup
	uint8_t en_rxaddr = 0x3F;
 80012ce:	233f      	movs	r3, #63	; 0x3f
 80012d0:	75fb      	strb	r3, [r7, #23]
		//en_rxaddr = en_rxaddr | (1<<1);
		nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	4619      	mov	r1, r3
 80012d6:	2002      	movs	r0, #2
 80012d8:	f7ff fe84 	bl	8000fe4 <nrf24_WriteReg>
		 * Pipe 1 ADDR = 0xAABBCCDD11
		 * Pipe 2 ADDR = 0xAABBCCDD22
		 * Pipe 3 ADDR = 0xAABBCCDD33
		 *
		 */
		nrf24_WriteRegMulti(RX_ADDR_P1, RxAddress, 5);  // Write the Pipe1 address
 80012dc:	2205      	movs	r2, #5
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	200b      	movs	r0, #11
 80012e2:	f7ff fea1 	bl	8001028 <nrf24_WriteRegMulti>
		//nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address

		nrf24_WriteReg (RX_PW_P0, 32);   // 32 bit payload size for pipe 2
 80012e6:	2120      	movs	r1, #32
 80012e8:	2011      	movs	r0, #17
 80012ea:	f7ff fe7b 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P1, 32);
 80012ee:	2120      	movs	r1, #32
 80012f0:	2012      	movs	r0, #18
 80012f2:	f7ff fe77 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P2, 32);
 80012f6:	2120      	movs	r1, #32
 80012f8:	2013      	movs	r0, #19
 80012fa:	f7ff fe73 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P3, 32);
 80012fe:	2120      	movs	r1, #32
 8001300:	2014      	movs	r0, #20
 8001302:	f7ff fe6f 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P4, 32);
 8001306:	2120      	movs	r1, #32
 8001308:	2015      	movs	r0, #21
 800130a:	f7ff fe6b 	bl	8000fe4 <nrf24_WriteReg>
		nrf24_WriteReg (RX_PW_P5, 32);
 800130e:	2120      	movs	r1, #32
 8001310:	2016      	movs	r0, #22
 8001312:	f7ff fe67 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001316:	f7ff fe4d 	bl	8000fb4 <CE_Enable>
	flush_tx_fifo();
 800131a:	f000 f899 	bl	8001450 <flush_tx_fifo>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <NRF24_TxMode>:

void NRF24_TxMode (void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 800132c:	f7ff fe4e 	bl	8000fcc <CE_Disable>

	// power up the device
	uint8_t config = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<3);   // write 1 in EN_CRC to enable CRC
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<2);   // write 1 in CRCO to set encoding scheme CRC to 2 bytes
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	71fb      	strb	r3, [r7, #7]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4619      	mov	r1, r3
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fe47 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001356:	f7ff fe2d 	bl	8000fb4 <CE_Enable>
	flush_tx_fifo();
 800135a:	f000 f879 	bl	8001450 <flush_tx_fifo>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <NRF24_RxMode>:

void NRF24_RxMode (void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 800136c:	f7ff fe2e 	bl	8000fcc <CE_Disable>

	// power up the device in Rx mode
	uint8_t config = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<1) | (1<<0);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f043 0303 	orr.w	r3, r3, #3
 800137a:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<3);   // write 1 in EN_CRC to enable CRC
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	71fb      	strb	r3, [r7, #7]
	config = config | (1<<2);   // write 1 in CRCO to set encoding scheme CRC to 2 bytes
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	71fb      	strb	r3, [r7, #7]
	nrf24_WriteReg (CONFIG, config);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4619      	mov	r1, r3
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fe27 	bl	8000fe4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001396:	f7ff fe0d 	bl	8000fb4 <CE_Enable>
	flush_rx_fifo();
 800139a:	f000 f869 	bl	8001470 <flush_rx_fifo>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <NRF24_Transmit>:

// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(NRF24_SPI);
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <NRF24_Transmit+0xa4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f006 fd9f 	bl	8007ef8 <HAL_SPI_Abort>
	uint8_t cmdtosend = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	737b      	strb	r3, [r7, #13]
	// select the device
	CS_Select();
 80013be:	f7ff fde1 	bl	8000f84 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <NRF24_Transmit+0xa4>)
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	f107 010d 	add.w	r1, r7, #13
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	2201      	movs	r2, #1
 80013d2:	f006 f970 	bl	80076b6 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <NRF24_Transmit+0xa4>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	2220      	movs	r2, #32
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	f006 f968 	bl	80076b6 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80013e6:	f7ff fdd9 	bl	8000f9c <CS_UnSelect>

	HAL_Delay(1);
 80013ea:	2001      	movs	r0, #1
 80013ec:	f001 ff56 	bl	800329c <HAL_Delay>

	uint8_t status = nrf24_ReadReg(STATUS);
 80013f0:	2007      	movs	r0, #7
 80013f2:	f7ff fe41 	bl	8001078 <nrf24_ReadReg>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
		if (status & (1 << 4)) {
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00a      	beq.n	800141a <NRF24_Transmit+0x72>
			status = (status | (1 << 4)); // Actually not needed because this bit is already set, but reset is done by writing 1
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	73fb      	strb	r3, [r7, #15]
			nrf24_WriteReg(STATUS, status);
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	4619      	mov	r1, r3
 8001410:	2007      	movs	r0, #7
 8001412:	f7ff fde7 	bl	8000fe4 <nrf24_WriteReg>
			flush_tx_fifo();
 8001416:	f000 f81b 	bl	8001450 <flush_tx_fifo>
		}

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 800141a:	2017      	movs	r0, #23
 800141c:	f7ff fe2c 	bl	8001078 <nrf24_ReadReg>
 8001420:	4603      	mov	r3, r0
 8001422:	73bb      	strb	r3, [r7, #14]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <NRF24_Transmit+0x98>
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d103      	bne.n	8001440 <NRF24_Transmit+0x98>
	{
		flush_tx_fifo();
 8001438:	f000 f80a 	bl	8001450 <flush_tx_fifo>
		return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <NRF24_Transmit+0x9a>
	}

	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000020c 	.word	0x2000020c

08001450 <flush_tx_fifo>:

void flush_tx_fifo() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	uint8_t cmdtosend = FLUSH_TX;
 8001456:	23e1      	movs	r3, #225	; 0xe1
 8001458:	71fb      	strb	r3, [r7, #7]
	nrfsendCmd(cmdtosend);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe2d 	bl	80010bc <nrfsendCmd>
	// reset FIFO_STATUS
	nrf24_reset (FIFO_STATUS);
 8001462:	2017      	movs	r0, #23
 8001464:	f7ff fe40 	bl	80010e8 <nrf24_reset>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <flush_rx_fifo>:

void flush_rx_fifo() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	uint8_t cmdtosend = FLUSH_RX;
 8001476:	23e2      	movs	r3, #226	; 0xe2
 8001478:	71fb      	strb	r3, [r7, #7]
	nrfsendCmd(cmdtosend);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe1d 	bl	80010bc <nrfsendCmd>
	// reset FIFO_STATUS
	nrf24_reset (FIFO_STATUS);
 8001482:	2017      	movs	r0, #23
 8001484:	f7ff fe30 	bl	80010e8 <nrf24_reset>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <isDataAvailable>:
	nrfsendCmd(cmdtosend);
}


uint8_t isDataAvailable ()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
	HAL_SPI_Abort(NRF24_SPI);
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <isDataAvailable+0x50>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f006 fd2c 	bl	8007ef8 <HAL_SPI_Abort>
	uint8_t fifo = nrf24_ReadReg(FIFO_STATUS);
 80014a0:	2017      	movs	r0, #23
 80014a2:	f7ff fde9 	bl	8001078 <nrf24_ReadReg>
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 80014aa:	2007      	movs	r0, #7
 80014ac:	f7ff fde4 	bl	8001078 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	71bb      	strb	r3, [r7, #6]
	uint8_t config = nrf24_ReadReg(CONFIG);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fddf 	bl	8001078 <nrf24_ReadReg>
 80014ba:	4603      	mov	r3, r0
 80014bc:	717b      	strb	r3, [r7, #5]

	if ((status&(1<<6)))
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <isDataAvailable+0x44>
	{
		nrf24_WriteReg(STATUS, (1<<6)); // Clear receive fifo bit
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	2007      	movs	r0, #7
 80014cc:	f7ff fd8a 	bl	8000fe4 <nrf24_WriteReg>
		return 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <isDataAvailable+0x46>
	}

	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000020c 	.word	0x2000020c

080014e4 <NRF24_Receive>:

void NRF24_Receive (uint8_t *data)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(NRF24_SPI);
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <NRF24_Receive+0x5c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f006 fd01 	bl	8007ef8 <HAL_SPI_Abort>
	uint8_t cmdtosend = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80014fa:	f7ff fd43 	bl	8000f84 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80014fe:	2361      	movs	r3, #97	; 0x61
 8001500:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <NRF24_Receive+0x5c>)
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	f107 010f 	add.w	r1, r7, #15
 800150a:	2364      	movs	r3, #100	; 0x64
 800150c:	2201      	movs	r2, #1
 800150e:	f006 f8d2 	bl	80076b6 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <NRF24_Receive+0x5c>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	2220      	movs	r2, #32
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	f006 fa23 	bl	8007968 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8001522:	f7ff fd3b 	bl	8000f9c <CS_UnSelect>

	HAL_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f001 feb8 	bl	800329c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800152c:	23e2      	movs	r3, #226	; 0xe2
 800152e:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fdc2 	bl	80010bc <nrfsendCmd>
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000020c 	.word	0x2000020c

08001544 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4619      	mov	r1, r3
 8001552:	2007      	movs	r0, #7
 8001554:	f000 fae2 	bl	8001b1c <bno055_writeData>
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4619      	mov	r1, r3
 800156e:	203d      	movs	r0, #61	; 0x3d
 8001570:	f000 fad4 	bl	8001b1c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d103      	bne.n	8001582 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800157a:	2013      	movs	r0, #19
 800157c:	f000 fac2 	bl	8001b04 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001580:	e002      	b.n	8001588 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001582:	2007      	movs	r0, #7
 8001584:	f000 fabe 	bl	8001b04 <bno055_delay>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ffe3 	bl	8001560 <bno055_setOperationMode>
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}

0800159e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80015a2:	200c      	movs	r0, #12
 80015a4:	f7ff ffdc 	bl	8001560 <bno055_setOperationMode>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80015b0:	2120      	movs	r1, #32
 80015b2:	203f      	movs	r0, #63	; 0x3f
 80015b4:	f000 fab2 	bl	8001b1c <bno055_writeData>
  bno055_delay(700);
 80015b8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80015bc:	f000 faa2 	bl	8001b04 <bno055_delay>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  bno055_reset();
 80015ca:	f7ff ffef 	bl	80015ac <bno055_reset>

  uint8_t id = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fb8b 	bl	8001cf4 <bno055_readData>
  if (id != BNO055_ID) {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2ba0      	cmp	r3, #160	; 0xa0
 80015e2:	d004      	beq.n	80015ee <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <bno055_setup+0x4c>)
 80015ea:	f008 fcab 	bl	8009f44 <iprintf>
  }
  bno055_setPage(0);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff ffa8 	bl	8001544 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80015f4:	2100      	movs	r1, #0
 80015f6:	203f      	movs	r0, #63	; 0x3f
 80015f8:	f000 fa90 	bl	8001b1c <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80015fc:	f7ff ffc8 	bl	8001590 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001600:	200a      	movs	r0, #10
 8001602:	f000 fa7f 	bl	8001b04 <bno055_delay>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	0800c408 	.word	0x0800c408

08001614 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001618:	b09e      	sub	sp, #120	; 0x78
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff ff8e 	bl	8001544 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800162c:	2b20      	cmp	r3, #32
 800162e:	d108      	bne.n	8001642 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001630:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001638:	2208      	movs	r2, #8
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fb5a 	bl	8001cf4 <bno055_readData>
 8001640:	e007      	b.n	8001652 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001642:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164a:	2206      	movs	r2, #6
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fb51 	bl	8001cf4 <bno055_readData>

  double scale = 1;
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <bno055_getVector+0x270>)
 8001658:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800165c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001660:	2b0e      	cmp	r3, #14
 8001662:	d109      	bne.n	8001678 <bno055_getVector+0x64>
    scale = magScale;
 8001664:	4b88      	ldr	r3, [pc, #544]	; (8001888 <bno055_getVector+0x274>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff4b 	bl	8000504 <__aeabi_ui2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001676:	e03e      	b.n	80016f6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800167c:	2b08      	cmp	r3, #8
 800167e:	d007      	beq.n	8001690 <bno055_getVector+0x7c>
 8001680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001684:	2b28      	cmp	r3, #40	; 0x28
 8001686:	d003      	beq.n	8001690 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168c:	2b2e      	cmp	r3, #46	; 0x2e
 800168e:	d109      	bne.n	80016a4 <bno055_getVector+0x90>
    scale = accelScale;
 8001690:	4b7e      	ldr	r3, [pc, #504]	; (800188c <bno055_getVector+0x278>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff35 	bl	8000504 <__aeabi_ui2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80016a2:	e028      	b.n	80016f6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80016a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016a8:	2b14      	cmp	r3, #20
 80016aa:	d109      	bne.n	80016c0 <bno055_getVector+0xac>
    scale = angularRateScale;
 80016ac:	4b78      	ldr	r3, [pc, #480]	; (8001890 <bno055_getVector+0x27c>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff27 	bl	8000504 <__aeabi_ui2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80016be:	e01a      	b.n	80016f6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80016c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016c4:	2b1a      	cmp	r3, #26
 80016c6:	d109      	bne.n	80016dc <bno055_getVector+0xc8>
    scale = eulerScale;
 80016c8:	4b72      	ldr	r3, [pc, #456]	; (8001894 <bno055_getVector+0x280>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff19 	bl	8000504 <__aeabi_ui2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80016da:	e00c      	b.n	80016f6 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80016dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d108      	bne.n	80016f6 <bno055_getVector+0xe2>
    scale = quaScale;
 80016e4:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <bno055_getVector+0x284>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff0b 	bl	8000504 <__aeabi_ui2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80016f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fa:	2220      	movs	r2, #32
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f008 fd86 	bl	800a210 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001708:	2b20      	cmp	r3, #32
 800170a:	d150      	bne.n	80017ae <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800170c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21b      	sxth	r3, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff00 	bl	8000524 <__aeabi_i2d>
 8001724:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001728:	f7ff f890 	bl	800084c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001734:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe feec 	bl	8000524 <__aeabi_i2d>
 800174c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001750:	f7ff f87c 	bl	800084c <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800175c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	b21a      	sxth	r2, r3
 8001764:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001768:	b21b      	sxth	r3, r3
 800176a:	4313      	orrs	r3, r2
 800176c:	b21b      	sxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fed8 	bl	8000524 <__aeabi_i2d>
 8001774:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001778:	f7ff f868 	bl	800084c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001790:	b21b      	sxth	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b21b      	sxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fec4 	bl	8000524 <__aeabi_i2d>
 800179c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017a0:	f7ff f854 	bl	800084c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80017ac:	e03b      	b.n	8001826 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80017ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe feaf 	bl	8000524 <__aeabi_i2d>
 80017c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017ca:	f7ff f83f 	bl	800084c <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80017d6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fe9b 	bl	8000524 <__aeabi_i2d>
 80017ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017f2:	f7ff f82b 	bl	800084c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80017fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b21a      	sxth	r2, r3
 8001806:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21b      	sxth	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe87 	bl	8000524 <__aeabi_i2d>
 8001816:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800181a:	f7ff f817 	bl	800084c <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001826:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800182a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800182e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001832:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800183a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800183e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001842:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001846:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800184a:	ec49 8b14 	vmov	d4, r8, r9
 800184e:	ec45 4b15 	vmov	d5, r4, r5
 8001852:	ec41 0b16 	vmov	d6, r0, r1
 8001856:	ec43 2b17 	vmov	d7, r2, r3
}
 800185a:	eeb0 0a44 	vmov.f32	s0, s8
 800185e:	eef0 0a64 	vmov.f32	s1, s9
 8001862:	eeb0 1a45 	vmov.f32	s2, s10
 8001866:	eef0 1a65 	vmov.f32	s3, s11
 800186a:	eeb0 2a46 	vmov.f32	s4, s12
 800186e:	eef0 2a66 	vmov.f32	s5, s13
 8001872:	eeb0 3a47 	vmov.f32	s6, s14
 8001876:	eef0 3a67 	vmov.f32	s7, s15
 800187a:	3778      	adds	r7, #120	; 0x78
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001882:	bf00      	nop
 8001884:	3ff00000 	.word	0x3ff00000
 8001888:	20000006 	.word	0x20000006
 800188c:	20000000 	.word	0x20000000
 8001890:	20000002 	.word	0x20000002
 8001894:	20000004 	.word	0x20000004
 8001898:	20000008 	.word	0x20000008

0800189c <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 800189c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018a0:	b090      	sub	sp, #64	; 0x40
 80018a2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80018a4:	2014      	movs	r0, #20
 80018a6:	f7ff feb5 	bl	8001614 <bno055_getVector>
 80018aa:	eeb0 4a40 	vmov.f32	s8, s0
 80018ae:	eef0 4a60 	vmov.f32	s9, s1
 80018b2:	eeb0 5a41 	vmov.f32	s10, s2
 80018b6:	eef0 5a61 	vmov.f32	s11, s3
 80018ba:	eeb0 6a42 	vmov.f32	s12, s4
 80018be:	eef0 6a62 	vmov.f32	s13, s5
 80018c2:	eeb0 7a43 	vmov.f32	s14, s6
 80018c6:	eef0 7a63 	vmov.f32	s15, s7
 80018ca:	ed87 4b08 	vstr	d4, [r7, #32]
 80018ce:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80018d2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80018d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80018da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018ea:	ec49 8b14 	vmov	d4, r8, r9
 80018ee:	ec45 4b15 	vmov	d5, r4, r5
 80018f2:	ec41 0b16 	vmov	d6, r0, r1
 80018f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80018fa:	eeb0 0a44 	vmov.f32	s0, s8
 80018fe:	eef0 0a64 	vmov.f32	s1, s9
 8001902:	eeb0 1a45 	vmov.f32	s2, s10
 8001906:	eef0 1a65 	vmov.f32	s3, s11
 800190a:	eeb0 2a46 	vmov.f32	s4, s12
 800190e:	eef0 2a66 	vmov.f32	s5, s13
 8001912:	eeb0 3a47 	vmov.f32	s6, s14
 8001916:	eef0 3a67 	vmov.f32	s7, s15
 800191a:	3740      	adds	r7, #64	; 0x40
 800191c:	46bd      	mov	sp, r7
 800191e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001922 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8001922:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001926:	b090      	sub	sp, #64	; 0x40
 8001928:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800192a:	201a      	movs	r0, #26
 800192c:	f7ff fe72 	bl	8001614 <bno055_getVector>
 8001930:	eeb0 4a40 	vmov.f32	s8, s0
 8001934:	eef0 4a60 	vmov.f32	s9, s1
 8001938:	eeb0 5a41 	vmov.f32	s10, s2
 800193c:	eef0 5a61 	vmov.f32	s11, s3
 8001940:	eeb0 6a42 	vmov.f32	s12, s4
 8001944:	eef0 6a62 	vmov.f32	s13, s5
 8001948:	eeb0 7a43 	vmov.f32	s14, s6
 800194c:	eef0 7a63 	vmov.f32	s15, s7
 8001950:	ed87 4b08 	vstr	d4, [r7, #32]
 8001954:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001958:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800195c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001960:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001964:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001968:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800196c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001970:	ec49 8b14 	vmov	d4, r8, r9
 8001974:	ec45 4b15 	vmov	d5, r4, r5
 8001978:	ec41 0b16 	vmov	d6, r0, r1
 800197c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001980:	eeb0 0a44 	vmov.f32	s0, s8
 8001984:	eef0 0a64 	vmov.f32	s1, s9
 8001988:	eeb0 1a45 	vmov.f32	s2, s10
 800198c:	eef0 1a65 	vmov.f32	s3, s11
 8001990:	eeb0 2a46 	vmov.f32	s4, s12
 8001994:	eef0 2a66 	vmov.f32	s5, s13
 8001998:	eeb0 3a47 	vmov.f32	s6, s14
 800199c:	eef0 3a67 	vmov.f32	s7, s15
 80019a0:	3740      	adds	r7, #64	; 0x40
 80019a2:	46bd      	mov	sp, r7
 80019a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080019a8 <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorLinearAccel() {
 80019a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ac:	b090      	sub	sp, #64	; 0x40
 80019ae:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 80019b0:	2028      	movs	r0, #40	; 0x28
 80019b2:	f7ff fe2f 	bl	8001614 <bno055_getVector>
 80019b6:	eeb0 4a40 	vmov.f32	s8, s0
 80019ba:	eef0 4a60 	vmov.f32	s9, s1
 80019be:	eeb0 5a41 	vmov.f32	s10, s2
 80019c2:	eef0 5a61 	vmov.f32	s11, s3
 80019c6:	eeb0 6a42 	vmov.f32	s12, s4
 80019ca:	eef0 6a62 	vmov.f32	s13, s5
 80019ce:	eeb0 7a43 	vmov.f32	s14, s6
 80019d2:	eef0 7a63 	vmov.f32	s15, s7
 80019d6:	ed87 4b08 	vstr	d4, [r7, #32]
 80019da:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80019de:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80019e2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80019e6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80019ee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019f6:	ec49 8b14 	vmov	d4, r8, r9
 80019fa:	ec45 4b15 	vmov	d5, r4, r5
 80019fe:	ec41 0b16 	vmov	d6, r0, r1
 8001a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a06:	eeb0 0a44 	vmov.f32	s0, s8
 8001a0a:	eef0 0a64 	vmov.f32	s1, s9
 8001a0e:	eeb0 1a45 	vmov.f32	s2, s10
 8001a12:	eef0 1a65 	vmov.f32	s3, s11
 8001a16:	eeb0 2a46 	vmov.f32	s4, s12
 8001a1a:	eef0 2a66 	vmov.f32	s5, s13
 8001a1e:	eeb0 3a47 	vmov.f32	s6, s14
 8001a22:	eef0 3a67 	vmov.f32	s7, s15
 8001a26:	3740      	adds	r7, #64	; 0x40
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001a2e <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8001a2e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a32:	b090      	sub	sp, #64	; 0x40
 8001a34:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001a36:	2020      	movs	r0, #32
 8001a38:	f7ff fdec 	bl	8001614 <bno055_getVector>
 8001a3c:	eeb0 4a40 	vmov.f32	s8, s0
 8001a40:	eef0 4a60 	vmov.f32	s9, s1
 8001a44:	eeb0 5a41 	vmov.f32	s10, s2
 8001a48:	eef0 5a61 	vmov.f32	s11, s3
 8001a4c:	eeb0 6a42 	vmov.f32	s12, s4
 8001a50:	eef0 6a62 	vmov.f32	s13, s5
 8001a54:	eeb0 7a43 	vmov.f32	s14, s6
 8001a58:	eef0 7a63 	vmov.f32	s15, s7
 8001a5c:	ed87 4b08 	vstr	d4, [r7, #32]
 8001a60:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001a64:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001a68:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001a6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a70:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001a74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a7c:	ec49 8b14 	vmov	d4, r8, r9
 8001a80:	ec45 4b15 	vmov	d5, r4, r5
 8001a84:	ec41 0b16 	vmov	d6, r0, r1
 8001a88:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a8c:	eeb0 0a44 	vmov.f32	s0, s8
 8001a90:	eef0 0a64 	vmov.f32	s1, s9
 8001a94:	eeb0 1a45 	vmov.f32	s2, s10
 8001a98:	eef0 1a65 	vmov.f32	s3, s11
 8001a9c:	eeb0 2a46 	vmov.f32	s4, s12
 8001aa0:	eef0 2a66 	vmov.f32	s5, s13
 8001aa4:	eeb0 3a47 	vmov.f32	s6, s14
 8001aa8:	eef0 3a67 	vmov.f32	s7, s15
 8001aac:	3740      	adds	r7, #64	; 0x40
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001ab4 <colir_one_init>:
uint32_t current_address;
uint16_t log_buf_counter = 0;

W25QXX_result_t res;

void colir_one_init(SPI_HandleTypeDef *hspi) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	res = w25qxx_init(&w25qxx, hspi, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <colir_one_init+0x24>)
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <colir_one_init+0x28>)
 8001ac4:	f001 facd 	bl	8003062 <w25qxx_init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <colir_one_init+0x2c>)
 8001ace:	701a      	strb	r2, [r3, #0]
	if(logs_config->last_log == 0 || logs_config->last_log == 255){
		logs_config->last_log = 0;
		logs_config->last_address = CONFIG_SIZE;
		memset(&logs_config->log_address, 0, sizeof(logs_config->log_address));
	}*/
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	20000210 	.word	0x20000210
 8001ae0:	20000238 	.word	0x20000238

08001ae4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <bno055_assignI2C+0x1c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000023c 	.word	0x2000023c

08001b04 <bno055_delay>:

void bno055_delay(int time) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fbc4 	bl	800329c <HAL_Delay>
#endif
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	4603      	mov	r3, r0
 8001b24:	460a      	mov	r2, r1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	733b      	strb	r3, [r7, #12]
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <bno055_writeData+0x184>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f107 020c 	add.w	r2, r7, #12
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2302      	movs	r3, #2
 8001b42:	2150      	movs	r1, #80	; 0x50
 8001b44:	f002 fc00 	bl	8004348 <HAL_I2C_Master_Transmit>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80a0 	beq.w	8001c94 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d103      	bne.n	8001b62 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001b5a:	4852      	ldr	r0, [pc, #328]	; (8001ca4 <bno055_writeData+0x188>)
 8001b5c:	f008 fa58 	bl	800a010 <puts>
 8001b60:	e012      	b.n	8001b88 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d103      	bne.n	8001b70 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001b68:	484f      	ldr	r0, [pc, #316]	; (8001ca8 <bno055_writeData+0x18c>)
 8001b6a:	f008 fa51 	bl	800a010 <puts>
 8001b6e:	e00b      	b.n	8001b88 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001b76:	484d      	ldr	r0, [pc, #308]	; (8001cac <bno055_writeData+0x190>)
 8001b78:	f008 fa4a 	bl	800a010 <puts>
 8001b7c:	e004      	b.n	8001b88 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	4619      	mov	r1, r3
 8001b82:	484b      	ldr	r0, [pc, #300]	; (8001cb0 <bno055_writeData+0x194>)
 8001b84:	f008 f9de 	bl	8009f44 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <bno055_writeData+0x184>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fa45 	bl	800501c <HAL_I2C_GetError>
 8001b92:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d07e      	beq.n	8001c98 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d103      	bne.n	8001ba8 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001ba0:	4844      	ldr	r0, [pc, #272]	; (8001cb4 <bno055_writeData+0x198>)
 8001ba2:	f008 fa35 	bl	800a010 <puts>
 8001ba6:	e021      	b.n	8001bec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d103      	bne.n	8001bb6 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001bae:	4842      	ldr	r0, [pc, #264]	; (8001cb8 <bno055_writeData+0x19c>)
 8001bb0:	f008 fa2e 	bl	800a010 <puts>
 8001bb4:	e01a      	b.n	8001bec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d103      	bne.n	8001bc4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001bbc:	483f      	ldr	r0, [pc, #252]	; (8001cbc <bno055_writeData+0x1a0>)
 8001bbe:	f008 fa27 	bl	800a010 <puts>
 8001bc2:	e013      	b.n	8001bec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d103      	bne.n	8001bd2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001bca:	483d      	ldr	r0, [pc, #244]	; (8001cc0 <bno055_writeData+0x1a4>)
 8001bcc:	f008 fa20 	bl	800a010 <puts>
 8001bd0:	e00c      	b.n	8001bec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d103      	bne.n	8001be0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001bd8:	483a      	ldr	r0, [pc, #232]	; (8001cc4 <bno055_writeData+0x1a8>)
 8001bda:	f008 fa19 	bl	800a010 <puts>
 8001bde:	e005      	b.n	8001bec <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d102      	bne.n	8001bec <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001be6:	4838      	ldr	r0, [pc, #224]	; (8001cc8 <bno055_writeData+0x1ac>)
 8001be8:	f008 fa12 	bl	800a010 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001bec:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <bno055_writeData+0x184>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fa05 	bl	8005000 <HAL_I2C_GetState>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001c00:	4832      	ldr	r0, [pc, #200]	; (8001ccc <bno055_writeData+0x1b0>)
 8001c02:	f008 fa05 	bl	800a010 <puts>
 8001c06:	e048      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d103      	bne.n	8001c16 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001c0e:	482f      	ldr	r0, [pc, #188]	; (8001ccc <bno055_writeData+0x1b0>)
 8001c10:	f008 f9fe 	bl	800a010 <puts>
 8001c14:	e041      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b24      	cmp	r3, #36	; 0x24
 8001c1a:	d103      	bne.n	8001c24 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001c1c:	482c      	ldr	r0, [pc, #176]	; (8001cd0 <bno055_writeData+0x1b4>)
 8001c1e:	f008 f9f7 	bl	800a010 <puts>
 8001c22:	e03a      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b21      	cmp	r3, #33	; 0x21
 8001c28:	d103      	bne.n	8001c32 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001c2a:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <bno055_writeData+0x1b8>)
 8001c2c:	f008 f9f0 	bl	800a010 <puts>
 8001c30:	e033      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b22      	cmp	r3, #34	; 0x22
 8001c36:	d103      	bne.n	8001c40 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001c38:	4827      	ldr	r0, [pc, #156]	; (8001cd8 <bno055_writeData+0x1bc>)
 8001c3a:	f008 f9e9 	bl	800a010 <puts>
 8001c3e:	e02c      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b28      	cmp	r3, #40	; 0x28
 8001c44:	d103      	bne.n	8001c4e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001c46:	4825      	ldr	r0, [pc, #148]	; (8001cdc <bno055_writeData+0x1c0>)
 8001c48:	f008 f9e2 	bl	800a010 <puts>
 8001c4c:	e025      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b29      	cmp	r3, #41	; 0x29
 8001c52:	d103      	bne.n	8001c5c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001c54:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <bno055_writeData+0x1c4>)
 8001c56:	f008 f9db 	bl	800a010 <puts>
 8001c5a:	e01e      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c60:	d103      	bne.n	8001c6a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001c62:	4820      	ldr	r0, [pc, #128]	; (8001ce4 <bno055_writeData+0x1c8>)
 8001c64:	f008 f9d4 	bl	800a010 <puts>
 8001c68:	e017      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b60      	cmp	r3, #96	; 0x60
 8001c6e:	d103      	bne.n	8001c78 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001c70:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <bno055_writeData+0x1cc>)
 8001c72:	f008 f9cd 	bl	800a010 <puts>
 8001c76:	e010      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c7c:	d103      	bne.n	8001c86 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001c7e:	481b      	ldr	r0, [pc, #108]	; (8001cec <bno055_writeData+0x1d0>)
 8001c80:	f008 f9c6 	bl	800a010 <puts>
 8001c84:	e009      	b.n	8001c9a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	2be0      	cmp	r3, #224	; 0xe0
 8001c8a:	d106      	bne.n	8001c9a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001c8c:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <bno055_writeData+0x1d4>)
 8001c8e:	f008 f9bf 	bl	800a010 <puts>
 8001c92:	e002      	b.n	8001c9a <bno055_writeData+0x17e>
    return;
 8001c94:	bf00      	nop
 8001c96:	e000      	b.n	8001c9a <bno055_writeData+0x17e>
    return;
 8001c98:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000023c 	.word	0x2000023c
 8001ca4:	0800c444 	.word	0x0800c444
 8001ca8:	0800c468 	.word	0x0800c468
 8001cac:	0800c490 	.word	0x0800c490
 8001cb0:	0800c4b4 	.word	0x0800c4b4
 8001cb4:	0800c4cc 	.word	0x0800c4cc
 8001cb8:	0800c4e0 	.word	0x0800c4e0
 8001cbc:	0800c4f4 	.word	0x0800c4f4
 8001cc0:	0800c508 	.word	0x0800c508
 8001cc4:	0800c51c 	.word	0x0800c51c
 8001cc8:	0800c530 	.word	0x0800c530
 8001ccc:	0800c548 	.word	0x0800c548
 8001cd0:	0800c560 	.word	0x0800c560
 8001cd4:	0800c574 	.word	0x0800c574
 8001cd8:	0800c58c 	.word	0x0800c58c
 8001cdc:	0800c5a4 	.word	0x0800c5a4
 8001ce0:	0800c5bc 	.word	0x0800c5bc
 8001ce4:	0800c5dc 	.word	0x0800c5dc
 8001ce8:	0800c5fc 	.word	0x0800c5fc
 8001cec:	0800c614 	.word	0x0800c614
 8001cf0:	0800c62c 	.word	0x0800c62c

08001cf4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4613      	mov	r3, r2
 8001d02:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <bno055_readData+0x40>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	1dfa      	adds	r2, r7, #7
 8001d0a:	2364      	movs	r3, #100	; 0x64
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	2150      	movs	r1, #80	; 0x50
 8001d12:	f002 fb19 	bl	8004348 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <bno055_readData+0x40>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2264      	movs	r2, #100	; 0x64
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	2150      	movs	r1, #80	; 0x50
 8001d26:	f002 fc0d 	bl	8004544 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000023c 	.word	0x2000023c

08001d38 <ParseReceivedCommand>:

char cmdSymbol;
char cmdParams[5][6];

void ParseReceivedCommand(char cmd[], uint8_t payloadSize)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
	if(cmd[0] == '\0')
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05a      	beq.n	8001e02 <ParseReceivedCommand+0xca>
		return;

	cmdSymbol = cmd[0];
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <ParseReceivedCommand+0xd4>)
 8001d52:	701a      	strb	r2, [r3, #0]
	int cmdCounter = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
	int cmdParamCounter = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 2; i < payloadSize; i++){
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	75fb      	strb	r3, [r7, #23]
 8001d60:	e020      	b.n	8001da4 <ParseReceivedCommand+0x6c>
		if(cmd[i] == ' '){
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d105      	bne.n	8001d7a <ParseReceivedCommand+0x42>
			cmdCounter++;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
			cmdParamCounter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e011      	b.n	8001d9e <ParseReceivedCommand+0x66>
		}
		else{
			cmdParams[cmdCounter][cmdParamCounter] = cmd[i];
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	7818      	ldrb	r0, [r3, #0]
 8001d82:	4923      	ldr	r1, [pc, #140]	; (8001e10 <ParseReceivedCommand+0xd8>)
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	18ca      	adds	r2, r1, r3
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	4413      	add	r3, r2
 8001d94:	4602      	mov	r2, r0
 8001d96:	701a      	strb	r2, [r3, #0]
			cmdParamCounter++;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61bb      	str	r3, [r7, #24]
	for(uint8_t i = 2; i < payloadSize; i++){
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	3301      	adds	r3, #1
 8001da2:	75fb      	strb	r3, [r7, #23]
 8001da4:	7dfa      	ldrb	r2, [r7, #23]
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3da      	bcc.n	8001d62 <ParseReceivedCommand+0x2a>
		}
	}

	if(cmdSymbol == 's'){ //format like "s {servoNumber} {servoAngle}"
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <ParseReceivedCommand+0xd4>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b73      	cmp	r3, #115	; 0x73
 8001db2:	d11a      	bne.n	8001dea <ParseReceivedCommand+0xb2>
		int servoNumber = atoi(cmdParams[0]);
 8001db4:	4816      	ldr	r0, [pc, #88]	; (8001e10 <ParseReceivedCommand+0xd8>)
 8001db6:	f007 fb0c 	bl	80093d2 <atoi>
 8001dba:	60f8      	str	r0, [r7, #12]
		int servoAngle = atoi(cmdParams[1]);
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <ParseReceivedCommand+0xdc>)
 8001dbe:	f007 fb08 	bl	80093d2 <atoi>
 8001dc2:	60b8      	str	r0, [r7, #8]
		PCA9685_Init(&hi2c2);
 8001dc4:	4814      	ldr	r0, [pc, #80]	; (8001e18 <ParseReceivedCommand+0xe0>)
 8001dc6:	f000 fdb3 	bl	8002930 <PCA9685_Init>
		PCA9685_SetPwmFrequency(50);
 8001dca:	2032      	movs	r0, #50	; 0x32
 8001dcc:	f000 fc3c 	bl	8002648 <PCA9685_SetPwmFrequency>
		PCA9685_SetServoAngle(servoNumber, servoAngle);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	ee07 2a90 	vmov	s15, r2
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fd48 	bl	8002878 <PCA9685_SetServoAngle>
 8001de8:	e00c      	b.n	8001e04 <ParseReceivedCommand+0xcc>
	}
	else if(cmdSymbol == 'l'){ //format like "s {servoNumber} {servoAngle}"
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <ParseReceivedCommand+0xd4>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b6c      	cmp	r3, #108	; 0x6c
 8001df0:	d108      	bne.n	8001e04 <ParseReceivedCommand+0xcc>
		int lighterNumber = atoi(cmdParams[0]);
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <ParseReceivedCommand+0xd8>)
 8001df4:	f007 faed 	bl	80093d2 <atoi>
 8001df8:	6138      	str	r0, [r7, #16]
		FigherLighter(lighterNumber);
 8001dfa:	6938      	ldr	r0, [r7, #16]
 8001dfc:	f000 f80e 	bl	8001e1c <FigherLighter>
 8001e00:	e000      	b.n	8001e04 <ParseReceivedCommand+0xcc>
		return;
 8001e02:	bf00      	nop
	}
}
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200004c8 	.word	0x200004c8
 8001e10:	200004cc 	.word	0x200004cc
 8001e14:	200004d2 	.word	0x200004d2
 8001e18:	20000240 	.word	0x20000240

08001e1c <FigherLighter>:

void FigherLighter(uint8_t lighterNumber){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	uint16_t pinNumber = 0 | (1<<(6+lighterNumber));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	3306      	adds	r3, #6
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOE, pinNumber, GPIO_PIN_SET);
 8001e32:	89fb      	ldrh	r3, [r7, #14]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <FigherLighter+0x3c>)
 8001e3a:	f002 f927 	bl	800408c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f001 fa2c 	bl	800329c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, pinNumber, GPIO_PIN_RESET);
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	2200      	movs	r2, #0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <FigherLighter+0x3c>)
 8001e4c:	f002 f91e 	bl	800408c <HAL_GPIO_WritePin>
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000

08001e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e60:	b0ac      	sub	sp, #176	; 0xb0
 8001e62:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e64:	f001 f9a8 	bl	80031b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e68:	f000 f956 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6c:	f000 faa0 	bl	80023b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e70:	f000 fa76 	bl	8002360 <MX_DMA_Init>
  MX_I2C2_Init();
 8001e74:	f000 f9ba 	bl	80021ec <MX_I2C2_Init>
  MX_SPI3_Init();
 8001e78:	f000 fa3c 	bl	80022f4 <MX_SPI3_Init>
  MX_SDIO_SD_Init();
 8001e7c:	f000 f9e4 	bl	8002248 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001e80:	f007 f800 	bl	8008e84 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001e84:	f000 fa00 	bl	8002288 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init(&hspi3);
 8001e88:	4897      	ldr	r0, [pc, #604]	; (80020e8 <main+0x28c>)
 8001e8a:	f7ff f9d3 	bl	8001234 <NRF24_Init>
  NRF24_TxRxMode(TxAddress, RxAddress, 76);
 8001e8e:	224c      	movs	r2, #76	; 0x4c
 8001e90:	4996      	ldr	r1, [pc, #600]	; (80020ec <main+0x290>)
 8001e92:	4897      	ldr	r0, [pc, #604]	; (80020f0 <main+0x294>)
 8001e94:	f7ff fa04 	bl	80012a0 <NRF24_TxRxMode>
  NRF24_RxMode();
 8001e98:	f7ff fa65 	bl	8001366 <NRF24_RxMode>

  colir_one_init(&hspi1);
 8001e9c:	4895      	ldr	r0, [pc, #596]	; (80020f4 <main+0x298>)
 8001e9e:	f7ff fe09 	bl	8001ab4 <colir_one_init>

  bno055_assignI2C(&hi2c2);
 8001ea2:	4895      	ldr	r0, [pc, #596]	; (80020f8 <main+0x29c>)
 8001ea4:	f7ff fe1e 	bl	8001ae4 <bno055_assignI2C>
  bno055_setup();
 8001ea8:	f7ff fb8c 	bl	80015c4 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001eac:	f7ff fb77 	bl	800159e <bno055_setOperationModeNDOF>

  PCA9685_Init(&hi2c2);
 8001eb0:	4891      	ldr	r0, [pc, #580]	; (80020f8 <main+0x29c>)
 8001eb2:	f000 fd3d 	bl	8002930 <PCA9685_Init>
  PCA9685_SetPwmFrequency(50);
 8001eb6:	2032      	movs	r0, #50	; 0x32
 8001eb8:	f000 fbc6 	bl	8002648 <PCA9685_SetPwmFrequency>

  uint32_t lastRxMode = HAL_GetTick();
 8001ebc:	f001 f9e2 	bl	8003284 <HAL_GetTick>
 8001ec0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  bool rxMode = false;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint32_t timestamp = HAL_GetTick();
 8001eca:	f001 f9db 	bl	8003284 <HAL_GetTick>
 8001ece:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	bno055_vector_t orientation = bno055_getVectorEuler();
 8001ed2:	f7ff fd26 	bl	8001922 <bno055_getVectorEuler>
 8001ed6:	eeb0 4a40 	vmov.f32	s8, s0
 8001eda:	eef0 4a60 	vmov.f32	s9, s1
 8001ede:	eeb0 5a41 	vmov.f32	s10, s2
 8001ee2:	eef0 5a61 	vmov.f32	s11, s3
 8001ee6:	eeb0 6a42 	vmov.f32	s12, s4
 8001eea:	eef0 6a62 	vmov.f32	s13, s5
 8001eee:	eeb0 7a43 	vmov.f32	s14, s6
 8001ef2:	eef0 7a63 	vmov.f32	s15, s7
 8001ef6:	ed87 4b00 	vstr	d4, [r7]
 8001efa:	ed87 5b02 	vstr	d5, [r7, #8]
 8001efe:	ed87 6b04 	vstr	d6, [r7, #16]
 8001f02:	ed87 7b06 	vstr	d7, [r7, #24]
	bno055_vector_t linearAccel = bno055_getVectorLinearAccel();
 8001f06:	f7ff fd4f 	bl	80019a8 <bno055_getVectorLinearAccel>
 8001f0a:	eeb0 4a40 	vmov.f32	s8, s0
 8001f0e:	eef0 4a60 	vmov.f32	s9, s1
 8001f12:	eeb0 5a41 	vmov.f32	s10, s2
 8001f16:	eef0 5a61 	vmov.f32	s11, s3
 8001f1a:	eeb0 6a42 	vmov.f32	s12, s4
 8001f1e:	eef0 6a62 	vmov.f32	s13, s5
 8001f22:	eeb0 7a43 	vmov.f32	s14, s6
 8001f26:	eef0 7a63 	vmov.f32	s15, s7
 8001f2a:	ed87 4b08 	vstr	d4, [r7, #32]
 8001f2e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001f32:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001f36:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	bno055_vector_t quaternion = bno055_getVectorQuaternion();
 8001f3a:	f7ff fd78 	bl	8001a2e <bno055_getVectorQuaternion>
 8001f3e:	eeb0 4a40 	vmov.f32	s8, s0
 8001f42:	eef0 4a60 	vmov.f32	s9, s1
 8001f46:	eeb0 5a41 	vmov.f32	s10, s2
 8001f4a:	eef0 5a61 	vmov.f32	s11, s3
 8001f4e:	eeb0 6a42 	vmov.f32	s12, s4
 8001f52:	eef0 6a62 	vmov.f32	s13, s5
 8001f56:	eeb0 7a43 	vmov.f32	s14, s6
 8001f5a:	eef0 7a63 	vmov.f32	s15, s7
 8001f5e:	ed87 4b10 	vstr	d4, [r7, #64]	; 0x40
 8001f62:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
 8001f66:	ed87 6b14 	vstr	d6, [r7, #80]	; 0x50
 8001f6a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	bno055_vector_t gyro = bno055_getVectorGyroscope();
 8001f6e:	f7ff fc95 	bl	800189c <bno055_getVectorGyroscope>
 8001f72:	eeb0 4a40 	vmov.f32	s8, s0
 8001f76:	eef0 4a60 	vmov.f32	s9, s1
 8001f7a:	eeb0 5a41 	vmov.f32	s10, s2
 8001f7e:	eef0 5a61 	vmov.f32	s11, s3
 8001f82:	eeb0 6a42 	vmov.f32	s12, s4
 8001f86:	eef0 6a62 	vmov.f32	s13, s5
 8001f8a:	eeb0 7a43 	vmov.f32	s14, s6
 8001f8e:	eef0 7a63 	vmov.f32	s15, s7
 8001f92:	ed87 4b18 	vstr	d4, [r7, #96]	; 0x60
 8001f96:	ed87 5b1a 	vstr	d5, [r7, #104]	; 0x68
 8001f9a:	ed87 6b1c 	vstr	d6, [r7, #112]	; 0x70
 8001f9e:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78

	HAL_Delay(10);
 8001fa2:	200a      	movs	r0, #10
 8001fa4:	f001 f97a 	bl	800329c <HAL_Delay>
	if(!rxMode){
 8001fa8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8001fac:	f083 0301 	eor.w	r3, r3, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d072      	beq.n	800209c <main+0x240>
		NRF24_TxMode();
 8001fb6:	f7ff f9b6 	bl	8001326 <NRF24_TxMode>
		sprintf(TxData, "o %d %.2f %.2f %.2f", timestamp, orientation.x, orientation.y, orientation.z);
 8001fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fc2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001fc6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fce:	e9cd 2300 	strd	r2, r3, [sp]
 8001fd2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fd6:	4949      	ldr	r1, [pc, #292]	; (80020fc <main+0x2a0>)
 8001fd8:	4849      	ldr	r0, [pc, #292]	; (8002100 <main+0x2a4>)
 8001fda:	f008 f821 	bl	800a020 <siprintf>
		NRF24_Transmit(TxData);
 8001fde:	4848      	ldr	r0, [pc, #288]	; (8002100 <main+0x2a4>)
 8001fe0:	f7ff f9e2 	bl	80013a8 <NRF24_Transmit>

		sprintf(TxData, "g %d %.2f %.2f %.2f", timestamp, gyro.x, gyro.y, gyro.z);
 8001fe4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001fe8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001fec:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ff0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8001ffc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002000:	4940      	ldr	r1, [pc, #256]	; (8002104 <main+0x2a8>)
 8002002:	483f      	ldr	r0, [pc, #252]	; (8002100 <main+0x2a4>)
 8002004:	f008 f80c 	bl	800a020 <siprintf>
		NRF24_Transmit(TxData);
 8002008:	483d      	ldr	r0, [pc, #244]	; (8002100 <main+0x2a4>)
 800200a:	f7ff f9cd 	bl	80013a8 <NRF24_Transmit>

		sprintf(TxData, "a %d %.2f %.2f %.2f", timestamp, linearAccel.x, linearAccel.y, linearAccel.z);
 800200e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002012:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002016:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800201a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800201e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002022:	e9cd 2300 	strd	r2, r3, [sp]
 8002026:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800202a:	4937      	ldr	r1, [pc, #220]	; (8002108 <main+0x2ac>)
 800202c:	4834      	ldr	r0, [pc, #208]	; (8002100 <main+0x2a4>)
 800202e:	f007 fff7 	bl	800a020 <siprintf>
		NRF24_Transmit(TxData);
 8002032:	4833      	ldr	r0, [pc, #204]	; (8002100 <main+0x2a4>)
 8002034:	f7ff f9b8 	bl	80013a8 <NRF24_Transmit>

		sprintf(TxData, "q %d %.2f %.2f %.2f %.2f", timestamp, quaternion.x, quaternion.y, quaternion.z, quaternion.w);
 8002038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800203c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002040:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002044:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002048:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800204c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002054:	e9cd 2300 	strd	r2, r3, [sp]
 8002058:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800205c:	492b      	ldr	r1, [pc, #172]	; (800210c <main+0x2b0>)
 800205e:	4828      	ldr	r0, [pc, #160]	; (8002100 <main+0x2a4>)
 8002060:	f007 ffde 	bl	800a020 <siprintf>
		NRF24_Transmit(TxData);
 8002064:	4826      	ldr	r0, [pc, #152]	; (8002100 <main+0x2a4>)
 8002066:	f7ff f99f 	bl	80013a8 <NRF24_Transmit>

		if(timestamp - lastRxMode > 500){
 800206a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800206e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002078:	d932      	bls.n	80020e0 <main+0x284>
			sprintf(TxData, "c");
 800207a:	4925      	ldr	r1, [pc, #148]	; (8002110 <main+0x2b4>)
 800207c:	4820      	ldr	r0, [pc, #128]	; (8002100 <main+0x2a4>)
 800207e:	f007 ffcf 	bl	800a020 <siprintf>
			NRF24_Transmit(TxData);
 8002082:	481f      	ldr	r0, [pc, #124]	; (8002100 <main+0x2a4>)
 8002084:	f7ff f990 	bl	80013a8 <NRF24_Transmit>
			rxMode = true;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			NRF24_RxMode();
 800208e:	f7ff f96a 	bl	8001366 <NRF24_RxMode>
			lastRxMode = HAL_GetTick();
 8002092:	f001 f8f7 	bl	8003284 <HAL_GetTick>
 8002096:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800209a:	e021      	b.n	80020e0 <main+0x284>
		}
	}
	else{
		if (isDataAvailable() == 1)
 800209c:	f7ff f9f8 	bl	8001490 <isDataAvailable>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10e      	bne.n	80020c4 <main+0x268>
		{
			NRF24_Receive(RxData);
 80020a6:	481b      	ldr	r0, [pc, #108]	; (8002114 <main+0x2b8>)
 80020a8:	f7ff fa1c 	bl	80014e4 <NRF24_Receive>
			rxMode = false;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			lastRxMode = HAL_GetTick();
 80020b2:	f001 f8e7 	bl	8003284 <HAL_GetTick>
 80020b6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			ParseReceivedCommand(RxData, sizeof(RxData));
 80020ba:	2120      	movs	r1, #32
 80020bc:	4815      	ldr	r0, [pc, #84]	; (8002114 <main+0x2b8>)
 80020be:	f7ff fe3b 	bl	8001d38 <ParseReceivedCommand>
 80020c2:	e00d      	b.n	80020e0 <main+0x284>
		}
		else if(timestamp - lastRxMode > 250){
 80020c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2bfa      	cmp	r3, #250	; 0xfa
 80020d0:	d906      	bls.n	80020e0 <main+0x284>
			rxMode = false;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			lastRxMode = HAL_GetTick();
 80020d8:	f001 f8d4 	bl	8003284 <HAL_GetTick>
 80020dc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		}
	}

	HAL_Delay(100);
 80020e0:	2064      	movs	r0, #100	; 0x64
 80020e2:	f001 f8db 	bl	800329c <HAL_Delay>
  {
 80020e6:	e6f0      	b.n	8001eca <main+0x6e>
 80020e8:	20000430 	.word	0x20000430
 80020ec:	20000014 	.word	0x20000014
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	200003d8 	.word	0x200003d8
 80020f8:	20000240 	.word	0x20000240
 80020fc:	0800c644 	.word	0x0800c644
 8002100:	20000488 	.word	0x20000488
 8002104:	0800c658 	.word	0x0800c658
 8002108:	0800c66c 	.word	0x0800c66c
 800210c:	0800c680 	.word	0x0800c680
 8002110:	0800c69c 	.word	0x0800c69c
 8002114:	200004a8 	.word	0x200004a8

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	; 0x50
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f008 f872 	bl	800a210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <SystemClock_Config+0xcc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <SystemClock_Config+0xcc>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <SystemClock_Config+0xcc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <SystemClock_Config+0xd0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <SystemClock_Config+0xd0>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <SystemClock_Config+0xd0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002174:	2302      	movs	r3, #2
 8002176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002178:	2301      	movs	r3, #1
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800217c:	2310      	movs	r3, #16
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002180:	2302      	movs	r3, #2
 8002182:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002184:	2300      	movs	r3, #0
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002188:	2308      	movs	r3, #8
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800218c:	2350      	movs	r3, #80	; 0x50
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002190:	2302      	movs	r3, #2
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002194:	2304      	movs	r3, #4
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fc4d 	bl	8005a3c <HAL_RCC_OscConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021a8:	f000 f9a2 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ac:	230f      	movs	r3, #15
 80021ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80021b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 feae 	bl	8005f2c <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021d6:	f000 f98b 	bl	80024f0 <Error_Handler>
  }
}
 80021da:	bf00      	nop
 80021dc:	3750      	adds	r7, #80	; 0x50
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000

080021ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_I2C2_Init+0x50>)
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <MX_I2C2_Init+0x54>)
 80021f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_I2C2_Init+0x50>)
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_I2C2_Init+0x58>)
 80021fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_I2C2_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <MX_I2C2_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <MX_I2C2_Init+0x50>)
 800220a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800220e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <MX_I2C2_Init+0x50>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <MX_I2C2_Init+0x50>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <MX_I2C2_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <MX_I2C2_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <MX_I2C2_Init+0x50>)
 800222a:	f001 ff49 	bl	80040c0 <HAL_I2C_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002234:	f000 f95c 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000240 	.word	0x20000240
 8002240:	40005800 	.word	0x40005800
 8002244:	000186a0 	.word	0x000186a0

08002248 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <MX_SDIO_SD_Init+0x3c>)
 8002250:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 1;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <MX_SDIO_SD_Init+0x38>)
 8002272:	2201      	movs	r2, #1
 8002274:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000294 	.word	0x20000294
 8002284:	40012c00 	.word	0x40012c00

08002288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800228c:	4b17      	ldr	r3, [pc, #92]	; (80022ec <MX_SPI1_Init+0x64>)
 800228e:	4a18      	ldr	r2, [pc, #96]	; (80022f0 <MX_SPI1_Init+0x68>)
 8002290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <MX_SPI1_Init+0x64>)
 8002294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <MX_SPI1_Init+0x64>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <MX_SPI1_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_SPI1_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <MX_SPI1_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_SPI1_Init+0x64>)
 80022b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_SPI1_Init+0x64>)
 80022bc:	2200      	movs	r2, #0
 80022be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <MX_SPI1_Init+0x64>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_SPI1_Init+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022cc:	4b07      	ldr	r3, [pc, #28]	; (80022ec <MX_SPI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_SPI1_Init+0x64>)
 80022d4:	220a      	movs	r2, #10
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022d8:	4804      	ldr	r0, [pc, #16]	; (80022ec <MX_SPI1_Init+0x64>)
 80022da:	f005 f963 	bl	80075a4 <HAL_SPI_Init>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022e4:	f000 f904 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200003d8 	.word	0x200003d8
 80022f0:	40013000 	.word	0x40013000

080022f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_SPI3_Init+0x64>)
 80022fa:	4a18      	ldr	r2, [pc, #96]	; (800235c <MX_SPI3_Init+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_SPI3_Init+0x64>)
 8002300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002304:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <MX_SPI3_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <MX_SPI3_Init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <MX_SPI3_Init+0x64>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <MX_SPI3_Init+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <MX_SPI3_Init+0x64>)
 8002320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002324:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <MX_SPI3_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <MX_SPI3_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <MX_SPI3_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <MX_SPI3_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <MX_SPI3_Init+0x64>)
 8002340:	220a      	movs	r2, #10
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002344:	4804      	ldr	r0, [pc, #16]	; (8002358 <MX_SPI3_Init+0x64>)
 8002346:	f005 f92d 	bl	80075a4 <HAL_SPI_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002350:	f000 f8ce 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000430 	.word	0x20000430
 800235c:	40003c00 	.word	0x40003c00

08002360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_DMA_Init+0x4c>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <MX_DMA_Init+0x4c>)
 8002370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <MX_DMA_Init+0x4c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	203b      	movs	r0, #59	; 0x3b
 8002388:	f001 f887 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800238c:	203b      	movs	r0, #59	; 0x3b
 800238e:	f001 f8a0 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	2045      	movs	r0, #69	; 0x45
 8002398:	f001 f87f 	bl	800349a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800239c:	2045      	movs	r0, #69	; 0x45
 800239e:	f001 f898 	bl	80034d2 <HAL_NVIC_EnableIRQ>

}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	; 0x30
 80023b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <MX_GPIO_Init+0x130>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a44      	ldr	r2, [pc, #272]	; (80024e0 <MX_GPIO_Init+0x130>)
 80023d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <MX_GPIO_Init+0x130>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <MX_GPIO_Init+0x130>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <MX_GPIO_Init+0x130>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <MX_GPIO_Init+0x130>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a36      	ldr	r2, [pc, #216]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <MX_GPIO_Init+0x130>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <MX_GPIO_Init+0x130>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <MX_GPIO_Init+0x130>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <MX_GPIO_Init+0x130>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8002474:	481b      	ldr	r0, [pc, #108]	; (80024e4 <MX_GPIO_Init+0x134>)
 8002476:	f001 fe09 	bl	800408c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	21c0      	movs	r1, #192	; 0xc0
 800247e:	481a      	ldr	r0, [pc, #104]	; (80024e8 <MX_GPIO_Init+0x138>)
 8002480:	f001 fe04 	bl	800408c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002484:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8002488:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4811      	ldr	r0, [pc, #68]	; (80024e4 <MX_GPIO_Init+0x134>)
 800249e:	f001 fc41 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	4619      	mov	r1, r3
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_GPIO_Init+0x13c>)
 80024b6:	f001 fc35 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80024ba:	23c0      	movs	r3, #192	; 0xc0
 80024bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_GPIO_Init+0x138>)
 80024d2:	f001 fc27 	bl	8003d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024d6:	bf00      	nop
 80024d8:	3730      	adds	r7, #48	; 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <Error_Handler+0x8>
	...

080024fc <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af04      	add	r7, sp, #16
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	460b      	mov	r3, r1
 8002508:	71bb      	strb	r3, [r7, #6]
 800250a:	4613      	mov	r3, r2
 800250c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 800250e:	797b      	ldrb	r3, [r7, #5]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <PCA9685_SetBit+0x1c>
 8002514:	2301      	movs	r3, #1
 8002516:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <PCA9685_SetBit+0xb0>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	b29a      	uxth	r2, r3
 8002520:	230a      	movs	r3, #10
 8002522:	9302      	str	r3, [sp, #8]
 8002524:	2301      	movs	r3, #1
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	f107 030f 	add.w	r3, r7, #15
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	f002 fb33 	bl	8004b9c <HAL_I2C_Mem_Read>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e031      	b.n	80025a4 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8002540:	79bb      	ldrb	r3, [r7, #6]
 8002542:	2201      	movs	r2, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	b25b      	sxtb	r3, r3
 800254a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800254e:	b25b      	sxtb	r3, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	b25a      	sxtb	r2, r3
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	b25b      	sxtb	r3, r3
 8002558:	4013      	ands	r3, r2
 800255a:	b25b      	sxtb	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8002560:	797b      	ldrb	r3, [r7, #5]
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	b25a      	sxtb	r2, r3
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b25b      	sxtb	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b25b      	sxtb	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <PCA9685_SetBit+0xb0>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	b29a      	uxth	r2, r3
 8002582:	230a      	movs	r3, #10
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	2301      	movs	r3, #1
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	f107 030f 	add.w	r3, r7, #15
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2301      	movs	r3, #1
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	f002 fa08 	bl	80049a8 <HAL_I2C_Mem_Write>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200004ec 	.word	0x200004ec

080025b0 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80025b6:	2306      	movs	r3, #6
 80025b8:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <PCA9685_SoftwareReset+0x30>)
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	1dfa      	adds	r2, r7, #7
 80025c0:	230a      	movs	r3, #10
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2301      	movs	r3, #1
 80025c6:	2100      	movs	r1, #0
 80025c8:	f001 febe 	bl	8004348 <HAL_I2C_Master_Transmit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200004ec 	.word	0x200004ec

080025e4 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	461a      	mov	r2, r3
 80025f2:	2104      	movs	r1, #4
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff ff81 	bl	80024fc <PCA9685_SetBit>
 80025fa:	4603      	mov	r3, r0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	461a      	mov	r2, r3
 8002612:	2107      	movs	r1, #7
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff ff71 	bl	80024fc <PCA9685_SetBit>
 800261a:	4603      	mov	r3, r0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	461a      	mov	r2, r3
 8002632:	2105      	movs	r1, #5
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff ff61 	bl	80024fc <PCA9685_SetBit>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	0000      	movs	r0, r0
	...

08002648 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af04      	add	r7, sp, #16
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002658:	4293      	cmp	r3, r2
 800265a:	d902      	bls.n	8002662 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 800265c:	2303      	movs	r3, #3
 800265e:	72fb      	strb	r3, [r7, #11]
 8002660:	e046      	b.n	80026f0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	2b18      	cmp	r3, #24
 8002666:	d802      	bhi.n	800266e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8002668:	23ff      	movs	r3, #255	; 0xff
 800266a:	72fb      	strb	r3, [r7, #11]
 800266c:	e040      	b.n	80026f0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002678:	ee17 0a90 	vmov	r0, s15
 800267c:	f7fd ff64 	bl	8000548 <__aeabi_f2d>
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <PCA9685_SetPwmFrequency+0xe8>)
 8002686:	f7fd ffb7 	bl	80005f8 <__aeabi_dmul>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	a126      	add	r1, pc, #152	; (adr r1, 8002728 <PCA9685_SetPwmFrequency+0xe0>)
 8002690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002694:	f7fe f8da 	bl	800084c <__aeabi_ddiv>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b23      	ldr	r3, [pc, #140]	; (8002734 <PCA9685_SetPwmFrequency+0xec>)
 80026a6:	f7fd fdef 	bl	8000288 <__aeabi_dsub>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fa99 	bl	8000be8 <__aeabi_d2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7fd ff44 	bl	8000548 <__aeabi_f2d>
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <PCA9685_SetPwmFrequency+0xf0>)
 80026c6:	f7fd fde1 	bl	800028c <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b17 	vmov	d7, r2, r3
 80026d2:	eeb0 0a47 	vmov.f32	s0, s14
 80026d6:	eef0 0a67 	vmov.f32	s1, s15
 80026da:	f009 fe01 	bl	800c2e0 <floor>
 80026de:	ec53 2b10 	vmov	r2, r3, d0
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fa5f 	bl	8000ba8 <__aeabi_d2uiz>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f7ff ff77 	bl	80025e4 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <PCA9685_SetPwmFrequency+0xf4>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	230a      	movs	r3, #10
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	2301      	movs	r3, #1
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	f107 030b 	add.w	r3, r7, #11
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2301      	movs	r3, #1
 800270a:	22fe      	movs	r2, #254	; 0xfe
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	f002 f94b 	bl	80049a8 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff ff66 	bl	80025e4 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8002718:	2001      	movs	r0, #1
 800271a:	f7ff ff73 	bl	8002604 <PCA9685_RestartMode>
	return PCA9685_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	00000000 	.word	0x00000000
 800272c:	4177d784 	.word	0x4177d784
 8002730:	40b00000 	.word	0x40b00000
 8002734:	3ff00000 	.word	0x3ff00000
 8002738:	3fe00000 	.word	0x3fe00000
 800273c:	200004ec 	.word	0x200004ec

08002740 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af04      	add	r7, sp, #16
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	460b      	mov	r3, r1
 800274c:	80bb      	strh	r3, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3306      	adds	r3, #6
 800275a:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 800275c:	88bb      	ldrh	r3, [r7, #4]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8002762:	88bb      	ldrh	r3, [r7, #4]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	b29b      	uxth	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	b29b      	uxth	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	72fb      	strb	r3, [r7, #11]

	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10);
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <PCA9685_SetPwm+0x74>)
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	b29a      	uxth	r2, r3
 8002784:	230a      	movs	r3, #10
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	2304      	movs	r3, #4
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	f107 0308 	add.w	r3, r7, #8
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	f002 f907 	bl	80049a8 <HAL_I2C_Mem_Write>
 800279a:	4603      	mov	r3, r0
 800279c:	73bb      	strb	r3, [r7, #14]
	if(status != HAL_OK)
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <PCA9685_SetPwm+0x68>
	{
		return PCA9685_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <PCA9685_SetPwm+0x6a>
	}

	return PCA9685_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200004ec 	.word	0x200004ec

080027b8 <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
 80027c2:	460b      	mov	r3, r1
 80027c4:	80bb      	strh	r3, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d0:	d302      	bcc.n	80027d8 <PCA9685_SetPin+0x20>
 80027d2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80027d6:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d025      	beq.n	800282a <PCA9685_SetPin+0x72>
    if (Value == 0) {
 80027de:	88bb      	ldrh	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d108      	bne.n	80027f6 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ffa7 	bl	8002740 <PCA9685_SetPwm>
 80027f2:	4603      	mov	r3, r0
 80027f4:	e03a      	b.n	800286c <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 80027f6:	88bb      	ldrh	r3, [r7, #4]
 80027f8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d108      	bne.n	8002812 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff99 	bl	8002740 <PCA9685_SetPwm>
 800280e:	4603      	mov	r3, r0
 8002810:	e02c      	b.n	800286c <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8002812:	88bb      	ldrh	r3, [r7, #4]
 8002814:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002818:	330f      	adds	r3, #15
 800281a:	b29a      	uxth	r2, r3
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff8d 	bl	8002740 <PCA9685_SetPwm>
 8002826:	4603      	mov	r3, r0
 8002828:	e020      	b.n	800286c <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800282a:	88bb      	ldrh	r3, [r7, #4]
 800282c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002830:	4293      	cmp	r3, r2
 8002832:	d108      	bne.n	8002846 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2200      	movs	r2, #0
 8002838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff7f 	bl	8002740 <PCA9685_SetPwm>
 8002842:	4603      	mov	r3, r0
 8002844:	e012      	b.n	800286c <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff73 	bl	8002740 <PCA9685_SetPwm>
 800285a:	4603      	mov	r3, r0
 800285c:	e006      	b.n	800286c <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 800285e:	88ba      	ldrh	r2, [r7, #4]
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff6b 	bl	8002740 <PCA9685_SetPwm>
 800286a:	4603      	mov	r3, r0
    }
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	0000      	movs	r0, r0
	...

08002878 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	ed87 0a00 	vstr	s0, [r7]
 8002884:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8002886:	edd7 7a00 	vldr	s15, [r7]
 800288a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	d502      	bpl.n	800289a <PCA9685_SetServoAngle+0x22>
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 800289a:	edd7 7a00 	vldr	s15, [r7]
 800289e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002920 <PCA9685_SetServoAngle+0xa8>
 80028a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028aa:	dd01      	ble.n	80028b0 <PCA9685_SetServoAngle+0x38>
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <PCA9685_SetServoAngle+0xac>)
 80028ae:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f7fd fe49 	bl	8000548 <__aeabi_f2d>
 80028b6:	a318      	add	r3, pc, #96	; (adr r3, 8002918 <PCA9685_SetServoAngle+0xa0>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd fe9c 	bl	80005f8 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <PCA9685_SetServoAngle+0xb0>)
 80028ce:	f7fd ffbd 	bl	800084c <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <PCA9685_SetServoAngle+0xb4>)
 80028e0:	f7fd fcd4 	bl	800028c <__adddf3>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f97c 	bl	8000be8 <__aeabi_d2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
 8002900:	b299      	uxth	r1, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2200      	movs	r2, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff56 	bl	80027b8 <PCA9685_SetPin>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00000000 	.word	0x00000000
 800291c:	40786000 	.word	0x40786000
 8002920:	43340000 	.word	0x43340000
 8002924:	43340000 	.word	0x43340000
 8002928:	40668000 	.word	0x40668000
 800292c:	405b8000 	.word	0x405b8000

08002930 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <PCA9685_Init+0x28>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 800293e:	f7ff fe37 	bl	80025b0 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8002942:	2030      	movs	r0, #48	; 0x30
 8002944:	f7ff fe80 	bl	8002648 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8002948:	2001      	movs	r0, #1
 800294a:	f7ff fe6b 	bl	8002624 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200004ec 	.word	0x200004ec

0800295c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_MspInit+0x4c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_MspInit+0x4c>)
 800296c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_MspInit+0x4c>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_MspInit+0x4c>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a08      	ldr	r2, [pc, #32]	; (80029a8 <HAL_MspInit+0x4c>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_MspInit+0x4c>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_I2C_MspInit+0x84>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12c      	bne.n	8002a28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_I2C_MspInit+0x88>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_I2C_MspInit+0x88>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_I2C_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f0:	2312      	movs	r3, #18
 80029f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029fc:	2304      	movs	r3, #4
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	480c      	ldr	r0, [pc, #48]	; (8002a38 <HAL_I2C_MspInit+0x8c>)
 8002a08:	f001 f98c 	bl	8003d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_I2C_MspInit+0x88>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <HAL_I2C_MspInit+0x88>)
 8002a16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_I2C_MspInit+0x88>)
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40005800 	.word	0x40005800
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a68      	ldr	r2, [pc, #416]	; (8002bfc <HAL_SD_MspInit+0x1c0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 80c9 	bne.w	8002bf2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	4b66      	ldr	r3, [pc, #408]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	4a65      	ldr	r2, [pc, #404]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a70:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	4b5f      	ldr	r3, [pc, #380]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a5e      	ldr	r2, [pc, #376]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b5c      	ldr	r3, [pc, #368]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	4b58      	ldr	r3, [pc, #352]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a57      	ldr	r2, [pc, #348]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <HAL_SD_MspInit+0x1c4>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002ab4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	484c      	ldr	r0, [pc, #304]	; (8002c04 <HAL_SD_MspInit+0x1c8>)
 8002ad2:	f001 f927 	bl	8003d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ae6:	230c      	movs	r3, #12
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4845      	ldr	r0, [pc, #276]	; (8002c08 <HAL_SD_MspInit+0x1cc>)
 8002af2:	f001 f917 	bl	8003d24 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002af8:	4a45      	ldr	r2, [pc, #276]	; (8002c10 <HAL_SD_MspInit+0x1d4>)
 8002afa:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002afc:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b02:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b04:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b10:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b16:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b18:	4b3c      	ldr	r3, [pc, #240]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b1e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b20:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b26:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b34:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b36:	2204      	movs	r2, #4
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b3a:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002b48:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002b50:	482e      	ldr	r0, [pc, #184]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b52:	f000 fcd9 	bl	8003508 <HAL_DMA_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8002b5c:	f7ff fcc8 	bl	80024f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_SD_MspInit+0x1d0>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002b6c:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <HAL_SD_MspInit+0x1dc>)
 8002b70:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002b72:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b78:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b94:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002b98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bac:	2204      	movs	r2, #4
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002bc6:	4813      	ldr	r0, [pc, #76]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bc8:	f000 fc9e 	bl	8003508 <HAL_DMA_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8002bd2:	f7ff fc8d 	bl	80024f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_SD_MspInit+0x1d8>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	2031      	movs	r0, #49	; 0x31
 8002be8:	f000 fc57 	bl	800349a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002bec:	2031      	movs	r0, #49	; 0x31
 8002bee:	f000 fc70 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002bf2:	bf00      	nop
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020c00 	.word	0x40020c00
 8002c0c:	20000318 	.word	0x20000318
 8002c10:	40026458 	.word	0x40026458
 8002c14:	20000378 	.word	0x20000378
 8002c18:	400264a0 	.word	0x400264a0

08002c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <HAL_SPI_MspInit+0xe8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12c      	bne.n	8002c98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c76:	23e0      	movs	r3, #224	; 0xe0
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c82:	2303      	movs	r3, #3
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c86:	2305      	movs	r3, #5
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481e      	ldr	r0, [pc, #120]	; (8002d0c <HAL_SPI_MspInit+0xf0>)
 8002c92:	f001 f847 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c96:	e030      	b.n	8002cfa <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_SPI_MspInit+0xf4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d12b      	bne.n	8002cfa <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_SPI_MspInit+0xec>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cda:	2338      	movs	r3, #56	; 0x38
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cea:	2306      	movs	r3, #6
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <HAL_SPI_MspInit+0xf8>)
 8002cf6:	f001 f815 	bl	8003d24 <HAL_GPIO_Init>
}
 8002cfa:	bf00      	nop
 8002cfc:	3730      	adds	r7, #48	; 0x30
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40013000 	.word	0x40013000
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40003c00 	.word	0x40003c00
 8002d14:	40020400 	.word	0x40020400

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d1c:	e7fe      	b.n	8002d1c <NMI_Handler+0x4>

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d64:	f000 fa7a 	bl	800325c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <SDIO_IRQHandler+0x10>)
 8002d72:	f003 fd5f 	bl	8006834 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000294 	.word	0x20000294

08002d80 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <DMA2_Stream3_IRQHandler+0x10>)
 8002d86:	f000 fd57 	bl	8003838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000318 	.word	0x20000318

08002d94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <DMA2_Stream6_IRQHandler+0x10>)
 8002d9a:	f000 fd4d 	bl	8003838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000378 	.word	0x20000378

08002da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return 1;
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_kill>:

int _kill(int pid, int sig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dc2:	f007 fa77 	bl	800a2b4 <__errno>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2216      	movs	r2, #22
 8002dca:	601a      	str	r2, [r3, #0]
  return -1;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_exit>:

void _exit (int status)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ffe7 	bl	8002db8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dea:	e7fe      	b.n	8002dea <_exit+0x12>

08002dec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e00a      	b.n	8002e14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dfe:	f3af 8000 	nop.w
 8002e02:	4601      	mov	r1, r0
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	60ba      	str	r2, [r7, #8]
 8002e0a:	b2ca      	uxtb	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbf0      	blt.n	8002dfe <_read+0x12>
  }

  return len;
 8002e1c:	687b      	ldr	r3, [r7, #4]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e009      	b.n	8002e4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	60ba      	str	r2, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	dbf1      	blt.n	8002e38 <_write+0x12>
  }
  return len;
 8002e54:	687b      	ldr	r3, [r7, #4]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_close>:

int _close(int file)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e86:	605a      	str	r2, [r3, #4]
  return 0;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <_isatty>:

int _isatty(int file)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e9e:	2301      	movs	r3, #1
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ed0:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <_sbrk+0x5c>)
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <_sbrk+0x60>)
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <_sbrk+0x64>)
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <_sbrk+0x68>)
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <_sbrk+0x64>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d207      	bcs.n	8002f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef8:	f007 f9dc 	bl	800a2b4 <__errno>
 8002efc:	4603      	mov	r3, r0
 8002efe:	220c      	movs	r2, #12
 8002f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e009      	b.n	8002f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <_sbrk+0x64>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <_sbrk+0x64>)
 8002f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20020000 	.word	0x20020000
 8002f28:	00000800 	.word	0x00000800
 8002f2c:	200004f0 	.word	0x200004f0
 8002f30:	20000660 	.word	0x20000660

08002f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <SystemInit+0x20>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3e:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <SystemInit+0x20>)
 8002f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <cs_on>:
 * @brief  Enables CS (driving it low) of the W25Qxx
 *
 * @param  W25Qxx handle
 * @retval None
 */
static inline void cs_on(W25QXX_HandleTypeDef *w25qxx) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(w25qxx->cs_port, w25qxx->cs_pin, GPIO_PIN_RESET);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6858      	ldr	r0, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	891b      	ldrh	r3, [r3, #8]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f001 f88e 	bl	800408c <HAL_GPIO_WritePin>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <cs_off>:
 * @brief  Disables CS (driving it high) of the W25Qxx
 *
 * @param  W25Qxx handle
 * @retval None
 */
static inline void cs_off(W25QXX_HandleTypeDef *w25qxx) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(w25qxx->cs_port, w25qxx->cs_pin, GPIO_PIN_SET);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6858      	ldr	r0, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	891b      	ldrh	r3, [r3, #8]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f001 f87e 	bl	800408c <HAL_GPIO_WritePin>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <w25qxx_transmit>:
 * @param  W25Qxx handle
 * @param  Pointer to buffer with data to transmit
 * @param  Length (in bytes) of data to be transmitted
 * @retval None
 */
W25QXX_result_t w25qxx_transmit(W25QXX_HandleTypeDef *w25qxx, uint8_t *buf, uint32_t len) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
    W25QXX_result_t ret = W25QXX_Err;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
    if (HAL_SPI_Transmit(w25qxx->spiHandle, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	f004 fb7e 	bl	80076b6 <HAL_SPI_Transmit>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <w25qxx_transmit+0x2c>
        ret = W25QXX_Ok;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <w25qxx_receive>:

/*
 * Receive data from w25qxx
 */
W25QXX_result_t w25qxx_receive(W25QXX_HandleTypeDef *w25qxx, uint8_t *buf, uint32_t len) {
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
    W25QXX_result_t ret = W25QXX_Err;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    if (HAL_SPI_Receive(w25qxx->spiHandle, buf, len, HAL_MAX_DELAY) == HAL_OK) {
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	f004 fcbc 	bl	8007968 <HAL_SPI_Receive>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <w25qxx_receive+0x2c>
        ret = W25QXX_Ok;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <w25qxx_read_id>:

uint32_t w25qxx_read_id(W25QXX_HandleTypeDef *w25qxx) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
    uint32_t ret = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
    uint8_t buf[3];
    cs_on(w25qxx);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ffa1 	bl	8002f58 <cs_on>
    buf[0] = W25QXX_GET_ID;
 8003016:	239f      	movs	r3, #159	; 0x9f
 8003018:	723b      	strb	r3, [r7, #8]
    if (w25qxx_transmit(w25qxx, buf, 1) == W25QXX_Ok) {
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	2201      	movs	r2, #1
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff ffb8 	bl	8002f98 <w25qxx_transmit>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d111      	bne.n	8003052 <w25qxx_read_id+0x4e>
    	if (w25qxx_receive(w25qxx, buf, 3) == W25QXX_Ok) {
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	2203      	movs	r2, #3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffc9 	bl	8002fce <w25qxx_receive>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <w25qxx_read_id+0x4e>
            ret = (uint32_t) ((buf[0] << 16) | (buf[1] << 8) | (buf[2]));
 8003042:	7a3b      	ldrb	r3, [r7, #8]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	7a7b      	ldrb	r3, [r7, #9]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	4313      	orrs	r3, r2
 800304c:	7aba      	ldrb	r2, [r7, #10]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
        }
    }
    cs_off(w25qxx);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff90 	bl	8002f78 <cs_off>
    return ret;
 8003058:	68fb      	ldr	r3, [r7, #12]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <w25qxx_init>:
#ifdef W25QXX_QSPI
W25QXX_result_t w25qxx_init(W25QXX_HandleTypeDef *w25qxx, QSPI_HandleTypeDef *qhspi) {

}
#else
W25QXX_result_t w25qxx_init(W25QXX_HandleTypeDef *w25qxx, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin) {
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	807b      	strh	r3, [r7, #2]

    W25QXX_result_t result = W25QXX_Ok;
 8003070:	2300      	movs	r3, #0
 8003072:	75fb      	strb	r3, [r7, #23]

    W25_DBG("w25qxx_init");

    w25qxx->spiHandle = hspi;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	601a      	str	r2, [r3, #0]
    w25qxx->cs_port = cs_port;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	605a      	str	r2, [r3, #4]
    w25qxx->cs_pin = cs_pin;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	811a      	strh	r2, [r3, #8]

    cs_off(w25qxx);
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7ff ff76 	bl	8002f78 <cs_off>

    uint32_t id = w25qxx_read_id(w25qxx);
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff ffb9 	bl	8003004 <w25qxx_read_id>
 8003092:	6138      	str	r0, [r7, #16]
    if (id) {
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d055      	beq.n	8003146 <w25qxx_init+0xe4>
        w25qxx->manufacturer_id = (uint8_t) (id >> 16);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	729a      	strb	r2, [r3, #10]
        w25qxx->device_id = (uint16_t) (id & 0xFFFF);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	819a      	strh	r2, [r3, #12]

        switch (w25qxx->manufacturer_id) {
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	7a9b      	ldrb	r3, [r3, #10]
 80030b0:	2bc8      	cmp	r3, #200	; 0xc8
 80030b2:	d002      	beq.n	80030ba <w25qxx_init+0x58>
 80030b4:	2bef      	cmp	r3, #239	; 0xef
 80030b6:	d021      	beq.n	80030fc <w25qxx_init+0x9a>
 80030b8:	e042      	b.n	8003140 <w25qxx_init+0xde>
        case W25QXX_MANUFACTURER_GIGADEVICE:

            w25qxx->block_size = 0x10000;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030c0:	611a      	str	r2, [r3, #16]
            w25qxx->sector_size = 0x1000;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c8:	619a      	str	r2, [r3, #24]
            w25qxx->sectors_in_block = 0x10;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	61da      	str	r2, [r3, #28]
            w25qxx->page_size = 0x100;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	621a      	str	r2, [r3, #32]
            w25qxx->pages_in_sector = 0x10;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2210      	movs	r2, #16
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

            switch (w25qxx->device_id) {
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	899b      	ldrh	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f246 0317 	movw	r3, #24599	; 0x6017
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d104      	bne.n	80030f6 <w25qxx_init+0x94>
            case 0x6017:
                w25qxx->block_count = 0x80;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	615a      	str	r2, [r3, #20]
                break;
 80030f2:	bf00      	nop
            default:
                W25_DBG("Unknown Giga Device device");
                result = W25QXX_Err;
            }

            break;
 80030f4:	e029      	b.n	800314a <w25qxx_init+0xe8>
                result = W25QXX_Err;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
            break;
 80030fa:	e026      	b.n	800314a <w25qxx_init+0xe8>
        case W25QXX_MANUFACTURER_WINBOND:

            w25qxx->block_size = 0x10000;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003102:	611a      	str	r2, [r3, #16]
            w25qxx->sector_size = 0x1000;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800310a:	619a      	str	r2, [r3, #24]
            w25qxx->sectors_in_block = 0x10;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2210      	movs	r2, #16
 8003110:	61da      	str	r2, [r3, #28]
            w25qxx->page_size = 0x100;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003118:	621a      	str	r2, [r3, #32]
            w25qxx->pages_in_sector = 0x10;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2210      	movs	r2, #16
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

            switch (w25qxx->device_id) {
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	899b      	ldrh	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f244 0318 	movw	r3, #16408	; 0x4018
 800312a:	429a      	cmp	r2, r3
 800312c:	d105      	bne.n	800313a <w25qxx_init+0xd8>
            case 0x4018:
                w25qxx->block_count = 0x100;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003134:	615a      	str	r2, [r3, #20]
                break;
 8003136:	bf00      	nop
            default:
                W25_DBG("Unknown Winbond device");
                result = W25QXX_Err;
            }

            break;
 8003138:	e007      	b.n	800314a <w25qxx_init+0xe8>
                result = W25QXX_Err;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
            break;
 800313e:	e004      	b.n	800314a <w25qxx_init+0xe8>
        default:
            W25_DBG("Unknown manufacturer");
            result = W25QXX_Err;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
 8003144:	e001      	b.n	800314a <w25qxx_init+0xe8>
        }
    } else {
        result = W25QXX_Err;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if (result == W25QXX_Err) {
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d104      	bne.n	800315a <w25qxx_init+0xf8>
        // Zero the handle so it is clear initialization failed!
        memset(w25qxx, 0, sizeof(W25QXX_HandleTypeDef));
 8003150:	2228      	movs	r2, #40	; 0x28
 8003152:	2100      	movs	r1, #0
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f007 f85b 	bl	800a210 <memset>
    }
    return result;
 800315a:	7dfb      	ldrb	r3, [r7, #23]

}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800319c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003168:	f7ff fee4 	bl	8002f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800316c:	480c      	ldr	r0, [pc, #48]	; (80031a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800316e:	490d      	ldr	r1, [pc, #52]	; (80031a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003174:	e002      	b.n	800317c <LoopCopyDataInit>

08003176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317a:	3304      	adds	r3, #4

0800317c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800317c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800317e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003180:	d3f9      	bcc.n	8003176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003182:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003184:	4c0a      	ldr	r4, [pc, #40]	; (80031b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003188:	e001      	b.n	800318e <LoopFillZerobss>

0800318a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800318c:	3204      	adds	r2, #4

0800318e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800318e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003190:	d3fb      	bcc.n	800318a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003192:	f007 f895 	bl	800a2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003196:	f7fe fe61 	bl	8001e5c <main>
  bx  lr    
 800319a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800319c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80031a8:	0800ca54 	.word	0x0800ca54
  ldr r2, =_sbss
 80031ac:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80031b0:	20000660 	.word	0x20000660

080031b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC_IRQHandler>
	...

080031b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <HAL_Init+0x40>)
 80031c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_Init+0x40>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <HAL_Init+0x40>)
 80031ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <HAL_Init+0x40>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <HAL_Init+0x40>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e0:	2003      	movs	r0, #3
 80031e2:	f000 f94f 	bl	8003484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031e6:	200f      	movs	r0, #15
 80031e8:	f000 f808 	bl	80031fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031ec:	f7ff fbb6 	bl	800295c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00

080031fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_InitTick+0x54>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_InitTick+0x58>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	fbb3 f3f1 	udiv	r3, r3, r1
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f967 	bl	80034ee <HAL_SYSTICK_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e00e      	b.n	8003248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d80a      	bhi.n	8003246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003230:	2200      	movs	r2, #0
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	f04f 30ff 	mov.w	r0, #4294967295
 8003238:	f000 f92f 	bl	800349a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800323c:	4a06      	ldr	r2, [pc, #24]	; (8003258 <HAL_InitTick+0x5c>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	2000001c 	.word	0x2000001c
 8003254:	20000024 	.word	0x20000024
 8003258:	20000020 	.word	0x20000020

0800325c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_IncTick+0x20>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_IncTick+0x24>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4413      	add	r3, r2
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_IncTick+0x24>)
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000024 	.word	0x20000024
 8003280:	200004f4 	.word	0x200004f4

08003284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return uwTick;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_GetTick+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	200004f4 	.word	0x200004f4

0800329c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7ff ffee 	bl	8003284 <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d005      	beq.n	80032c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_Delay+0x44>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032c2:	bf00      	nop
 80032c4:	f7ff ffde 	bl	8003284 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d8f7      	bhi.n	80032c4 <HAL_Delay+0x28>
  {
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000024 	.word	0x20000024

080032e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003300:	4013      	ands	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800330c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003316:	4a04      	ldr	r2, [pc, #16]	; (8003328 <__NVIC_SetPriorityGrouping+0x44>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	60d3      	str	r3, [r2, #12]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <__NVIC_GetPriorityGrouping+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 0307 	and.w	r3, r3, #7
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	2b00      	cmp	r3, #0
 8003358:	db0b      	blt.n	8003372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4907      	ldr	r1, [pc, #28]	; (8003380 <__NVIC_EnableIRQ+0x38>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2001      	movs	r0, #1
 800336a:	fa00 f202 	lsl.w	r2, r0, r2
 800336e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e100 	.word	0xe000e100

08003384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	6039      	str	r1, [r7, #0]
 800338e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	2b00      	cmp	r3, #0
 8003396:	db0a      	blt.n	80033ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	490c      	ldr	r1, [pc, #48]	; (80033d0 <__NVIC_SetPriority+0x4c>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	440b      	add	r3, r1
 80033a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ac:	e00a      	b.n	80033c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	4908      	ldr	r1, [pc, #32]	; (80033d4 <__NVIC_SetPriority+0x50>)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	3b04      	subs	r3, #4
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	761a      	strb	r2, [r3, #24]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000e100 	.word	0xe000e100
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f1c3 0307 	rsb	r3, r3, #7
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	bf28      	it	cs
 80033f6:	2304      	movcs	r3, #4
 80033f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d902      	bls.n	8003408 <NVIC_EncodePriority+0x30>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3b03      	subs	r3, #3
 8003406:	e000      	b.n	800340a <NVIC_EncodePriority+0x32>
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	401a      	ands	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003420:	f04f 31ff 	mov.w	r1, #4294967295
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	43d9      	mvns	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	4313      	orrs	r3, r2
         );
}
 8003432:	4618      	mov	r0, r3
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3b01      	subs	r3, #1
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003450:	d301      	bcc.n	8003456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003452:	2301      	movs	r3, #1
 8003454:	e00f      	b.n	8003476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <SysTick_Config+0x40>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345e:	210f      	movs	r1, #15
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f7ff ff8e 	bl	8003384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <SysTick_Config+0x40>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <SysTick_Config+0x40>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	e000e010 	.word	0xe000e010

08003484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ff29 	bl	80032e4 <__NVIC_SetPriorityGrouping>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349a:	b580      	push	{r7, lr}
 800349c:	b086      	sub	sp, #24
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ac:	f7ff ff3e 	bl	800332c <__NVIC_GetPriorityGrouping>
 80034b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff8e 	bl	80033d8 <NVIC_EncodePriority>
 80034bc:	4602      	mov	r2, r0
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff5d 	bl	8003384 <__NVIC_SetPriority>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff31 	bl	8003348 <__NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffa2 	bl	8003440 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff feb6 	bl	8003284 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e099      	b.n	8003658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003544:	e00f      	b.n	8003566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003546:	f7ff fe9d 	bl	8003284 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b05      	cmp	r3, #5
 8003552:	d908      	bls.n	8003566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2220      	movs	r2, #32
 8003558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2203      	movs	r2, #3
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e078      	b.n	8003658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e8      	bne.n	8003546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4b38      	ldr	r3, [pc, #224]	; (8003660 <HAL_DMA_Init+0x158>)
 8003580:	4013      	ands	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d107      	bne.n	80035d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	4313      	orrs	r3, r2
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0307 	bic.w	r3, r3, #7
 80035e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d117      	bne.n	800362a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb0d 	bl	8003c2c <DMA_CheckFifoParam>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2240      	movs	r2, #64	; 0x40
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003626:	2301      	movs	r3, #1
 8003628:	e016      	b.n	8003658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fac4 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 8003638:	4603      	mov	r3, r0
 800363a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	223f      	movs	r2, #63	; 0x3f
 8003642:	409a      	lsls	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	f010803f 	.word	0xf010803f

08003664 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_DMA_Start_IT+0x26>
 8003686:	2302      	movs	r3, #2
 8003688:	e040      	b.n	800370c <HAL_DMA_Start_IT+0xa8>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d12f      	bne.n	80036fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fa56 	bl	8003b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	223f      	movs	r2, #63	; 0x3f
 80036be:	409a      	lsls	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0216 	orr.w	r2, r2, #22
 80036d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0208 	orr.w	r2, r2, #8
 80036ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e005      	b.n	800370a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003706:	2302      	movs	r3, #2
 8003708:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800370a:	7dfb      	ldrb	r3, [r7, #23]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003720:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003722:	f7ff fdaf 	bl	8003284 <HAL_GetTick>
 8003726:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d008      	beq.n	8003746 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e052      	b.n	80037ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0216 	bic.w	r2, r2, #22
 8003754:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003764:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <HAL_DMA_Abort+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0208 	bic.w	r2, r2, #8
 8003784:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003796:	e013      	b.n	80037c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003798:	f7ff fd74 	bl	8003284 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d90c      	bls.n	80037c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2203      	movs	r2, #3
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e015      	b.n	80037ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e4      	bne.n	8003798 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	223f      	movs	r2, #63	; 0x3f
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e00c      	b.n	800382c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2205      	movs	r2, #5
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003844:	4b8e      	ldr	r3, [pc, #568]	; (8003a80 <HAL_DMA_IRQHandler+0x248>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a8e      	ldr	r2, [pc, #568]	; (8003a84 <HAL_DMA_IRQHandler+0x24c>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	0a9b      	lsrs	r3, r3, #10
 8003850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2208      	movs	r2, #8
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	2208      	movs	r2, #8
 8003892:	409a      	lsls	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c6:	2201      	movs	r2, #1
 80038c8:	409a      	lsls	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	2204      	movs	r2, #4
 80038e0:	409a      	lsls	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	2204      	movs	r2, #4
 80038fe:	409a      	lsls	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2210      	movs	r2, #16
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d043      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d03c      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	2210      	movs	r2, #16
 8003934:	409a      	lsls	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d024      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e01f      	b.n	80039a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e016      	b.n	80039a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d107      	bne.n	8003998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0208 	bic.w	r2, r2, #8
 8003996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2220      	movs	r2, #32
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 808f 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8087 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2220      	movs	r2, #32
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b05      	cmp	r3, #5
 80039e0:	d136      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0216 	bic.w	r2, r2, #22
 80039f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x1da>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0208 	bic.w	r2, r2, #8
 8003a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	223f      	movs	r2, #63	; 0x3f
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d07e      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
        }
        return;
 8003a4e:	e079      	b.n	8003b44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d031      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
 8003a7c:	e02c      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
 8003a7e:	bf00      	nop
 8003a80:	2000001c 	.word	0x2000001c
 8003a84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d023      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e01e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0210 	bic.w	r2, r2, #16
 8003ab6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d032      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2205      	movs	r2, #5
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d307      	bcc.n	8003b20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f2      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x2cc>
 8003b1e:	e000      	b.n	8003b22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e000      	b.n	8003b46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b44:	bf00      	nop
    }
  }
}
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d108      	bne.n	8003ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ba2:	e007      	b.n	8003bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	3b10      	subs	r3, #16
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <DMA_CalcBaseAndBitshift+0x64>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bda:	4a13      	ldr	r2, [pc, #76]	; (8003c28 <DMA_CalcBaseAndBitshift+0x68>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d909      	bls.n	8003c02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8003c00:	e007      	b.n	8003c12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	aaaaaaab 	.word	0xaaaaaaab
 8003c28:	0800c6b8 	.word	0x0800c6b8

08003c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d856      	bhi.n	8003cfa <DMA_CheckFifoParam+0xce>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <DMA_CheckFifoParam+0x28>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c77 	.word	0x08003c77
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	08003cfb 	.word	0x08003cfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d046      	beq.n	8003cfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e043      	b.n	8003cfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c7e:	d140      	bne.n	8003d02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c84:	e03d      	b.n	8003d02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	d121      	bne.n	8003cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d837      	bhi.n	8003d06 <DMA_CheckFifoParam+0xda>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <DMA_CheckFifoParam+0x70>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cb3 	.word	0x08003cb3
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003cc5 	.word	0x08003cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e030      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d025      	beq.n	8003d0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e022      	b.n	8003d0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cd2:	e01c      	b.n	8003d0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d903      	bls.n	8003ce2 <DMA_CheckFifoParam+0xb6>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ce0:	e018      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce6:	e015      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e00b      	b.n	8003d12 <DMA_CheckFifoParam+0xe6>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e00a      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e008      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e006      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
 8003d08:	e004      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
    }
  } 
  
  return status; 
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e16b      	b.n	8004018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 815a 	bne.w	8004012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d130      	bne.n	8003dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0201 	and.w	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d017      	beq.n	8003e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80b4 	beq.w	8004012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b60      	ldr	r3, [pc, #384]	; (8004030 <HAL_GPIO_Init+0x30c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a5f      	ldr	r2, [pc, #380]	; (8004030 <HAL_GPIO_Init+0x30c>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b5d      	ldr	r3, [pc, #372]	; (8004030 <HAL_GPIO_Init+0x30c>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec6:	4a5b      	ldr	r2, [pc, #364]	; (8004034 <HAL_GPIO_Init+0x310>)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a52      	ldr	r2, [pc, #328]	; (8004038 <HAL_GPIO_Init+0x314>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d02b      	beq.n	8003f4a <HAL_GPIO_Init+0x226>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a51      	ldr	r2, [pc, #324]	; (800403c <HAL_GPIO_Init+0x318>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d025      	beq.n	8003f46 <HAL_GPIO_Init+0x222>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a50      	ldr	r2, [pc, #320]	; (8004040 <HAL_GPIO_Init+0x31c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01f      	beq.n	8003f42 <HAL_GPIO_Init+0x21e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4f      	ldr	r2, [pc, #316]	; (8004044 <HAL_GPIO_Init+0x320>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d019      	beq.n	8003f3e <HAL_GPIO_Init+0x21a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4e      	ldr	r2, [pc, #312]	; (8004048 <HAL_GPIO_Init+0x324>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <HAL_GPIO_Init+0x216>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4d      	ldr	r2, [pc, #308]	; (800404c <HAL_GPIO_Init+0x328>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00d      	beq.n	8003f36 <HAL_GPIO_Init+0x212>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4c      	ldr	r2, [pc, #304]	; (8004050 <HAL_GPIO_Init+0x32c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <HAL_GPIO_Init+0x20e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_GPIO_Init+0x330>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_GPIO_Init+0x20a>
 8003f2a:	2307      	movs	r3, #7
 8003f2c:	e00e      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f2e:	2308      	movs	r3, #8
 8003f30:	e00c      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f32:	2306      	movs	r3, #6
 8003f34:	e00a      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f36:	2305      	movs	r3, #5
 8003f38:	e008      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	e006      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e004      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e002      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_GPIO_Init+0x228>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	f002 0203 	and.w	r2, r2, #3
 8003f52:	0092      	lsls	r2, r2, #2
 8003f54:	4093      	lsls	r3, r2
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f5c:	4935      	ldr	r1, [pc, #212]	; (8004034 <HAL_GPIO_Init+0x310>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	3302      	adds	r3, #2
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f8e:	4a32      	ldr	r2, [pc, #200]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f94:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb8:	4a27      	ldr	r2, [pc, #156]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fbe:	4b26      	ldr	r3, [pc, #152]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_GPIO_Init+0x334>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_GPIO_Init+0x334>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3301      	adds	r3, #1
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b0f      	cmp	r3, #15
 800401c:	f67f ae90 	bls.w	8003d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	40013800 	.word	0x40013800
 8004038:	40020000 	.word	0x40020000
 800403c:	40020400 	.word	0x40020400
 8004040:	40020800 	.word	0x40020800
 8004044:	40020c00 	.word	0x40020c00
 8004048:	40021000 	.word	0x40021000
 800404c:	40021400 	.word	0x40021400
 8004050:	40021800 	.word	0x40021800
 8004054:	40021c00 	.word	0x40021c00
 8004058:	40013c00 	.word	0x40013c00

0800405c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	e001      	b.n	800407e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	807b      	strh	r3, [r7, #2]
 8004098:	4613      	mov	r3, r2
 800409a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800409c:	787b      	ldrb	r3, [r7, #1]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040a8:	e003      	b.n	80040b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	619a      	str	r2, [r3, #24]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e12b      	b.n	800432a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe fc60 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	; 0x24
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004112:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004122:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004124:	f002 f8fa 	bl	800631c <HAL_RCC_GetPCLK1Freq>
 8004128:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4a81      	ldr	r2, [pc, #516]	; (8004334 <HAL_I2C_Init+0x274>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d807      	bhi.n	8004144 <HAL_I2C_Init+0x84>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a80      	ldr	r2, [pc, #512]	; (8004338 <HAL_I2C_Init+0x278>)
 8004138:	4293      	cmp	r3, r2
 800413a:	bf94      	ite	ls
 800413c:	2301      	movls	r3, #1
 800413e:	2300      	movhi	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	e006      	b.n	8004152 <HAL_I2C_Init+0x92>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a7d      	ldr	r2, [pc, #500]	; (800433c <HAL_I2C_Init+0x27c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	bf94      	ite	ls
 800414c:	2301      	movls	r3, #1
 800414e:	2300      	movhi	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e0e7      	b.n	800432a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a78      	ldr	r2, [pc, #480]	; (8004340 <HAL_I2C_Init+0x280>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a6a      	ldr	r2, [pc, #424]	; (8004334 <HAL_I2C_Init+0x274>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d802      	bhi.n	8004194 <HAL_I2C_Init+0xd4>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3301      	adds	r3, #1
 8004192:	e009      	b.n	80041a8 <HAL_I2C_Init+0xe8>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	4a69      	ldr	r2, [pc, #420]	; (8004344 <HAL_I2C_Init+0x284>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	099b      	lsrs	r3, r3, #6
 80041a6:	3301      	adds	r3, #1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	495c      	ldr	r1, [pc, #368]	; (8004334 <HAL_I2C_Init+0x274>)
 80041c4:	428b      	cmp	r3, r1
 80041c6:	d819      	bhi.n	80041fc <HAL_I2C_Init+0x13c>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1e59      	subs	r1, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041d6:	1c59      	adds	r1, r3, #1
 80041d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041dc:	400b      	ands	r3, r1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_I2C_Init+0x138>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1e59      	subs	r1, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f6:	e051      	b.n	800429c <HAL_I2C_Init+0x1dc>
 80041f8:	2304      	movs	r3, #4
 80041fa:	e04f      	b.n	800429c <HAL_I2C_Init+0x1dc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d111      	bne.n	8004228 <HAL_I2C_Init+0x168>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	440b      	add	r3, r1
 8004212:	fbb0 f3f3 	udiv	r3, r0, r3
 8004216:	3301      	adds	r3, #1
 8004218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e012      	b.n	800424e <HAL_I2C_Init+0x18e>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1e58      	subs	r0, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	0099      	lsls	r1, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf0c      	ite	eq
 8004248:	2301      	moveq	r3, #1
 800424a:	2300      	movne	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_I2C_Init+0x196>
 8004252:	2301      	movs	r3, #1
 8004254:	e022      	b.n	800429c <HAL_I2C_Init+0x1dc>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10e      	bne.n	800427c <HAL_I2C_Init+0x1bc>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e58      	subs	r0, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	440b      	add	r3, r1
 800426c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004270:	3301      	adds	r3, #1
 8004272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427a:	e00f      	b.n	800429c <HAL_I2C_Init+0x1dc>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1e58      	subs	r0, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	0099      	lsls	r1, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	6809      	ldr	r1, [r1, #0]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6911      	ldr	r1, [r2, #16]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	430b      	orrs	r3, r1
 80042de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	000186a0 	.word	0x000186a0
 8004338:	001e847f 	.word	0x001e847f
 800433c:	003d08ff 	.word	0x003d08ff
 8004340:	431bde83 	.word	0x431bde83
 8004344:	10624dd3 	.word	0x10624dd3

08004348 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	607a      	str	r2, [r7, #4]
 8004352:	461a      	mov	r2, r3
 8004354:	460b      	mov	r3, r1
 8004356:	817b      	strh	r3, [r7, #10]
 8004358:	4613      	mov	r3, r2
 800435a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800435c:	f7fe ff92 	bl	8003284 <HAL_GetTick>
 8004360:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	f040 80e0 	bne.w	8004530 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2319      	movs	r3, #25
 8004376:	2201      	movs	r2, #1
 8004378:	4970      	ldr	r1, [pc, #448]	; (800453c <HAL_I2C_Master_Transmit+0x1f4>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 f928 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
 8004388:	e0d3      	b.n	8004532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_I2C_Master_Transmit+0x50>
 8004394:	2302      	movs	r3, #2
 8004396:	e0cc      	b.n	8004532 <HAL_I2C_Master_Transmit+0x1ea>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d007      	beq.n	80043be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2221      	movs	r2, #33	; 0x21
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2210      	movs	r2, #16
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	893a      	ldrh	r2, [r7, #8]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a50      	ldr	r2, [pc, #320]	; (8004540 <HAL_I2C_Master_Transmit+0x1f8>)
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004400:	8979      	ldrh	r1, [r7, #10]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fe14 	bl	8005034 <I2C_MasterRequestWrite>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e08d      	b.n	8004532 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800442c:	e066      	b.n	80044fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 f9e6 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d107      	bne.n	8004456 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e06b      	b.n	8004532 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b04      	cmp	r3, #4
 8004496:	d11b      	bne.n	80044d0 <HAL_I2C_Master_Transmit+0x188>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	6a39      	ldr	r1, [r7, #32]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f001 f9dd 	bl	8005894 <I2C_WaitOnBTFFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d107      	bne.n	80044f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e01a      	b.n	8004532 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d194      	bne.n	800442e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	00100002 	.word	0x00100002
 8004540:	ffff0000 	.word	0xffff0000

08004544 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08c      	sub	sp, #48	; 0x30
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	460b      	mov	r3, r1
 8004552:	817b      	strh	r3, [r7, #10]
 8004554:	4613      	mov	r3, r2
 8004556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004558:	f7fe fe94 	bl	8003284 <HAL_GetTick>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	f040 8217 	bne.w	800499a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2319      	movs	r3, #25
 8004572:	2201      	movs	r2, #1
 8004574:	497c      	ldr	r1, [pc, #496]	; (8004768 <HAL_I2C_Master_Receive+0x224>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f001 f82a 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	e20a      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_I2C_Master_Receive+0x50>
 8004590:	2302      	movs	r3, #2
 8004592:	e203      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d007      	beq.n	80045ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2222      	movs	r2, #34	; 0x22
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2210      	movs	r2, #16
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	893a      	ldrh	r2, [r7, #8]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a5c      	ldr	r2, [pc, #368]	; (800476c <HAL_I2C_Master_Receive+0x228>)
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045fc:	8979      	ldrh	r1, [r7, #10]
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fd98 	bl	8005138 <I2C_MasterRequestRead>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1c4      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d113      	bne.n	8004642 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e198      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	2b01      	cmp	r3, #1
 8004648:	d11b      	bne.n	8004682 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e178      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	2b02      	cmp	r3, #2
 8004688:	d11b      	bne.n	80046c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	e158      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046e8:	e144      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	f200 80f1 	bhi.w	80048d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d123      	bne.n	8004744 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f001 f90f 	bl	8005924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e145      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004742:	e117      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	2b02      	cmp	r3, #2
 800474a:	d14e      	bne.n	80047ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	4906      	ldr	r1, [pc, #24]	; (8004770 <HAL_I2C_Master_Receive+0x22c>)
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 ff3a 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e11a      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
 8004766:	bf00      	nop
 8004768:	00100002 	.word	0x00100002
 800476c:	ffff0000 	.word	0xffff0000
 8004770:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047e8:	e0c4      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	2200      	movs	r2, #0
 80047f2:	496c      	ldr	r1, [pc, #432]	; (80049a4 <HAL_I2C_Master_Receive+0x460>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 feeb 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0cb      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	2200      	movs	r2, #0
 800484e:	4955      	ldr	r1, [pc, #340]	; (80049a4 <HAL_I2C_Master_Receive+0x460>)
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 febd 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e09d      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048d4:	e04e      	b.n	8004974 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f001 f822 	bl	8005924 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e058      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d124      	bne.n	8004974 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f aeb6 	bne.w	80046ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	00010004 	.word	0x00010004

080049a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	4608      	mov	r0, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	817b      	strh	r3, [r7, #10]
 80049ba:	460b      	mov	r3, r1
 80049bc:	813b      	strh	r3, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049c2:	f7fe fc5f 	bl	8003284 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	f040 80d9 	bne.w	8004b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	2319      	movs	r3, #25
 80049dc:	2201      	movs	r2, #1
 80049de:	496d      	ldr	r1, [pc, #436]	; (8004b94 <HAL_I2C_Mem_Write+0x1ec>)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fdf5 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	e0cc      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Mem_Write+0x56>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0c5      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d007      	beq.n	8004a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2221      	movs	r2, #33	; 0x21
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4a4d      	ldr	r2, [pc, #308]	; (8004b98 <HAL_I2C_Mem_Write+0x1f0>)
 8004a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a66:	88f8      	ldrh	r0, [r7, #6]
 8004a68:	893a      	ldrh	r2, [r7, #8]
 8004a6a:	8979      	ldrh	r1, [r7, #10]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4603      	mov	r3, r0
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fc2c 	bl	80052d4 <I2C_RequestMemoryWrite>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d052      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e081      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 feba 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d107      	bne.n	8004aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e06b      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d11b      	bne.n	8004b28 <HAL_I2C_Mem_Write+0x180>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d017      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1aa      	bne.n	8004a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fead 	bl	8005894 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00d      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d107      	bne.n	8004b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e016      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	00100002 	.word	0x00100002
 8004b98:	ffff0000 	.word	0xffff0000

08004b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08c      	sub	sp, #48	; 0x30
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	817b      	strh	r3, [r7, #10]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	813b      	strh	r3, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bb6:	f7fe fb65 	bl	8003284 <HAL_GetTick>
 8004bba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	f040 8214 	bne.w	8004ff2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	2319      	movs	r3, #25
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	497b      	ldr	r1, [pc, #492]	; (8004dc0 <HAL_I2C_Mem_Read+0x224>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fcfb 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	e207      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_I2C_Mem_Read+0x56>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e200      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d007      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2222      	movs	r2, #34	; 0x22
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a5b      	ldr	r2, [pc, #364]	; (8004dc4 <HAL_I2C_Mem_Read+0x228>)
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c5a:	88f8      	ldrh	r0, [r7, #6]
 8004c5c:	893a      	ldrh	r2, [r7, #8]
 8004c5e:	8979      	ldrh	r1, [r7, #10]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fbc8 	bl	8005400 <I2C_RequestMemoryRead>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e1bc      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e190      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d11b      	bne.n	8004cea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e170      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d11b      	bne.n	8004d2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	e150      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d40:	e144      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	f200 80f1 	bhi.w	8004f2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d123      	bne.n	8004d9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fde3 	bl	8005924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e145      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d9a:	e117      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d14e      	bne.n	8004e42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004daa:	2200      	movs	r2, #0
 8004dac:	4906      	ldr	r1, [pc, #24]	; (8004dc8 <HAL_I2C_Mem_Read+0x22c>)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fc0e 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e11a      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
 8004dbe:	bf00      	nop
 8004dc0:	00100002 	.word	0x00100002
 8004dc4:	ffff0000 	.word	0xffff0000
 8004dc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e40:	e0c4      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2200      	movs	r2, #0
 8004e4a:	496c      	ldr	r1, [pc, #432]	; (8004ffc <HAL_I2C_Mem_Read+0x460>)
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 fbbf 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0cb      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4955      	ldr	r1, [pc, #340]	; (8004ffc <HAL_I2C_Mem_Read+0x460>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fb91 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e09d      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f2c:	e04e      	b.n	8004fcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fcf6 	bl	8005924 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e058      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d124      	bne.n	8004fcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d107      	bne.n	8004f9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f aeb6 	bne.w	8004d42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3728      	adds	r7, #40	; 0x28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	00010004 	.word	0x00010004

08005000 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	460b      	mov	r3, r1
 8005042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d006      	beq.n	800505e <I2C_MasterRequestWrite+0x2a>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d003      	beq.n	800505e <I2C_MasterRequestWrite+0x2a>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800505c:	d108      	bne.n	8005070 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e00b      	b.n	8005088 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	2b12      	cmp	r3, #18
 8005076:	d107      	bne.n	8005088 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fa9b 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d103      	bne.n	80050b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e035      	b.n	8005128 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c4:	d108      	bne.n	80050d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050d4:	611a      	str	r2, [r3, #16]
 80050d6:	e01b      	b.n	8005110 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	11db      	asrs	r3, r3, #7
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 0306 	and.w	r3, r3, #6
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f063 030f 	orn	r3, r3, #15
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	490e      	ldr	r1, [pc, #56]	; (8005130 <I2C_MasterRequestWrite+0xfc>)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fae4 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e010      	b.n	8005128 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005106:	897b      	ldrh	r3, [r7, #10]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4907      	ldr	r1, [pc, #28]	; (8005134 <I2C_MasterRequestWrite+0x100>)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fad4 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	00010008 	.word	0x00010008
 8005134:	00010002 	.word	0x00010002

08005138 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	460b      	mov	r3, r1
 8005146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800515c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b08      	cmp	r3, #8
 8005162:	d006      	beq.n	8005172 <I2C_MasterRequestRead+0x3a>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d003      	beq.n	8005172 <I2C_MasterRequestRead+0x3a>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005170:	d108      	bne.n	8005184 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	e00b      	b.n	800519c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	2b11      	cmp	r3, #17
 800518a:	d107      	bne.n	800519c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800519a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fa11 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00d      	beq.n	80051d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d103      	bne.n	80051cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e079      	b.n	80052c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051d8:	d108      	bne.n	80051ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]
 80051ea:	e05f      	b.n	80052ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051ec:	897b      	ldrh	r3, [r7, #10]
 80051ee:	11db      	asrs	r3, r3, #7
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0306 	and.w	r3, r3, #6
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f063 030f 	orn	r3, r3, #15
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4930      	ldr	r1, [pc, #192]	; (80052cc <I2C_MasterRequestRead+0x194>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa5a 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e054      	b.n	80052c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4929      	ldr	r1, [pc, #164]	; (80052d0 <I2C_MasterRequestRead+0x198>)
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fa4a 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e044      	b.n	80052c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800525e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f9af 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d103      	bne.n	8005290 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800528e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e017      	b.n	80052c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005294:	897b      	ldrh	r3, [r7, #10]
 8005296:	11db      	asrs	r3, r3, #7
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0306 	and.w	r3, r3, #6
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f063 030e 	orn	r3, r3, #14
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4907      	ldr	r1, [pc, #28]	; (80052d0 <I2C_MasterRequestRead+0x198>)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa06 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	00010008 	.word	0x00010008
 80052d0:	00010002 	.word	0x00010002

080052d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	460b      	mov	r3, r1
 80052e8:	813b      	strh	r3, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f960 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d103      	bne.n	800532e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e05f      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	492d      	ldr	r1, [pc, #180]	; (80053fc <I2C_RequestMemoryWrite+0x128>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f9bb 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e04c      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa46 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e02b      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e021      	b.n	80053f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa20 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e005      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e6:	893b      	ldrh	r3, [r7, #8]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2200      	movs	r2, #0
 8005442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8c2 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d103      	bne.n	800546a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0aa      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800547c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	4952      	ldr	r1, [pc, #328]	; (80055cc <I2C_RequestMemoryRead+0x1cc>)
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f91d 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e097      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	6a39      	ldr	r1, [r7, #32]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f9a8 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d107      	bne.n	80054d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e076      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	e021      	b.n	800552c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f982 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e050      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005522:	893b      	ldrh	r3, [r7, #8]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6a39      	ldr	r1, [r7, #32]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f967 	bl	8005804 <I2C_WaitOnTXEFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b04      	cmp	r3, #4
 8005542:	d107      	bne.n	8005554 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e035      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005566:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2200      	movs	r2, #0
 8005570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f82b 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d103      	bne.n	8005598 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e013      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	4906      	ldr	r1, [pc, #24]	; (80055cc <I2C_RequestMemoryRead+0x1cc>)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f886 	bl	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00010002 	.word	0x00010002

080055d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e0:	e048      	b.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d044      	beq.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fd fe4b 	bl	8003284 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d139      	bne.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	d10d      	bne.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x56>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	43da      	mvns	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	e00c      	b.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	43da      	mvns	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	4013      	ands	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	429a      	cmp	r2, r3
 8005644:	d116      	bne.n	8005674 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e023      	b.n	80056bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10d      	bne.n	800569a <I2C_WaitOnFlagUntilTimeout+0xca>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	43da      	mvns	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	e00c      	b.n	80056b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	43da      	mvns	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d093      	beq.n	80055e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d2:	e071      	b.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d123      	bne.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	f043 0204 	orr.w	r2, r3, #4
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e067      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005732:	d041      	beq.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005734:	f7fd fda6 	bl	8003284 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d136      	bne.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	d10c      	bne.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	43da      	mvns	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e00b      	b.n	8005786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	43da      	mvns	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4013      	ands	r3, r2
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e021      	b.n	80057fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	0c1b      	lsrs	r3, r3, #16
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10c      	bne.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e00b      	b.n	80057f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	43da      	mvns	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f47f af6d 	bne.w	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005810:	e034      	b.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f8e3 	bl	80059de <I2C_IsAcknowledgeFailed>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e034      	b.n	800588c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d028      	beq.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fd fd2b 	bl	8003284 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11d      	bne.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584a:	2b80      	cmp	r3, #128	; 0x80
 800584c:	d016      	beq.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e007      	b.n	800588c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d1c3      	bne.n	8005812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058a0:	e034      	b.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f89b 	bl	80059de <I2C_IsAcknowledgeFailed>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e034      	b.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d028      	beq.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ba:	f7fd fce3 	bl	8003284 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d11d      	bne.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d016      	beq.n	800590c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f043 0220 	orr.w	r2, r3, #32
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e007      	b.n	800591c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b04      	cmp	r3, #4
 8005918:	d1c3      	bne.n	80058a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005930:	e049      	b.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b10      	cmp	r3, #16
 800593e:	d119      	bne.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e030      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fd fc86 	bl	8003284 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11d      	bne.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d016      	beq.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0220 	orr.w	r2, r3, #32
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e007      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d0:	2b40      	cmp	r3, #64	; 0x40
 80059d2:	d1ae      	bne.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d11b      	bne.n	8005a2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e267      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d075      	beq.n	8005b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5a:	4b88      	ldr	r3, [pc, #544]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d00c      	beq.n	8005a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d112      	bne.n	8005a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a72:	4b82      	ldr	r3, [pc, #520]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a7e:	d10b      	bne.n	8005a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	4b7e      	ldr	r3, [pc, #504]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d05b      	beq.n	8005b44 <HAL_RCC_OscConfig+0x108>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d157      	bne.n	8005b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e242      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d106      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x74>
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a75      	ldr	r2, [pc, #468]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e01d      	b.n	8005aec <HAL_RCC_OscConfig+0xb0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x98>
 8005aba:	4b70      	ldr	r3, [pc, #448]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6f      	ldr	r2, [pc, #444]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6c      	ldr	r2, [pc, #432]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e00b      	b.n	8005aec <HAL_RCC_OscConfig+0xb0>
 8005ad4:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a68      	ldr	r2, [pc, #416]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b66      	ldr	r3, [pc, #408]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a65      	ldr	r2, [pc, #404]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fd fbc6 	bl	8003284 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fd fbc2 	bl	8003284 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e207      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0e:	4b5b      	ldr	r3, [pc, #364]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0xc0>
 8005b1a:	e014      	b.n	8005b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fbb2 	bl	8003284 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fd fbae 	bl	8003284 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	; 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e1f3      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b36:	4b51      	ldr	r3, [pc, #324]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0xe8>
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d063      	beq.n	8005c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b52:	4b4a      	ldr	r3, [pc, #296]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 030c 	and.w	r3, r3, #12
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5e:	4b47      	ldr	r3, [pc, #284]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d11c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6a:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d116      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b76:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_RCC_OscConfig+0x152>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d001      	beq.n	8005b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e1c7      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4937      	ldr	r1, [pc, #220]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba2:	e03a      	b.n	8005c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bac:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <HAL_RCC_OscConfig+0x244>)
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fd fb67 	bl	8003284 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bba:	f7fd fb63 	bl	8003284 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e1a8      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4925      	ldr	r1, [pc, #148]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]
 8005bec:	e015      	b.n	8005c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bee:	4b24      	ldr	r3, [pc, #144]	; (8005c80 <HAL_RCC_OscConfig+0x244>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fd fb46 	bl	8003284 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bfc:	f7fd fb42 	bl	8003284 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e187      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1f0      	bne.n	8005bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d036      	beq.n	8005c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <HAL_RCC_OscConfig+0x248>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c34:	f7fd fb26 	bl	8003284 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c3c:	f7fd fb22 	bl	8003284 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e167      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <HAL_RCC_OscConfig+0x240>)
 8005c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x200>
 8005c5a:	e01b      	b.n	8005c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c5c:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <HAL_RCC_OscConfig+0x248>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c62:	f7fd fb0f 	bl	8003284 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c68:	e00e      	b.n	8005c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c6a:	f7fd fb0b 	bl	8003284 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d907      	bls.n	8005c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e150      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	42470000 	.word	0x42470000
 8005c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c88:	4b88      	ldr	r3, [pc, #544]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1ea      	bne.n	8005c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8097 	beq.w	8005dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca6:	4b81      	ldr	r3, [pc, #516]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	4b7d      	ldr	r3, [pc, #500]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	4a7c      	ldr	r2, [pc, #496]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc2:	4b7a      	ldr	r3, [pc, #488]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b77      	ldr	r3, [pc, #476]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d118      	bne.n	8005d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cde:	4b74      	ldr	r3, [pc, #464]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a73      	ldr	r2, [pc, #460]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cea:	f7fd facb 	bl	8003284 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf2:	f7fd fac7 	bl	8003284 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e10c      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <HAL_RCC_OscConfig+0x474>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0x2ea>
 8005d18:	4b64      	ldr	r3, [pc, #400]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	4a63      	ldr	r2, [pc, #396]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	6713      	str	r3, [r2, #112]	; 0x70
 8005d24:	e01c      	b.n	8005d60 <HAL_RCC_OscConfig+0x324>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x30c>
 8005d2e:	4b5f      	ldr	r3, [pc, #380]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	4a5e      	ldr	r2, [pc, #376]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d34:	f043 0304 	orr.w	r3, r3, #4
 8005d38:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3a:	4b5c      	ldr	r3, [pc, #368]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	4a5b      	ldr	r2, [pc, #364]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	6713      	str	r3, [r2, #112]	; 0x70
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0x324>
 8005d48:	4b58      	ldr	r3, [pc, #352]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4c:	4a57      	ldr	r2, [pc, #348]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d4e:	f023 0301 	bic.w	r3, r3, #1
 8005d52:	6713      	str	r3, [r2, #112]	; 0x70
 8005d54:	4b55      	ldr	r3, [pc, #340]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d58:	4a54      	ldr	r2, [pc, #336]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d5a:	f023 0304 	bic.w	r3, r3, #4
 8005d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d015      	beq.n	8005d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d68:	f7fd fa8c 	bl	8003284 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fd fa88 	bl	8003284 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0cb      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d86:	4b49      	ldr	r3, [pc, #292]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ee      	beq.n	8005d70 <HAL_RCC_OscConfig+0x334>
 8005d92:	e014      	b.n	8005dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d94:	f7fd fa76 	bl	8003284 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fd fa72 	bl	8003284 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0b5      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db2:	4b3e      	ldr	r3, [pc, #248]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ee      	bne.n	8005d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d105      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc4:	4b39      	ldr	r3, [pc, #228]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	4a38      	ldr	r2, [pc, #224]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a1 	beq.w	8005f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dda:	4b34      	ldr	r3, [pc, #208]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d05c      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d141      	bne.n	8005e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dee:	4b31      	ldr	r3, [pc, #196]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df4:	f7fd fa46 	bl	8003284 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fd fa42 	bl	8003284 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e087      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69da      	ldr	r2, [r3, #28]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	019b      	lsls	r3, r3, #6
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	3b01      	subs	r3, #1
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	061b      	lsls	r3, r3, #24
 8005e3e:	491b      	ldr	r1, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4a:	f7fd fa1b 	bl	8003284 <HAL_GetTick>
 8005e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e52:	f7fd fa17 	bl	8003284 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e05c      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x416>
 8005e70:	e054      	b.n	8005f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <HAL_RCC_OscConfig+0x478>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fd fa04 	bl	8003284 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fd fa00 	bl	8003284 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e045      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_RCC_OscConfig+0x470>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x444>
 8005e9e:	e03d      	b.n	8005f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e038      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <HAL_RCC_OscConfig+0x4ec>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d028      	beq.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d121      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d11a      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ee8:	4013      	ands	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d111      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	3b01      	subs	r3, #1
 8005f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d107      	bne.n	8005f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800

08005f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e0cc      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f40:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d90c      	bls.n	8005f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b63      	ldr	r3, [pc, #396]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0b8      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f80:	4b59      	ldr	r3, [pc, #356]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	4a58      	ldr	r2, [pc, #352]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f98:	4b53      	ldr	r3, [pc, #332]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a52      	ldr	r2, [pc, #328]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa4:	4b50      	ldr	r3, [pc, #320]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	494d      	ldr	r1, [pc, #308]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d044      	beq.n	800604c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d107      	bne.n	8005fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d119      	bne.n	800600a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e07f      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d003      	beq.n	8005fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fea:	4b3f      	ldr	r3, [pc, #252]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e06f      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffa:	4b3b      	ldr	r3, [pc, #236]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e067      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800600a:	4b37      	ldr	r3, [pc, #220]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f023 0203 	bic.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4934      	ldr	r1, [pc, #208]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	4313      	orrs	r3, r2
 800601a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800601c:	f7fd f932 	bl	8003284 <HAL_GetTick>
 8006020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006022:	e00a      	b.n	800603a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006024:	f7fd f92e 	bl	8003284 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e04f      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603a:	4b2b      	ldr	r3, [pc, #172]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 020c 	and.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	429a      	cmp	r2, r3
 800604a:	d1eb      	bne.n	8006024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800604c:	4b25      	ldr	r3, [pc, #148]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d20c      	bcs.n	8006074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b22      	ldr	r3, [pc, #136]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006062:	4b20      	ldr	r3, [pc, #128]	; (80060e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e032      	b.n	80060da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006080:	4b19      	ldr	r3, [pc, #100]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4916      	ldr	r1, [pc, #88]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d009      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609e:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	490e      	ldr	r1, [pc, #56]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060b2:	f000 f821 	bl	80060f8 <HAL_RCC_GetSysClockFreq>
 80060b6:	4602      	mov	r2, r0
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	490a      	ldr	r1, [pc, #40]	; (80060ec <HAL_RCC_ClockConfig+0x1c0>)
 80060c4:	5ccb      	ldrb	r3, [r1, r3]
 80060c6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <HAL_RCC_ClockConfig+0x1c8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fd f892 	bl	80031fc <HAL_InitTick>

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40023c00 	.word	0x40023c00
 80060e8:	40023800 	.word	0x40023800
 80060ec:	0800c6a0 	.word	0x0800c6a0
 80060f0:	2000001c 	.word	0x2000001c
 80060f4:	20000020 	.word	0x20000020

080060f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060fc:	b094      	sub	sp, #80	; 0x50
 80060fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	647b      	str	r3, [r7, #68]	; 0x44
 8006104:	2300      	movs	r3, #0
 8006106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006108:	2300      	movs	r3, #0
 800610a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006110:	4b79      	ldr	r3, [pc, #484]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 030c 	and.w	r3, r3, #12
 8006118:	2b08      	cmp	r3, #8
 800611a:	d00d      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x40>
 800611c:	2b08      	cmp	r3, #8
 800611e:	f200 80e1 	bhi.w	80062e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_RCC_GetSysClockFreq+0x34>
 8006126:	2b04      	cmp	r3, #4
 8006128:	d003      	beq.n	8006132 <HAL_RCC_GetSysClockFreq+0x3a>
 800612a:	e0db      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800612c:	4b73      	ldr	r3, [pc, #460]	; (80062fc <HAL_RCC_GetSysClockFreq+0x204>)
 800612e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006130:	e0db      	b.n	80062ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006132:	4b73      	ldr	r3, [pc, #460]	; (8006300 <HAL_RCC_GetSysClockFreq+0x208>)
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006136:	e0d8      	b.n	80062ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006138:	4b6f      	ldr	r3, [pc, #444]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006142:	4b6d      	ldr	r3, [pc, #436]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d063      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614e:	4b6a      	ldr	r3, [pc, #424]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	099b      	lsrs	r3, r3, #6
 8006154:	2200      	movs	r2, #0
 8006156:	63bb      	str	r3, [r7, #56]	; 0x38
 8006158:	63fa      	str	r2, [r7, #60]	; 0x3c
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006160:	633b      	str	r3, [r7, #48]	; 0x30
 8006162:	2300      	movs	r3, #0
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
 8006166:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800616a:	4622      	mov	r2, r4
 800616c:	462b      	mov	r3, r5
 800616e:	f04f 0000 	mov.w	r0, #0
 8006172:	f04f 0100 	mov.w	r1, #0
 8006176:	0159      	lsls	r1, r3, #5
 8006178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800617c:	0150      	lsls	r0, r2, #5
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4621      	mov	r1, r4
 8006184:	1a51      	subs	r1, r2, r1
 8006186:	6139      	str	r1, [r7, #16]
 8006188:	4629      	mov	r1, r5
 800618a:	eb63 0301 	sbc.w	r3, r3, r1
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800619c:	4659      	mov	r1, fp
 800619e:	018b      	lsls	r3, r1, #6
 80061a0:	4651      	mov	r1, sl
 80061a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061a6:	4651      	mov	r1, sl
 80061a8:	018a      	lsls	r2, r1, #6
 80061aa:	4651      	mov	r1, sl
 80061ac:	ebb2 0801 	subs.w	r8, r2, r1
 80061b0:	4659      	mov	r1, fp
 80061b2:	eb63 0901 	sbc.w	r9, r3, r1
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ca:	4690      	mov	r8, r2
 80061cc:	4699      	mov	r9, r3
 80061ce:	4623      	mov	r3, r4
 80061d0:	eb18 0303 	adds.w	r3, r8, r3
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	462b      	mov	r3, r5
 80061d8:	eb49 0303 	adc.w	r3, r9, r3
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061ea:	4629      	mov	r1, r5
 80061ec:	024b      	lsls	r3, r1, #9
 80061ee:	4621      	mov	r1, r4
 80061f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061f4:	4621      	mov	r1, r4
 80061f6:	024a      	lsls	r2, r1, #9
 80061f8:	4610      	mov	r0, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061fe:	2200      	movs	r2, #0
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
 8006202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006208:	f7fa fd3e 	bl	8000c88 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006214:	e058      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006216:	4b38      	ldr	r3, [pc, #224]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	2200      	movs	r2, #0
 800621e:	4618      	mov	r0, r3
 8006220:	4611      	mov	r1, r2
 8006222:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	2300      	movs	r3, #0
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
 800622c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	f04f 0000 	mov.w	r0, #0
 8006238:	f04f 0100 	mov.w	r1, #0
 800623c:	0159      	lsls	r1, r3, #5
 800623e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006242:	0150      	lsls	r0, r2, #5
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4641      	mov	r1, r8
 800624a:	ebb2 0a01 	subs.w	sl, r2, r1
 800624e:	4649      	mov	r1, r9
 8006250:	eb63 0b01 	sbc.w	fp, r3, r1
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006260:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006264:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006268:	ebb2 040a 	subs.w	r4, r2, sl
 800626c:	eb63 050b 	sbc.w	r5, r3, fp
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	00eb      	lsls	r3, r5, #3
 800627a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627e:	00e2      	lsls	r2, r4, #3
 8006280:	4614      	mov	r4, r2
 8006282:	461d      	mov	r5, r3
 8006284:	4643      	mov	r3, r8
 8006286:	18e3      	adds	r3, r4, r3
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	464b      	mov	r3, r9
 800628c:	eb45 0303 	adc.w	r3, r5, r3
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800629e:	4629      	mov	r1, r5
 80062a0:	028b      	lsls	r3, r1, #10
 80062a2:	4621      	mov	r1, r4
 80062a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062a8:	4621      	mov	r1, r4
 80062aa:	028a      	lsls	r2, r1, #10
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b2:	2200      	movs	r2, #0
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	61fa      	str	r2, [r7, #28]
 80062b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062bc:	f7fa fce4 	bl	8000c88 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4613      	mov	r3, r2
 80062c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	0c1b      	lsrs	r3, r3, #16
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	3301      	adds	r3, #1
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062e2:	e002      	b.n	80062ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_RCC_GetSysClockFreq+0x204>)
 80062e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3750      	adds	r7, #80	; 0x50
 80062f0:	46bd      	mov	sp, r7
 80062f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800
 80062fc:	00f42400 	.word	0x00f42400
 8006300:	007a1200 	.word	0x007a1200

08006304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006308:	4b03      	ldr	r3, [pc, #12]	; (8006318 <HAL_RCC_GetHCLKFreq+0x14>)
 800630a:	681b      	ldr	r3, [r3, #0]
}
 800630c:	4618      	mov	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	2000001c 	.word	0x2000001c

0800631c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006320:	f7ff fff0 	bl	8006304 <HAL_RCC_GetHCLKFreq>
 8006324:	4602      	mov	r2, r0
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	0a9b      	lsrs	r3, r3, #10
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	4903      	ldr	r1, [pc, #12]	; (8006340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006332:	5ccb      	ldrb	r3, [r1, r3]
 8006334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006338:	4618      	mov	r0, r3
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40023800 	.word	0x40023800
 8006340:	0800c6b0 	.word	0x0800c6b0

08006344 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e022      	b.n	800639c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7fc fb67 	bl	8002a3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2203      	movs	r2, #3
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f814 	bl	80063a4 <HAL_SD_InitCard>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e00a      	b.n	800639c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80063a4:	b5b0      	push	{r4, r5, r7, lr}
 80063a6:	b08e      	sub	sp, #56	; 0x38
 80063a8:	af04      	add	r7, sp, #16
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80063b8:	2300      	movs	r3, #0
 80063ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80063c0:	2376      	movs	r3, #118	; 0x76
 80063c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681d      	ldr	r5, [r3, #0]
 80063c8:	466c      	mov	r4, sp
 80063ca:	f107 0314 	add.w	r3, r7, #20
 80063ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063d6:	f107 0308 	add.w	r3, r7, #8
 80063da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063dc:	4628      	mov	r0, r5
 80063de:	f002 f81f 	bl	8008420 <SDIO_Init>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80063e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e04f      	b.n	8006494 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80063f4:	4b29      	ldr	r3, [pc, #164]	; (800649c <HAL_SD_InitCard+0xf8>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f002 f857 	bl	80084b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006404:	4b25      	ldr	r3, [pc, #148]	; (800649c <HAL_SD_InitCard+0xf8>)
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800640a:	2002      	movs	r0, #2
 800640c:	f7fc ff46 	bl	800329c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 ff6b 	bl	80072ec <SD_PowerON>
 8006416:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e02e      	b.n	8006494 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fe8a 	bl	8007150 <SD_InitCard>
 800643c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e01b      	b.n	8006494 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006464:	4618      	mov	r0, r3
 8006466:	f002 f8b6 	bl	80085d6 <SDMMC_CmdBlockLength>
 800646a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00f      	beq.n	8006492 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <HAL_SD_InitCard+0xfc>)
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3728      	adds	r7, #40	; 0x28
 8006498:	46bd      	mov	sp, r7
 800649a:	bdb0      	pop	{r4, r5, r7, pc}
 800649c:	422580a0 	.word	0x422580a0
 80064a0:	004005ff 	.word	0x004005ff

080064a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08c      	sub	sp, #48	; 0x30
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d107      	bne.n	80064cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0c0      	b.n	800664e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	f040 80b9 	bne.w	800664c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	441a      	add	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d907      	bls.n	80064fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e0a7      	b.n	800664e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2203      	movs	r2, #3
 8006502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800651c:	f043 0302 	orr.w	r3, r3, #2
 8006520:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	4a4c      	ldr	r2, [pc, #304]	; (8006658 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006528:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	4a4b      	ldr	r2, [pc, #300]	; (800665c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006530:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2200      	movs	r2, #0
 8006538:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2200      	movs	r2, #0
 8006540:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3380      	adds	r3, #128	; 0x80
 8006568:	4619      	mov	r1, r3
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	025b      	lsls	r3, r3, #9
 8006570:	089b      	lsrs	r3, r3, #2
 8006572:	f7fd f877 	bl	8003664 <HAL_DMA_Start_IT>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d017      	beq.n	80065ac <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800658a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a33      	ldr	r2, [pc, #204]	; (8006660 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e050      	b.n	800664e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80065ac:	4b2d      	ldr	r3, [pc, #180]	; (8006664 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d002      	beq.n	80065c0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	025b      	lsls	r3, r3, #9
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065c0:	f04f 33ff 	mov.w	r3, #4294967295
 80065c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	025b      	lsls	r3, r3, #9
 80065ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80065cc:	2390      	movs	r3, #144	; 0x90
 80065ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80065d0:	2302      	movs	r3, #2
 80065d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80065d8:	2301      	movs	r3, #1
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f107 0210 	add.w	r2, r7, #16
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 ffc9 	bl	800857e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d90a      	bls.n	8006608 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2282      	movs	r2, #130	; 0x82
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065fe:	4618      	mov	r0, r3
 8006600:	f002 f82d 	bl	800865e <SDMMC_CmdReadMultiBlock>
 8006604:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006606:	e009      	b.n	800661c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2281      	movs	r2, #129	; 0x81
 800660c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006614:	4618      	mov	r0, r3
 8006616:	f002 f800 	bl	800861a <SDMMC_CmdReadSingleBlock>
 800661a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d012      	beq.n	8006648 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a0e      	ldr	r2, [pc, #56]	; (8006660 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e002      	b.n	800664e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800664c:	2302      	movs	r3, #2
  }
}
 800664e:	4618      	mov	r0, r3
 8006650:	3730      	adds	r7, #48	; 0x30
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	08006f5f 	.word	0x08006f5f
 800665c:	08006fd1 	.word	0x08006fd1
 8006660:	004005ff 	.word	0x004005ff
 8006664:	4225858c 	.word	0x4225858c

08006668 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d107      	bne.n	8006690 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0c5      	b.n	800681c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 80be 	bne.w	800681a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80066a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	441a      	add	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d907      	bls.n	80066c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0ac      	b.n	800681c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2203      	movs	r2, #3
 80066c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2200      	movs	r2, #0
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ea:	4a4e      	ldr	r2, [pc, #312]	; (8006824 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	4a4d      	ldr	r2, [pc, #308]	; (8006828 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80066f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	2200      	movs	r2, #0
 80066fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	2b01      	cmp	r3, #1
 8006704:	d002      	beq.n	800670c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	025b      	lsls	r3, r3, #9
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d90a      	bls.n	8006728 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	22a0      	movs	r2, #160	; 0xa0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800671e:	4618      	mov	r0, r3
 8006720:	f001 ffe1 	bl	80086e6 <SDMMC_CmdWriteMultiBlock>
 8006724:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006726:	e009      	b.n	800673c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2290      	movs	r2, #144	; 0x90
 800672c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006734:	4618      	mov	r0, r3
 8006736:	f001 ffb4 	bl	80086a2 <SDMMC_CmdWriteSingleBlock>
 800673a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d012      	beq.n	8006768 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a39      	ldr	r2, [pc, #228]	; (800682c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006748:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	431a      	orrs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e059      	b.n	800681c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006768:	4b31      	ldr	r3, [pc, #196]	; (8006830 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3380      	adds	r3, #128	; 0x80
 800679e:	461a      	mov	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	025b      	lsls	r3, r3, #9
 80067a4:	089b      	lsrs	r3, r3, #2
 80067a6:	f7fc ff5d 	bl	8003664 <HAL_DMA_Start_IT>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01c      	beq.n	80067ea <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80067be:	f023 0302 	bic.w	r3, r3, #2
 80067c2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a18      	ldr	r2, [pc, #96]	; (800682c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80067ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e018      	b.n	800681c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067ea:	f04f 33ff 	mov.w	r3, #4294967295
 80067ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	025b      	lsls	r3, r3, #9
 80067f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80067f6:	2390      	movs	r3, #144	; 0x90
 80067f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80067fe:	2300      	movs	r3, #0
 8006800:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006802:	2301      	movs	r3, #1
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f107 0210 	add.w	r2, r7, #16
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f001 feb4 	bl	800857e <SDIO_ConfigData>

      return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3730      	adds	r7, #48	; 0x30
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	08006f35 	.word	0x08006f35
 8006828:	08006fd1 	.word	0x08006fd1
 800682c:	004005ff 	.word	0x004005ff
 8006830:	4225858c 	.word	0x4225858c

08006834 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_SD_IRQHandler+0x2e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fdfc 	bl	8007458 <SD_Read_IT>
 8006860:	e165      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 808f 	beq.w	8006990 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800687a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6812      	ldr	r2, [r2, #0]
 8006886:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800688a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800688e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0308 	and.w	r3, r3, #8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d039      	beq.n	800691e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_SD_IRQHandler+0x8a>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d011      	beq.n	80068e2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 ff32 	bl	800872c <SDMMC_CmdStopTransfer>
 80068c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f92f 	bl	8006b40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <HAL_SD_IRQHandler+0xda>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f002 fb48 	bl	8008fa4 <HAL_SD_RxCpltCallback>
 8006914:	e10b      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f002 fb3a 	bl	8008f90 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800691c:	e107      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8102 	beq.w	8006b2e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0320 	and.w	r3, r3, #32
 8006930:	2b00      	cmp	r3, #0
 8006932:	d011      	beq.n	8006958 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fef7 	bl	800872c <SDMMC_CmdStopTransfer>
 800693e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f8f4 	bl	8006b40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 80e5 	bne.w	8006b2e <HAL_SD_IRQHandler+0x2fa>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	f040 80df 	bne.w	8006b2e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0208 	bic.w	r2, r2, #8
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f002 fb01 	bl	8008f90 <HAL_SD_TxCpltCallback>
}
 800698e:	e0ce      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <HAL_SD_IRQHandler+0x17c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fda6 	bl	80074fa <SD_Write_IT>
 80069ae:	e0be      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b6:	f240 233a 	movw	r3, #570	; 0x23a
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80b6 	beq.w	8006b2e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f043 0202 	orr.w	r2, r3, #2
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	f043 0208 	orr.w	r2, r3, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	f043 0210 	orr.w	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d005      	beq.n	8006a44 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	f043 0208 	orr.w	r2, r3, #8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f240 723a 	movw	r2, #1850	; 0x73a
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006a5c:	f023 0302 	bic.w	r3, r3, #2
 8006a60:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f001 fe60 	bl	800872c <SDMMC_CmdStopTransfer>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f855 	bl	8006b40 <HAL_SD_ErrorCallback>
}
 8006a96:	e04a      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d045      	beq.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <HAL_SD_IRQHandler+0x282>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d011      	beq.n	8006ada <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aba:	4a1f      	ldr	r2, [pc, #124]	; (8006b38 <HAL_SD_IRQHandler+0x304>)
 8006abc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fc fe96 	bl	80037f4 <HAL_DMA_Abort_IT>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d02f      	beq.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 face 	bl	8007074 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006ad8:	e029      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <HAL_SD_IRQHandler+0x2ba>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d011      	beq.n	8006b12 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <HAL_SD_IRQHandler+0x308>)
 8006af4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fc fe7a 	bl	80037f4 <HAL_DMA_Abort_IT>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fae9 	bl	80070e2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006b10:	e00d      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f002 fa28 	bl	8008f7c <HAL_SD_AbortCallback>
}
 8006b2c:	e7ff      	b.n	8006b2e <HAL_SD_IRQHandler+0x2fa>
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	08007075 	.word	0x08007075
 8006b3c:	080070e3 	.word	0x080070e3

08006b40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b62:	0f9b      	lsrs	r3, r3, #30
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b6e:	0e9b      	lsrs	r3, r3, #26
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b92:	0c1b      	lsrs	r3, r3, #16
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bb4:	0d1b      	lsrs	r3, r3, #20
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc0:	0c1b      	lsrs	r3, r3, #16
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd2:	0bdb      	lsrs	r3, r3, #15
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be4:	0b9b      	lsrs	r3, r3, #14
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf6:	0b5b      	lsrs	r3, r3, #13
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c08:	0b1b      	lsrs	r3, r3, #12
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d163      	bne.n	8006cec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c28:	009a      	lsls	r2, r3, #2
 8006c2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c2e:	4013      	ands	r3, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c34:	0f92      	lsrs	r2, r2, #30
 8006c36:	431a      	orrs	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c40:	0edb      	lsrs	r3, r3, #27
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c52:	0e1b      	lsrs	r3, r3, #24
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c64:	0d5b      	lsrs	r3, r3, #21
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c76:	0c9b      	lsrs	r3, r3, #18
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c88:	0bdb      	lsrs	r3, r3, #15
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	7e1b      	ldrb	r3, [r3, #24]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	3302      	adds	r3, #2
 8006cac:	2201      	movs	r2, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006cb6:	fb03 f202 	mul.w	r2, r3, r2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	7a1b      	ldrb	r3, [r3, #8]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	2201      	movs	r2, #1
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006cd8:	0a52      	lsrs	r2, r2, #9
 8006cda:	fb03 f202 	mul.w	r2, r3, r2
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ce8:	661a      	str	r2, [r3, #96]	; 0x60
 8006cea:	e031      	b.n	8006d50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d11d      	bne.n	8006d30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	431a      	orrs	r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	029a      	lsls	r2, r3, #10
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	661a      	str	r2, [r3, #96]	; 0x60
 8006d2e:	e00f      	b.n	8006d50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a58      	ldr	r2, [pc, #352]	; (8006e98 <HAL_SD_GetCardCSD+0x344>)
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e09d      	b.n	8006e8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	0b9b      	lsrs	r3, r3, #14
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d66:	09db      	lsrs	r3, r3, #7
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	0fdb      	lsrs	r3, r3, #31
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	0f5b      	lsrs	r3, r3, #29
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	0e9b      	lsrs	r3, r3, #26
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	0d9b      	lsrs	r3, r3, #22
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	0d5b      	lsrs	r3, r3, #21
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	0c1b      	lsrs	r3, r3, #16
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	0bdb      	lsrs	r3, r3, #15
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	0b9b      	lsrs	r3, r3, #14
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	0b5b      	lsrs	r3, r3, #13
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	0b1b      	lsrs	r3, r3, #12
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	0a9b      	lsrs	r3, r3, #10
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	004005ff 	.word	0x004005ff

08006e9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006f00:	f107 030c 	add.w	r3, r7, #12
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fa7e 	bl	8007408 <SD_SendStatus>
 8006f0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	0a5b      	lsrs	r3, r3, #9
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f2a:	693b      	ldr	r3, [r7, #16]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	2b82      	cmp	r3, #130	; 0x82
 8006f72:	d111      	bne.n	8006f98 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 fbd7 	bl	800872c <SDMMC_CmdStopTransfer>
 8006f7e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff fdd4 	bl	8006b40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0208 	bic.w	r2, r2, #8
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 ffef 	bl	8008fa4 <HAL_SD_RxCpltCallback>
#endif
}
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fc fdb4 	bl	8003b4c <HAL_DMA_GetError>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d03e      	beq.n	8007068 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d002      	beq.n	8007006 <SD_DMAError+0x36>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d12d      	bne.n	8007062 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a19      	ldr	r2, [pc, #100]	; (8007070 <SD_DMAError+0xa0>)
 800700c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800701c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800702a:	6978      	ldr	r0, [r7, #20]
 800702c:	f7ff ff62 	bl	8006ef4 <HAL_SD_GetCardState>
 8007030:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b06      	cmp	r3, #6
 8007036:	d002      	beq.n	800703e <SD_DMAError+0x6e>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b05      	cmp	r3, #5
 800703c:	d10a      	bne.n	8007054 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fb72 	bl	800872c <SDMMC_CmdStopTransfer>
 8007048:	4602      	mov	r2, r0
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	431a      	orrs	r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007062:	6978      	ldr	r0, [r7, #20]
 8007064:	f7ff fd6c 	bl	8006b40 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	004005ff 	.word	0x004005ff

08007074 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f240 523a 	movw	r2, #1338	; 0x53a
 800708a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff ff31 	bl	8006ef4 <HAL_SD_GetCardState>
 8007092:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d002      	beq.n	80070ae <SD_DMATxAbort+0x3a>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b05      	cmp	r3, #5
 80070ac:	d10a      	bne.n	80070c4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fb3a 	bl	800872c <SDMMC_CmdStopTransfer>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	431a      	orrs	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f001 ff55 	bl	8008f7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80070d2:	e002      	b.n	80070da <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fd33 	bl	8006b40 <HAL_SD_ErrorCallback>
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff fefa 	bl	8006ef4 <HAL_SD_GetCardState>
 8007100:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b06      	cmp	r3, #6
 8007114:	d002      	beq.n	800711c <SD_DMARxAbort+0x3a>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b05      	cmp	r3, #5
 800711a:	d10a      	bne.n	8007132 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f001 fb03 	bl	800872c <SDMMC_CmdStopTransfer>
 8007126:	4602      	mov	r2, r0
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	431a      	orrs	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 ff1e 	bl	8008f7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007140:	e002      	b.n	8007148 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f7ff fcfc 	bl	8006b40 <HAL_SD_ErrorCallback>
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007150:	b5b0      	push	{r4, r5, r7, lr}
 8007152:	b094      	sub	sp, #80	; 0x50
 8007154:	af04      	add	r7, sp, #16
 8007156:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007158:	2301      	movs	r3, #1
 800715a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4618      	mov	r0, r3
 8007162:	f001 f9b4 	bl	80084ce <SDIO_GetPowerState>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800716c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007170:	e0b8      	b.n	80072e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	2b03      	cmp	r3, #3
 8007178:	d02f      	beq.n	80071da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fb9b 	bl	80088ba <SDMMC_CmdSendCID>
 8007184:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <SD_InitCard+0x40>
    {
      return errorstate;
 800718c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718e:	e0a9      	b.n	80072e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f001 f9de 	bl	8008558 <SDIO_GetResponse>
 800719c:	4602      	mov	r2, r0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2104      	movs	r1, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 f9d5 	bl	8008558 <SDIO_GetResponse>
 80071ae:	4602      	mov	r2, r0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2108      	movs	r1, #8
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 f9cc 	bl	8008558 <SDIO_GetResponse>
 80071c0:	4602      	mov	r2, r0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	210c      	movs	r1, #12
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 f9c3 	bl	8008558 <SDIO_GetResponse>
 80071d2:	4602      	mov	r2, r0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d00d      	beq.n	80071fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f107 020e 	add.w	r2, r7, #14
 80071ea:	4611      	mov	r1, r2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 fba1 	bl	8008934 <SDMMC_CmdSetRelAdd>
 80071f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <SD_InitCard+0xae>
    {
      return errorstate;
 80071fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fc:	e072      	b.n	80072e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007202:	2b03      	cmp	r3, #3
 8007204:	d036      	beq.n	8007274 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007206:	89fb      	ldrh	r3, [r7, #14]
 8007208:	461a      	mov	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007216:	041b      	lsls	r3, r3, #16
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f001 fb6b 	bl	80088f6 <SDMMC_CmdSendCSD>
 8007220:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722a:	e05b      	b.n	80072e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f001 f990 	bl	8008558 <SDIO_GetResponse>
 8007238:	4602      	mov	r2, r0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2104      	movs	r1, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f987 	bl	8008558 <SDIO_GetResponse>
 800724a:	4602      	mov	r2, r0
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2108      	movs	r1, #8
 8007256:	4618      	mov	r0, r3
 8007258:	f001 f97e 	bl	8008558 <SDIO_GetResponse>
 800725c:	4602      	mov	r2, r0
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	210c      	movs	r1, #12
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f975 	bl	8008558 <SDIO_GetResponse>
 800726e:	4602      	mov	r2, r0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2104      	movs	r1, #4
 800727a:	4618      	mov	r0, r3
 800727c:	f001 f96c 	bl	8008558 <SDIO_GetResponse>
 8007280:	4603      	mov	r3, r0
 8007282:	0d1a      	lsrs	r2, r3, #20
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007288:	f107 0310 	add.w	r3, r7, #16
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff fc60 	bl	8006b54 <HAL_SD_GetCardCSD>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800729a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800729e:	e021      	b.n	80072e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	2200      	movs	r2, #0
 80072ac:	461c      	mov	r4, r3
 80072ae:	4615      	mov	r5, r2
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	4608      	mov	r0, r1
 80072b6:	f001 fa5b 	bl	8008770 <SDMMC_CmdSelDesel>
 80072ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80072bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <SD_InitCard+0x176>
  {
    return errorstate;
 80072c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c4:	e00e      	b.n	80072e4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681d      	ldr	r5, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	466c      	mov	r4, sp
 80072ce:	f103 0210 	add.w	r2, r3, #16
 80072d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80072d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072d8:	3304      	adds	r3, #4
 80072da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072dc:	4628      	mov	r0, r5
 80072de:	f001 f89f 	bl	8008420 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3740      	adds	r7, #64	; 0x40
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bdb0      	pop	{r4, r5, r7, pc}

080072ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	2300      	movs	r3, #0
 80072fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f001 fa56 	bl	80087b6 <SDMMC_CmdGoIdleState>
 800730a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	e072      	b.n	80073fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f001 fa69 	bl	80087f2 <SDMMC_CmdOperCond>
 8007320:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00d      	beq.n	8007344 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f001 fa3f 	bl	80087b6 <SDMMC_CmdGoIdleState>
 8007338:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	e05b      	b.n	80073fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734e:	2b01      	cmp	r3, #1
 8007350:	d137      	bne.n	80073c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f001 fa69 	bl	8008830 <SDMMC_CmdAppCommand>
 800735e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d02d      	beq.n	80073c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007366:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800736a:	e047      	b.n	80073fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fa5c 	bl	8008830 <SDMMC_CmdAppCommand>
 8007378:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <SD_PowerON+0x98>
    {
      return errorstate;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	e03b      	b.n	80073fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	491e      	ldr	r1, [pc, #120]	; (8007404 <SD_PowerON+0x118>)
 800738a:	4618      	mov	r0, r3
 800738c:	f001 fa72 	bl	8008874 <SDMMC_CmdAppOperCommand>
 8007390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007398:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800739c:	e02e      	b.n	80073fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f8d7 	bl	8008558 <SDIO_GetResponse>
 80073aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	0fdb      	lsrs	r3, r3, #31
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <SD_PowerON+0xcc>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <SD_PowerON+0xce>
 80073b8:	2300      	movs	r3, #0
 80073ba:	613b      	str	r3, [r7, #16]

    count++;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3301      	adds	r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d802      	bhi.n	80073d2 <SD_PowerON+0xe6>
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0cc      	beq.n	800736c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073d8:	4293      	cmp	r3, r2
 80073da:	d902      	bls.n	80073e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80073dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e0:	e00c      	b.n	80073fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
 80073f2:	e002      	b.n	80073fa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	c1100000 	.word	0xc1100000

08007408 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800741c:	e018      	b.n	8007450 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007426:	041b      	lsls	r3, r3, #16
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f001 faa3 	bl	8008976 <SDMMC_CmdSendStatus>
 8007430:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	e009      	b.n	8007450 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f888 	bl	8008558 <SDIO_GetResponse>
 8007448:	4602      	mov	r2, r0
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03f      	beq.n	80074f2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	e033      	b.n	80074e0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 fffa 	bl	8008476 <SDIO_ReadFIFO>
 8007482:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3b01      	subs	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b2da      	uxtb	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3301      	adds	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	0c1b      	lsrs	r3, r3, #16
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	0e1b      	lsrs	r3, r3, #24
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	3301      	adds	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2b07      	cmp	r3, #7
 80074e4:	d9c8      	bls.n	8007478 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80074f2:	bf00      	nop
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b086      	sub	sp, #24
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d043      	beq.n	800759c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	e037      	b.n	800758a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3b01      	subs	r3, #1
 800752a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	021a      	lsls	r2, r3, #8
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4313      	orrs	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3b01      	subs	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	041a      	lsls	r2, r3, #16
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4313      	orrs	r3, r2
 800754e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	3b01      	subs	r3, #1
 800755a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	061a      	lsls	r2, r3, #24
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	4313      	orrs	r3, r2
 8007566:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3b01      	subs	r3, #1
 8007572:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f107 0208 	add.w	r2, r7, #8
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f000 ff86 	bl	8008490 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3301      	adds	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b07      	cmp	r3, #7
 800758e:	d9c4      	bls.n	800751a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800759c:	bf00      	nop
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e07b      	b.n	80076ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d009      	beq.n	80075dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	61da      	str	r2, [r3, #28]
 80075ce:	e005      	b.n	80075dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fb fb10 	bl	8002c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800764c:	431a      	orrs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007660:	ea42 0103 	orr.w	r1, r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 0104 	and.w	r1, r3, #4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	f003 0210 	and.w	r2, r3, #16
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800769c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b08c      	sub	sp, #48	; 0x30
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_SPI_Transmit+0x24>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e142      	b.n	8007960 <HAL_SPI_Transmit+0x2aa>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076e2:	f7fb fdcf 	bl	8003284 <HAL_GetTick>
 80076e6:	62b8      	str	r0, [r7, #40]	; 0x28
  initial_TxXferCount = Size;
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d003      	beq.n	8007700 <HAL_SPI_Transmit+0x4a>
  {
    errorcode = HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
 80076fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    goto error;
 80076fe:	e129      	b.n	8007954 <HAL_SPI_Transmit+0x29e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_SPI_Transmit+0x56>
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d103      	bne.n	8007714 <HAL_SPI_Transmit+0x5e>
  {
    errorcode = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    goto error;
 8007712:	e11f      	b.n	8007954 <HAL_SPI_Transmit+0x29e>
  }

  /* Set the transaction information */

  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2203      	movs	r2, #3
 8007718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	88fa      	ldrh	r2, [r7, #6]
 800772c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	88fa      	ldrh	r2, [r7, #6]
 8007732:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775a:	d10f      	bne.n	800777c <HAL_SPI_Transmit+0xc6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800777a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d007      	beq.n	800779a <HAL_SPI_Transmit+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a2:	d150      	bne.n	8007846 <HAL_SPI_Transmit+0x190>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_SPI_Transmit+0xfc>
 80077ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d143      	bne.n	800783a <HAL_SPI_Transmit+0x184>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	881a      	ldrh	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60da      	str	r2, [r3, #12]

      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	1c9a      	adds	r2, r3, #2
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077d6:	e030      	b.n	800783a <HAL_SPI_Transmit+0x184>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d112      	bne.n	800780c <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	881a      	ldrh	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	1c9a      	adds	r2, r3, #2
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	86da      	strh	r2, [r3, #54]	; 0x36
 800780a:	e016      	b.n	800783a <HAL_SPI_Transmit+0x184>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800780c:	f7fb fd3a 	bl	8003284 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d803      	bhi.n	8007824 <HAL_SPI_Transmit+0x16e>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d102      	bne.n	800782a <HAL_SPI_Transmit+0x174>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d107      	bne.n	800783a <HAL_SPI_Transmit+0x184>
        {
          errorcode = HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          hspi->State = HAL_SPI_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007838:	e08c      	b.n	8007954 <HAL_SPI_Transmit+0x29e>
    while (hspi->TxXferCount > 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1c9      	bne.n	80077d8 <HAL_SPI_Transmit+0x122>
 8007844:	e060      	b.n	8007908 <HAL_SPI_Transmit+0x252>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_Transmit+0x19e>
 800784e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007850:	2b01      	cmp	r3, #1
 8007852:	d154      	bne.n	80078fe <HAL_SPI_Transmit+0x248>
    {
      hspi->Instance->DR = *((uint8_t *)hspi->pTxBuffPtr);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60da      	str	r2, [r3, #12]
      uint8_t e = *((uint8_t *)hspi->pTxBuffPtr);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint32_t *a = &hspi->Instance->DR;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	623b      	str	r3, [r7, #32]
      uint32_t b = *a;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	61fb      	str	r3, [r7, #28]
      uint8_t c = hspi->pTxBuffPtr[0];
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	76fb      	strb	r3, [r7, #27]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007898:	e031      	b.n	80078fe <HAL_SPI_Transmit+0x248>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d113      	bne.n	80078d0 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	7812      	ldrb	r2, [r2, #0]
 80078b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80078ce:	e016      	b.n	80078fe <HAL_SPI_Transmit+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078d0:	f7fb fcd8 	bl	8003284 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d803      	bhi.n	80078e8 <HAL_SPI_Transmit+0x232>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d102      	bne.n	80078ee <HAL_SPI_Transmit+0x238>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d107      	bne.n	80078fe <HAL_SPI_Transmit+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          hspi->State = HAL_SPI_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80078fc:	e02a      	b.n	8007954 <HAL_SPI_Transmit+0x29e>
    while (hspi->TxXferCount > 0U)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1c8      	bne.n	800789a <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fccd 	bl	80082ac <SPI_EndRxTxTransaction>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <HAL_SPI_Transmit+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <HAL_SPI_Transmit+0x286>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	617b      	str	r3, [r7, #20]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_SPI_Transmit+0x296>
  {
    errorcode = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800794a:	e003      	b.n	8007954 <HAL_SPI_Transmit+0x29e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800795c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007960:	4618      	mov	r0, r3
 8007962:	3730      	adds	r7, #48	; 0x30
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	4613      	mov	r3, r2
 8007976:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d002      	beq.n	800798e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007988:	2302      	movs	r3, #2
 800798a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800798c:	e0fb      	b.n	8007b86 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007996:	d112      	bne.n	80079be <HAL_SPI_Receive+0x56>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10e      	bne.n	80079be <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2204      	movs	r2, #4
 80079a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	4613      	mov	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f8ef 	bl	8007b98 <HAL_SPI_TransmitReceive>
 80079ba:	4603      	mov	r3, r0
 80079bc:	e0e8      	b.n	8007b90 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_SPI_Receive+0x64>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e0e1      	b.n	8007b90 <HAL_SPI_Receive+0x228>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079d4:	f7fb fc56 	bl	8003284 <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_SPI_Receive+0x7e>
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079ea:	e0cc      	b.n	8007b86 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2204      	movs	r2, #4
 80079f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	88fa      	ldrh	r2, [r7, #6]
 8007a0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a32:	d10f      	bne.n	8007a54 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d007      	beq.n	8007a72 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d16a      	bne.n	8007b50 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a7a:	e032      	b.n	8007ae2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d115      	bne.n	8007ab6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f103 020c 	add.w	r2, r3, #12
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ab4:	e015      	b.n	8007ae2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ab6:	f7fb fbe5 	bl	8003284 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d803      	bhi.n	8007ace <HAL_SPI_Receive+0x166>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007acc:	d102      	bne.n	8007ad4 <HAL_SPI_Receive+0x16c>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007ae0:	e051      	b.n	8007b86 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1c7      	bne.n	8007a7c <HAL_SPI_Receive+0x114>
 8007aec:	e035      	b.n	8007b5a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d113      	bne.n	8007b24 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	b292      	uxth	r2, r2
 8007b08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	1c9a      	adds	r2, r3, #2
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b22:	e015      	b.n	8007b50 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b24:	f7fb fbae 	bl	8003284 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d803      	bhi.n	8007b3c <HAL_SPI_Receive+0x1d4>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d102      	bne.n	8007b42 <HAL_SPI_Receive+0x1da>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007b4e:	e01a      	b.n	8007b86 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1c9      	bne.n	8007aee <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 fb3e 	bl	80081e0 <SPI_EndRxTransaction>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	75fb      	strb	r3, [r7, #23]
 8007b7c:	e003      	b.n	8007b86 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08c      	sub	sp, #48	; 0x30
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <HAL_SPI_TransmitReceive+0x26>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e198      	b.n	8007ef0 <HAL_SPI_TransmitReceive+0x358>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bc6:	f7fb fb5d 	bl	8003284 <HAL_GetTick>
 8007bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bdc:	887b      	ldrh	r3, [r7, #2]
 8007bde:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d00f      	beq.n	8007c08 <HAL_SPI_TransmitReceive+0x70>
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bee:	d107      	bne.n	8007c00 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d103      	bne.n	8007c00 <HAL_SPI_TransmitReceive+0x68>
 8007bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d003      	beq.n	8007c08 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c06:	e16d      	b.n	8007ee4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x82>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <HAL_SPI_TransmitReceive+0x82>
 8007c14:	887b      	ldrh	r3, [r7, #2]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d103      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c20:	e160      	b.n	8007ee4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d003      	beq.n	8007c36 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2205      	movs	r2, #5
 8007c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	887a      	ldrh	r2, [r7, #2]
 8007c46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	887a      	ldrh	r2, [r7, #2]
 8007c4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	887a      	ldrh	r2, [r7, #2]
 8007c5e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d007      	beq.n	8007c8a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c92:	d17c      	bne.n	8007d8e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_SPI_TransmitReceive+0x10a>
 8007c9c:	8b7b      	ldrh	r3, [r7, #26]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d16a      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	881a      	ldrh	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	1c9a      	adds	r2, r3, #2
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc6:	e057      	b.n	8007d78 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d11b      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x176>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d016      	beq.n	8007d0e <HAL_SPI_TransmitReceive+0x176>
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d113      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	881a      	ldrh	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	1c9a      	adds	r2, r3, #2
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d119      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x1b8>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d014      	beq.n	8007d50 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	b292      	uxth	r2, r2
 8007d32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	1c9a      	adds	r2, r3, #2
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d50:	f7fb fa98 	bl	8003284 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d80b      	bhi.n	8007d78 <HAL_SPI_TransmitReceive+0x1e0>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d007      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007d76:	e0b5      	b.n	8007ee4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1a2      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x130>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d19d      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x130>
 8007d8c:	e080      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_SPI_TransmitReceive+0x204>
 8007d96:	8b7b      	ldrh	r3, [r7, #26]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d16f      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	330c      	adds	r3, #12
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc2:	e05b      	b.n	8007e7c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d11c      	bne.n	8007e0c <HAL_SPI_TransmitReceive+0x274>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d017      	beq.n	8007e0c <HAL_SPI_TransmitReceive+0x274>
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d114      	bne.n	8007e0c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d119      	bne.n	8007e4e <HAL_SPI_TransmitReceive+0x2b6>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d014      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e4e:	f7fb fa19 	bl	8003284 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d803      	bhi.n	8007e66 <HAL_SPI_TransmitReceive+0x2ce>
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d102      	bne.n	8007e6c <HAL_SPI_TransmitReceive+0x2d4>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007e7a:	e033      	b.n	8007ee4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d19e      	bne.n	8007dc4 <HAL_SPI_TransmitReceive+0x22c>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d199      	bne.n	8007dc4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fa09 	bl	80082ac <SPI_EndRxTxTransaction>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d006      	beq.n	8007eae <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007eac:	e01a      	b.n	8007ee4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eda:	e003      	b.n	8007ee4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007eec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3730      	adds	r7, #48	; 0x30
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007f04:	4b6e      	ldr	r3, [pc, #440]	; (80080c0 <HAL_SPI_Abort+0x1c8>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a6e      	ldr	r2, [pc, #440]	; (80080c4 <HAL_SPI_Abort+0x1cc>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	0a5b      	lsrs	r3, r3, #9
 8007f10:	2264      	movs	r2, #100	; 0x64
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0220 	bic.w	r2, r2, #32
 8007f2a:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f36:	2b80      	cmp	r3, #128	; 0x80
 8007f38:	d117      	bne.n	8007f6a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a62      	ldr	r2, [pc, #392]	; (80080c8 <HAL_SPI_Abort+0x1d0>)
 8007f3e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007f52:	e008      	b.n	8007f66 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b07      	cmp	r3, #7
 8007f64:	d1ec      	bne.n	8007f40 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f74:	2b40      	cmp	r3, #64	; 0x40
 8007f76:	d117      	bne.n	8007fa8 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a54      	ldr	r2, [pc, #336]	; (80080cc <HAL_SPI_Abort+0x1d4>)
 8007f7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007f90:	e008      	b.n	8007fa4 <HAL_SPI_Abort+0xac>
      }
      count--;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b07      	cmp	r3, #7
 8007fa2:	d1ec      	bne.n	8007f7e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d12e      	bne.n	8008014 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d02a      	beq.n	8008014 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fb fba2 	bl	8003714 <HAL_DMA_Abort>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2240      	movs	r2, #64	; 0x40
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0202 	bic.w	r2, r2, #2
 8007fea:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d106      	bne.n	8008000 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8007ffe:	e009      	b.n	8008014 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	3b01      	subs	r3, #1
 8008004:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0eb      	beq.n	8007fec <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b01      	cmp	r3, #1
 8008020:	d122      	bne.n	8008068 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01e      	beq.n	8008068 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	2200      	movs	r2, #0
 8008030:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008036:	4618      	mov	r0, r3
 8008038:	f7fb fb6c 	bl	8003714 <HAL_DMA_Abort>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2240      	movs	r2, #64	; 0x40
 8008046:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008056:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0201 	bic.w	r2, r2, #1
 8008066:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d102      	bne.n	8008082 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	e002      	b.n	8008088 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	613b      	str	r3, [r7, #16]
 800809c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 80080b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	2000001c 	.word	0x2000001c
 80080c4:	057619f1 	.word	0x057619f1
 80080c8:	080083e5 	.word	0x080083e5
 80080cc:	08008355 	.word	0x08008355

080080d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080e0:	f7fb f8d0 	bl	8003284 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	4413      	add	r3, r2
 80080ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080f0:	f7fb f8c8 	bl	8003284 <HAL_GetTick>
 80080f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080f6:	4b39      	ldr	r3, [pc, #228]	; (80081dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	015b      	lsls	r3, r3, #5
 80080fc:	0d1b      	lsrs	r3, r3, #20
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	fb02 f303 	mul.w	r3, r2, r3
 8008104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008106:	e054      	b.n	80081b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d050      	beq.n	80081b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008110:	f7fb f8b8 	bl	8003284 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	69fa      	ldr	r2, [r7, #28]
 800811c:	429a      	cmp	r2, r3
 800811e:	d902      	bls.n	8008126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d13d      	bne.n	80081a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800813e:	d111      	bne.n	8008164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008148:	d004      	beq.n	8008154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008152:	d107      	bne.n	8008164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816c:	d10f      	bne.n	800818e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800818c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e017      	b.n	80081d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4013      	ands	r3, r2
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	bf0c      	ite	eq
 80081c2:	2301      	moveq	r3, #1
 80081c4:	2300      	movne	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d19b      	bne.n	8008108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	2000001c 	.word	0x2000001c

080081e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081f4:	d111      	bne.n	800821a <SPI_EndRxTransaction+0x3a>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081fe:	d004      	beq.n	800820a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008208:	d107      	bne.n	800821a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008218:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008222:	d12a      	bne.n	800827a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800822c:	d012      	beq.n	8008254 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	2180      	movs	r1, #128	; 0x80
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff ff49 	bl	80080d0 <SPI_WaitFlagStateUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d02d      	beq.n	80082a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e026      	b.n	80082a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	2101      	movs	r1, #1
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff ff36 	bl	80080d0 <SPI_WaitFlagStateUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d01a      	beq.n	80082a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	f043 0220 	orr.w	r2, r3, #32
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e013      	b.n	80082a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	2101      	movs	r1, #1
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff ff23 	bl	80080d0 <SPI_WaitFlagStateUntilTimeout>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008294:	f043 0220 	orr.w	r2, r3, #32
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e000      	b.n	80082a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2201      	movs	r2, #1
 80082c0:	2102      	movs	r1, #2
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff04 	bl	80080d0 <SPI_WaitFlagStateUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	f043 0220 	orr.w	r2, r3, #32
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e032      	b.n	8008344 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082de:	4b1b      	ldr	r3, [pc, #108]	; (800834c <SPI_EndRxTxTransaction+0xa0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1b      	ldr	r2, [pc, #108]	; (8008350 <SPI_EndRxTxTransaction+0xa4>)
 80082e4:	fba2 2303 	umull	r2, r3, r2, r3
 80082e8:	0d5b      	lsrs	r3, r3, #21
 80082ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082fc:	d112      	bne.n	8008324 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fee1 	bl	80080d0 <SPI_WaitFlagStateUntilTimeout>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d016      	beq.n	8008342 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008318:	f043 0220 	orr.w	r2, r3, #32
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e00f      	b.n	8008344 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	3b01      	subs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833a:	2b80      	cmp	r3, #128	; 0x80
 800833c:	d0f2      	beq.n	8008324 <SPI_EndRxTxTransaction+0x78>
 800833e:	e000      	b.n	8008342 <SPI_EndRxTxTransaction+0x96>
        break;
 8008340:	bf00      	nop
  }

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	2000001c 	.word	0x2000001c
 8008350:	165e9f81 	.word	0x165e9f81

08008354 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008360:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <SPI_AbortRx_ISR+0x88>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a1e      	ldr	r2, [pc, #120]	; (80083e0 <SPI_AbortRx_ISR+0x8c>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	0a5b      	lsrs	r3, r3, #9
 800836c:	2264      	movs	r2, #100	; 0x64
 800836e:	fb02 f303 	mul.w	r3, r2, r3
 8008372:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008386:	e009      	b.n	800839c <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	3b01      	subs	r3, #1
 800838c:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0eb      	beq.n	8008374 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083aa:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083ba:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80083c4:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2207      	movs	r2, #7
 80083ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	2000001c 	.word	0x2000001c
 80083e0:	057619f1 	.word	0x057619f1

080083e4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083fa:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800840a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2207      	movs	r2, #7
 8008410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008420:	b084      	sub	sp, #16
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	f107 001c 	add.w	r0, r7, #28
 800842e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008436:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008438:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800843a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800843e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008442:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008446:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800844a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800845a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	b004      	add	sp, #16
 8008474:	4770      	bx	lr

08008476 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2203      	movs	r2, #3
 80084be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0303 	and.w	r3, r3, #3
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b085      	sub	sp, #20
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008508:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800850e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008514:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008524:	f023 030f 	bic.w	r3, r3, #15
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	b2db      	uxtb	r3, r3
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3314      	adds	r3, #20
 8008566:	461a      	mov	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	4413      	add	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
}  
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085a4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80085aa:	431a      	orrs	r2, r3
                       Data->DPSM);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80085b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	431a      	orrs	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0

}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b088      	sub	sp, #32
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085e4:	2310      	movs	r3, #16
 80085e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085e8:	2340      	movs	r3, #64	; 0x40
 80085ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085f6:	f107 0308 	add.w	r3, r7, #8
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff ff74 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008602:	f241 3288 	movw	r2, #5000	; 0x1388
 8008606:	2110      	movs	r1, #16
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f9d7 	bl	80089bc <SDMMC_GetCmdResp1>
 800860e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008610:	69fb      	ldr	r3, [r7, #28]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b088      	sub	sp, #32
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008628:	2311      	movs	r3, #17
 800862a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008638:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff ff52 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008646:	f241 3288 	movw	r2, #5000	; 0x1388
 800864a:	2111      	movs	r1, #17
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9b5 	bl	80089bc <SDMMC_GetCmdResp1>
 8008652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008654:	69fb      	ldr	r3, [r7, #28]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b088      	sub	sp, #32
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800866c:	2312      	movs	r3, #18
 800866e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008670:	2340      	movs	r3, #64	; 0x40
 8008672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800867e:	f107 0308 	add.w	r3, r7, #8
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff30 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800868a:	f241 3288 	movw	r2, #5000	; 0x1388
 800868e:	2112      	movs	r1, #18
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f993 	bl	80089bc <SDMMC_GetCmdResp1>
 8008696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008698:	69fb      	ldr	r3, [r7, #28]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b088      	sub	sp, #32
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80086b0:	2318      	movs	r3, #24
 80086b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ff0e 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80086ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d2:	2118      	movs	r1, #24
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f971 	bl	80089bc <SDMMC_GetCmdResp1>
 80086da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086dc:	69fb      	ldr	r3, [r7, #28]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3720      	adds	r7, #32
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b088      	sub	sp, #32
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086f4:	2319      	movs	r3, #25
 80086f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086f8:	2340      	movs	r3, #64	; 0x40
 80086fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008704:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff feec 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008712:	f241 3288 	movw	r2, #5000	; 0x1388
 8008716:	2119      	movs	r1, #25
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f94f 	bl	80089bc <SDMMC_GetCmdResp1>
 800871e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008720:	69fb      	ldr	r3, [r7, #28]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008738:	230c      	movs	r3, #12
 800873a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800873c:	2340      	movs	r3, #64	; 0x40
 800873e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008740:	2300      	movs	r3, #0
 8008742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008748:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800874a:	f107 0308 	add.w	r3, r7, #8
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff feca 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008756:	4a05      	ldr	r2, [pc, #20]	; (800876c <SDMMC_CmdStopTransfer+0x40>)
 8008758:	210c      	movs	r1, #12
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f92e 	bl	80089bc <SDMMC_GetCmdResp1>
 8008760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008762:	69fb      	ldr	r3, [r7, #28]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	05f5e100 	.word	0x05f5e100

08008770 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008780:	2307      	movs	r3, #7
 8008782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008784:	2340      	movs	r3, #64	; 0x40
 8008786:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800878c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008790:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008792:	f107 0310 	add.w	r3, r7, #16
 8008796:	4619      	mov	r1, r3
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f7ff fea6 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800879e:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a2:	2107      	movs	r1, #7
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f909 	bl	80089bc <SDMMC_GetCmdResp1>
 80087aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3728      	adds	r7, #40	; 0x28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b088      	sub	sp, #32
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80087c6:	2300      	movs	r3, #0
 80087c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087d4:	f107 0308 	add.w	r3, r7, #8
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff fe85 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fb23 	bl	8008e2c <SDMMC_GetCmdError>
 80087e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087e8:	69fb      	ldr	r3, [r7, #28]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3720      	adds	r7, #32
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b088      	sub	sp, #32
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008800:	2308      	movs	r3, #8
 8008802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008804:	2340      	movs	r3, #64	; 0x40
 8008806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800880c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008810:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008812:	f107 0308 	add.w	r3, r7, #8
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff fe66 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fab6 	bl	8008d90 <SDMMC_GetCmdResp7>
 8008824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008826:	69fb      	ldr	r3, [r7, #28]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800883e:	2337      	movs	r3, #55	; 0x37
 8008840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008842:	2340      	movs	r3, #64	; 0x40
 8008844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800884a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008850:	f107 0308 	add.w	r3, r7, #8
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff fe47 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800885c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008860:	2137      	movs	r1, #55	; 0x37
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f8aa 	bl	80089bc <SDMMC_GetCmdResp1>
 8008868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800886a:	69fb      	ldr	r3, [r7, #28]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3720      	adds	r7, #32
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800888a:	2329      	movs	r3, #41	; 0x29
 800888c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800888e:	2340      	movs	r3, #64	; 0x40
 8008890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800889a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800889c:	f107 0308 	add.w	r3, r7, #8
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff fe21 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f9bd 	bl	8008c28 <SDMMC_GetCmdResp3>
 80088ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088b0:	69fb      	ldr	r3, [r7, #28]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b088      	sub	sp, #32
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088c6:	2302      	movs	r3, #2
 80088c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80088ca:	23c0      	movs	r3, #192	; 0xc0
 80088cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088ce:	2300      	movs	r3, #0
 80088d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7ff fe03 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f957 	bl	8008b98 <SDMMC_GetCmdResp2>
 80088ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ec:	69fb      	ldr	r3, [r7, #28]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3720      	adds	r7, #32
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b088      	sub	sp, #32
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008904:	2309      	movs	r3, #9
 8008906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008908:	23c0      	movs	r3, #192	; 0xc0
 800890a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800890c:	2300      	movs	r3, #0
 800890e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7ff fde4 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f938 	bl	8008b98 <SDMMC_GetCmdResp2>
 8008928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800892a:	69fb      	ldr	r3, [r7, #28]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008942:	2303      	movs	r3, #3
 8008944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008946:	2340      	movs	r3, #64	; 0x40
 8008948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800894a:	2300      	movs	r3, #0
 800894c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800894e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008954:	f107 0308 	add.w	r3, r7, #8
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fdc5 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	2103      	movs	r1, #3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f99d 	bl	8008ca4 <SDMMC_GetCmdResp6>
 800896a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800896c:	69fb      	ldr	r3, [r7, #28]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3720      	adds	r7, #32
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b088      	sub	sp, #32
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008984:	230d      	movs	r3, #13
 8008986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008988:	2340      	movs	r3, #64	; 0x40
 800898a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008994:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008996:	f107 0308 	add.w	r3, r7, #8
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fda4 	bl	80084ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80089a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a6:	210d      	movs	r1, #13
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f807 	bl	80089bc <SDMMC_GetCmdResp1>
 80089ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089b0:	69fb      	ldr	r3, [r7, #28]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	460b      	mov	r3, r1
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80089ca:	4b70      	ldr	r3, [pc, #448]	; (8008b8c <SDMMC_GetCmdResp1+0x1d0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a70      	ldr	r2, [pc, #448]	; (8008b90 <SDMMC_GetCmdResp1+0x1d4>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	0a5a      	lsrs	r2, r3, #9
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	fb02 f303 	mul.w	r3, r2, r3
 80089dc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	1e5a      	subs	r2, r3, #1
 80089e2:	61fa      	str	r2, [r7, #28]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d102      	bne.n	80089ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ec:	e0c9      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0ef      	beq.n	80089de <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1ea      	bne.n	80089de <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2204      	movs	r2, #4
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a1a:	2304      	movs	r3, #4
 8008a1c:	e0b1      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0a6      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	22c5      	movs	r2, #197	; 0xc5
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff fd7f 	bl	800853e <SDIO_GetCommandResponse>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d001      	beq.n	8008a4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e099      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008a4e:	2100      	movs	r1, #0
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff fd81 	bl	8008558 <SDIO_GetResponse>
 8008a56:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4b4e      	ldr	r3, [pc, #312]	; (8008b94 <SDMMC_GetCmdResp1+0x1d8>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	e08d      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da02      	bge.n	8008a72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008a6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a70:	e087      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008a7c:	2340      	movs	r3, #64	; 0x40
 8008a7e:	e080      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008a8a:	2380      	movs	r3, #128	; 0x80
 8008a8c:	e079      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a9c:	e071      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008aac:	e069      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008abc:	e061      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008acc:	e059      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008adc:	e051      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aec:	e049      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008afc:	e041      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b0c:	e039      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b1c:	e031      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b2c:	e029      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b3c:	e021      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b4c:	e019      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d002      	beq.n	8008b5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b5c:	e011      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008b68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b6c:	e009      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008b78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b7c:	e001      	b.n	8008b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000001c 	.word	0x2000001c
 8008b90:	10624dd3 	.word	0x10624dd3
 8008b94:	fdffe008 	.word	0xfdffe008

08008b98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ba0:	4b1f      	ldr	r3, [pc, #124]	; (8008c20 <SDMMC_GetCmdResp2+0x88>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a1f      	ldr	r2, [pc, #124]	; (8008c24 <SDMMC_GetCmdResp2+0x8c>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	0a5b      	lsrs	r3, r3, #9
 8008bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb0:	fb02 f303 	mul.w	r3, r2, r3
 8008bb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	1e5a      	subs	r2, r3, #1
 8008bba:	60fa      	str	r2, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d102      	bne.n	8008bc6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bc4:	e026      	b.n	8008c14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0ef      	beq.n	8008bb6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1ea      	bne.n	8008bb6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bf2:	2304      	movs	r3, #4
 8008bf4:	e00e      	b.n	8008c14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d004      	beq.n	8008c0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e003      	b.n	8008c14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	22c5      	movs	r2, #197	; 0xc5
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	2000001c 	.word	0x2000001c
 8008c24:	10624dd3 	.word	0x10624dd3

08008c28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c30:	4b1a      	ldr	r3, [pc, #104]	; (8008c9c <SDMMC_GetCmdResp3+0x74>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1a      	ldr	r2, [pc, #104]	; (8008ca0 <SDMMC_GetCmdResp3+0x78>)
 8008c36:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3a:	0a5b      	lsrs	r3, r3, #9
 8008c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c40:	fb02 f303 	mul.w	r3, r2, r3
 8008c44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	1e5a      	subs	r2, r3, #1
 8008c4a:	60fa      	str	r2, [r7, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c54:	e01b      	b.n	8008c8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0ef      	beq.n	8008c46 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1ea      	bne.n	8008c46 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2204      	movs	r2, #4
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c82:	2304      	movs	r3, #4
 8008c84:	e003      	b.n	8008c8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	22c5      	movs	r2, #197	; 0xc5
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	2000001c 	.word	0x2000001c
 8008ca0:	10624dd3 	.word	0x10624dd3

08008ca4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	460b      	mov	r3, r1
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cb2:	4b35      	ldr	r3, [pc, #212]	; (8008d88 <SDMMC_GetCmdResp6+0xe4>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a35      	ldr	r2, [pc, #212]	; (8008d8c <SDMMC_GetCmdResp6+0xe8>)
 8008cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cbc:	0a5b      	lsrs	r3, r3, #9
 8008cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cc2:	fb02 f303 	mul.w	r3, r2, r3
 8008cc6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	1e5a      	subs	r2, r3, #1
 8008ccc:	61fa      	str	r2, [r7, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cd6:	e052      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cdc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0ef      	beq.n	8008cc8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1ea      	bne.n	8008cc8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2204      	movs	r2, #4
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d04:	2304      	movs	r3, #4
 8008d06:	e03a      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e02f      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff fc0d 	bl	800853e <SDIO_GetCommandResponse>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	7afb      	ldrb	r3, [r7, #11]
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d001      	beq.n	8008d32 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e025      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	22c5      	movs	r2, #197	; 0xc5
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008d38:	2100      	movs	r1, #0
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff fc0c 	bl	8008558 <SDIO_GetResponse>
 8008d40:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	0c1b      	lsrs	r3, r3, #16
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e011      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d68:	e009      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d002      	beq.n	8008d7a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d78:	e001      	b.n	8008d7e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	2000001c 	.word	0x2000001c
 8008d8c:	10624dd3 	.word	0x10624dd3

08008d90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d98:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <SDMMC_GetCmdResp7+0x94>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a22      	ldr	r2, [pc, #136]	; (8008e28 <SDMMC_GetCmdResp7+0x98>)
 8008d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008da2:	0a5b      	lsrs	r3, r3, #9
 8008da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da8:	fb02 f303 	mul.w	r3, r2, r3
 8008dac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	60fa      	str	r2, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008db8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dbc:	e02c      	b.n	8008e18 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0ef      	beq.n	8008dae <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1ea      	bne.n	8008dae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d004      	beq.n	8008dee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2204      	movs	r2, #4
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008dea:	2304      	movs	r3, #4
 8008dec:	e014      	b.n	8008e18 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e009      	b.n	8008e18 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2240      	movs	r2, #64	; 0x40
 8008e14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008e16:	2300      	movs	r3, #0
  
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	2000001c 	.word	0x2000001c
 8008e28:	10624dd3 	.word	0x10624dd3

08008e2c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <SDMMC_GetCmdError+0x50>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <SDMMC_GetCmdError+0x54>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	0a5b      	lsrs	r3, r3, #9
 8008e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e44:	fb02 f303 	mul.w	r3, r2, r3
 8008e48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	1e5a      	subs	r2, r3, #1
 8008e4e:	60fa      	str	r2, [r7, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e58:	e009      	b.n	8008e6e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f1      	beq.n	8008e4a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	22c5      	movs	r2, #197	; 0xc5
 8008e6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	2000001c 	.word	0x2000001c
 8008e80:	10624dd3 	.word	0x10624dd3

08008e84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008e88:	4904      	ldr	r1, [pc, #16]	; (8008e9c <MX_FATFS_Init+0x18>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <MX_FATFS_Init+0x1c>)
 8008e8c:	f000 fa92 	bl	80093b4 <FATFS_LinkDriver>
 8008e90:	4603      	mov	r3, r0
 8008e92:	461a      	mov	r2, r3
 8008e94:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <MX_FATFS_Init+0x20>)
 8008e96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e98:	bf00      	nop
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	200004fc 	.word	0x200004fc
 8008ea0:	0800c6c0 	.word	0x0800c6c0
 8008ea4:	200004f8 	.word	0x200004f8

08008ea8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008eb2:	f000 f888 	bl	8008fc6 <BSP_SD_IsDetected>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d001      	beq.n	8008ec0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e005      	b.n	8008ecc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008ec0:	4804      	ldr	r0, [pc, #16]	; (8008ed4 <BSP_SD_Init+0x2c>)
 8008ec2:	f7fd fa3f 	bl	8006344 <HAL_SD_Init>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008eca:	79fb      	ldrb	r3, [r7, #7]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20000294 	.word	0x20000294

08008ed8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	68f9      	ldr	r1, [r7, #12]
 8008eee:	4806      	ldr	r0, [pc, #24]	; (8008f08 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008ef0:	f7fd fad8 	bl	80064a4 <HAL_SD_ReadBlocks_DMA>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000294 	.word	0x20000294

08008f0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	68f9      	ldr	r1, [r7, #12]
 8008f22:	4806      	ldr	r0, [pc, #24]	; (8008f3c <BSP_SD_WriteBlocks_DMA+0x30>)
 8008f24:	f7fd fba0 	bl	8006668 <HAL_SD_WriteBlocks_DMA>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20000294 	.word	0x20000294

08008f40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008f44:	4805      	ldr	r0, [pc, #20]	; (8008f5c <BSP_SD_GetCardState+0x1c>)
 8008f46:	f7fd ffd5 	bl	8006ef4 <HAL_SD_GetCardState>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000294 	.word	0x20000294

08008f60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	4803      	ldr	r0, [pc, #12]	; (8008f78 <BSP_SD_GetCardInfo+0x18>)
 8008f6c:	f7fd ff96 	bl	8006e9c <HAL_SD_GetCardInfo>
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20000294 	.word	0x20000294

08008f7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008f84:	f000 f818 	bl	8008fb8 <BSP_SD_AbortCallback>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008f98:	f000 f9a8 	bl	80092ec <BSP_SD_WriteCpltCallback>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008fac:	f000 f9aa 	bl	8009304 <BSP_SD_ReadCpltCallback>
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0

}
 8008fbc:	bf00      	nop
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008fd0:	f000 f80c 	bl	8008fec <BSP_PlatformIsDetected>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	b2db      	uxtb	r3, r3
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	4806      	ldr	r0, [pc, #24]	; (8009014 <BSP_PlatformIsDetected+0x28>)
 8008ffa:	f7fb f82f 	bl	800405c <HAL_GPIO_ReadPin>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009004:	2300      	movs	r3, #0
 8009006:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009008:	79fb      	ldrb	r3, [r7, #7]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40020800 	.word	0x40020800

08009018 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009020:	f7fa f930 	bl	8003284 <HAL_GetTick>
 8009024:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009026:	e006      	b.n	8009036 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009028:	f7ff ff8a 	bl	8008f40 <BSP_SD_GetCardState>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009032:	2300      	movs	r3, #0
 8009034:	e009      	b.n	800904a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009036:	f7fa f925 	bl	8003284 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	429a      	cmp	r2, r3
 8009044:	d8f0      	bhi.n	8009028 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009046:	f04f 33ff 	mov.w	r3, #4294967295
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <SD_CheckStatus+0x38>)
 8009060:	2201      	movs	r2, #1
 8009062:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009064:	f7ff ff6c 	bl	8008f40 <BSP_SD_GetCardState>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d107      	bne.n	800907e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800906e:	4b07      	ldr	r3, [pc, #28]	; (800908c <SD_CheckStatus+0x38>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	b2da      	uxtb	r2, r3
 800907a:	4b04      	ldr	r3, [pc, #16]	; (800908c <SD_CheckStatus+0x38>)
 800907c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800907e:	4b03      	ldr	r3, [pc, #12]	; (800908c <SD_CheckStatus+0x38>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b2db      	uxtb	r3, r3
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000025 	.word	0x20000025

08009090 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800909a:	f7ff ff05 	bl	8008ea8 <BSP_SD_Init>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d107      	bne.n	80090b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ffd4 	bl	8009054 <SD_CheckStatus>
 80090ac:	4603      	mov	r3, r0
 80090ae:	461a      	mov	r2, r3
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <SD_initialize+0x34>)
 80090b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80090b4:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <SD_initialize+0x34>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	b2db      	uxtb	r3, r3
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000025 	.word	0x20000025

080090c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff ffbd 	bl	8009054 <SD_CheckStatus>
 80090da:	4603      	mov	r3, r0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80090f8:	f247 5030 	movw	r0, #30000	; 0x7530
 80090fc:	f7ff ff8c 	bl	8009018 <SD_CheckStatusWithTimeout>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	da01      	bge.n	800910a <SD_read+0x26>
  {
    return res;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	e03b      	b.n	8009182 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7ff fee2 	bl	8008ed8 <BSP_SD_ReadBlocks_DMA>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d132      	bne.n	8009180 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800911a:	4b1c      	ldr	r3, [pc, #112]	; (800918c <SD_read+0xa8>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009120:	f7fa f8b0 	bl	8003284 <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009126:	bf00      	nop
 8009128:	4b18      	ldr	r3, [pc, #96]	; (800918c <SD_read+0xa8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d108      	bne.n	8009142 <SD_read+0x5e>
 8009130:	f7fa f8a8 	bl	8003284 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f247 522f 	movw	r2, #29999	; 0x752f
 800913e:	4293      	cmp	r3, r2
 8009140:	d9f2      	bls.n	8009128 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009142:	4b12      	ldr	r3, [pc, #72]	; (800918c <SD_read+0xa8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	75fb      	strb	r3, [r7, #23]
 800914e:	e017      	b.n	8009180 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009150:	4b0e      	ldr	r3, [pc, #56]	; (800918c <SD_read+0xa8>)
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009156:	f7fa f895 	bl	8003284 <HAL_GetTick>
 800915a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800915c:	e007      	b.n	800916e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800915e:	f7ff feef 	bl	8008f40 <BSP_SD_GetCardState>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d102      	bne.n	800916e <SD_read+0x8a>
          {
            res = RES_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800916c:	e008      	b.n	8009180 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800916e:	f7fa f889 	bl	8003284 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	f247 522f 	movw	r2, #29999	; 0x752f
 800917c:	4293      	cmp	r3, r2
 800917e:	d9ee      	bls.n	800915e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000504 	.word	0x20000504

08009190 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <SD_write+0xa8>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80091aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80091ae:	f7ff ff33 	bl	8009018 <SD_CheckStatusWithTimeout>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	da01      	bge.n	80091bc <SD_write+0x2c>
  {
    return res;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
 80091ba:	e038      	b.n	800922e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	68b8      	ldr	r0, [r7, #8]
 80091c2:	f7ff fea3 	bl	8008f0c <BSP_SD_WriteBlocks_DMA>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d12f      	bne.n	800922c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80091cc:	f7fa f85a 	bl	8003284 <HAL_GetTick>
 80091d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80091d2:	bf00      	nop
 80091d4:	4b18      	ldr	r3, [pc, #96]	; (8009238 <SD_write+0xa8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d108      	bne.n	80091ee <SD_write+0x5e>
 80091dc:	f7fa f852 	bl	8003284 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d9f2      	bls.n	80091d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80091ee:	4b12      	ldr	r3, [pc, #72]	; (8009238 <SD_write+0xa8>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	75fb      	strb	r3, [r7, #23]
 80091fa:	e017      	b.n	800922c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80091fc:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <SD_write+0xa8>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009202:	f7fa f83f 	bl	8003284 <HAL_GetTick>
 8009206:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009208:	e007      	b.n	800921a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800920a:	f7ff fe99 	bl	8008f40 <BSP_SD_GetCardState>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <SD_write+0x8a>
          {
            res = RES_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	75fb      	strb	r3, [r7, #23]
            break;
 8009218:	e008      	b.n	800922c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800921a:	f7fa f833 	bl	8003284 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	f247 522f 	movw	r2, #29999	; 0x752f
 8009228:	4293      	cmp	r3, r2
 800922a:	d9ee      	bls.n	800920a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20000500 	.word	0x20000500

0800923c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08c      	sub	sp, #48	; 0x30
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	603a      	str	r2, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
 8009248:	460b      	mov	r3, r1
 800924a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009252:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <SD_ioctl+0xac>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <SD_ioctl+0x28>
 8009260:	2303      	movs	r3, #3
 8009262:	e03c      	b.n	80092de <SD_ioctl+0xa2>

  switch (cmd)
 8009264:	79bb      	ldrb	r3, [r7, #6]
 8009266:	2b03      	cmp	r3, #3
 8009268:	d834      	bhi.n	80092d4 <SD_ioctl+0x98>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <SD_ioctl+0x34>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009281 	.word	0x08009281
 8009274:	08009289 	.word	0x08009289
 8009278:	080092a1 	.word	0x080092a1
 800927c:	080092bb 	.word	0x080092bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009286:	e028      	b.n	80092da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009288:	f107 030c 	add.w	r3, r7, #12
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff fe67 	bl	8008f60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800929e:	e01c      	b.n	80092da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80092a0:	f107 030c 	add.w	r3, r7, #12
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fe5b 	bl	8008f60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092b8:	e00f      	b.n	80092da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80092ba:	f107 030c 	add.w	r3, r7, #12
 80092be:	4618      	mov	r0, r3
 80092c0:	f7ff fe4e 	bl	8008f60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	0a5a      	lsrs	r2, r3, #9
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092d2:	e002      	b.n	80092da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80092d4:	2304      	movs	r3, #4
 80092d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80092da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3730      	adds	r7, #48	; 0x30
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000025 	.word	0x20000025

080092ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80092f0:	4b03      	ldr	r3, [pc, #12]	; (8009300 <BSP_SD_WriteCpltCallback+0x14>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20000500 	.word	0x20000500

08009304 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009308:	4b03      	ldr	r3, [pc, #12]	; (8009318 <BSP_SD_ReadCpltCallback+0x14>)
 800930a:	2201      	movs	r2, #1
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	20000504 	.word	0x20000504

0800931c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800932a:	2301      	movs	r3, #1
 800932c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009332:	4b1f      	ldr	r3, [pc, #124]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009334:	7a5b      	ldrb	r3, [r3, #9]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d131      	bne.n	80093a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800933c:	4b1c      	ldr	r3, [pc, #112]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 800933e:	7a5b      	ldrb	r3, [r3, #9]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009346:	2100      	movs	r1, #0
 8009348:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800934a:	4b19      	ldr	r3, [pc, #100]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 800934c:	7a5b      	ldrb	r3, [r3, #9]
 800934e:	b2db      	uxtb	r3, r3
 8009350:	4a17      	ldr	r2, [pc, #92]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800935a:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 800935c:	7a5b      	ldrb	r3, [r3, #9]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	461a      	mov	r2, r3
 8009362:	4b13      	ldr	r3, [pc, #76]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009364:	4413      	add	r3, r2
 8009366:	79fa      	ldrb	r2, [r7, #7]
 8009368:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800936a:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 800936c:	7a5b      	ldrb	r3, [r3, #9]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	b2d1      	uxtb	r1, r2
 8009374:	4a0e      	ldr	r2, [pc, #56]	; (80093b0 <FATFS_LinkDriverEx+0x94>)
 8009376:	7251      	strb	r1, [r2, #9]
 8009378:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800937a:	7dbb      	ldrb	r3, [r7, #22]
 800937c:	3330      	adds	r3, #48	; 0x30
 800937e:	b2da      	uxtb	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	3301      	adds	r3, #1
 8009388:	223a      	movs	r2, #58	; 0x3a
 800938a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	3302      	adds	r3, #2
 8009390:	222f      	movs	r2, #47	; 0x2f
 8009392:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	3303      	adds	r3, #3
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	20000508 	.word	0x20000508

080093b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093be:	2200      	movs	r2, #0
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff ffaa 	bl	800931c <FATFS_LinkDriverEx>
 80093c8:	4603      	mov	r3, r0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <atoi>:
 80093d2:	220a      	movs	r2, #10
 80093d4:	2100      	movs	r1, #0
 80093d6:	f000 b883 	b.w	80094e0 <strtol>
	...

080093dc <_strtol_l.constprop.0>:
 80093dc:	2b01      	cmp	r3, #1
 80093de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e2:	d001      	beq.n	80093e8 <_strtol_l.constprop.0+0xc>
 80093e4:	2b24      	cmp	r3, #36	; 0x24
 80093e6:	d906      	bls.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80093e8:	f000 ff64 	bl	800a2b4 <__errno>
 80093ec:	2316      	movs	r3, #22
 80093ee:	6003      	str	r3, [r0, #0]
 80093f0:	2000      	movs	r0, #0
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80094dc <_strtol_l.constprop.0+0x100>
 80093fa:	460d      	mov	r5, r1
 80093fc:	462e      	mov	r6, r5
 80093fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009402:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009406:	f017 0708 	ands.w	r7, r7, #8
 800940a:	d1f7      	bne.n	80093fc <_strtol_l.constprop.0+0x20>
 800940c:	2c2d      	cmp	r4, #45	; 0x2d
 800940e:	d132      	bne.n	8009476 <_strtol_l.constprop.0+0x9a>
 8009410:	782c      	ldrb	r4, [r5, #0]
 8009412:	2701      	movs	r7, #1
 8009414:	1cb5      	adds	r5, r6, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d05b      	beq.n	80094d2 <_strtol_l.constprop.0+0xf6>
 800941a:	2b10      	cmp	r3, #16
 800941c:	d109      	bne.n	8009432 <_strtol_l.constprop.0+0x56>
 800941e:	2c30      	cmp	r4, #48	; 0x30
 8009420:	d107      	bne.n	8009432 <_strtol_l.constprop.0+0x56>
 8009422:	782c      	ldrb	r4, [r5, #0]
 8009424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009428:	2c58      	cmp	r4, #88	; 0x58
 800942a:	d14d      	bne.n	80094c8 <_strtol_l.constprop.0+0xec>
 800942c:	786c      	ldrb	r4, [r5, #1]
 800942e:	2310      	movs	r3, #16
 8009430:	3502      	adds	r5, #2
 8009432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009436:	f108 38ff 	add.w	r8, r8, #4294967295
 800943a:	f04f 0e00 	mov.w	lr, #0
 800943e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009442:	4676      	mov	r6, lr
 8009444:	fb03 8a19 	mls	sl, r3, r9, r8
 8009448:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800944c:	f1bc 0f09 	cmp.w	ip, #9
 8009450:	d816      	bhi.n	8009480 <_strtol_l.constprop.0+0xa4>
 8009452:	4664      	mov	r4, ip
 8009454:	42a3      	cmp	r3, r4
 8009456:	dd24      	ble.n	80094a2 <_strtol_l.constprop.0+0xc6>
 8009458:	f1be 3fff 	cmp.w	lr, #4294967295
 800945c:	d008      	beq.n	8009470 <_strtol_l.constprop.0+0x94>
 800945e:	45b1      	cmp	r9, r6
 8009460:	d31c      	bcc.n	800949c <_strtol_l.constprop.0+0xc0>
 8009462:	d101      	bne.n	8009468 <_strtol_l.constprop.0+0x8c>
 8009464:	45a2      	cmp	sl, r4
 8009466:	db19      	blt.n	800949c <_strtol_l.constprop.0+0xc0>
 8009468:	fb06 4603 	mla	r6, r6, r3, r4
 800946c:	f04f 0e01 	mov.w	lr, #1
 8009470:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009474:	e7e8      	b.n	8009448 <_strtol_l.constprop.0+0x6c>
 8009476:	2c2b      	cmp	r4, #43	; 0x2b
 8009478:	bf04      	itt	eq
 800947a:	782c      	ldrbeq	r4, [r5, #0]
 800947c:	1cb5      	addeq	r5, r6, #2
 800947e:	e7ca      	b.n	8009416 <_strtol_l.constprop.0+0x3a>
 8009480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009484:	f1bc 0f19 	cmp.w	ip, #25
 8009488:	d801      	bhi.n	800948e <_strtol_l.constprop.0+0xb2>
 800948a:	3c37      	subs	r4, #55	; 0x37
 800948c:	e7e2      	b.n	8009454 <_strtol_l.constprop.0+0x78>
 800948e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009492:	f1bc 0f19 	cmp.w	ip, #25
 8009496:	d804      	bhi.n	80094a2 <_strtol_l.constprop.0+0xc6>
 8009498:	3c57      	subs	r4, #87	; 0x57
 800949a:	e7db      	b.n	8009454 <_strtol_l.constprop.0+0x78>
 800949c:	f04f 3eff 	mov.w	lr, #4294967295
 80094a0:	e7e6      	b.n	8009470 <_strtol_l.constprop.0+0x94>
 80094a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80094a6:	d105      	bne.n	80094b4 <_strtol_l.constprop.0+0xd8>
 80094a8:	2322      	movs	r3, #34	; 0x22
 80094aa:	6003      	str	r3, [r0, #0]
 80094ac:	4646      	mov	r6, r8
 80094ae:	b942      	cbnz	r2, 80094c2 <_strtol_l.constprop.0+0xe6>
 80094b0:	4630      	mov	r0, r6
 80094b2:	e79e      	b.n	80093f2 <_strtol_l.constprop.0+0x16>
 80094b4:	b107      	cbz	r7, 80094b8 <_strtol_l.constprop.0+0xdc>
 80094b6:	4276      	negs	r6, r6
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	d0f9      	beq.n	80094b0 <_strtol_l.constprop.0+0xd4>
 80094bc:	f1be 0f00 	cmp.w	lr, #0
 80094c0:	d000      	beq.n	80094c4 <_strtol_l.constprop.0+0xe8>
 80094c2:	1e69      	subs	r1, r5, #1
 80094c4:	6011      	str	r1, [r2, #0]
 80094c6:	e7f3      	b.n	80094b0 <_strtol_l.constprop.0+0xd4>
 80094c8:	2430      	movs	r4, #48	; 0x30
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1b1      	bne.n	8009432 <_strtol_l.constprop.0+0x56>
 80094ce:	2308      	movs	r3, #8
 80094d0:	e7af      	b.n	8009432 <_strtol_l.constprop.0+0x56>
 80094d2:	2c30      	cmp	r4, #48	; 0x30
 80094d4:	d0a5      	beq.n	8009422 <_strtol_l.constprop.0+0x46>
 80094d6:	230a      	movs	r3, #10
 80094d8:	e7ab      	b.n	8009432 <_strtol_l.constprop.0+0x56>
 80094da:	bf00      	nop
 80094dc:	0800c6d5 	.word	0x0800c6d5

080094e0 <strtol>:
 80094e0:	4613      	mov	r3, r2
 80094e2:	460a      	mov	r2, r1
 80094e4:	4601      	mov	r1, r0
 80094e6:	4802      	ldr	r0, [pc, #8]	; (80094f0 <strtol+0x10>)
 80094e8:	6800      	ldr	r0, [r0, #0]
 80094ea:	f7ff bf77 	b.w	80093dc <_strtol_l.constprop.0>
 80094ee:	bf00      	nop
 80094f0:	20000080 	.word	0x20000080

080094f4 <__cvt>:
 80094f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	ec55 4b10 	vmov	r4, r5, d0
 80094fc:	2d00      	cmp	r5, #0
 80094fe:	460e      	mov	r6, r1
 8009500:	4619      	mov	r1, r3
 8009502:	462b      	mov	r3, r5
 8009504:	bfbb      	ittet	lt
 8009506:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800950a:	461d      	movlt	r5, r3
 800950c:	2300      	movge	r3, #0
 800950e:	232d      	movlt	r3, #45	; 0x2d
 8009510:	700b      	strb	r3, [r1, #0]
 8009512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009514:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009518:	4691      	mov	r9, r2
 800951a:	f023 0820 	bic.w	r8, r3, #32
 800951e:	bfbc      	itt	lt
 8009520:	4622      	movlt	r2, r4
 8009522:	4614      	movlt	r4, r2
 8009524:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009528:	d005      	beq.n	8009536 <__cvt+0x42>
 800952a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800952e:	d100      	bne.n	8009532 <__cvt+0x3e>
 8009530:	3601      	adds	r6, #1
 8009532:	2102      	movs	r1, #2
 8009534:	e000      	b.n	8009538 <__cvt+0x44>
 8009536:	2103      	movs	r1, #3
 8009538:	ab03      	add	r3, sp, #12
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	ab02      	add	r3, sp, #8
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	ec45 4b10 	vmov	d0, r4, r5
 8009544:	4653      	mov	r3, sl
 8009546:	4632      	mov	r2, r6
 8009548:	f000 ff7a 	bl	800a440 <_dtoa_r>
 800954c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009550:	4607      	mov	r7, r0
 8009552:	d102      	bne.n	800955a <__cvt+0x66>
 8009554:	f019 0f01 	tst.w	r9, #1
 8009558:	d022      	beq.n	80095a0 <__cvt+0xac>
 800955a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800955e:	eb07 0906 	add.w	r9, r7, r6
 8009562:	d110      	bne.n	8009586 <__cvt+0x92>
 8009564:	783b      	ldrb	r3, [r7, #0]
 8009566:	2b30      	cmp	r3, #48	; 0x30
 8009568:	d10a      	bne.n	8009580 <__cvt+0x8c>
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	4620      	mov	r0, r4
 8009570:	4629      	mov	r1, r5
 8009572:	f7f7 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009576:	b918      	cbnz	r0, 8009580 <__cvt+0x8c>
 8009578:	f1c6 0601 	rsb	r6, r6, #1
 800957c:	f8ca 6000 	str.w	r6, [sl]
 8009580:	f8da 3000 	ldr.w	r3, [sl]
 8009584:	4499      	add	r9, r3
 8009586:	2200      	movs	r2, #0
 8009588:	2300      	movs	r3, #0
 800958a:	4620      	mov	r0, r4
 800958c:	4629      	mov	r1, r5
 800958e:	f7f7 fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009592:	b108      	cbz	r0, 8009598 <__cvt+0xa4>
 8009594:	f8cd 900c 	str.w	r9, [sp, #12]
 8009598:	2230      	movs	r2, #48	; 0x30
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	454b      	cmp	r3, r9
 800959e:	d307      	bcc.n	80095b0 <__cvt+0xbc>
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a4:	1bdb      	subs	r3, r3, r7
 80095a6:	4638      	mov	r0, r7
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	b004      	add	sp, #16
 80095ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b0:	1c59      	adds	r1, r3, #1
 80095b2:	9103      	str	r1, [sp, #12]
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	e7f0      	b.n	800959a <__cvt+0xa6>

080095b8 <__exponent>:
 80095b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ba:	4603      	mov	r3, r0
 80095bc:	2900      	cmp	r1, #0
 80095be:	bfb8      	it	lt
 80095c0:	4249      	neglt	r1, r1
 80095c2:	f803 2b02 	strb.w	r2, [r3], #2
 80095c6:	bfb4      	ite	lt
 80095c8:	222d      	movlt	r2, #45	; 0x2d
 80095ca:	222b      	movge	r2, #43	; 0x2b
 80095cc:	2909      	cmp	r1, #9
 80095ce:	7042      	strb	r2, [r0, #1]
 80095d0:	dd2a      	ble.n	8009628 <__exponent+0x70>
 80095d2:	f10d 0207 	add.w	r2, sp, #7
 80095d6:	4617      	mov	r7, r2
 80095d8:	260a      	movs	r6, #10
 80095da:	4694      	mov	ip, r2
 80095dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80095e0:	fb06 1415 	mls	r4, r6, r5, r1
 80095e4:	3430      	adds	r4, #48	; 0x30
 80095e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095ea:	460c      	mov	r4, r1
 80095ec:	2c63      	cmp	r4, #99	; 0x63
 80095ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80095f2:	4629      	mov	r1, r5
 80095f4:	dcf1      	bgt.n	80095da <__exponent+0x22>
 80095f6:	3130      	adds	r1, #48	; 0x30
 80095f8:	f1ac 0402 	sub.w	r4, ip, #2
 80095fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009600:	1c41      	adds	r1, r0, #1
 8009602:	4622      	mov	r2, r4
 8009604:	42ba      	cmp	r2, r7
 8009606:	d30a      	bcc.n	800961e <__exponent+0x66>
 8009608:	f10d 0209 	add.w	r2, sp, #9
 800960c:	eba2 020c 	sub.w	r2, r2, ip
 8009610:	42bc      	cmp	r4, r7
 8009612:	bf88      	it	hi
 8009614:	2200      	movhi	r2, #0
 8009616:	4413      	add	r3, r2
 8009618:	1a18      	subs	r0, r3, r0
 800961a:	b003      	add	sp, #12
 800961c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009622:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009626:	e7ed      	b.n	8009604 <__exponent+0x4c>
 8009628:	2330      	movs	r3, #48	; 0x30
 800962a:	3130      	adds	r1, #48	; 0x30
 800962c:	7083      	strb	r3, [r0, #2]
 800962e:	70c1      	strb	r1, [r0, #3]
 8009630:	1d03      	adds	r3, r0, #4
 8009632:	e7f1      	b.n	8009618 <__exponent+0x60>

08009634 <_printf_float>:
 8009634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009638:	ed2d 8b02 	vpush	{d8}
 800963c:	b08d      	sub	sp, #52	; 0x34
 800963e:	460c      	mov	r4, r1
 8009640:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009644:	4616      	mov	r6, r2
 8009646:	461f      	mov	r7, r3
 8009648:	4605      	mov	r5, r0
 800964a:	f000 fde9 	bl	800a220 <_localeconv_r>
 800964e:	f8d0 a000 	ldr.w	sl, [r0]
 8009652:	4650      	mov	r0, sl
 8009654:	f7f6 fe0c 	bl	8000270 <strlen>
 8009658:	2300      	movs	r3, #0
 800965a:	930a      	str	r3, [sp, #40]	; 0x28
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	9305      	str	r3, [sp, #20]
 8009660:	f8d8 3000 	ldr.w	r3, [r8]
 8009664:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009668:	3307      	adds	r3, #7
 800966a:	f023 0307 	bic.w	r3, r3, #7
 800966e:	f103 0208 	add.w	r2, r3, #8
 8009672:	f8c8 2000 	str.w	r2, [r8]
 8009676:	e9d3 8900 	ldrd	r8, r9, [r3]
 800967a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	f8cd 8018 	str.w	r8, [sp, #24]
 8009684:	ee08 0a10 	vmov	s16, r0
 8009688:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800968c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009690:	4b9e      	ldr	r3, [pc, #632]	; (800990c <_printf_float+0x2d8>)
 8009692:	f04f 32ff 	mov.w	r2, #4294967295
 8009696:	f7f7 fa49 	bl	8000b2c <__aeabi_dcmpun>
 800969a:	bb88      	cbnz	r0, 8009700 <_printf_float+0xcc>
 800969c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096a0:	4b9a      	ldr	r3, [pc, #616]	; (800990c <_printf_float+0x2d8>)
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	f7f7 fa23 	bl	8000af0 <__aeabi_dcmple>
 80096aa:	bb48      	cbnz	r0, 8009700 <_printf_float+0xcc>
 80096ac:	2200      	movs	r2, #0
 80096ae:	2300      	movs	r3, #0
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f7 fa12 	bl	8000adc <__aeabi_dcmplt>
 80096b8:	b110      	cbz	r0, 80096c0 <_printf_float+0x8c>
 80096ba:	232d      	movs	r3, #45	; 0x2d
 80096bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c0:	4a93      	ldr	r2, [pc, #588]	; (8009910 <_printf_float+0x2dc>)
 80096c2:	4b94      	ldr	r3, [pc, #592]	; (8009914 <_printf_float+0x2e0>)
 80096c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096c8:	bf94      	ite	ls
 80096ca:	4690      	movls	r8, r2
 80096cc:	4698      	movhi	r8, r3
 80096ce:	2303      	movs	r3, #3
 80096d0:	6123      	str	r3, [r4, #16]
 80096d2:	9b05      	ldr	r3, [sp, #20]
 80096d4:	f023 0304 	bic.w	r3, r3, #4
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	9700      	str	r7, [sp, #0]
 80096e0:	4633      	mov	r3, r6
 80096e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80096e4:	4621      	mov	r1, r4
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f9da 	bl	8009aa0 <_printf_common>
 80096ec:	3001      	adds	r0, #1
 80096ee:	f040 8090 	bne.w	8009812 <_printf_float+0x1de>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	b00d      	add	sp, #52	; 0x34
 80096f8:	ecbd 8b02 	vpop	{d8}
 80096fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	4640      	mov	r0, r8
 8009706:	4649      	mov	r1, r9
 8009708:	f7f7 fa10 	bl	8000b2c <__aeabi_dcmpun>
 800970c:	b140      	cbz	r0, 8009720 <_printf_float+0xec>
 800970e:	464b      	mov	r3, r9
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfbc      	itt	lt
 8009714:	232d      	movlt	r3, #45	; 0x2d
 8009716:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800971a:	4a7f      	ldr	r2, [pc, #508]	; (8009918 <_printf_float+0x2e4>)
 800971c:	4b7f      	ldr	r3, [pc, #508]	; (800991c <_printf_float+0x2e8>)
 800971e:	e7d1      	b.n	80096c4 <_printf_float+0x90>
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009726:	9206      	str	r2, [sp, #24]
 8009728:	1c5a      	adds	r2, r3, #1
 800972a:	d13f      	bne.n	80097ac <_printf_float+0x178>
 800972c:	2306      	movs	r3, #6
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	9b05      	ldr	r3, [sp, #20]
 8009732:	6861      	ldr	r1, [r4, #4]
 8009734:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009738:	2300      	movs	r3, #0
 800973a:	9303      	str	r3, [sp, #12]
 800973c:	ab0a      	add	r3, sp, #40	; 0x28
 800973e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009742:	ab09      	add	r3, sp, #36	; 0x24
 8009744:	ec49 8b10 	vmov	d0, r8, r9
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	6022      	str	r2, [r4, #0]
 800974c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009750:	4628      	mov	r0, r5
 8009752:	f7ff fecf 	bl	80094f4 <__cvt>
 8009756:	9b06      	ldr	r3, [sp, #24]
 8009758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975a:	2b47      	cmp	r3, #71	; 0x47
 800975c:	4680      	mov	r8, r0
 800975e:	d108      	bne.n	8009772 <_printf_float+0x13e>
 8009760:	1cc8      	adds	r0, r1, #3
 8009762:	db02      	blt.n	800976a <_printf_float+0x136>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	4299      	cmp	r1, r3
 8009768:	dd41      	ble.n	80097ee <_printf_float+0x1ba>
 800976a:	f1ab 0302 	sub.w	r3, fp, #2
 800976e:	fa5f fb83 	uxtb.w	fp, r3
 8009772:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009776:	d820      	bhi.n	80097ba <_printf_float+0x186>
 8009778:	3901      	subs	r1, #1
 800977a:	465a      	mov	r2, fp
 800977c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009780:	9109      	str	r1, [sp, #36]	; 0x24
 8009782:	f7ff ff19 	bl	80095b8 <__exponent>
 8009786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009788:	1813      	adds	r3, r2, r0
 800978a:	2a01      	cmp	r2, #1
 800978c:	4681      	mov	r9, r0
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	dc02      	bgt.n	8009798 <_printf_float+0x164>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	07d2      	lsls	r2, r2, #31
 8009796:	d501      	bpl.n	800979c <_printf_float+0x168>
 8009798:	3301      	adds	r3, #1
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d09c      	beq.n	80096de <_printf_float+0xaa>
 80097a4:	232d      	movs	r3, #45	; 0x2d
 80097a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097aa:	e798      	b.n	80096de <_printf_float+0xaa>
 80097ac:	9a06      	ldr	r2, [sp, #24]
 80097ae:	2a47      	cmp	r2, #71	; 0x47
 80097b0:	d1be      	bne.n	8009730 <_printf_float+0xfc>
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1bc      	bne.n	8009730 <_printf_float+0xfc>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7b9      	b.n	800972e <_printf_float+0xfa>
 80097ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097be:	d118      	bne.n	80097f2 <_printf_float+0x1be>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	dd0b      	ble.n	80097de <_printf_float+0x1aa>
 80097c6:	6121      	str	r1, [r4, #16]
 80097c8:	b913      	cbnz	r3, 80097d0 <_printf_float+0x19c>
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	07d0      	lsls	r0, r2, #31
 80097ce:	d502      	bpl.n	80097d6 <_printf_float+0x1a2>
 80097d0:	3301      	adds	r3, #1
 80097d2:	440b      	add	r3, r1
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80097d8:	f04f 0900 	mov.w	r9, #0
 80097dc:	e7de      	b.n	800979c <_printf_float+0x168>
 80097de:	b913      	cbnz	r3, 80097e6 <_printf_float+0x1b2>
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	07d2      	lsls	r2, r2, #31
 80097e4:	d501      	bpl.n	80097ea <_printf_float+0x1b6>
 80097e6:	3302      	adds	r3, #2
 80097e8:	e7f4      	b.n	80097d4 <_printf_float+0x1a0>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e7f2      	b.n	80097d4 <_printf_float+0x1a0>
 80097ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f4:	4299      	cmp	r1, r3
 80097f6:	db05      	blt.n	8009804 <_printf_float+0x1d0>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	6121      	str	r1, [r4, #16]
 80097fc:	07d8      	lsls	r0, r3, #31
 80097fe:	d5ea      	bpl.n	80097d6 <_printf_float+0x1a2>
 8009800:	1c4b      	adds	r3, r1, #1
 8009802:	e7e7      	b.n	80097d4 <_printf_float+0x1a0>
 8009804:	2900      	cmp	r1, #0
 8009806:	bfd4      	ite	le
 8009808:	f1c1 0202 	rsble	r2, r1, #2
 800980c:	2201      	movgt	r2, #1
 800980e:	4413      	add	r3, r2
 8009810:	e7e0      	b.n	80097d4 <_printf_float+0x1a0>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	055a      	lsls	r2, r3, #21
 8009816:	d407      	bmi.n	8009828 <_printf_float+0x1f4>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	4642      	mov	r2, r8
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	47b8      	blx	r7
 8009822:	3001      	adds	r0, #1
 8009824:	d12c      	bne.n	8009880 <_printf_float+0x24c>
 8009826:	e764      	b.n	80096f2 <_printf_float+0xbe>
 8009828:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800982c:	f240 80e0 	bls.w	80099f0 <_printf_float+0x3bc>
 8009830:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	f7f7 f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800983c:	2800      	cmp	r0, #0
 800983e:	d034      	beq.n	80098aa <_printf_float+0x276>
 8009840:	4a37      	ldr	r2, [pc, #220]	; (8009920 <_printf_float+0x2ec>)
 8009842:	2301      	movs	r3, #1
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	f43f af51 	beq.w	80096f2 <_printf_float+0xbe>
 8009850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009854:	429a      	cmp	r2, r3
 8009856:	db02      	blt.n	800985e <_printf_float+0x22a>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07d8      	lsls	r0, r3, #31
 800985c:	d510      	bpl.n	8009880 <_printf_float+0x24c>
 800985e:	ee18 3a10 	vmov	r3, s16
 8009862:	4652      	mov	r2, sl
 8009864:	4631      	mov	r1, r6
 8009866:	4628      	mov	r0, r5
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	f43f af41 	beq.w	80096f2 <_printf_float+0xbe>
 8009870:	f04f 0800 	mov.w	r8, #0
 8009874:	f104 091a 	add.w	r9, r4, #26
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	3b01      	subs	r3, #1
 800987c:	4543      	cmp	r3, r8
 800987e:	dc09      	bgt.n	8009894 <_printf_float+0x260>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	079b      	lsls	r3, r3, #30
 8009884:	f100 8107 	bmi.w	8009a96 <_printf_float+0x462>
 8009888:	68e0      	ldr	r0, [r4, #12]
 800988a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800988c:	4298      	cmp	r0, r3
 800988e:	bfb8      	it	lt
 8009890:	4618      	movlt	r0, r3
 8009892:	e730      	b.n	80096f6 <_printf_float+0xc2>
 8009894:	2301      	movs	r3, #1
 8009896:	464a      	mov	r2, r9
 8009898:	4631      	mov	r1, r6
 800989a:	4628      	mov	r0, r5
 800989c:	47b8      	blx	r7
 800989e:	3001      	adds	r0, #1
 80098a0:	f43f af27 	beq.w	80096f2 <_printf_float+0xbe>
 80098a4:	f108 0801 	add.w	r8, r8, #1
 80098a8:	e7e6      	b.n	8009878 <_printf_float+0x244>
 80098aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dc39      	bgt.n	8009924 <_printf_float+0x2f0>
 80098b0:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <_printf_float+0x2ec>)
 80098b2:	2301      	movs	r3, #1
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f af19 	beq.w	80096f2 <_printf_float+0xbe>
 80098c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098c4:	4313      	orrs	r3, r2
 80098c6:	d102      	bne.n	80098ce <_printf_float+0x29a>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d5d8      	bpl.n	8009880 <_printf_float+0x24c>
 80098ce:	ee18 3a10 	vmov	r3, s16
 80098d2:	4652      	mov	r2, sl
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f af09 	beq.w	80096f2 <_printf_float+0xbe>
 80098e0:	f04f 0900 	mov.w	r9, #0
 80098e4:	f104 0a1a 	add.w	sl, r4, #26
 80098e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ea:	425b      	negs	r3, r3
 80098ec:	454b      	cmp	r3, r9
 80098ee:	dc01      	bgt.n	80098f4 <_printf_float+0x2c0>
 80098f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f2:	e792      	b.n	800981a <_printf_float+0x1e6>
 80098f4:	2301      	movs	r3, #1
 80098f6:	4652      	mov	r2, sl
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	f43f aef7 	beq.w	80096f2 <_printf_float+0xbe>
 8009904:	f109 0901 	add.w	r9, r9, #1
 8009908:	e7ee      	b.n	80098e8 <_printf_float+0x2b4>
 800990a:	bf00      	nop
 800990c:	7fefffff 	.word	0x7fefffff
 8009910:	0800c7d5 	.word	0x0800c7d5
 8009914:	0800c7d9 	.word	0x0800c7d9
 8009918:	0800c7dd 	.word	0x0800c7dd
 800991c:	0800c7e1 	.word	0x0800c7e1
 8009920:	0800c7e5 	.word	0x0800c7e5
 8009924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009928:	429a      	cmp	r2, r3
 800992a:	bfa8      	it	ge
 800992c:	461a      	movge	r2, r3
 800992e:	2a00      	cmp	r2, #0
 8009930:	4691      	mov	r9, r2
 8009932:	dc37      	bgt.n	80099a4 <_printf_float+0x370>
 8009934:	f04f 0b00 	mov.w	fp, #0
 8009938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800993c:	f104 021a 	add.w	r2, r4, #26
 8009940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	eba3 0309 	sub.w	r3, r3, r9
 8009948:	455b      	cmp	r3, fp
 800994a:	dc33      	bgt.n	80099b4 <_printf_float+0x380>
 800994c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009950:	429a      	cmp	r2, r3
 8009952:	db3b      	blt.n	80099cc <_printf_float+0x398>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	07da      	lsls	r2, r3, #31
 8009958:	d438      	bmi.n	80099cc <_printf_float+0x398>
 800995a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800995e:	eba2 0903 	sub.w	r9, r2, r3
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	1ad2      	subs	r2, r2, r3
 8009966:	4591      	cmp	r9, r2
 8009968:	bfa8      	it	ge
 800996a:	4691      	movge	r9, r2
 800996c:	f1b9 0f00 	cmp.w	r9, #0
 8009970:	dc35      	bgt.n	80099de <_printf_float+0x3aa>
 8009972:	f04f 0800 	mov.w	r8, #0
 8009976:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800997a:	f104 0a1a 	add.w	sl, r4, #26
 800997e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	eba3 0309 	sub.w	r3, r3, r9
 8009988:	4543      	cmp	r3, r8
 800998a:	f77f af79 	ble.w	8009880 <_printf_float+0x24c>
 800998e:	2301      	movs	r3, #1
 8009990:	4652      	mov	r2, sl
 8009992:	4631      	mov	r1, r6
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	f43f aeaa 	beq.w	80096f2 <_printf_float+0xbe>
 800999e:	f108 0801 	add.w	r8, r8, #1
 80099a2:	e7ec      	b.n	800997e <_printf_float+0x34a>
 80099a4:	4613      	mov	r3, r2
 80099a6:	4631      	mov	r1, r6
 80099a8:	4642      	mov	r2, r8
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	d1c0      	bne.n	8009934 <_printf_float+0x300>
 80099b2:	e69e      	b.n	80096f2 <_printf_float+0xbe>
 80099b4:	2301      	movs	r3, #1
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	9205      	str	r2, [sp, #20]
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	f43f ae97 	beq.w	80096f2 <_printf_float+0xbe>
 80099c4:	9a05      	ldr	r2, [sp, #20]
 80099c6:	f10b 0b01 	add.w	fp, fp, #1
 80099ca:	e7b9      	b.n	8009940 <_printf_float+0x30c>
 80099cc:	ee18 3a10 	vmov	r3, s16
 80099d0:	4652      	mov	r2, sl
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	d1be      	bne.n	800995a <_printf_float+0x326>
 80099dc:	e689      	b.n	80096f2 <_printf_float+0xbe>
 80099de:	9a05      	ldr	r2, [sp, #20]
 80099e0:	464b      	mov	r3, r9
 80099e2:	4442      	add	r2, r8
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	d1c1      	bne.n	8009972 <_printf_float+0x33e>
 80099ee:	e680      	b.n	80096f2 <_printf_float+0xbe>
 80099f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099f2:	2a01      	cmp	r2, #1
 80099f4:	dc01      	bgt.n	80099fa <_printf_float+0x3c6>
 80099f6:	07db      	lsls	r3, r3, #31
 80099f8:	d53a      	bpl.n	8009a70 <_printf_float+0x43c>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4642      	mov	r2, r8
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	f43f ae74 	beq.w	80096f2 <_printf_float+0xbe>
 8009a0a:	ee18 3a10 	vmov	r3, s16
 8009a0e:	4652      	mov	r2, sl
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b8      	blx	r7
 8009a16:	3001      	adds	r0, #1
 8009a18:	f43f ae6b 	beq.w	80096f2 <_printf_float+0xbe>
 8009a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a20:	2200      	movs	r2, #0
 8009a22:	2300      	movs	r3, #0
 8009a24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009a28:	f7f7 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a2c:	b9d8      	cbnz	r0, 8009a66 <_printf_float+0x432>
 8009a2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a32:	f108 0201 	add.w	r2, r8, #1
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	47b8      	blx	r7
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d10e      	bne.n	8009a5e <_printf_float+0x42a>
 8009a40:	e657      	b.n	80096f2 <_printf_float+0xbe>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4652      	mov	r2, sl
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f ae50 	beq.w	80096f2 <_printf_float+0xbe>
 8009a52:	f108 0801 	add.w	r8, r8, #1
 8009a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	4543      	cmp	r3, r8
 8009a5c:	dcf1      	bgt.n	8009a42 <_printf_float+0x40e>
 8009a5e:	464b      	mov	r3, r9
 8009a60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a64:	e6da      	b.n	800981c <_printf_float+0x1e8>
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	f104 0a1a 	add.w	sl, r4, #26
 8009a6e:	e7f2      	b.n	8009a56 <_printf_float+0x422>
 8009a70:	2301      	movs	r3, #1
 8009a72:	4642      	mov	r2, r8
 8009a74:	e7df      	b.n	8009a36 <_printf_float+0x402>
 8009a76:	2301      	movs	r3, #1
 8009a78:	464a      	mov	r2, r9
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	f43f ae36 	beq.w	80096f2 <_printf_float+0xbe>
 8009a86:	f108 0801 	add.w	r8, r8, #1
 8009a8a:	68e3      	ldr	r3, [r4, #12]
 8009a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a8e:	1a5b      	subs	r3, r3, r1
 8009a90:	4543      	cmp	r3, r8
 8009a92:	dcf0      	bgt.n	8009a76 <_printf_float+0x442>
 8009a94:	e6f8      	b.n	8009888 <_printf_float+0x254>
 8009a96:	f04f 0800 	mov.w	r8, #0
 8009a9a:	f104 0919 	add.w	r9, r4, #25
 8009a9e:	e7f4      	b.n	8009a8a <_printf_float+0x456>

08009aa0 <_printf_common>:
 8009aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	4616      	mov	r6, r2
 8009aa6:	4699      	mov	r9, r3
 8009aa8:	688a      	ldr	r2, [r1, #8]
 8009aaa:	690b      	ldr	r3, [r1, #16]
 8009aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	bfb8      	it	lt
 8009ab4:	4613      	movlt	r3, r2
 8009ab6:	6033      	str	r3, [r6, #0]
 8009ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009abc:	4607      	mov	r7, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	b10a      	cbz	r2, 8009ac6 <_printf_common+0x26>
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	6033      	str	r3, [r6, #0]
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	0699      	lsls	r1, r3, #26
 8009aca:	bf42      	ittt	mi
 8009acc:	6833      	ldrmi	r3, [r6, #0]
 8009ace:	3302      	addmi	r3, #2
 8009ad0:	6033      	strmi	r3, [r6, #0]
 8009ad2:	6825      	ldr	r5, [r4, #0]
 8009ad4:	f015 0506 	ands.w	r5, r5, #6
 8009ad8:	d106      	bne.n	8009ae8 <_printf_common+0x48>
 8009ada:	f104 0a19 	add.w	sl, r4, #25
 8009ade:	68e3      	ldr	r3, [r4, #12]
 8009ae0:	6832      	ldr	r2, [r6, #0]
 8009ae2:	1a9b      	subs	r3, r3, r2
 8009ae4:	42ab      	cmp	r3, r5
 8009ae6:	dc26      	bgt.n	8009b36 <_printf_common+0x96>
 8009ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009aec:	1e13      	subs	r3, r2, #0
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	bf18      	it	ne
 8009af2:	2301      	movne	r3, #1
 8009af4:	0692      	lsls	r2, r2, #26
 8009af6:	d42b      	bmi.n	8009b50 <_printf_common+0xb0>
 8009af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009afc:	4649      	mov	r1, r9
 8009afe:	4638      	mov	r0, r7
 8009b00:	47c0      	blx	r8
 8009b02:	3001      	adds	r0, #1
 8009b04:	d01e      	beq.n	8009b44 <_printf_common+0xa4>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	6922      	ldr	r2, [r4, #16]
 8009b0a:	f003 0306 	and.w	r3, r3, #6
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	bf02      	ittt	eq
 8009b12:	68e5      	ldreq	r5, [r4, #12]
 8009b14:	6833      	ldreq	r3, [r6, #0]
 8009b16:	1aed      	subeq	r5, r5, r3
 8009b18:	68a3      	ldr	r3, [r4, #8]
 8009b1a:	bf0c      	ite	eq
 8009b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b20:	2500      	movne	r5, #0
 8009b22:	4293      	cmp	r3, r2
 8009b24:	bfc4      	itt	gt
 8009b26:	1a9b      	subgt	r3, r3, r2
 8009b28:	18ed      	addgt	r5, r5, r3
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	341a      	adds	r4, #26
 8009b2e:	42b5      	cmp	r5, r6
 8009b30:	d11a      	bne.n	8009b68 <_printf_common+0xc8>
 8009b32:	2000      	movs	r0, #0
 8009b34:	e008      	b.n	8009b48 <_printf_common+0xa8>
 8009b36:	2301      	movs	r3, #1
 8009b38:	4652      	mov	r2, sl
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	47c0      	blx	r8
 8009b40:	3001      	adds	r0, #1
 8009b42:	d103      	bne.n	8009b4c <_printf_common+0xac>
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4c:	3501      	adds	r5, #1
 8009b4e:	e7c6      	b.n	8009ade <_printf_common+0x3e>
 8009b50:	18e1      	adds	r1, r4, r3
 8009b52:	1c5a      	adds	r2, r3, #1
 8009b54:	2030      	movs	r0, #48	; 0x30
 8009b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b5a:	4422      	add	r2, r4
 8009b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b64:	3302      	adds	r3, #2
 8009b66:	e7c7      	b.n	8009af8 <_printf_common+0x58>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4638      	mov	r0, r7
 8009b70:	47c0      	blx	r8
 8009b72:	3001      	adds	r0, #1
 8009b74:	d0e6      	beq.n	8009b44 <_printf_common+0xa4>
 8009b76:	3601      	adds	r6, #1
 8009b78:	e7d9      	b.n	8009b2e <_printf_common+0x8e>
	...

08009b7c <_printf_i>:
 8009b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	7e0f      	ldrb	r7, [r1, #24]
 8009b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b84:	2f78      	cmp	r7, #120	; 0x78
 8009b86:	4691      	mov	r9, r2
 8009b88:	4680      	mov	r8, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	469a      	mov	sl, r3
 8009b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b92:	d807      	bhi.n	8009ba4 <_printf_i+0x28>
 8009b94:	2f62      	cmp	r7, #98	; 0x62
 8009b96:	d80a      	bhi.n	8009bae <_printf_i+0x32>
 8009b98:	2f00      	cmp	r7, #0
 8009b9a:	f000 80d4 	beq.w	8009d46 <_printf_i+0x1ca>
 8009b9e:	2f58      	cmp	r7, #88	; 0x58
 8009ba0:	f000 80c0 	beq.w	8009d24 <_printf_i+0x1a8>
 8009ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bac:	e03a      	b.n	8009c24 <_printf_i+0xa8>
 8009bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bb2:	2b15      	cmp	r3, #21
 8009bb4:	d8f6      	bhi.n	8009ba4 <_printf_i+0x28>
 8009bb6:	a101      	add	r1, pc, #4	; (adr r1, 8009bbc <_printf_i+0x40>)
 8009bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bbc:	08009c15 	.word	0x08009c15
 8009bc0:	08009c29 	.word	0x08009c29
 8009bc4:	08009ba5 	.word	0x08009ba5
 8009bc8:	08009ba5 	.word	0x08009ba5
 8009bcc:	08009ba5 	.word	0x08009ba5
 8009bd0:	08009ba5 	.word	0x08009ba5
 8009bd4:	08009c29 	.word	0x08009c29
 8009bd8:	08009ba5 	.word	0x08009ba5
 8009bdc:	08009ba5 	.word	0x08009ba5
 8009be0:	08009ba5 	.word	0x08009ba5
 8009be4:	08009ba5 	.word	0x08009ba5
 8009be8:	08009d2d 	.word	0x08009d2d
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009ce7 	.word	0x08009ce7
 8009bf4:	08009ba5 	.word	0x08009ba5
 8009bf8:	08009ba5 	.word	0x08009ba5
 8009bfc:	08009d4f 	.word	0x08009d4f
 8009c00:	08009ba5 	.word	0x08009ba5
 8009c04:	08009c55 	.word	0x08009c55
 8009c08:	08009ba5 	.word	0x08009ba5
 8009c0c:	08009ba5 	.word	0x08009ba5
 8009c10:	08009cef 	.word	0x08009cef
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	1d1a      	adds	r2, r3, #4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	602a      	str	r2, [r5, #0]
 8009c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c24:	2301      	movs	r3, #1
 8009c26:	e09f      	b.n	8009d68 <_printf_i+0x1ec>
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	0607      	lsls	r7, r0, #24
 8009c2e:	f103 0104 	add.w	r1, r3, #4
 8009c32:	6029      	str	r1, [r5, #0]
 8009c34:	d501      	bpl.n	8009c3a <_printf_i+0xbe>
 8009c36:	681e      	ldr	r6, [r3, #0]
 8009c38:	e003      	b.n	8009c42 <_printf_i+0xc6>
 8009c3a:	0646      	lsls	r6, r0, #25
 8009c3c:	d5fb      	bpl.n	8009c36 <_printf_i+0xba>
 8009c3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c42:	2e00      	cmp	r6, #0
 8009c44:	da03      	bge.n	8009c4e <_printf_i+0xd2>
 8009c46:	232d      	movs	r3, #45	; 0x2d
 8009c48:	4276      	negs	r6, r6
 8009c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c4e:	485a      	ldr	r0, [pc, #360]	; (8009db8 <_printf_i+0x23c>)
 8009c50:	230a      	movs	r3, #10
 8009c52:	e012      	b.n	8009c7a <_printf_i+0xfe>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	1d19      	adds	r1, r3, #4
 8009c5a:	6029      	str	r1, [r5, #0]
 8009c5c:	0605      	lsls	r5, r0, #24
 8009c5e:	d501      	bpl.n	8009c64 <_printf_i+0xe8>
 8009c60:	681e      	ldr	r6, [r3, #0]
 8009c62:	e002      	b.n	8009c6a <_printf_i+0xee>
 8009c64:	0641      	lsls	r1, r0, #25
 8009c66:	d5fb      	bpl.n	8009c60 <_printf_i+0xe4>
 8009c68:	881e      	ldrh	r6, [r3, #0]
 8009c6a:	4853      	ldr	r0, [pc, #332]	; (8009db8 <_printf_i+0x23c>)
 8009c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c6e:	bf0c      	ite	eq
 8009c70:	2308      	moveq	r3, #8
 8009c72:	230a      	movne	r3, #10
 8009c74:	2100      	movs	r1, #0
 8009c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c7a:	6865      	ldr	r5, [r4, #4]
 8009c7c:	60a5      	str	r5, [r4, #8]
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	bfa2      	ittt	ge
 8009c82:	6821      	ldrge	r1, [r4, #0]
 8009c84:	f021 0104 	bicge.w	r1, r1, #4
 8009c88:	6021      	strge	r1, [r4, #0]
 8009c8a:	b90e      	cbnz	r6, 8009c90 <_printf_i+0x114>
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	d04b      	beq.n	8009d28 <_printf_i+0x1ac>
 8009c90:	4615      	mov	r5, r2
 8009c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c96:	fb03 6711 	mls	r7, r3, r1, r6
 8009c9a:	5dc7      	ldrb	r7, [r0, r7]
 8009c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ca0:	4637      	mov	r7, r6
 8009ca2:	42bb      	cmp	r3, r7
 8009ca4:	460e      	mov	r6, r1
 8009ca6:	d9f4      	bls.n	8009c92 <_printf_i+0x116>
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d10b      	bne.n	8009cc4 <_printf_i+0x148>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	07de      	lsls	r6, r3, #31
 8009cb0:	d508      	bpl.n	8009cc4 <_printf_i+0x148>
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	6861      	ldr	r1, [r4, #4]
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	bfde      	ittt	le
 8009cba:	2330      	movle	r3, #48	; 0x30
 8009cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cc4:	1b52      	subs	r2, r2, r5
 8009cc6:	6122      	str	r2, [r4, #16]
 8009cc8:	f8cd a000 	str.w	sl, [sp]
 8009ccc:	464b      	mov	r3, r9
 8009cce:	aa03      	add	r2, sp, #12
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	f7ff fee4 	bl	8009aa0 <_printf_common>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d14a      	bne.n	8009d72 <_printf_i+0x1f6>
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	b004      	add	sp, #16
 8009ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	f043 0320 	orr.w	r3, r3, #32
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	4833      	ldr	r0, [pc, #204]	; (8009dbc <_printf_i+0x240>)
 8009cf0:	2778      	movs	r7, #120	; 0x78
 8009cf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	6829      	ldr	r1, [r5, #0]
 8009cfa:	061f      	lsls	r7, r3, #24
 8009cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d00:	d402      	bmi.n	8009d08 <_printf_i+0x18c>
 8009d02:	065f      	lsls	r7, r3, #25
 8009d04:	bf48      	it	mi
 8009d06:	b2b6      	uxthmi	r6, r6
 8009d08:	07df      	lsls	r7, r3, #31
 8009d0a:	bf48      	it	mi
 8009d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d10:	6029      	str	r1, [r5, #0]
 8009d12:	bf48      	it	mi
 8009d14:	6023      	strmi	r3, [r4, #0]
 8009d16:	b91e      	cbnz	r6, 8009d20 <_printf_i+0x1a4>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	f023 0320 	bic.w	r3, r3, #32
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	2310      	movs	r3, #16
 8009d22:	e7a7      	b.n	8009c74 <_printf_i+0xf8>
 8009d24:	4824      	ldr	r0, [pc, #144]	; (8009db8 <_printf_i+0x23c>)
 8009d26:	e7e4      	b.n	8009cf2 <_printf_i+0x176>
 8009d28:	4615      	mov	r5, r2
 8009d2a:	e7bd      	b.n	8009ca8 <_printf_i+0x12c>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	6826      	ldr	r6, [r4, #0]
 8009d30:	6961      	ldr	r1, [r4, #20]
 8009d32:	1d18      	adds	r0, r3, #4
 8009d34:	6028      	str	r0, [r5, #0]
 8009d36:	0635      	lsls	r5, r6, #24
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	d501      	bpl.n	8009d40 <_printf_i+0x1c4>
 8009d3c:	6019      	str	r1, [r3, #0]
 8009d3e:	e002      	b.n	8009d46 <_printf_i+0x1ca>
 8009d40:	0670      	lsls	r0, r6, #25
 8009d42:	d5fb      	bpl.n	8009d3c <_printf_i+0x1c0>
 8009d44:	8019      	strh	r1, [r3, #0]
 8009d46:	2300      	movs	r3, #0
 8009d48:	6123      	str	r3, [r4, #16]
 8009d4a:	4615      	mov	r5, r2
 8009d4c:	e7bc      	b.n	8009cc8 <_printf_i+0x14c>
 8009d4e:	682b      	ldr	r3, [r5, #0]
 8009d50:	1d1a      	adds	r2, r3, #4
 8009d52:	602a      	str	r2, [r5, #0]
 8009d54:	681d      	ldr	r5, [r3, #0]
 8009d56:	6862      	ldr	r2, [r4, #4]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f7f6 fa38 	bl	80001d0 <memchr>
 8009d60:	b108      	cbz	r0, 8009d66 <_printf_i+0x1ea>
 8009d62:	1b40      	subs	r0, r0, r5
 8009d64:	6060      	str	r0, [r4, #4]
 8009d66:	6863      	ldr	r3, [r4, #4]
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d70:	e7aa      	b.n	8009cc8 <_printf_i+0x14c>
 8009d72:	6923      	ldr	r3, [r4, #16]
 8009d74:	462a      	mov	r2, r5
 8009d76:	4649      	mov	r1, r9
 8009d78:	4640      	mov	r0, r8
 8009d7a:	47d0      	blx	sl
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	d0ad      	beq.n	8009cdc <_printf_i+0x160>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	079b      	lsls	r3, r3, #30
 8009d84:	d413      	bmi.n	8009dae <_printf_i+0x232>
 8009d86:	68e0      	ldr	r0, [r4, #12]
 8009d88:	9b03      	ldr	r3, [sp, #12]
 8009d8a:	4298      	cmp	r0, r3
 8009d8c:	bfb8      	it	lt
 8009d8e:	4618      	movlt	r0, r3
 8009d90:	e7a6      	b.n	8009ce0 <_printf_i+0x164>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4632      	mov	r2, r6
 8009d96:	4649      	mov	r1, r9
 8009d98:	4640      	mov	r0, r8
 8009d9a:	47d0      	blx	sl
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d09d      	beq.n	8009cdc <_printf_i+0x160>
 8009da0:	3501      	adds	r5, #1
 8009da2:	68e3      	ldr	r3, [r4, #12]
 8009da4:	9903      	ldr	r1, [sp, #12]
 8009da6:	1a5b      	subs	r3, r3, r1
 8009da8:	42ab      	cmp	r3, r5
 8009daa:	dcf2      	bgt.n	8009d92 <_printf_i+0x216>
 8009dac:	e7eb      	b.n	8009d86 <_printf_i+0x20a>
 8009dae:	2500      	movs	r5, #0
 8009db0:	f104 0619 	add.w	r6, r4, #25
 8009db4:	e7f5      	b.n	8009da2 <_printf_i+0x226>
 8009db6:	bf00      	nop
 8009db8:	0800c7e7 	.word	0x0800c7e7
 8009dbc:	0800c7f8 	.word	0x0800c7f8

08009dc0 <std>:
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dce:	6083      	str	r3, [r0, #8]
 8009dd0:	8181      	strh	r1, [r0, #12]
 8009dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8009dd4:	81c2      	strh	r2, [r0, #14]
 8009dd6:	6183      	str	r3, [r0, #24]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	2208      	movs	r2, #8
 8009ddc:	305c      	adds	r0, #92	; 0x5c
 8009dde:	f000 fa17 	bl	800a210 <memset>
 8009de2:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <std+0x58>)
 8009de4:	6263      	str	r3, [r4, #36]	; 0x24
 8009de6:	4b0d      	ldr	r3, [pc, #52]	; (8009e1c <std+0x5c>)
 8009de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <std+0x60>)
 8009dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dee:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <std+0x64>)
 8009df0:	6323      	str	r3, [r4, #48]	; 0x30
 8009df2:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <std+0x68>)
 8009df4:	6224      	str	r4, [r4, #32]
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d006      	beq.n	8009e08 <std+0x48>
 8009dfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009dfe:	4294      	cmp	r4, r2
 8009e00:	d002      	beq.n	8009e08 <std+0x48>
 8009e02:	33d0      	adds	r3, #208	; 0xd0
 8009e04:	429c      	cmp	r4, r3
 8009e06:	d105      	bne.n	8009e14 <std+0x54>
 8009e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e10:	f000 ba7a 	b.w	800a308 <__retarget_lock_init_recursive>
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	bf00      	nop
 8009e18:	0800a061 	.word	0x0800a061
 8009e1c:	0800a083 	.word	0x0800a083
 8009e20:	0800a0bb 	.word	0x0800a0bb
 8009e24:	0800a0df 	.word	0x0800a0df
 8009e28:	20000514 	.word	0x20000514

08009e2c <stdio_exit_handler>:
 8009e2c:	4a02      	ldr	r2, [pc, #8]	; (8009e38 <stdio_exit_handler+0xc>)
 8009e2e:	4903      	ldr	r1, [pc, #12]	; (8009e3c <stdio_exit_handler+0x10>)
 8009e30:	4803      	ldr	r0, [pc, #12]	; (8009e40 <stdio_exit_handler+0x14>)
 8009e32:	f000 b869 	b.w	8009f08 <_fwalk_sglue>
 8009e36:	bf00      	nop
 8009e38:	20000028 	.word	0x20000028
 8009e3c:	0800bf61 	.word	0x0800bf61
 8009e40:	20000034 	.word	0x20000034

08009e44 <cleanup_stdio>:
 8009e44:	6841      	ldr	r1, [r0, #4]
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <cleanup_stdio+0x34>)
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	d001      	beq.n	8009e54 <cleanup_stdio+0x10>
 8009e50:	f002 f886 	bl	800bf60 <_fflush_r>
 8009e54:	68a1      	ldr	r1, [r4, #8]
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <cleanup_stdio+0x38>)
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	d002      	beq.n	8009e62 <cleanup_stdio+0x1e>
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f002 f87f 	bl	800bf60 <_fflush_r>
 8009e62:	68e1      	ldr	r1, [r4, #12]
 8009e64:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <cleanup_stdio+0x3c>)
 8009e66:	4299      	cmp	r1, r3
 8009e68:	d004      	beq.n	8009e74 <cleanup_stdio+0x30>
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e70:	f002 b876 	b.w	800bf60 <_fflush_r>
 8009e74:	bd10      	pop	{r4, pc}
 8009e76:	bf00      	nop
 8009e78:	20000514 	.word	0x20000514
 8009e7c:	2000057c 	.word	0x2000057c
 8009e80:	200005e4 	.word	0x200005e4

08009e84 <global_stdio_init.part.0>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <global_stdio_init.part.0+0x30>)
 8009e88:	4c0b      	ldr	r4, [pc, #44]	; (8009eb8 <global_stdio_init.part.0+0x34>)
 8009e8a:	4a0c      	ldr	r2, [pc, #48]	; (8009ebc <global_stdio_init.part.0+0x38>)
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	2200      	movs	r2, #0
 8009e92:	2104      	movs	r1, #4
 8009e94:	f7ff ff94 	bl	8009dc0 <std>
 8009e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	2109      	movs	r1, #9
 8009ea0:	f7ff ff8e 	bl	8009dc0 <std>
 8009ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eae:	2112      	movs	r1, #18
 8009eb0:	f7ff bf86 	b.w	8009dc0 <std>
 8009eb4:	2000064c 	.word	0x2000064c
 8009eb8:	20000514 	.word	0x20000514
 8009ebc:	08009e2d 	.word	0x08009e2d

08009ec0 <__sfp_lock_acquire>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__sfp_lock_acquire+0x8>)
 8009ec2:	f000 ba22 	b.w	800a30a <__retarget_lock_acquire_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	20000655 	.word	0x20000655

08009ecc <__sfp_lock_release>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__sfp_lock_release+0x8>)
 8009ece:	f000 ba1d 	b.w	800a30c <__retarget_lock_release_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20000655 	.word	0x20000655

08009ed8 <__sinit>:
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	4604      	mov	r4, r0
 8009edc:	f7ff fff0 	bl	8009ec0 <__sfp_lock_acquire>
 8009ee0:	6a23      	ldr	r3, [r4, #32]
 8009ee2:	b11b      	cbz	r3, 8009eec <__sinit+0x14>
 8009ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee8:	f7ff bff0 	b.w	8009ecc <__sfp_lock_release>
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <__sinit+0x28>)
 8009eee:	6223      	str	r3, [r4, #32]
 8009ef0:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <__sinit+0x2c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f5      	bne.n	8009ee4 <__sinit+0xc>
 8009ef8:	f7ff ffc4 	bl	8009e84 <global_stdio_init.part.0>
 8009efc:	e7f2      	b.n	8009ee4 <__sinit+0xc>
 8009efe:	bf00      	nop
 8009f00:	08009e45 	.word	0x08009e45
 8009f04:	2000064c 	.word	0x2000064c

08009f08 <_fwalk_sglue>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	4688      	mov	r8, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	2600      	movs	r6, #0
 8009f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f18:	f1b9 0901 	subs.w	r9, r9, #1
 8009f1c:	d505      	bpl.n	8009f2a <_fwalk_sglue+0x22>
 8009f1e:	6824      	ldr	r4, [r4, #0]
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	d1f7      	bne.n	8009f14 <_fwalk_sglue+0xc>
 8009f24:	4630      	mov	r0, r6
 8009f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	89ab      	ldrh	r3, [r5, #12]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d907      	bls.n	8009f40 <_fwalk_sglue+0x38>
 8009f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f34:	3301      	adds	r3, #1
 8009f36:	d003      	beq.n	8009f40 <_fwalk_sglue+0x38>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	47c0      	blx	r8
 8009f3e:	4306      	orrs	r6, r0
 8009f40:	3568      	adds	r5, #104	; 0x68
 8009f42:	e7e9      	b.n	8009f18 <_fwalk_sglue+0x10>

08009f44 <iprintf>:
 8009f44:	b40f      	push	{r0, r1, r2, r3}
 8009f46:	b507      	push	{r0, r1, r2, lr}
 8009f48:	4906      	ldr	r1, [pc, #24]	; (8009f64 <iprintf+0x20>)
 8009f4a:	ab04      	add	r3, sp, #16
 8009f4c:	6808      	ldr	r0, [r1, #0]
 8009f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f52:	6881      	ldr	r1, [r0, #8]
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	f001 fe63 	bl	800bc20 <_vfiprintf_r>
 8009f5a:	b003      	add	sp, #12
 8009f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f60:	b004      	add	sp, #16
 8009f62:	4770      	bx	lr
 8009f64:	20000080 	.word	0x20000080

08009f68 <_puts_r>:
 8009f68:	6a03      	ldr	r3, [r0, #32]
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	6884      	ldr	r4, [r0, #8]
 8009f6e:	4605      	mov	r5, r0
 8009f70:	460e      	mov	r6, r1
 8009f72:	b90b      	cbnz	r3, 8009f78 <_puts_r+0x10>
 8009f74:	f7ff ffb0 	bl	8009ed8 <__sinit>
 8009f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f7a:	07db      	lsls	r3, r3, #31
 8009f7c:	d405      	bmi.n	8009f8a <_puts_r+0x22>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	0598      	lsls	r0, r3, #22
 8009f82:	d402      	bmi.n	8009f8a <_puts_r+0x22>
 8009f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f86:	f000 f9c0 	bl	800a30a <__retarget_lock_acquire_recursive>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	d513      	bpl.n	8009fb8 <_puts_r+0x50>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	b18b      	cbz	r3, 8009fb8 <_puts_r+0x50>
 8009f94:	3e01      	subs	r6, #1
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	60a3      	str	r3, [r4, #8]
 8009fa0:	b9e9      	cbnz	r1, 8009fde <_puts_r+0x76>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	da2e      	bge.n	800a004 <_puts_r+0x9c>
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	210a      	movs	r1, #10
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 f89b 	bl	800a0e6 <__swbuf_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d007      	beq.n	8009fc4 <_puts_r+0x5c>
 8009fb4:	250a      	movs	r5, #10
 8009fb6:	e007      	b.n	8009fc8 <_puts_r+0x60>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 f8d0 	bl	800a160 <__swsetup_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d0e7      	beq.n	8009f94 <_puts_r+0x2c>
 8009fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8009fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fca:	07da      	lsls	r2, r3, #31
 8009fcc:	d405      	bmi.n	8009fda <_puts_r+0x72>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	059b      	lsls	r3, r3, #22
 8009fd2:	d402      	bmi.n	8009fda <_puts_r+0x72>
 8009fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fd6:	f000 f999 	bl	800a30c <__retarget_lock_release_recursive>
 8009fda:	4628      	mov	r0, r5
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da04      	bge.n	8009fec <_puts_r+0x84>
 8009fe2:	69a2      	ldr	r2, [r4, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	dc06      	bgt.n	8009ff6 <_puts_r+0x8e>
 8009fe8:	290a      	cmp	r1, #10
 8009fea:	d004      	beq.n	8009ff6 <_puts_r+0x8e>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	6022      	str	r2, [r4, #0]
 8009ff2:	7019      	strb	r1, [r3, #0]
 8009ff4:	e7cf      	b.n	8009f96 <_puts_r+0x2e>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f874 	bl	800a0e6 <__swbuf_r>
 8009ffe:	3001      	adds	r0, #1
 800a000:	d1c9      	bne.n	8009f96 <_puts_r+0x2e>
 800a002:	e7df      	b.n	8009fc4 <_puts_r+0x5c>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	250a      	movs	r5, #10
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	701d      	strb	r5, [r3, #0]
 800a00e:	e7db      	b.n	8009fc8 <_puts_r+0x60>

0800a010 <puts>:
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <puts+0xc>)
 800a012:	4601      	mov	r1, r0
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f7ff bfa7 	b.w	8009f68 <_puts_r>
 800a01a:	bf00      	nop
 800a01c:	20000080 	.word	0x20000080

0800a020 <siprintf>:
 800a020:	b40e      	push	{r1, r2, r3}
 800a022:	b500      	push	{lr}
 800a024:	b09c      	sub	sp, #112	; 0x70
 800a026:	ab1d      	add	r3, sp, #116	; 0x74
 800a028:	9002      	str	r0, [sp, #8]
 800a02a:	9006      	str	r0, [sp, #24]
 800a02c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a030:	4809      	ldr	r0, [pc, #36]	; (800a058 <siprintf+0x38>)
 800a032:	9107      	str	r1, [sp, #28]
 800a034:	9104      	str	r1, [sp, #16]
 800a036:	4909      	ldr	r1, [pc, #36]	; (800a05c <siprintf+0x3c>)
 800a038:	f853 2b04 	ldr.w	r2, [r3], #4
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	6800      	ldr	r0, [r0, #0]
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	a902      	add	r1, sp, #8
 800a044:	f001 fcc4 	bl	800b9d0 <_svfiprintf_r>
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	2200      	movs	r2, #0
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	b01c      	add	sp, #112	; 0x70
 800a050:	f85d eb04 	ldr.w	lr, [sp], #4
 800a054:	b003      	add	sp, #12
 800a056:	4770      	bx	lr
 800a058:	20000080 	.word	0x20000080
 800a05c:	ffff0208 	.word	0xffff0208

0800a060 <__sread>:
 800a060:	b510      	push	{r4, lr}
 800a062:	460c      	mov	r4, r1
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	f000 f900 	bl	800a26c <_read_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	bfab      	itete	ge
 800a070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a072:	89a3      	ldrhlt	r3, [r4, #12]
 800a074:	181b      	addge	r3, r3, r0
 800a076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a07a:	bfac      	ite	ge
 800a07c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a07e:	81a3      	strhlt	r3, [r4, #12]
 800a080:	bd10      	pop	{r4, pc}

0800a082 <__swrite>:
 800a082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a086:	461f      	mov	r7, r3
 800a088:	898b      	ldrh	r3, [r1, #12]
 800a08a:	05db      	lsls	r3, r3, #23
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	4616      	mov	r6, r2
 800a092:	d505      	bpl.n	800a0a0 <__swrite+0x1e>
 800a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a098:	2302      	movs	r3, #2
 800a09a:	2200      	movs	r2, #0
 800a09c:	f000 f8d4 	bl	800a248 <_lseek_r>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	f000 b8eb 	b.w	800a290 <_write_r>

0800a0ba <__sseek>:
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	460c      	mov	r4, r1
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 f8c1 	bl	800a248 <_lseek_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	bf15      	itete	ne
 800a0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0d6:	81a3      	strheq	r3, [r4, #12]
 800a0d8:	bf18      	it	ne
 800a0da:	81a3      	strhne	r3, [r4, #12]
 800a0dc:	bd10      	pop	{r4, pc}

0800a0de <__sclose>:
 800a0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e2:	f000 b8a1 	b.w	800a228 <_close_r>

0800a0e6 <__swbuf_r>:
 800a0e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	4614      	mov	r4, r2
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	b118      	cbz	r0, 800a0f8 <__swbuf_r+0x12>
 800a0f0:	6a03      	ldr	r3, [r0, #32]
 800a0f2:	b90b      	cbnz	r3, 800a0f8 <__swbuf_r+0x12>
 800a0f4:	f7ff fef0 	bl	8009ed8 <__sinit>
 800a0f8:	69a3      	ldr	r3, [r4, #24]
 800a0fa:	60a3      	str	r3, [r4, #8]
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	071a      	lsls	r2, r3, #28
 800a100:	d525      	bpl.n	800a14e <__swbuf_r+0x68>
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	b31b      	cbz	r3, 800a14e <__swbuf_r+0x68>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	6922      	ldr	r2, [r4, #16]
 800a10a:	1a98      	subs	r0, r3, r2
 800a10c:	6963      	ldr	r3, [r4, #20]
 800a10e:	b2f6      	uxtb	r6, r6
 800a110:	4283      	cmp	r3, r0
 800a112:	4637      	mov	r7, r6
 800a114:	dc04      	bgt.n	800a120 <__swbuf_r+0x3a>
 800a116:	4621      	mov	r1, r4
 800a118:	4628      	mov	r0, r5
 800a11a:	f001 ff21 	bl	800bf60 <_fflush_r>
 800a11e:	b9e0      	cbnz	r0, 800a15a <__swbuf_r+0x74>
 800a120:	68a3      	ldr	r3, [r4, #8]
 800a122:	3b01      	subs	r3, #1
 800a124:	60a3      	str	r3, [r4, #8]
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	6022      	str	r2, [r4, #0]
 800a12c:	701e      	strb	r6, [r3, #0]
 800a12e:	6962      	ldr	r2, [r4, #20]
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	429a      	cmp	r2, r3
 800a134:	d004      	beq.n	800a140 <__swbuf_r+0x5a>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	07db      	lsls	r3, r3, #31
 800a13a:	d506      	bpl.n	800a14a <__swbuf_r+0x64>
 800a13c:	2e0a      	cmp	r6, #10
 800a13e:	d104      	bne.n	800a14a <__swbuf_r+0x64>
 800a140:	4621      	mov	r1, r4
 800a142:	4628      	mov	r0, r5
 800a144:	f001 ff0c 	bl	800bf60 <_fflush_r>
 800a148:	b938      	cbnz	r0, 800a15a <__swbuf_r+0x74>
 800a14a:	4638      	mov	r0, r7
 800a14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a14e:	4621      	mov	r1, r4
 800a150:	4628      	mov	r0, r5
 800a152:	f000 f805 	bl	800a160 <__swsetup_r>
 800a156:	2800      	cmp	r0, #0
 800a158:	d0d5      	beq.n	800a106 <__swbuf_r+0x20>
 800a15a:	f04f 37ff 	mov.w	r7, #4294967295
 800a15e:	e7f4      	b.n	800a14a <__swbuf_r+0x64>

0800a160 <__swsetup_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4b2a      	ldr	r3, [pc, #168]	; (800a20c <__swsetup_r+0xac>)
 800a164:	4605      	mov	r5, r0
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	460c      	mov	r4, r1
 800a16a:	b118      	cbz	r0, 800a174 <__swsetup_r+0x14>
 800a16c:	6a03      	ldr	r3, [r0, #32]
 800a16e:	b90b      	cbnz	r3, 800a174 <__swsetup_r+0x14>
 800a170:	f7ff feb2 	bl	8009ed8 <__sinit>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a17a:	0718      	lsls	r0, r3, #28
 800a17c:	d422      	bmi.n	800a1c4 <__swsetup_r+0x64>
 800a17e:	06d9      	lsls	r1, r3, #27
 800a180:	d407      	bmi.n	800a192 <__swsetup_r+0x32>
 800a182:	2309      	movs	r3, #9
 800a184:	602b      	str	r3, [r5, #0]
 800a186:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	e034      	b.n	800a1fc <__swsetup_r+0x9c>
 800a192:	0758      	lsls	r0, r3, #29
 800a194:	d512      	bpl.n	800a1bc <__swsetup_r+0x5c>
 800a196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a198:	b141      	cbz	r1, 800a1ac <__swsetup_r+0x4c>
 800a19a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a19e:	4299      	cmp	r1, r3
 800a1a0:	d002      	beq.n	800a1a8 <__swsetup_r+0x48>
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f000 ff3e 	bl	800b024 <_free_r>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	6363      	str	r3, [r4, #52]	; 0x34
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6063      	str	r3, [r4, #4]
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	6023      	str	r3, [r4, #0]
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	f043 0308 	orr.w	r3, r3, #8
 800a1c2:	81a3      	strh	r3, [r4, #12]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	b94b      	cbnz	r3, 800a1dc <__swsetup_r+0x7c>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d2:	d003      	beq.n	800a1dc <__swsetup_r+0x7c>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f001 ff10 	bl	800bffc <__smakebuf_r>
 800a1dc:	89a0      	ldrh	r0, [r4, #12]
 800a1de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1e2:	f010 0301 	ands.w	r3, r0, #1
 800a1e6:	d00a      	beq.n	800a1fe <__swsetup_r+0x9e>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60a3      	str	r3, [r4, #8]
 800a1ec:	6963      	ldr	r3, [r4, #20]
 800a1ee:	425b      	negs	r3, r3
 800a1f0:	61a3      	str	r3, [r4, #24]
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	b943      	cbnz	r3, 800a208 <__swsetup_r+0xa8>
 800a1f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1fa:	d1c4      	bne.n	800a186 <__swsetup_r+0x26>
 800a1fc:	bd38      	pop	{r3, r4, r5, pc}
 800a1fe:	0781      	lsls	r1, r0, #30
 800a200:	bf58      	it	pl
 800a202:	6963      	ldrpl	r3, [r4, #20]
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	e7f4      	b.n	800a1f2 <__swsetup_r+0x92>
 800a208:	2000      	movs	r0, #0
 800a20a:	e7f7      	b.n	800a1fc <__swsetup_r+0x9c>
 800a20c:	20000080 	.word	0x20000080

0800a210 <memset>:
 800a210:	4402      	add	r2, r0
 800a212:	4603      	mov	r3, r0
 800a214:	4293      	cmp	r3, r2
 800a216:	d100      	bne.n	800a21a <memset+0xa>
 800a218:	4770      	bx	lr
 800a21a:	f803 1b01 	strb.w	r1, [r3], #1
 800a21e:	e7f9      	b.n	800a214 <memset+0x4>

0800a220 <_localeconv_r>:
 800a220:	4800      	ldr	r0, [pc, #0]	; (800a224 <_localeconv_r+0x4>)
 800a222:	4770      	bx	lr
 800a224:	20000174 	.word	0x20000174

0800a228 <_close_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4d06      	ldr	r5, [pc, #24]	; (800a244 <_close_r+0x1c>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	4608      	mov	r0, r1
 800a232:	602b      	str	r3, [r5, #0]
 800a234:	f7f8 fe13 	bl	8002e5e <_close>
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	d102      	bne.n	800a242 <_close_r+0x1a>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	b103      	cbz	r3, 800a242 <_close_r+0x1a>
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	20000650 	.word	0x20000650

0800a248 <_lseek_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d07      	ldr	r5, [pc, #28]	; (800a268 <_lseek_r+0x20>)
 800a24c:	4604      	mov	r4, r0
 800a24e:	4608      	mov	r0, r1
 800a250:	4611      	mov	r1, r2
 800a252:	2200      	movs	r2, #0
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	f7f8 fe28 	bl	8002eac <_lseek>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_lseek_r+0x1e>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_lseek_r+0x1e>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	20000650 	.word	0x20000650

0800a26c <_read_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d07      	ldr	r5, [pc, #28]	; (800a28c <_read_r+0x20>)
 800a270:	4604      	mov	r4, r0
 800a272:	4608      	mov	r0, r1
 800a274:	4611      	mov	r1, r2
 800a276:	2200      	movs	r2, #0
 800a278:	602a      	str	r2, [r5, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	f7f8 fdb6 	bl	8002dec <_read>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d102      	bne.n	800a28a <_read_r+0x1e>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	b103      	cbz	r3, 800a28a <_read_r+0x1e>
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	20000650 	.word	0x20000650

0800a290 <_write_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d07      	ldr	r5, [pc, #28]	; (800a2b0 <_write_r+0x20>)
 800a294:	4604      	mov	r4, r0
 800a296:	4608      	mov	r0, r1
 800a298:	4611      	mov	r1, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	602a      	str	r2, [r5, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	f7f8 fdc1 	bl	8002e26 <_write>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_write_r+0x1e>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_write_r+0x1e>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	20000650 	.word	0x20000650

0800a2b4 <__errno>:
 800a2b4:	4b01      	ldr	r3, [pc, #4]	; (800a2bc <__errno+0x8>)
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000080 	.word	0x20000080

0800a2c0 <__libc_init_array>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	4d0d      	ldr	r5, [pc, #52]	; (800a2f8 <__libc_init_array+0x38>)
 800a2c4:	4c0d      	ldr	r4, [pc, #52]	; (800a2fc <__libc_init_array+0x3c>)
 800a2c6:	1b64      	subs	r4, r4, r5
 800a2c8:	10a4      	asrs	r4, r4, #2
 800a2ca:	2600      	movs	r6, #0
 800a2cc:	42a6      	cmp	r6, r4
 800a2ce:	d109      	bne.n	800a2e4 <__libc_init_array+0x24>
 800a2d0:	4d0b      	ldr	r5, [pc, #44]	; (800a300 <__libc_init_array+0x40>)
 800a2d2:	4c0c      	ldr	r4, [pc, #48]	; (800a304 <__libc_init_array+0x44>)
 800a2d4:	f002 f884 	bl	800c3e0 <_init>
 800a2d8:	1b64      	subs	r4, r4, r5
 800a2da:	10a4      	asrs	r4, r4, #2
 800a2dc:	2600      	movs	r6, #0
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	d105      	bne.n	800a2ee <__libc_init_array+0x2e>
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e8:	4798      	blx	r3
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	e7ee      	b.n	800a2cc <__libc_init_array+0xc>
 800a2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f2:	4798      	blx	r3
 800a2f4:	3601      	adds	r6, #1
 800a2f6:	e7f2      	b.n	800a2de <__libc_init_array+0x1e>
 800a2f8:	0800ca4c 	.word	0x0800ca4c
 800a2fc:	0800ca4c 	.word	0x0800ca4c
 800a300:	0800ca4c 	.word	0x0800ca4c
 800a304:	0800ca50 	.word	0x0800ca50

0800a308 <__retarget_lock_init_recursive>:
 800a308:	4770      	bx	lr

0800a30a <__retarget_lock_acquire_recursive>:
 800a30a:	4770      	bx	lr

0800a30c <__retarget_lock_release_recursive>:
 800a30c:	4770      	bx	lr

0800a30e <memcpy>:
 800a30e:	440a      	add	r2, r1
 800a310:	4291      	cmp	r1, r2
 800a312:	f100 33ff 	add.w	r3, r0, #4294967295
 800a316:	d100      	bne.n	800a31a <memcpy+0xc>
 800a318:	4770      	bx	lr
 800a31a:	b510      	push	{r4, lr}
 800a31c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a320:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a324:	4291      	cmp	r1, r2
 800a326:	d1f9      	bne.n	800a31c <memcpy+0xe>
 800a328:	bd10      	pop	{r4, pc}

0800a32a <quorem>:
 800a32a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32e:	6903      	ldr	r3, [r0, #16]
 800a330:	690c      	ldr	r4, [r1, #16]
 800a332:	42a3      	cmp	r3, r4
 800a334:	4607      	mov	r7, r0
 800a336:	db7e      	blt.n	800a436 <quorem+0x10c>
 800a338:	3c01      	subs	r4, #1
 800a33a:	f101 0814 	add.w	r8, r1, #20
 800a33e:	f100 0514 	add.w	r5, r0, #20
 800a342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a34c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a350:	3301      	adds	r3, #1
 800a352:	429a      	cmp	r2, r3
 800a354:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a358:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a35c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a360:	d331      	bcc.n	800a3c6 <quorem+0x9c>
 800a362:	f04f 0e00 	mov.w	lr, #0
 800a366:	4640      	mov	r0, r8
 800a368:	46ac      	mov	ip, r5
 800a36a:	46f2      	mov	sl, lr
 800a36c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a370:	b293      	uxth	r3, r2
 800a372:	fb06 e303 	mla	r3, r6, r3, lr
 800a376:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a37a:	0c1a      	lsrs	r2, r3, #16
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	ebaa 0303 	sub.w	r3, sl, r3
 800a382:	f8dc a000 	ldr.w	sl, [ip]
 800a386:	fa13 f38a 	uxtah	r3, r3, sl
 800a38a:	fb06 220e 	mla	r2, r6, lr, r2
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	9b00      	ldr	r3, [sp, #0]
 800a392:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a396:	b292      	uxth	r2, r2
 800a398:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a39c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a3a4:	4581      	cmp	r9, r0
 800a3a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3aa:	f84c 3b04 	str.w	r3, [ip], #4
 800a3ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3b2:	d2db      	bcs.n	800a36c <quorem+0x42>
 800a3b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3b8:	b92b      	cbnz	r3, 800a3c6 <quorem+0x9c>
 800a3ba:	9b01      	ldr	r3, [sp, #4]
 800a3bc:	3b04      	subs	r3, #4
 800a3be:	429d      	cmp	r5, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	d32c      	bcc.n	800a41e <quorem+0xf4>
 800a3c4:	613c      	str	r4, [r7, #16]
 800a3c6:	4638      	mov	r0, r7
 800a3c8:	f001 f9a8 	bl	800b71c <__mcmp>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	db22      	blt.n	800a416 <quorem+0xec>
 800a3d0:	3601      	adds	r6, #1
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3da:	f8d1 c000 	ldr.w	ip, [r1]
 800a3de:	b293      	uxth	r3, r2
 800a3e0:	1ac3      	subs	r3, r0, r3
 800a3e2:	0c12      	lsrs	r2, r2, #16
 800a3e4:	fa13 f38c 	uxtah	r3, r3, ip
 800a3e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a3ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3f6:	45c1      	cmp	r9, r8
 800a3f8:	f841 3b04 	str.w	r3, [r1], #4
 800a3fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a400:	d2e9      	bcs.n	800a3d6 <quorem+0xac>
 800a402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a40a:	b922      	cbnz	r2, 800a416 <quorem+0xec>
 800a40c:	3b04      	subs	r3, #4
 800a40e:	429d      	cmp	r5, r3
 800a410:	461a      	mov	r2, r3
 800a412:	d30a      	bcc.n	800a42a <quorem+0x100>
 800a414:	613c      	str	r4, [r7, #16]
 800a416:	4630      	mov	r0, r6
 800a418:	b003      	add	sp, #12
 800a41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	3b04      	subs	r3, #4
 800a422:	2a00      	cmp	r2, #0
 800a424:	d1ce      	bne.n	800a3c4 <quorem+0x9a>
 800a426:	3c01      	subs	r4, #1
 800a428:	e7c9      	b.n	800a3be <quorem+0x94>
 800a42a:	6812      	ldr	r2, [r2, #0]
 800a42c:	3b04      	subs	r3, #4
 800a42e:	2a00      	cmp	r2, #0
 800a430:	d1f0      	bne.n	800a414 <quorem+0xea>
 800a432:	3c01      	subs	r4, #1
 800a434:	e7eb      	b.n	800a40e <quorem+0xe4>
 800a436:	2000      	movs	r0, #0
 800a438:	e7ee      	b.n	800a418 <quorem+0xee>
 800a43a:	0000      	movs	r0, r0
 800a43c:	0000      	movs	r0, r0
	...

0800a440 <_dtoa_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	ed2d 8b04 	vpush	{d8-d9}
 800a448:	69c5      	ldr	r5, [r0, #28]
 800a44a:	b093      	sub	sp, #76	; 0x4c
 800a44c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a450:	ec57 6b10 	vmov	r6, r7, d0
 800a454:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a458:	9107      	str	r1, [sp, #28]
 800a45a:	4604      	mov	r4, r0
 800a45c:	920a      	str	r2, [sp, #40]	; 0x28
 800a45e:	930d      	str	r3, [sp, #52]	; 0x34
 800a460:	b975      	cbnz	r5, 800a480 <_dtoa_r+0x40>
 800a462:	2010      	movs	r0, #16
 800a464:	f000 fe2a 	bl	800b0bc <malloc>
 800a468:	4602      	mov	r2, r0
 800a46a:	61e0      	str	r0, [r4, #28]
 800a46c:	b920      	cbnz	r0, 800a478 <_dtoa_r+0x38>
 800a46e:	4bae      	ldr	r3, [pc, #696]	; (800a728 <_dtoa_r+0x2e8>)
 800a470:	21ef      	movs	r1, #239	; 0xef
 800a472:	48ae      	ldr	r0, [pc, #696]	; (800a72c <_dtoa_r+0x2ec>)
 800a474:	f001 fe4a 	bl	800c10c <__assert_func>
 800a478:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a47c:	6005      	str	r5, [r0, #0]
 800a47e:	60c5      	str	r5, [r0, #12]
 800a480:	69e3      	ldr	r3, [r4, #28]
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	b151      	cbz	r1, 800a49c <_dtoa_r+0x5c>
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	604a      	str	r2, [r1, #4]
 800a48a:	2301      	movs	r3, #1
 800a48c:	4093      	lsls	r3, r2
 800a48e:	608b      	str	r3, [r1, #8]
 800a490:	4620      	mov	r0, r4
 800a492:	f000 ff07 	bl	800b2a4 <_Bfree>
 800a496:	69e3      	ldr	r3, [r4, #28]
 800a498:	2200      	movs	r2, #0
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	1e3b      	subs	r3, r7, #0
 800a49e:	bfbb      	ittet	lt
 800a4a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4a4:	9303      	strlt	r3, [sp, #12]
 800a4a6:	2300      	movge	r3, #0
 800a4a8:	2201      	movlt	r2, #1
 800a4aa:	bfac      	ite	ge
 800a4ac:	f8c8 3000 	strge.w	r3, [r8]
 800a4b0:	f8c8 2000 	strlt.w	r2, [r8]
 800a4b4:	4b9e      	ldr	r3, [pc, #632]	; (800a730 <_dtoa_r+0x2f0>)
 800a4b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a4ba:	ea33 0308 	bics.w	r3, r3, r8
 800a4be:	d11b      	bne.n	800a4f8 <_dtoa_r+0xb8>
 800a4c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a4c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a4cc:	4333      	orrs	r3, r6
 800a4ce:	f000 8593 	beq.w	800aff8 <_dtoa_r+0xbb8>
 800a4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4d4:	b963      	cbnz	r3, 800a4f0 <_dtoa_r+0xb0>
 800a4d6:	4b97      	ldr	r3, [pc, #604]	; (800a734 <_dtoa_r+0x2f4>)
 800a4d8:	e027      	b.n	800a52a <_dtoa_r+0xea>
 800a4da:	4b97      	ldr	r3, [pc, #604]	; (800a738 <_dtoa_r+0x2f8>)
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	9800      	ldr	r0, [sp, #0]
 800a4e6:	b013      	add	sp, #76	; 0x4c
 800a4e8:	ecbd 8b04 	vpop	{d8-d9}
 800a4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f0:	4b90      	ldr	r3, [pc, #576]	; (800a734 <_dtoa_r+0x2f4>)
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	3303      	adds	r3, #3
 800a4f6:	e7f3      	b.n	800a4e0 <_dtoa_r+0xa0>
 800a4f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	ec51 0b17 	vmov	r0, r1, d7
 800a502:	eeb0 8a47 	vmov.f32	s16, s14
 800a506:	eef0 8a67 	vmov.f32	s17, s15
 800a50a:	2300      	movs	r3, #0
 800a50c:	f7f6 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a510:	4681      	mov	r9, r0
 800a512:	b160      	cbz	r0, 800a52e <_dtoa_r+0xee>
 800a514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a516:	2301      	movs	r3, #1
 800a518:	6013      	str	r3, [r2, #0]
 800a51a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8568 	beq.w	800aff2 <_dtoa_r+0xbb2>
 800a522:	4b86      	ldr	r3, [pc, #536]	; (800a73c <_dtoa_r+0x2fc>)
 800a524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	3b01      	subs	r3, #1
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	e7da      	b.n	800a4e4 <_dtoa_r+0xa4>
 800a52e:	aa10      	add	r2, sp, #64	; 0x40
 800a530:	a911      	add	r1, sp, #68	; 0x44
 800a532:	4620      	mov	r0, r4
 800a534:	eeb0 0a48 	vmov.f32	s0, s16
 800a538:	eef0 0a68 	vmov.f32	s1, s17
 800a53c:	f001 f994 	bl	800b868 <__d2b>
 800a540:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a544:	4682      	mov	sl, r0
 800a546:	2d00      	cmp	r5, #0
 800a548:	d07f      	beq.n	800a64a <_dtoa_r+0x20a>
 800a54a:	ee18 3a90 	vmov	r3, s17
 800a54e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a552:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a556:	ec51 0b18 	vmov	r0, r1, d8
 800a55a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a562:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a566:	4619      	mov	r1, r3
 800a568:	2200      	movs	r2, #0
 800a56a:	4b75      	ldr	r3, [pc, #468]	; (800a740 <_dtoa_r+0x300>)
 800a56c:	f7f5 fe8c 	bl	8000288 <__aeabi_dsub>
 800a570:	a367      	add	r3, pc, #412	; (adr r3, 800a710 <_dtoa_r+0x2d0>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	f7f6 f83f 	bl	80005f8 <__aeabi_dmul>
 800a57a:	a367      	add	r3, pc, #412	; (adr r3, 800a718 <_dtoa_r+0x2d8>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	f7f5 fe84 	bl	800028c <__adddf3>
 800a584:	4606      	mov	r6, r0
 800a586:	4628      	mov	r0, r5
 800a588:	460f      	mov	r7, r1
 800a58a:	f7f5 ffcb 	bl	8000524 <__aeabi_i2d>
 800a58e:	a364      	add	r3, pc, #400	; (adr r3, 800a720 <_dtoa_r+0x2e0>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	f7f6 f830 	bl	80005f8 <__aeabi_dmul>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4630      	mov	r0, r6
 800a59e:	4639      	mov	r1, r7
 800a5a0:	f7f5 fe74 	bl	800028c <__adddf3>
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	f7f6 fad6 	bl	8000b58 <__aeabi_d2iz>
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4683      	mov	fp, r0
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	4639      	mov	r1, r7
 800a5b6:	f7f6 fa91 	bl	8000adc <__aeabi_dcmplt>
 800a5ba:	b148      	cbz	r0, 800a5d0 <_dtoa_r+0x190>
 800a5bc:	4658      	mov	r0, fp
 800a5be:	f7f5 ffb1 	bl	8000524 <__aeabi_i2d>
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	463b      	mov	r3, r7
 800a5c6:	f7f6 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5ca:	b908      	cbnz	r0, 800a5d0 <_dtoa_r+0x190>
 800a5cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5d0:	f1bb 0f16 	cmp.w	fp, #22
 800a5d4:	d857      	bhi.n	800a686 <_dtoa_r+0x246>
 800a5d6:	4b5b      	ldr	r3, [pc, #364]	; (800a744 <_dtoa_r+0x304>)
 800a5d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	ec51 0b18 	vmov	r0, r1, d8
 800a5e4:	f7f6 fa7a 	bl	8000adc <__aeabi_dcmplt>
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	d04e      	beq.n	800a68a <_dtoa_r+0x24a>
 800a5ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5f6:	1b5b      	subs	r3, r3, r5
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	bf45      	ittet	mi
 800a5fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a600:	9305      	strmi	r3, [sp, #20]
 800a602:	2300      	movpl	r3, #0
 800a604:	2300      	movmi	r3, #0
 800a606:	9206      	str	r2, [sp, #24]
 800a608:	bf54      	ite	pl
 800a60a:	9305      	strpl	r3, [sp, #20]
 800a60c:	9306      	strmi	r3, [sp, #24]
 800a60e:	f1bb 0f00 	cmp.w	fp, #0
 800a612:	db3c      	blt.n	800a68e <_dtoa_r+0x24e>
 800a614:	9b06      	ldr	r3, [sp, #24]
 800a616:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a61a:	445b      	add	r3, fp
 800a61c:	9306      	str	r3, [sp, #24]
 800a61e:	2300      	movs	r3, #0
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	9b07      	ldr	r3, [sp, #28]
 800a624:	2b09      	cmp	r3, #9
 800a626:	d868      	bhi.n	800a6fa <_dtoa_r+0x2ba>
 800a628:	2b05      	cmp	r3, #5
 800a62a:	bfc4      	itt	gt
 800a62c:	3b04      	subgt	r3, #4
 800a62e:	9307      	strgt	r3, [sp, #28]
 800a630:	9b07      	ldr	r3, [sp, #28]
 800a632:	f1a3 0302 	sub.w	r3, r3, #2
 800a636:	bfcc      	ite	gt
 800a638:	2500      	movgt	r5, #0
 800a63a:	2501      	movle	r5, #1
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	f200 8085 	bhi.w	800a74c <_dtoa_r+0x30c>
 800a642:	e8df f003 	tbb	[pc, r3]
 800a646:	3b2e      	.short	0x3b2e
 800a648:	5839      	.short	0x5839
 800a64a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a64e:	441d      	add	r5, r3
 800a650:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a654:	2b20      	cmp	r3, #32
 800a656:	bfc1      	itttt	gt
 800a658:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a65c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a660:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a664:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a668:	bfd6      	itet	le
 800a66a:	f1c3 0320 	rsble	r3, r3, #32
 800a66e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a672:	fa06 f003 	lslle.w	r0, r6, r3
 800a676:	f7f5 ff45 	bl	8000504 <__aeabi_ui2d>
 800a67a:	2201      	movs	r2, #1
 800a67c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a680:	3d01      	subs	r5, #1
 800a682:	920e      	str	r2, [sp, #56]	; 0x38
 800a684:	e76f      	b.n	800a566 <_dtoa_r+0x126>
 800a686:	2301      	movs	r3, #1
 800a688:	e7b3      	b.n	800a5f2 <_dtoa_r+0x1b2>
 800a68a:	900c      	str	r0, [sp, #48]	; 0x30
 800a68c:	e7b2      	b.n	800a5f4 <_dtoa_r+0x1b4>
 800a68e:	9b05      	ldr	r3, [sp, #20]
 800a690:	eba3 030b 	sub.w	r3, r3, fp
 800a694:	9305      	str	r3, [sp, #20]
 800a696:	f1cb 0300 	rsb	r3, fp, #0
 800a69a:	9308      	str	r3, [sp, #32]
 800a69c:	2300      	movs	r3, #0
 800a69e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6a0:	e7bf      	b.n	800a622 <_dtoa_r+0x1e2>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dc52      	bgt.n	800a752 <_dtoa_r+0x312>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a6b6:	e00b      	b.n	800a6d0 <_dtoa_r+0x290>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e7f3      	b.n	800a6a4 <_dtoa_r+0x264>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6c2:	445b      	add	r3, fp
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	bfb8      	it	lt
 800a6ce:	2301      	movlt	r3, #1
 800a6d0:	69e0      	ldr	r0, [r4, #28]
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	2204      	movs	r2, #4
 800a6d6:	f102 0614 	add.w	r6, r2, #20
 800a6da:	429e      	cmp	r6, r3
 800a6dc:	d93d      	bls.n	800a75a <_dtoa_r+0x31a>
 800a6de:	6041      	str	r1, [r0, #4]
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 fd9f 	bl	800b224 <_Balloc>
 800a6e6:	9000      	str	r0, [sp, #0]
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d139      	bne.n	800a760 <_dtoa_r+0x320>
 800a6ec:	4b16      	ldr	r3, [pc, #88]	; (800a748 <_dtoa_r+0x308>)
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	f240 11af 	movw	r1, #431	; 0x1af
 800a6f4:	e6bd      	b.n	800a472 <_dtoa_r+0x32>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7e1      	b.n	800a6be <_dtoa_r+0x27e>
 800a6fa:	2501      	movs	r5, #1
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9307      	str	r3, [sp, #28]
 800a700:	9509      	str	r5, [sp, #36]	; 0x24
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	2200      	movs	r2, #0
 800a70c:	2312      	movs	r3, #18
 800a70e:	e7d1      	b.n	800a6b4 <_dtoa_r+0x274>
 800a710:	636f4361 	.word	0x636f4361
 800a714:	3fd287a7 	.word	0x3fd287a7
 800a718:	8b60c8b3 	.word	0x8b60c8b3
 800a71c:	3fc68a28 	.word	0x3fc68a28
 800a720:	509f79fb 	.word	0x509f79fb
 800a724:	3fd34413 	.word	0x3fd34413
 800a728:	0800c816 	.word	0x0800c816
 800a72c:	0800c82d 	.word	0x0800c82d
 800a730:	7ff00000 	.word	0x7ff00000
 800a734:	0800c812 	.word	0x0800c812
 800a738:	0800c809 	.word	0x0800c809
 800a73c:	0800c7e6 	.word	0x0800c7e6
 800a740:	3ff80000 	.word	0x3ff80000
 800a744:	0800c918 	.word	0x0800c918
 800a748:	0800c885 	.word	0x0800c885
 800a74c:	2301      	movs	r3, #1
 800a74e:	9309      	str	r3, [sp, #36]	; 0x24
 800a750:	e7d7      	b.n	800a702 <_dtoa_r+0x2c2>
 800a752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	e7ba      	b.n	800a6d0 <_dtoa_r+0x290>
 800a75a:	3101      	adds	r1, #1
 800a75c:	0052      	lsls	r2, r2, #1
 800a75e:	e7ba      	b.n	800a6d6 <_dtoa_r+0x296>
 800a760:	69e3      	ldr	r3, [r4, #28]
 800a762:	9a00      	ldr	r2, [sp, #0]
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	2b0e      	cmp	r3, #14
 800a76a:	f200 80a8 	bhi.w	800a8be <_dtoa_r+0x47e>
 800a76e:	2d00      	cmp	r5, #0
 800a770:	f000 80a5 	beq.w	800a8be <_dtoa_r+0x47e>
 800a774:	f1bb 0f00 	cmp.w	fp, #0
 800a778:	dd38      	ble.n	800a7ec <_dtoa_r+0x3ac>
 800a77a:	4bc0      	ldr	r3, [pc, #768]	; (800aa7c <_dtoa_r+0x63c>)
 800a77c:	f00b 020f 	and.w	r2, fp, #15
 800a780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a784:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a788:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a78c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a790:	d019      	beq.n	800a7c6 <_dtoa_r+0x386>
 800a792:	4bbb      	ldr	r3, [pc, #748]	; (800aa80 <_dtoa_r+0x640>)
 800a794:	ec51 0b18 	vmov	r0, r1, d8
 800a798:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a79c:	f7f6 f856 	bl	800084c <__aeabi_ddiv>
 800a7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a4:	f008 080f 	and.w	r8, r8, #15
 800a7a8:	2503      	movs	r5, #3
 800a7aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aa80 <_dtoa_r+0x640>
 800a7ae:	f1b8 0f00 	cmp.w	r8, #0
 800a7b2:	d10a      	bne.n	800a7ca <_dtoa_r+0x38a>
 800a7b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b8:	4632      	mov	r2, r6
 800a7ba:	463b      	mov	r3, r7
 800a7bc:	f7f6 f846 	bl	800084c <__aeabi_ddiv>
 800a7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c4:	e02b      	b.n	800a81e <_dtoa_r+0x3de>
 800a7c6:	2502      	movs	r5, #2
 800a7c8:	e7ef      	b.n	800a7aa <_dtoa_r+0x36a>
 800a7ca:	f018 0f01 	tst.w	r8, #1
 800a7ce:	d008      	beq.n	800a7e2 <_dtoa_r+0x3a2>
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	3501      	adds	r5, #1
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7e6:	f109 0908 	add.w	r9, r9, #8
 800a7ea:	e7e0      	b.n	800a7ae <_dtoa_r+0x36e>
 800a7ec:	f000 809f 	beq.w	800a92e <_dtoa_r+0x4ee>
 800a7f0:	f1cb 0600 	rsb	r6, fp, #0
 800a7f4:	4ba1      	ldr	r3, [pc, #644]	; (800aa7c <_dtoa_r+0x63c>)
 800a7f6:	4fa2      	ldr	r7, [pc, #648]	; (800aa80 <_dtoa_r+0x640>)
 800a7f8:	f006 020f 	and.w	r2, r6, #15
 800a7fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	ec51 0b18 	vmov	r0, r1, d8
 800a808:	f7f5 fef6 	bl	80005f8 <__aeabi_dmul>
 800a80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a810:	1136      	asrs	r6, r6, #4
 800a812:	2300      	movs	r3, #0
 800a814:	2502      	movs	r5, #2
 800a816:	2e00      	cmp	r6, #0
 800a818:	d17e      	bne.n	800a918 <_dtoa_r+0x4d8>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1d0      	bne.n	800a7c0 <_dtoa_r+0x380>
 800a81e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a820:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 8084 	beq.w	800a932 <_dtoa_r+0x4f2>
 800a82a:	4b96      	ldr	r3, [pc, #600]	; (800aa84 <_dtoa_r+0x644>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	4640      	mov	r0, r8
 800a830:	4649      	mov	r1, r9
 800a832:	f7f6 f953 	bl	8000adc <__aeabi_dcmplt>
 800a836:	2800      	cmp	r0, #0
 800a838:	d07b      	beq.n	800a932 <_dtoa_r+0x4f2>
 800a83a:	9b04      	ldr	r3, [sp, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d078      	beq.n	800a932 <_dtoa_r+0x4f2>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	dd39      	ble.n	800a8ba <_dtoa_r+0x47a>
 800a846:	4b90      	ldr	r3, [pc, #576]	; (800aa88 <_dtoa_r+0x648>)
 800a848:	2200      	movs	r2, #0
 800a84a:	4640      	mov	r0, r8
 800a84c:	4649      	mov	r1, r9
 800a84e:	f7f5 fed3 	bl	80005f8 <__aeabi_dmul>
 800a852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a856:	9e01      	ldr	r6, [sp, #4]
 800a858:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a85c:	3501      	adds	r5, #1
 800a85e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a862:	4628      	mov	r0, r5
 800a864:	f7f5 fe5e 	bl	8000524 <__aeabi_i2d>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fec4 	bl	80005f8 <__aeabi_dmul>
 800a870:	4b86      	ldr	r3, [pc, #536]	; (800aa8c <_dtoa_r+0x64c>)
 800a872:	2200      	movs	r2, #0
 800a874:	f7f5 fd0a 	bl	800028c <__adddf3>
 800a878:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a880:	9303      	str	r3, [sp, #12]
 800a882:	2e00      	cmp	r6, #0
 800a884:	d158      	bne.n	800a938 <_dtoa_r+0x4f8>
 800a886:	4b82      	ldr	r3, [pc, #520]	; (800aa90 <_dtoa_r+0x650>)
 800a888:	2200      	movs	r2, #0
 800a88a:	4640      	mov	r0, r8
 800a88c:	4649      	mov	r1, r9
 800a88e:	f7f5 fcfb 	bl	8000288 <__aeabi_dsub>
 800a892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a896:	4680      	mov	r8, r0
 800a898:	4689      	mov	r9, r1
 800a89a:	f7f6 f93d 	bl	8000b18 <__aeabi_dcmpgt>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	f040 8296 	bne.w	800add0 <_dtoa_r+0x990>
 800a8a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	f7f6 f914 	bl	8000adc <__aeabi_dcmplt>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	f040 8289 	bne.w	800adcc <_dtoa_r+0x98c>
 800a8ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a8be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f2c0 814e 	blt.w	800ab62 <_dtoa_r+0x722>
 800a8c6:	f1bb 0f0e 	cmp.w	fp, #14
 800a8ca:	f300 814a 	bgt.w	800ab62 <_dtoa_r+0x722>
 800a8ce:	4b6b      	ldr	r3, [pc, #428]	; (800aa7c <_dtoa_r+0x63c>)
 800a8d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f280 80dc 	bge.w	800aa98 <_dtoa_r+0x658>
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f300 80d8 	bgt.w	800aa98 <_dtoa_r+0x658>
 800a8e8:	f040 826f 	bne.w	800adca <_dtoa_r+0x98a>
 800a8ec:	4b68      	ldr	r3, [pc, #416]	; (800aa90 <_dtoa_r+0x650>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	f7f5 fe80 	bl	80005f8 <__aeabi_dmul>
 800a8f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8fc:	f7f6 f902 	bl	8000b04 <__aeabi_dcmpge>
 800a900:	9e04      	ldr	r6, [sp, #16]
 800a902:	4637      	mov	r7, r6
 800a904:	2800      	cmp	r0, #0
 800a906:	f040 8245 	bne.w	800ad94 <_dtoa_r+0x954>
 800a90a:	9d00      	ldr	r5, [sp, #0]
 800a90c:	2331      	movs	r3, #49	; 0x31
 800a90e:	f805 3b01 	strb.w	r3, [r5], #1
 800a912:	f10b 0b01 	add.w	fp, fp, #1
 800a916:	e241      	b.n	800ad9c <_dtoa_r+0x95c>
 800a918:	07f2      	lsls	r2, r6, #31
 800a91a:	d505      	bpl.n	800a928 <_dtoa_r+0x4e8>
 800a91c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a920:	f7f5 fe6a 	bl	80005f8 <__aeabi_dmul>
 800a924:	3501      	adds	r5, #1
 800a926:	2301      	movs	r3, #1
 800a928:	1076      	asrs	r6, r6, #1
 800a92a:	3708      	adds	r7, #8
 800a92c:	e773      	b.n	800a816 <_dtoa_r+0x3d6>
 800a92e:	2502      	movs	r5, #2
 800a930:	e775      	b.n	800a81e <_dtoa_r+0x3de>
 800a932:	9e04      	ldr	r6, [sp, #16]
 800a934:	465f      	mov	r7, fp
 800a936:	e792      	b.n	800a85e <_dtoa_r+0x41e>
 800a938:	9900      	ldr	r1, [sp, #0]
 800a93a:	4b50      	ldr	r3, [pc, #320]	; (800aa7c <_dtoa_r+0x63c>)
 800a93c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a940:	4431      	add	r1, r6
 800a942:	9102      	str	r1, [sp, #8]
 800a944:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a946:	eeb0 9a47 	vmov.f32	s18, s14
 800a94a:	eef0 9a67 	vmov.f32	s19, s15
 800a94e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a956:	2900      	cmp	r1, #0
 800a958:	d044      	beq.n	800a9e4 <_dtoa_r+0x5a4>
 800a95a:	494e      	ldr	r1, [pc, #312]	; (800aa94 <_dtoa_r+0x654>)
 800a95c:	2000      	movs	r0, #0
 800a95e:	f7f5 ff75 	bl	800084c <__aeabi_ddiv>
 800a962:	ec53 2b19 	vmov	r2, r3, d9
 800a966:	f7f5 fc8f 	bl	8000288 <__aeabi_dsub>
 800a96a:	9d00      	ldr	r5, [sp, #0]
 800a96c:	ec41 0b19 	vmov	d9, r0, r1
 800a970:	4649      	mov	r1, r9
 800a972:	4640      	mov	r0, r8
 800a974:	f7f6 f8f0 	bl	8000b58 <__aeabi_d2iz>
 800a978:	4606      	mov	r6, r0
 800a97a:	f7f5 fdd3 	bl	8000524 <__aeabi_i2d>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4640      	mov	r0, r8
 800a984:	4649      	mov	r1, r9
 800a986:	f7f5 fc7f 	bl	8000288 <__aeabi_dsub>
 800a98a:	3630      	adds	r6, #48	; 0x30
 800a98c:	f805 6b01 	strb.w	r6, [r5], #1
 800a990:	ec53 2b19 	vmov	r2, r3, d9
 800a994:	4680      	mov	r8, r0
 800a996:	4689      	mov	r9, r1
 800a998:	f7f6 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d164      	bne.n	800aa6a <_dtoa_r+0x62a>
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	4937      	ldr	r1, [pc, #220]	; (800aa84 <_dtoa_r+0x644>)
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	f7f5 fc6e 	bl	8000288 <__aeabi_dsub>
 800a9ac:	ec53 2b19 	vmov	r2, r3, d9
 800a9b0:	f7f6 f894 	bl	8000adc <__aeabi_dcmplt>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	f040 80b6 	bne.w	800ab26 <_dtoa_r+0x6e6>
 800a9ba:	9b02      	ldr	r3, [sp, #8]
 800a9bc:	429d      	cmp	r5, r3
 800a9be:	f43f af7c 	beq.w	800a8ba <_dtoa_r+0x47a>
 800a9c2:	4b31      	ldr	r3, [pc, #196]	; (800aa88 <_dtoa_r+0x648>)
 800a9c4:	ec51 0b19 	vmov	r0, r1, d9
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f7f5 fe15 	bl	80005f8 <__aeabi_dmul>
 800a9ce:	4b2e      	ldr	r3, [pc, #184]	; (800aa88 <_dtoa_r+0x648>)
 800a9d0:	ec41 0b19 	vmov	d9, r0, r1
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f5 fe0d 	bl	80005f8 <__aeabi_dmul>
 800a9de:	4680      	mov	r8, r0
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	e7c5      	b.n	800a970 <_dtoa_r+0x530>
 800a9e4:	ec51 0b17 	vmov	r0, r1, d7
 800a9e8:	f7f5 fe06 	bl	80005f8 <__aeabi_dmul>
 800a9ec:	9b02      	ldr	r3, [sp, #8]
 800a9ee:	9d00      	ldr	r5, [sp, #0]
 800a9f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9f2:	ec41 0b19 	vmov	d9, r0, r1
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4640      	mov	r0, r8
 800a9fa:	f7f6 f8ad 	bl	8000b58 <__aeabi_d2iz>
 800a9fe:	4606      	mov	r6, r0
 800aa00:	f7f5 fd90 	bl	8000524 <__aeabi_i2d>
 800aa04:	3630      	adds	r6, #48	; 0x30
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	f7f5 fc3b 	bl	8000288 <__aeabi_dsub>
 800aa12:	f805 6b01 	strb.w	r6, [r5], #1
 800aa16:	9b02      	ldr	r3, [sp, #8]
 800aa18:	429d      	cmp	r5, r3
 800aa1a:	4680      	mov	r8, r0
 800aa1c:	4689      	mov	r9, r1
 800aa1e:	f04f 0200 	mov.w	r2, #0
 800aa22:	d124      	bne.n	800aa6e <_dtoa_r+0x62e>
 800aa24:	4b1b      	ldr	r3, [pc, #108]	; (800aa94 <_dtoa_r+0x654>)
 800aa26:	ec51 0b19 	vmov	r0, r1, d9
 800aa2a:	f7f5 fc2f 	bl	800028c <__adddf3>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	f7f6 f86f 	bl	8000b18 <__aeabi_dcmpgt>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d173      	bne.n	800ab26 <_dtoa_r+0x6e6>
 800aa3e:	ec53 2b19 	vmov	r2, r3, d9
 800aa42:	4914      	ldr	r1, [pc, #80]	; (800aa94 <_dtoa_r+0x654>)
 800aa44:	2000      	movs	r0, #0
 800aa46:	f7f5 fc1f 	bl	8000288 <__aeabi_dsub>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4640      	mov	r0, r8
 800aa50:	4649      	mov	r1, r9
 800aa52:	f7f6 f843 	bl	8000adc <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f43f af2f 	beq.w	800a8ba <_dtoa_r+0x47a>
 800aa5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa5e:	1e6b      	subs	r3, r5, #1
 800aa60:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa66:	2b30      	cmp	r3, #48	; 0x30
 800aa68:	d0f8      	beq.n	800aa5c <_dtoa_r+0x61c>
 800aa6a:	46bb      	mov	fp, r7
 800aa6c:	e04a      	b.n	800ab04 <_dtoa_r+0x6c4>
 800aa6e:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <_dtoa_r+0x648>)
 800aa70:	f7f5 fdc2 	bl	80005f8 <__aeabi_dmul>
 800aa74:	4680      	mov	r8, r0
 800aa76:	4689      	mov	r9, r1
 800aa78:	e7bd      	b.n	800a9f6 <_dtoa_r+0x5b6>
 800aa7a:	bf00      	nop
 800aa7c:	0800c918 	.word	0x0800c918
 800aa80:	0800c8f0 	.word	0x0800c8f0
 800aa84:	3ff00000 	.word	0x3ff00000
 800aa88:	40240000 	.word	0x40240000
 800aa8c:	401c0000 	.word	0x401c0000
 800aa90:	40140000 	.word	0x40140000
 800aa94:	3fe00000 	.word	0x3fe00000
 800aa98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa9c:	9d00      	ldr	r5, [sp, #0]
 800aa9e:	4642      	mov	r2, r8
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fed1 	bl	800084c <__aeabi_ddiv>
 800aaaa:	f7f6 f855 	bl	8000b58 <__aeabi_d2iz>
 800aaae:	9001      	str	r0, [sp, #4]
 800aab0:	f7f5 fd38 	bl	8000524 <__aeabi_i2d>
 800aab4:	4642      	mov	r2, r8
 800aab6:	464b      	mov	r3, r9
 800aab8:	f7f5 fd9e 	bl	80005f8 <__aeabi_dmul>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	f7f5 fbe0 	bl	8000288 <__aeabi_dsub>
 800aac8:	9e01      	ldr	r6, [sp, #4]
 800aaca:	9f04      	ldr	r7, [sp, #16]
 800aacc:	3630      	adds	r6, #48	; 0x30
 800aace:	f805 6b01 	strb.w	r6, [r5], #1
 800aad2:	9e00      	ldr	r6, [sp, #0]
 800aad4:	1bae      	subs	r6, r5, r6
 800aad6:	42b7      	cmp	r7, r6
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	d134      	bne.n	800ab48 <_dtoa_r+0x708>
 800aade:	f7f5 fbd5 	bl	800028c <__adddf3>
 800aae2:	4642      	mov	r2, r8
 800aae4:	464b      	mov	r3, r9
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	f7f6 f815 	bl	8000b18 <__aeabi_dcmpgt>
 800aaee:	b9c8      	cbnz	r0, 800ab24 <_dtoa_r+0x6e4>
 800aaf0:	4642      	mov	r2, r8
 800aaf2:	464b      	mov	r3, r9
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	4639      	mov	r1, r7
 800aaf8:	f7f5 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800aafc:	b110      	cbz	r0, 800ab04 <_dtoa_r+0x6c4>
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	07db      	lsls	r3, r3, #31
 800ab02:	d40f      	bmi.n	800ab24 <_dtoa_r+0x6e4>
 800ab04:	4651      	mov	r1, sl
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fbcc 	bl	800b2a4 <_Bfree>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab10:	702b      	strb	r3, [r5, #0]
 800ab12:	f10b 0301 	add.w	r3, fp, #1
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f43f ace2 	beq.w	800a4e4 <_dtoa_r+0xa4>
 800ab20:	601d      	str	r5, [r3, #0]
 800ab22:	e4df      	b.n	800a4e4 <_dtoa_r+0xa4>
 800ab24:	465f      	mov	r7, fp
 800ab26:	462b      	mov	r3, r5
 800ab28:	461d      	mov	r5, r3
 800ab2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab2e:	2a39      	cmp	r2, #57	; 0x39
 800ab30:	d106      	bne.n	800ab40 <_dtoa_r+0x700>
 800ab32:	9a00      	ldr	r2, [sp, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d1f7      	bne.n	800ab28 <_dtoa_r+0x6e8>
 800ab38:	9900      	ldr	r1, [sp, #0]
 800ab3a:	2230      	movs	r2, #48	; 0x30
 800ab3c:	3701      	adds	r7, #1
 800ab3e:	700a      	strb	r2, [r1, #0]
 800ab40:	781a      	ldrb	r2, [r3, #0]
 800ab42:	3201      	adds	r2, #1
 800ab44:	701a      	strb	r2, [r3, #0]
 800ab46:	e790      	b.n	800aa6a <_dtoa_r+0x62a>
 800ab48:	4ba3      	ldr	r3, [pc, #652]	; (800add8 <_dtoa_r+0x998>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7f5 fd54 	bl	80005f8 <__aeabi_dmul>
 800ab50:	2200      	movs	r2, #0
 800ab52:	2300      	movs	r3, #0
 800ab54:	4606      	mov	r6, r0
 800ab56:	460f      	mov	r7, r1
 800ab58:	f7f5 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d09e      	beq.n	800aa9e <_dtoa_r+0x65e>
 800ab60:	e7d0      	b.n	800ab04 <_dtoa_r+0x6c4>
 800ab62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	f000 80ca 	beq.w	800acfe <_dtoa_r+0x8be>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	2a01      	cmp	r2, #1
 800ab6e:	f300 80ad 	bgt.w	800accc <_dtoa_r+0x88c>
 800ab72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	f000 80a5 	beq.w	800acc4 <_dtoa_r+0x884>
 800ab7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab7e:	9e08      	ldr	r6, [sp, #32]
 800ab80:	9d05      	ldr	r5, [sp, #20]
 800ab82:	9a05      	ldr	r2, [sp, #20]
 800ab84:	441a      	add	r2, r3
 800ab86:	9205      	str	r2, [sp, #20]
 800ab88:	9a06      	ldr	r2, [sp, #24]
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	441a      	add	r2, r3
 800ab8e:	4620      	mov	r0, r4
 800ab90:	9206      	str	r2, [sp, #24]
 800ab92:	f000 fc3d 	bl	800b410 <__i2b>
 800ab96:	4607      	mov	r7, r0
 800ab98:	b165      	cbz	r5, 800abb4 <_dtoa_r+0x774>
 800ab9a:	9b06      	ldr	r3, [sp, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dd09      	ble.n	800abb4 <_dtoa_r+0x774>
 800aba0:	42ab      	cmp	r3, r5
 800aba2:	9a05      	ldr	r2, [sp, #20]
 800aba4:	bfa8      	it	ge
 800aba6:	462b      	movge	r3, r5
 800aba8:	1ad2      	subs	r2, r2, r3
 800abaa:	9205      	str	r2, [sp, #20]
 800abac:	9a06      	ldr	r2, [sp, #24]
 800abae:	1aed      	subs	r5, r5, r3
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	9306      	str	r3, [sp, #24]
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	b1f3      	cbz	r3, 800abf6 <_dtoa_r+0x7b6>
 800abb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 80a3 	beq.w	800ad06 <_dtoa_r+0x8c6>
 800abc0:	2e00      	cmp	r6, #0
 800abc2:	dd10      	ble.n	800abe6 <_dtoa_r+0x7a6>
 800abc4:	4639      	mov	r1, r7
 800abc6:	4632      	mov	r2, r6
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fce1 	bl	800b590 <__pow5mult>
 800abce:	4652      	mov	r2, sl
 800abd0:	4601      	mov	r1, r0
 800abd2:	4607      	mov	r7, r0
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fc31 	bl	800b43c <__multiply>
 800abda:	4651      	mov	r1, sl
 800abdc:	4680      	mov	r8, r0
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fb60 	bl	800b2a4 <_Bfree>
 800abe4:	46c2      	mov	sl, r8
 800abe6:	9b08      	ldr	r3, [sp, #32]
 800abe8:	1b9a      	subs	r2, r3, r6
 800abea:	d004      	beq.n	800abf6 <_dtoa_r+0x7b6>
 800abec:	4651      	mov	r1, sl
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fcce 	bl	800b590 <__pow5mult>
 800abf4:	4682      	mov	sl, r0
 800abf6:	2101      	movs	r1, #1
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fc09 	bl	800b410 <__i2b>
 800abfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	4606      	mov	r6, r0
 800ac04:	f340 8081 	ble.w	800ad0a <_dtoa_r+0x8ca>
 800ac08:	461a      	mov	r2, r3
 800ac0a:	4601      	mov	r1, r0
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fcbf 	bl	800b590 <__pow5mult>
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	4606      	mov	r6, r0
 800ac18:	dd7a      	ble.n	800ad10 <_dtoa_r+0x8d0>
 800ac1a:	f04f 0800 	mov.w	r8, #0
 800ac1e:	6933      	ldr	r3, [r6, #16]
 800ac20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac24:	6918      	ldr	r0, [r3, #16]
 800ac26:	f000 fba5 	bl	800b374 <__hi0bits>
 800ac2a:	f1c0 0020 	rsb	r0, r0, #32
 800ac2e:	9b06      	ldr	r3, [sp, #24]
 800ac30:	4418      	add	r0, r3
 800ac32:	f010 001f 	ands.w	r0, r0, #31
 800ac36:	f000 8094 	beq.w	800ad62 <_dtoa_r+0x922>
 800ac3a:	f1c0 0320 	rsb	r3, r0, #32
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	f340 8085 	ble.w	800ad4e <_dtoa_r+0x90e>
 800ac44:	9b05      	ldr	r3, [sp, #20]
 800ac46:	f1c0 001c 	rsb	r0, r0, #28
 800ac4a:	4403      	add	r3, r0
 800ac4c:	9305      	str	r3, [sp, #20]
 800ac4e:	9b06      	ldr	r3, [sp, #24]
 800ac50:	4403      	add	r3, r0
 800ac52:	4405      	add	r5, r0
 800ac54:	9306      	str	r3, [sp, #24]
 800ac56:	9b05      	ldr	r3, [sp, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	dd05      	ble.n	800ac68 <_dtoa_r+0x828>
 800ac5c:	4651      	mov	r1, sl
 800ac5e:	461a      	mov	r2, r3
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fcef 	bl	800b644 <__lshift>
 800ac66:	4682      	mov	sl, r0
 800ac68:	9b06      	ldr	r3, [sp, #24]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dd05      	ble.n	800ac7a <_dtoa_r+0x83a>
 800ac6e:	4631      	mov	r1, r6
 800ac70:	461a      	mov	r2, r3
 800ac72:	4620      	mov	r0, r4
 800ac74:	f000 fce6 	bl	800b644 <__lshift>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d072      	beq.n	800ad66 <_dtoa_r+0x926>
 800ac80:	4631      	mov	r1, r6
 800ac82:	4650      	mov	r0, sl
 800ac84:	f000 fd4a 	bl	800b71c <__mcmp>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	da6c      	bge.n	800ad66 <_dtoa_r+0x926>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4651      	mov	r1, sl
 800ac90:	220a      	movs	r2, #10
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fb28 	bl	800b2e8 <__multadd>
 800ac98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac9e:	4682      	mov	sl, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 81b0 	beq.w	800b006 <_dtoa_r+0xbc6>
 800aca6:	2300      	movs	r3, #0
 800aca8:	4639      	mov	r1, r7
 800acaa:	220a      	movs	r2, #10
 800acac:	4620      	mov	r0, r4
 800acae:	f000 fb1b 	bl	800b2e8 <__multadd>
 800acb2:	9b01      	ldr	r3, [sp, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	4607      	mov	r7, r0
 800acb8:	f300 8096 	bgt.w	800ade8 <_dtoa_r+0x9a8>
 800acbc:	9b07      	ldr	r3, [sp, #28]
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	dc59      	bgt.n	800ad76 <_dtoa_r+0x936>
 800acc2:	e091      	b.n	800ade8 <_dtoa_r+0x9a8>
 800acc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acca:	e758      	b.n	800ab7e <_dtoa_r+0x73e>
 800accc:	9b04      	ldr	r3, [sp, #16]
 800acce:	1e5e      	subs	r6, r3, #1
 800acd0:	9b08      	ldr	r3, [sp, #32]
 800acd2:	42b3      	cmp	r3, r6
 800acd4:	bfbf      	itttt	lt
 800acd6:	9b08      	ldrlt	r3, [sp, #32]
 800acd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800acda:	9608      	strlt	r6, [sp, #32]
 800acdc:	1af3      	sublt	r3, r6, r3
 800acde:	bfb4      	ite	lt
 800ace0:	18d2      	addlt	r2, r2, r3
 800ace2:	1b9e      	subge	r6, r3, r6
 800ace4:	9b04      	ldr	r3, [sp, #16]
 800ace6:	bfbc      	itt	lt
 800ace8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800acea:	2600      	movlt	r6, #0
 800acec:	2b00      	cmp	r3, #0
 800acee:	bfb7      	itett	lt
 800acf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800acf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800acf8:	1a9d      	sublt	r5, r3, r2
 800acfa:	2300      	movlt	r3, #0
 800acfc:	e741      	b.n	800ab82 <_dtoa_r+0x742>
 800acfe:	9e08      	ldr	r6, [sp, #32]
 800ad00:	9d05      	ldr	r5, [sp, #20]
 800ad02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad04:	e748      	b.n	800ab98 <_dtoa_r+0x758>
 800ad06:	9a08      	ldr	r2, [sp, #32]
 800ad08:	e770      	b.n	800abec <_dtoa_r+0x7ac>
 800ad0a:	9b07      	ldr	r3, [sp, #28]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	dc19      	bgt.n	800ad44 <_dtoa_r+0x904>
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	b9bb      	cbnz	r3, 800ad44 <_dtoa_r+0x904>
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad1a:	b99b      	cbnz	r3, 800ad44 <_dtoa_r+0x904>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad22:	0d1b      	lsrs	r3, r3, #20
 800ad24:	051b      	lsls	r3, r3, #20
 800ad26:	b183      	cbz	r3, 800ad4a <_dtoa_r+0x90a>
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	3301      	adds	r3, #1
 800ad32:	9306      	str	r3, [sp, #24]
 800ad34:	f04f 0801 	mov.w	r8, #1
 800ad38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f47f af6f 	bne.w	800ac1e <_dtoa_r+0x7de>
 800ad40:	2001      	movs	r0, #1
 800ad42:	e774      	b.n	800ac2e <_dtoa_r+0x7ee>
 800ad44:	f04f 0800 	mov.w	r8, #0
 800ad48:	e7f6      	b.n	800ad38 <_dtoa_r+0x8f8>
 800ad4a:	4698      	mov	r8, r3
 800ad4c:	e7f4      	b.n	800ad38 <_dtoa_r+0x8f8>
 800ad4e:	d082      	beq.n	800ac56 <_dtoa_r+0x816>
 800ad50:	9a05      	ldr	r2, [sp, #20]
 800ad52:	331c      	adds	r3, #28
 800ad54:	441a      	add	r2, r3
 800ad56:	9205      	str	r2, [sp, #20]
 800ad58:	9a06      	ldr	r2, [sp, #24]
 800ad5a:	441a      	add	r2, r3
 800ad5c:	441d      	add	r5, r3
 800ad5e:	9206      	str	r2, [sp, #24]
 800ad60:	e779      	b.n	800ac56 <_dtoa_r+0x816>
 800ad62:	4603      	mov	r3, r0
 800ad64:	e7f4      	b.n	800ad50 <_dtoa_r+0x910>
 800ad66:	9b04      	ldr	r3, [sp, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc37      	bgt.n	800addc <_dtoa_r+0x99c>
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	dd34      	ble.n	800addc <_dtoa_r+0x99c>
 800ad72:	9b04      	ldr	r3, [sp, #16]
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	b963      	cbnz	r3, 800ad94 <_dtoa_r+0x954>
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	2205      	movs	r2, #5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f000 fab2 	bl	800b2e8 <__multadd>
 800ad84:	4601      	mov	r1, r0
 800ad86:	4606      	mov	r6, r0
 800ad88:	4650      	mov	r0, sl
 800ad8a:	f000 fcc7 	bl	800b71c <__mcmp>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f73f adbb 	bgt.w	800a90a <_dtoa_r+0x4ca>
 800ad94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad96:	9d00      	ldr	r5, [sp, #0]
 800ad98:	ea6f 0b03 	mvn.w	fp, r3
 800ad9c:	f04f 0800 	mov.w	r8, #0
 800ada0:	4631      	mov	r1, r6
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fa7e 	bl	800b2a4 <_Bfree>
 800ada8:	2f00      	cmp	r7, #0
 800adaa:	f43f aeab 	beq.w	800ab04 <_dtoa_r+0x6c4>
 800adae:	f1b8 0f00 	cmp.w	r8, #0
 800adb2:	d005      	beq.n	800adc0 <_dtoa_r+0x980>
 800adb4:	45b8      	cmp	r8, r7
 800adb6:	d003      	beq.n	800adc0 <_dtoa_r+0x980>
 800adb8:	4641      	mov	r1, r8
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fa72 	bl	800b2a4 <_Bfree>
 800adc0:	4639      	mov	r1, r7
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 fa6e 	bl	800b2a4 <_Bfree>
 800adc8:	e69c      	b.n	800ab04 <_dtoa_r+0x6c4>
 800adca:	2600      	movs	r6, #0
 800adcc:	4637      	mov	r7, r6
 800adce:	e7e1      	b.n	800ad94 <_dtoa_r+0x954>
 800add0:	46bb      	mov	fp, r7
 800add2:	4637      	mov	r7, r6
 800add4:	e599      	b.n	800a90a <_dtoa_r+0x4ca>
 800add6:	bf00      	nop
 800add8:	40240000 	.word	0x40240000
 800addc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f000 80c8 	beq.w	800af74 <_dtoa_r+0xb34>
 800ade4:	9b04      	ldr	r3, [sp, #16]
 800ade6:	9301      	str	r3, [sp, #4]
 800ade8:	2d00      	cmp	r5, #0
 800adea:	dd05      	ble.n	800adf8 <_dtoa_r+0x9b8>
 800adec:	4639      	mov	r1, r7
 800adee:	462a      	mov	r2, r5
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fc27 	bl	800b644 <__lshift>
 800adf6:	4607      	mov	r7, r0
 800adf8:	f1b8 0f00 	cmp.w	r8, #0
 800adfc:	d05b      	beq.n	800aeb6 <_dtoa_r+0xa76>
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 fa0f 	bl	800b224 <_Balloc>
 800ae06:	4605      	mov	r5, r0
 800ae08:	b928      	cbnz	r0, 800ae16 <_dtoa_r+0x9d6>
 800ae0a:	4b83      	ldr	r3, [pc, #524]	; (800b018 <_dtoa_r+0xbd8>)
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ae12:	f7ff bb2e 	b.w	800a472 <_dtoa_r+0x32>
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	3202      	adds	r2, #2
 800ae1a:	0092      	lsls	r2, r2, #2
 800ae1c:	f107 010c 	add.w	r1, r7, #12
 800ae20:	300c      	adds	r0, #12
 800ae22:	f7ff fa74 	bl	800a30e <memcpy>
 800ae26:	2201      	movs	r2, #1
 800ae28:	4629      	mov	r1, r5
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fc0a 	bl	800b644 <__lshift>
 800ae30:	9b00      	ldr	r3, [sp, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	9304      	str	r3, [sp, #16]
 800ae36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	9308      	str	r3, [sp, #32]
 800ae3e:	9b02      	ldr	r3, [sp, #8]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	46b8      	mov	r8, r7
 800ae46:	9306      	str	r3, [sp, #24]
 800ae48:	4607      	mov	r7, r0
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	4650      	mov	r0, sl
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	f7ff fa69 	bl	800a32a <quorem>
 800ae58:	4641      	mov	r1, r8
 800ae5a:	9002      	str	r0, [sp, #8]
 800ae5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ae60:	4650      	mov	r0, sl
 800ae62:	f000 fc5b 	bl	800b71c <__mcmp>
 800ae66:	463a      	mov	r2, r7
 800ae68:	9005      	str	r0, [sp, #20]
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fc71 	bl	800b754 <__mdiff>
 800ae72:	68c2      	ldr	r2, [r0, #12]
 800ae74:	4605      	mov	r5, r0
 800ae76:	bb02      	cbnz	r2, 800aeba <_dtoa_r+0xa7a>
 800ae78:	4601      	mov	r1, r0
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	f000 fc4e 	bl	800b71c <__mcmp>
 800ae80:	4602      	mov	r2, r0
 800ae82:	4629      	mov	r1, r5
 800ae84:	4620      	mov	r0, r4
 800ae86:	9209      	str	r2, [sp, #36]	; 0x24
 800ae88:	f000 fa0c 	bl	800b2a4 <_Bfree>
 800ae8c:	9b07      	ldr	r3, [sp, #28]
 800ae8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae90:	9d04      	ldr	r5, [sp, #16]
 800ae92:	ea43 0102 	orr.w	r1, r3, r2
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	4319      	orrs	r1, r3
 800ae9a:	d110      	bne.n	800aebe <_dtoa_r+0xa7e>
 800ae9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aea0:	d029      	beq.n	800aef6 <_dtoa_r+0xab6>
 800aea2:	9b05      	ldr	r3, [sp, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dd02      	ble.n	800aeae <_dtoa_r+0xa6e>
 800aea8:	9b02      	ldr	r3, [sp, #8]
 800aeaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	f883 9000 	strb.w	r9, [r3]
 800aeb4:	e774      	b.n	800ada0 <_dtoa_r+0x960>
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	e7ba      	b.n	800ae30 <_dtoa_r+0x9f0>
 800aeba:	2201      	movs	r2, #1
 800aebc:	e7e1      	b.n	800ae82 <_dtoa_r+0xa42>
 800aebe:	9b05      	ldr	r3, [sp, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	db04      	blt.n	800aece <_dtoa_r+0xa8e>
 800aec4:	9907      	ldr	r1, [sp, #28]
 800aec6:	430b      	orrs	r3, r1
 800aec8:	9906      	ldr	r1, [sp, #24]
 800aeca:	430b      	orrs	r3, r1
 800aecc:	d120      	bne.n	800af10 <_dtoa_r+0xad0>
 800aece:	2a00      	cmp	r2, #0
 800aed0:	dded      	ble.n	800aeae <_dtoa_r+0xa6e>
 800aed2:	4651      	mov	r1, sl
 800aed4:	2201      	movs	r2, #1
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fbb4 	bl	800b644 <__lshift>
 800aedc:	4631      	mov	r1, r6
 800aede:	4682      	mov	sl, r0
 800aee0:	f000 fc1c 	bl	800b71c <__mcmp>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	dc03      	bgt.n	800aef0 <_dtoa_r+0xab0>
 800aee8:	d1e1      	bne.n	800aeae <_dtoa_r+0xa6e>
 800aeea:	f019 0f01 	tst.w	r9, #1
 800aeee:	d0de      	beq.n	800aeae <_dtoa_r+0xa6e>
 800aef0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aef4:	d1d8      	bne.n	800aea8 <_dtoa_r+0xa68>
 800aef6:	9a01      	ldr	r2, [sp, #4]
 800aef8:	2339      	movs	r3, #57	; 0x39
 800aefa:	7013      	strb	r3, [r2, #0]
 800aefc:	462b      	mov	r3, r5
 800aefe:	461d      	mov	r5, r3
 800af00:	3b01      	subs	r3, #1
 800af02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af06:	2a39      	cmp	r2, #57	; 0x39
 800af08:	d06c      	beq.n	800afe4 <_dtoa_r+0xba4>
 800af0a:	3201      	adds	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	e747      	b.n	800ada0 <_dtoa_r+0x960>
 800af10:	2a00      	cmp	r2, #0
 800af12:	dd07      	ble.n	800af24 <_dtoa_r+0xae4>
 800af14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af18:	d0ed      	beq.n	800aef6 <_dtoa_r+0xab6>
 800af1a:	9a01      	ldr	r2, [sp, #4]
 800af1c:	f109 0301 	add.w	r3, r9, #1
 800af20:	7013      	strb	r3, [r2, #0]
 800af22:	e73d      	b.n	800ada0 <_dtoa_r+0x960>
 800af24:	9b04      	ldr	r3, [sp, #16]
 800af26:	9a08      	ldr	r2, [sp, #32]
 800af28:	f803 9c01 	strb.w	r9, [r3, #-1]
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d043      	beq.n	800afb8 <_dtoa_r+0xb78>
 800af30:	4651      	mov	r1, sl
 800af32:	2300      	movs	r3, #0
 800af34:	220a      	movs	r2, #10
 800af36:	4620      	mov	r0, r4
 800af38:	f000 f9d6 	bl	800b2e8 <__multadd>
 800af3c:	45b8      	cmp	r8, r7
 800af3e:	4682      	mov	sl, r0
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	f04f 020a 	mov.w	r2, #10
 800af48:	4641      	mov	r1, r8
 800af4a:	4620      	mov	r0, r4
 800af4c:	d107      	bne.n	800af5e <_dtoa_r+0xb1e>
 800af4e:	f000 f9cb 	bl	800b2e8 <__multadd>
 800af52:	4680      	mov	r8, r0
 800af54:	4607      	mov	r7, r0
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	3301      	adds	r3, #1
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	e775      	b.n	800ae4a <_dtoa_r+0xa0a>
 800af5e:	f000 f9c3 	bl	800b2e8 <__multadd>
 800af62:	4639      	mov	r1, r7
 800af64:	4680      	mov	r8, r0
 800af66:	2300      	movs	r3, #0
 800af68:	220a      	movs	r2, #10
 800af6a:	4620      	mov	r0, r4
 800af6c:	f000 f9bc 	bl	800b2e8 <__multadd>
 800af70:	4607      	mov	r7, r0
 800af72:	e7f0      	b.n	800af56 <_dtoa_r+0xb16>
 800af74:	9b04      	ldr	r3, [sp, #16]
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	9d00      	ldr	r5, [sp, #0]
 800af7a:	4631      	mov	r1, r6
 800af7c:	4650      	mov	r0, sl
 800af7e:	f7ff f9d4 	bl	800a32a <quorem>
 800af82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800af86:	9b00      	ldr	r3, [sp, #0]
 800af88:	f805 9b01 	strb.w	r9, [r5], #1
 800af8c:	1aea      	subs	r2, r5, r3
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	4293      	cmp	r3, r2
 800af92:	dd07      	ble.n	800afa4 <_dtoa_r+0xb64>
 800af94:	4651      	mov	r1, sl
 800af96:	2300      	movs	r3, #0
 800af98:	220a      	movs	r2, #10
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 f9a4 	bl	800b2e8 <__multadd>
 800afa0:	4682      	mov	sl, r0
 800afa2:	e7ea      	b.n	800af7a <_dtoa_r+0xb3a>
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfc8      	it	gt
 800afaa:	461d      	movgt	r5, r3
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	bfd8      	it	le
 800afb0:	2501      	movle	r5, #1
 800afb2:	441d      	add	r5, r3
 800afb4:	f04f 0800 	mov.w	r8, #0
 800afb8:	4651      	mov	r1, sl
 800afba:	2201      	movs	r2, #1
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 fb41 	bl	800b644 <__lshift>
 800afc2:	4631      	mov	r1, r6
 800afc4:	4682      	mov	sl, r0
 800afc6:	f000 fba9 	bl	800b71c <__mcmp>
 800afca:	2800      	cmp	r0, #0
 800afcc:	dc96      	bgt.n	800aefc <_dtoa_r+0xabc>
 800afce:	d102      	bne.n	800afd6 <_dtoa_r+0xb96>
 800afd0:	f019 0f01 	tst.w	r9, #1
 800afd4:	d192      	bne.n	800aefc <_dtoa_r+0xabc>
 800afd6:	462b      	mov	r3, r5
 800afd8:	461d      	mov	r5, r3
 800afda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afde:	2a30      	cmp	r2, #48	; 0x30
 800afe0:	d0fa      	beq.n	800afd8 <_dtoa_r+0xb98>
 800afe2:	e6dd      	b.n	800ada0 <_dtoa_r+0x960>
 800afe4:	9a00      	ldr	r2, [sp, #0]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d189      	bne.n	800aefe <_dtoa_r+0xabe>
 800afea:	f10b 0b01 	add.w	fp, fp, #1
 800afee:	2331      	movs	r3, #49	; 0x31
 800aff0:	e796      	b.n	800af20 <_dtoa_r+0xae0>
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <_dtoa_r+0xbdc>)
 800aff4:	f7ff ba99 	b.w	800a52a <_dtoa_r+0xea>
 800aff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800affa:	2b00      	cmp	r3, #0
 800affc:	f47f aa6d 	bne.w	800a4da <_dtoa_r+0x9a>
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <_dtoa_r+0xbe0>)
 800b002:	f7ff ba92 	b.w	800a52a <_dtoa_r+0xea>
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dcb5      	bgt.n	800af78 <_dtoa_r+0xb38>
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	f73f aeb1 	bgt.w	800ad76 <_dtoa_r+0x936>
 800b014:	e7b0      	b.n	800af78 <_dtoa_r+0xb38>
 800b016:	bf00      	nop
 800b018:	0800c885 	.word	0x0800c885
 800b01c:	0800c7e5 	.word	0x0800c7e5
 800b020:	0800c809 	.word	0x0800c809

0800b024 <_free_r>:
 800b024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b026:	2900      	cmp	r1, #0
 800b028:	d044      	beq.n	800b0b4 <_free_r+0x90>
 800b02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02e:	9001      	str	r0, [sp, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	f1a1 0404 	sub.w	r4, r1, #4
 800b036:	bfb8      	it	lt
 800b038:	18e4      	addlt	r4, r4, r3
 800b03a:	f000 f8e7 	bl	800b20c <__malloc_lock>
 800b03e:	4a1e      	ldr	r2, [pc, #120]	; (800b0b8 <_free_r+0x94>)
 800b040:	9801      	ldr	r0, [sp, #4]
 800b042:	6813      	ldr	r3, [r2, #0]
 800b044:	b933      	cbnz	r3, 800b054 <_free_r+0x30>
 800b046:	6063      	str	r3, [r4, #4]
 800b048:	6014      	str	r4, [r2, #0]
 800b04a:	b003      	add	sp, #12
 800b04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b050:	f000 b8e2 	b.w	800b218 <__malloc_unlock>
 800b054:	42a3      	cmp	r3, r4
 800b056:	d908      	bls.n	800b06a <_free_r+0x46>
 800b058:	6825      	ldr	r5, [r4, #0]
 800b05a:	1961      	adds	r1, r4, r5
 800b05c:	428b      	cmp	r3, r1
 800b05e:	bf01      	itttt	eq
 800b060:	6819      	ldreq	r1, [r3, #0]
 800b062:	685b      	ldreq	r3, [r3, #4]
 800b064:	1949      	addeq	r1, r1, r5
 800b066:	6021      	streq	r1, [r4, #0]
 800b068:	e7ed      	b.n	800b046 <_free_r+0x22>
 800b06a:	461a      	mov	r2, r3
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	b10b      	cbz	r3, 800b074 <_free_r+0x50>
 800b070:	42a3      	cmp	r3, r4
 800b072:	d9fa      	bls.n	800b06a <_free_r+0x46>
 800b074:	6811      	ldr	r1, [r2, #0]
 800b076:	1855      	adds	r5, r2, r1
 800b078:	42a5      	cmp	r5, r4
 800b07a:	d10b      	bne.n	800b094 <_free_r+0x70>
 800b07c:	6824      	ldr	r4, [r4, #0]
 800b07e:	4421      	add	r1, r4
 800b080:	1854      	adds	r4, r2, r1
 800b082:	42a3      	cmp	r3, r4
 800b084:	6011      	str	r1, [r2, #0]
 800b086:	d1e0      	bne.n	800b04a <_free_r+0x26>
 800b088:	681c      	ldr	r4, [r3, #0]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	6053      	str	r3, [r2, #4]
 800b08e:	440c      	add	r4, r1
 800b090:	6014      	str	r4, [r2, #0]
 800b092:	e7da      	b.n	800b04a <_free_r+0x26>
 800b094:	d902      	bls.n	800b09c <_free_r+0x78>
 800b096:	230c      	movs	r3, #12
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	e7d6      	b.n	800b04a <_free_r+0x26>
 800b09c:	6825      	ldr	r5, [r4, #0]
 800b09e:	1961      	adds	r1, r4, r5
 800b0a0:	428b      	cmp	r3, r1
 800b0a2:	bf04      	itt	eq
 800b0a4:	6819      	ldreq	r1, [r3, #0]
 800b0a6:	685b      	ldreq	r3, [r3, #4]
 800b0a8:	6063      	str	r3, [r4, #4]
 800b0aa:	bf04      	itt	eq
 800b0ac:	1949      	addeq	r1, r1, r5
 800b0ae:	6021      	streq	r1, [r4, #0]
 800b0b0:	6054      	str	r4, [r2, #4]
 800b0b2:	e7ca      	b.n	800b04a <_free_r+0x26>
 800b0b4:	b003      	add	sp, #12
 800b0b6:	bd30      	pop	{r4, r5, pc}
 800b0b8:	20000658 	.word	0x20000658

0800b0bc <malloc>:
 800b0bc:	4b02      	ldr	r3, [pc, #8]	; (800b0c8 <malloc+0xc>)
 800b0be:	4601      	mov	r1, r0
 800b0c0:	6818      	ldr	r0, [r3, #0]
 800b0c2:	f000 b823 	b.w	800b10c <_malloc_r>
 800b0c6:	bf00      	nop
 800b0c8:	20000080 	.word	0x20000080

0800b0cc <sbrk_aligned>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	4e0e      	ldr	r6, [pc, #56]	; (800b108 <sbrk_aligned+0x3c>)
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	6831      	ldr	r1, [r6, #0]
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	b911      	cbnz	r1, 800b0de <sbrk_aligned+0x12>
 800b0d8:	f001 f808 	bl	800c0ec <_sbrk_r>
 800b0dc:	6030      	str	r0, [r6, #0]
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	f001 f803 	bl	800c0ec <_sbrk_r>
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	d00a      	beq.n	800b100 <sbrk_aligned+0x34>
 800b0ea:	1cc4      	adds	r4, r0, #3
 800b0ec:	f024 0403 	bic.w	r4, r4, #3
 800b0f0:	42a0      	cmp	r0, r4
 800b0f2:	d007      	beq.n	800b104 <sbrk_aligned+0x38>
 800b0f4:	1a21      	subs	r1, r4, r0
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f000 fff8 	bl	800c0ec <_sbrk_r>
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d101      	bne.n	800b104 <sbrk_aligned+0x38>
 800b100:	f04f 34ff 	mov.w	r4, #4294967295
 800b104:	4620      	mov	r0, r4
 800b106:	bd70      	pop	{r4, r5, r6, pc}
 800b108:	2000065c 	.word	0x2000065c

0800b10c <_malloc_r>:
 800b10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b110:	1ccd      	adds	r5, r1, #3
 800b112:	f025 0503 	bic.w	r5, r5, #3
 800b116:	3508      	adds	r5, #8
 800b118:	2d0c      	cmp	r5, #12
 800b11a:	bf38      	it	cc
 800b11c:	250c      	movcc	r5, #12
 800b11e:	2d00      	cmp	r5, #0
 800b120:	4607      	mov	r7, r0
 800b122:	db01      	blt.n	800b128 <_malloc_r+0x1c>
 800b124:	42a9      	cmp	r1, r5
 800b126:	d905      	bls.n	800b134 <_malloc_r+0x28>
 800b128:	230c      	movs	r3, #12
 800b12a:	603b      	str	r3, [r7, #0]
 800b12c:	2600      	movs	r6, #0
 800b12e:	4630      	mov	r0, r6
 800b130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b208 <_malloc_r+0xfc>
 800b138:	f000 f868 	bl	800b20c <__malloc_lock>
 800b13c:	f8d8 3000 	ldr.w	r3, [r8]
 800b140:	461c      	mov	r4, r3
 800b142:	bb5c      	cbnz	r4, 800b19c <_malloc_r+0x90>
 800b144:	4629      	mov	r1, r5
 800b146:	4638      	mov	r0, r7
 800b148:	f7ff ffc0 	bl	800b0cc <sbrk_aligned>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	4604      	mov	r4, r0
 800b150:	d155      	bne.n	800b1fe <_malloc_r+0xf2>
 800b152:	f8d8 4000 	ldr.w	r4, [r8]
 800b156:	4626      	mov	r6, r4
 800b158:	2e00      	cmp	r6, #0
 800b15a:	d145      	bne.n	800b1e8 <_malloc_r+0xdc>
 800b15c:	2c00      	cmp	r4, #0
 800b15e:	d048      	beq.n	800b1f2 <_malloc_r+0xe6>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	4631      	mov	r1, r6
 800b164:	4638      	mov	r0, r7
 800b166:	eb04 0903 	add.w	r9, r4, r3
 800b16a:	f000 ffbf 	bl	800c0ec <_sbrk_r>
 800b16e:	4581      	cmp	r9, r0
 800b170:	d13f      	bne.n	800b1f2 <_malloc_r+0xe6>
 800b172:	6821      	ldr	r1, [r4, #0]
 800b174:	1a6d      	subs	r5, r5, r1
 800b176:	4629      	mov	r1, r5
 800b178:	4638      	mov	r0, r7
 800b17a:	f7ff ffa7 	bl	800b0cc <sbrk_aligned>
 800b17e:	3001      	adds	r0, #1
 800b180:	d037      	beq.n	800b1f2 <_malloc_r+0xe6>
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	442b      	add	r3, r5
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	f8d8 3000 	ldr.w	r3, [r8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d038      	beq.n	800b202 <_malloc_r+0xf6>
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	42a2      	cmp	r2, r4
 800b194:	d12b      	bne.n	800b1ee <_malloc_r+0xe2>
 800b196:	2200      	movs	r2, #0
 800b198:	605a      	str	r2, [r3, #4]
 800b19a:	e00f      	b.n	800b1bc <_malloc_r+0xb0>
 800b19c:	6822      	ldr	r2, [r4, #0]
 800b19e:	1b52      	subs	r2, r2, r5
 800b1a0:	d41f      	bmi.n	800b1e2 <_malloc_r+0xd6>
 800b1a2:	2a0b      	cmp	r2, #11
 800b1a4:	d917      	bls.n	800b1d6 <_malloc_r+0xca>
 800b1a6:	1961      	adds	r1, r4, r5
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	6025      	str	r5, [r4, #0]
 800b1ac:	bf18      	it	ne
 800b1ae:	6059      	strne	r1, [r3, #4]
 800b1b0:	6863      	ldr	r3, [r4, #4]
 800b1b2:	bf08      	it	eq
 800b1b4:	f8c8 1000 	streq.w	r1, [r8]
 800b1b8:	5162      	str	r2, [r4, r5]
 800b1ba:	604b      	str	r3, [r1, #4]
 800b1bc:	4638      	mov	r0, r7
 800b1be:	f104 060b 	add.w	r6, r4, #11
 800b1c2:	f000 f829 	bl	800b218 <__malloc_unlock>
 800b1c6:	f026 0607 	bic.w	r6, r6, #7
 800b1ca:	1d23      	adds	r3, r4, #4
 800b1cc:	1af2      	subs	r2, r6, r3
 800b1ce:	d0ae      	beq.n	800b12e <_malloc_r+0x22>
 800b1d0:	1b9b      	subs	r3, r3, r6
 800b1d2:	50a3      	str	r3, [r4, r2]
 800b1d4:	e7ab      	b.n	800b12e <_malloc_r+0x22>
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	6862      	ldr	r2, [r4, #4]
 800b1da:	d1dd      	bne.n	800b198 <_malloc_r+0x8c>
 800b1dc:	f8c8 2000 	str.w	r2, [r8]
 800b1e0:	e7ec      	b.n	800b1bc <_malloc_r+0xb0>
 800b1e2:	4623      	mov	r3, r4
 800b1e4:	6864      	ldr	r4, [r4, #4]
 800b1e6:	e7ac      	b.n	800b142 <_malloc_r+0x36>
 800b1e8:	4634      	mov	r4, r6
 800b1ea:	6876      	ldr	r6, [r6, #4]
 800b1ec:	e7b4      	b.n	800b158 <_malloc_r+0x4c>
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	e7cc      	b.n	800b18c <_malloc_r+0x80>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	603b      	str	r3, [r7, #0]
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	f000 f80e 	bl	800b218 <__malloc_unlock>
 800b1fc:	e797      	b.n	800b12e <_malloc_r+0x22>
 800b1fe:	6025      	str	r5, [r4, #0]
 800b200:	e7dc      	b.n	800b1bc <_malloc_r+0xb0>
 800b202:	605b      	str	r3, [r3, #4]
 800b204:	deff      	udf	#255	; 0xff
 800b206:	bf00      	nop
 800b208:	20000658 	.word	0x20000658

0800b20c <__malloc_lock>:
 800b20c:	4801      	ldr	r0, [pc, #4]	; (800b214 <__malloc_lock+0x8>)
 800b20e:	f7ff b87c 	b.w	800a30a <__retarget_lock_acquire_recursive>
 800b212:	bf00      	nop
 800b214:	20000654 	.word	0x20000654

0800b218 <__malloc_unlock>:
 800b218:	4801      	ldr	r0, [pc, #4]	; (800b220 <__malloc_unlock+0x8>)
 800b21a:	f7ff b877 	b.w	800a30c <__retarget_lock_release_recursive>
 800b21e:	bf00      	nop
 800b220:	20000654 	.word	0x20000654

0800b224 <_Balloc>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	69c6      	ldr	r6, [r0, #28]
 800b228:	4604      	mov	r4, r0
 800b22a:	460d      	mov	r5, r1
 800b22c:	b976      	cbnz	r6, 800b24c <_Balloc+0x28>
 800b22e:	2010      	movs	r0, #16
 800b230:	f7ff ff44 	bl	800b0bc <malloc>
 800b234:	4602      	mov	r2, r0
 800b236:	61e0      	str	r0, [r4, #28]
 800b238:	b920      	cbnz	r0, 800b244 <_Balloc+0x20>
 800b23a:	4b18      	ldr	r3, [pc, #96]	; (800b29c <_Balloc+0x78>)
 800b23c:	4818      	ldr	r0, [pc, #96]	; (800b2a0 <_Balloc+0x7c>)
 800b23e:	216b      	movs	r1, #107	; 0x6b
 800b240:	f000 ff64 	bl	800c10c <__assert_func>
 800b244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b248:	6006      	str	r6, [r0, #0]
 800b24a:	60c6      	str	r6, [r0, #12]
 800b24c:	69e6      	ldr	r6, [r4, #28]
 800b24e:	68f3      	ldr	r3, [r6, #12]
 800b250:	b183      	cbz	r3, 800b274 <_Balloc+0x50>
 800b252:	69e3      	ldr	r3, [r4, #28]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b25a:	b9b8      	cbnz	r0, 800b28c <_Balloc+0x68>
 800b25c:	2101      	movs	r1, #1
 800b25e:	fa01 f605 	lsl.w	r6, r1, r5
 800b262:	1d72      	adds	r2, r6, #5
 800b264:	0092      	lsls	r2, r2, #2
 800b266:	4620      	mov	r0, r4
 800b268:	f000 ff6e 	bl	800c148 <_calloc_r>
 800b26c:	b160      	cbz	r0, 800b288 <_Balloc+0x64>
 800b26e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b272:	e00e      	b.n	800b292 <_Balloc+0x6e>
 800b274:	2221      	movs	r2, #33	; 0x21
 800b276:	2104      	movs	r1, #4
 800b278:	4620      	mov	r0, r4
 800b27a:	f000 ff65 	bl	800c148 <_calloc_r>
 800b27e:	69e3      	ldr	r3, [r4, #28]
 800b280:	60f0      	str	r0, [r6, #12]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e4      	bne.n	800b252 <_Balloc+0x2e>
 800b288:	2000      	movs	r0, #0
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	6802      	ldr	r2, [r0, #0]
 800b28e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b292:	2300      	movs	r3, #0
 800b294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b298:	e7f7      	b.n	800b28a <_Balloc+0x66>
 800b29a:	bf00      	nop
 800b29c:	0800c816 	.word	0x0800c816
 800b2a0:	0800c896 	.word	0x0800c896

0800b2a4 <_Bfree>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	69c6      	ldr	r6, [r0, #28]
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	b976      	cbnz	r6, 800b2cc <_Bfree+0x28>
 800b2ae:	2010      	movs	r0, #16
 800b2b0:	f7ff ff04 	bl	800b0bc <malloc>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	61e8      	str	r0, [r5, #28]
 800b2b8:	b920      	cbnz	r0, 800b2c4 <_Bfree+0x20>
 800b2ba:	4b09      	ldr	r3, [pc, #36]	; (800b2e0 <_Bfree+0x3c>)
 800b2bc:	4809      	ldr	r0, [pc, #36]	; (800b2e4 <_Bfree+0x40>)
 800b2be:	218f      	movs	r1, #143	; 0x8f
 800b2c0:	f000 ff24 	bl	800c10c <__assert_func>
 800b2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2c8:	6006      	str	r6, [r0, #0]
 800b2ca:	60c6      	str	r6, [r0, #12]
 800b2cc:	b13c      	cbz	r4, 800b2de <_Bfree+0x3a>
 800b2ce:	69eb      	ldr	r3, [r5, #28]
 800b2d0:	6862      	ldr	r2, [r4, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2d8:	6021      	str	r1, [r4, #0]
 800b2da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2de:	bd70      	pop	{r4, r5, r6, pc}
 800b2e0:	0800c816 	.word	0x0800c816
 800b2e4:	0800c896 	.word	0x0800c896

0800b2e8 <__multadd>:
 800b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ec:	690d      	ldr	r5, [r1, #16]
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	461e      	mov	r6, r3
 800b2f4:	f101 0c14 	add.w	ip, r1, #20
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b2fe:	b299      	uxth	r1, r3
 800b300:	fb02 6101 	mla	r1, r2, r1, r6
 800b304:	0c1e      	lsrs	r6, r3, #16
 800b306:	0c0b      	lsrs	r3, r1, #16
 800b308:	fb02 3306 	mla	r3, r2, r6, r3
 800b30c:	b289      	uxth	r1, r1
 800b30e:	3001      	adds	r0, #1
 800b310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b314:	4285      	cmp	r5, r0
 800b316:	f84c 1b04 	str.w	r1, [ip], #4
 800b31a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b31e:	dcec      	bgt.n	800b2fa <__multadd+0x12>
 800b320:	b30e      	cbz	r6, 800b366 <__multadd+0x7e>
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	42ab      	cmp	r3, r5
 800b326:	dc19      	bgt.n	800b35c <__multadd+0x74>
 800b328:	6861      	ldr	r1, [r4, #4]
 800b32a:	4638      	mov	r0, r7
 800b32c:	3101      	adds	r1, #1
 800b32e:	f7ff ff79 	bl	800b224 <_Balloc>
 800b332:	4680      	mov	r8, r0
 800b334:	b928      	cbnz	r0, 800b342 <__multadd+0x5a>
 800b336:	4602      	mov	r2, r0
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <__multadd+0x84>)
 800b33a:	480d      	ldr	r0, [pc, #52]	; (800b370 <__multadd+0x88>)
 800b33c:	21ba      	movs	r1, #186	; 0xba
 800b33e:	f000 fee5 	bl	800c10c <__assert_func>
 800b342:	6922      	ldr	r2, [r4, #16]
 800b344:	3202      	adds	r2, #2
 800b346:	f104 010c 	add.w	r1, r4, #12
 800b34a:	0092      	lsls	r2, r2, #2
 800b34c:	300c      	adds	r0, #12
 800b34e:	f7fe ffde 	bl	800a30e <memcpy>
 800b352:	4621      	mov	r1, r4
 800b354:	4638      	mov	r0, r7
 800b356:	f7ff ffa5 	bl	800b2a4 <_Bfree>
 800b35a:	4644      	mov	r4, r8
 800b35c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b360:	3501      	adds	r5, #1
 800b362:	615e      	str	r6, [r3, #20]
 800b364:	6125      	str	r5, [r4, #16]
 800b366:	4620      	mov	r0, r4
 800b368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36c:	0800c885 	.word	0x0800c885
 800b370:	0800c896 	.word	0x0800c896

0800b374 <__hi0bits>:
 800b374:	0c03      	lsrs	r3, r0, #16
 800b376:	041b      	lsls	r3, r3, #16
 800b378:	b9d3      	cbnz	r3, 800b3b0 <__hi0bits+0x3c>
 800b37a:	0400      	lsls	r0, r0, #16
 800b37c:	2310      	movs	r3, #16
 800b37e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b382:	bf04      	itt	eq
 800b384:	0200      	lsleq	r0, r0, #8
 800b386:	3308      	addeq	r3, #8
 800b388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b38c:	bf04      	itt	eq
 800b38e:	0100      	lsleq	r0, r0, #4
 800b390:	3304      	addeq	r3, #4
 800b392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b396:	bf04      	itt	eq
 800b398:	0080      	lsleq	r0, r0, #2
 800b39a:	3302      	addeq	r3, #2
 800b39c:	2800      	cmp	r0, #0
 800b39e:	db05      	blt.n	800b3ac <__hi0bits+0x38>
 800b3a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3a4:	f103 0301 	add.w	r3, r3, #1
 800b3a8:	bf08      	it	eq
 800b3aa:	2320      	moveq	r3, #32
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	4770      	bx	lr
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e7e4      	b.n	800b37e <__hi0bits+0xa>

0800b3b4 <__lo0bits>:
 800b3b4:	6803      	ldr	r3, [r0, #0]
 800b3b6:	f013 0207 	ands.w	r2, r3, #7
 800b3ba:	d00c      	beq.n	800b3d6 <__lo0bits+0x22>
 800b3bc:	07d9      	lsls	r1, r3, #31
 800b3be:	d422      	bmi.n	800b406 <__lo0bits+0x52>
 800b3c0:	079a      	lsls	r2, r3, #30
 800b3c2:	bf49      	itett	mi
 800b3c4:	085b      	lsrmi	r3, r3, #1
 800b3c6:	089b      	lsrpl	r3, r3, #2
 800b3c8:	6003      	strmi	r3, [r0, #0]
 800b3ca:	2201      	movmi	r2, #1
 800b3cc:	bf5c      	itt	pl
 800b3ce:	6003      	strpl	r3, [r0, #0]
 800b3d0:	2202      	movpl	r2, #2
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	4770      	bx	lr
 800b3d6:	b299      	uxth	r1, r3
 800b3d8:	b909      	cbnz	r1, 800b3de <__lo0bits+0x2a>
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	2210      	movs	r2, #16
 800b3de:	b2d9      	uxtb	r1, r3
 800b3e0:	b909      	cbnz	r1, 800b3e6 <__lo0bits+0x32>
 800b3e2:	3208      	adds	r2, #8
 800b3e4:	0a1b      	lsrs	r3, r3, #8
 800b3e6:	0719      	lsls	r1, r3, #28
 800b3e8:	bf04      	itt	eq
 800b3ea:	091b      	lsreq	r3, r3, #4
 800b3ec:	3204      	addeq	r2, #4
 800b3ee:	0799      	lsls	r1, r3, #30
 800b3f0:	bf04      	itt	eq
 800b3f2:	089b      	lsreq	r3, r3, #2
 800b3f4:	3202      	addeq	r2, #2
 800b3f6:	07d9      	lsls	r1, r3, #31
 800b3f8:	d403      	bmi.n	800b402 <__lo0bits+0x4e>
 800b3fa:	085b      	lsrs	r3, r3, #1
 800b3fc:	f102 0201 	add.w	r2, r2, #1
 800b400:	d003      	beq.n	800b40a <__lo0bits+0x56>
 800b402:	6003      	str	r3, [r0, #0]
 800b404:	e7e5      	b.n	800b3d2 <__lo0bits+0x1e>
 800b406:	2200      	movs	r2, #0
 800b408:	e7e3      	b.n	800b3d2 <__lo0bits+0x1e>
 800b40a:	2220      	movs	r2, #32
 800b40c:	e7e1      	b.n	800b3d2 <__lo0bits+0x1e>
	...

0800b410 <__i2b>:
 800b410:	b510      	push	{r4, lr}
 800b412:	460c      	mov	r4, r1
 800b414:	2101      	movs	r1, #1
 800b416:	f7ff ff05 	bl	800b224 <_Balloc>
 800b41a:	4602      	mov	r2, r0
 800b41c:	b928      	cbnz	r0, 800b42a <__i2b+0x1a>
 800b41e:	4b05      	ldr	r3, [pc, #20]	; (800b434 <__i2b+0x24>)
 800b420:	4805      	ldr	r0, [pc, #20]	; (800b438 <__i2b+0x28>)
 800b422:	f240 1145 	movw	r1, #325	; 0x145
 800b426:	f000 fe71 	bl	800c10c <__assert_func>
 800b42a:	2301      	movs	r3, #1
 800b42c:	6144      	str	r4, [r0, #20]
 800b42e:	6103      	str	r3, [r0, #16]
 800b430:	bd10      	pop	{r4, pc}
 800b432:	bf00      	nop
 800b434:	0800c885 	.word	0x0800c885
 800b438:	0800c896 	.word	0x0800c896

0800b43c <__multiply>:
 800b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	4691      	mov	r9, r2
 800b442:	690a      	ldr	r2, [r1, #16]
 800b444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b448:	429a      	cmp	r2, r3
 800b44a:	bfb8      	it	lt
 800b44c:	460b      	movlt	r3, r1
 800b44e:	460c      	mov	r4, r1
 800b450:	bfbc      	itt	lt
 800b452:	464c      	movlt	r4, r9
 800b454:	4699      	movlt	r9, r3
 800b456:	6927      	ldr	r7, [r4, #16]
 800b458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	6861      	ldr	r1, [r4, #4]
 800b460:	eb07 060a 	add.w	r6, r7, sl
 800b464:	42b3      	cmp	r3, r6
 800b466:	b085      	sub	sp, #20
 800b468:	bfb8      	it	lt
 800b46a:	3101      	addlt	r1, #1
 800b46c:	f7ff feda 	bl	800b224 <_Balloc>
 800b470:	b930      	cbnz	r0, 800b480 <__multiply+0x44>
 800b472:	4602      	mov	r2, r0
 800b474:	4b44      	ldr	r3, [pc, #272]	; (800b588 <__multiply+0x14c>)
 800b476:	4845      	ldr	r0, [pc, #276]	; (800b58c <__multiply+0x150>)
 800b478:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b47c:	f000 fe46 	bl	800c10c <__assert_func>
 800b480:	f100 0514 	add.w	r5, r0, #20
 800b484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b488:	462b      	mov	r3, r5
 800b48a:	2200      	movs	r2, #0
 800b48c:	4543      	cmp	r3, r8
 800b48e:	d321      	bcc.n	800b4d4 <__multiply+0x98>
 800b490:	f104 0314 	add.w	r3, r4, #20
 800b494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b498:	f109 0314 	add.w	r3, r9, #20
 800b49c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4a0:	9202      	str	r2, [sp, #8]
 800b4a2:	1b3a      	subs	r2, r7, r4
 800b4a4:	3a15      	subs	r2, #21
 800b4a6:	f022 0203 	bic.w	r2, r2, #3
 800b4aa:	3204      	adds	r2, #4
 800b4ac:	f104 0115 	add.w	r1, r4, #21
 800b4b0:	428f      	cmp	r7, r1
 800b4b2:	bf38      	it	cc
 800b4b4:	2204      	movcc	r2, #4
 800b4b6:	9201      	str	r2, [sp, #4]
 800b4b8:	9a02      	ldr	r2, [sp, #8]
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d80c      	bhi.n	800b4da <__multiply+0x9e>
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	dd03      	ble.n	800b4cc <__multiply+0x90>
 800b4c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d05b      	beq.n	800b584 <__multiply+0x148>
 800b4cc:	6106      	str	r6, [r0, #16]
 800b4ce:	b005      	add	sp, #20
 800b4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d4:	f843 2b04 	str.w	r2, [r3], #4
 800b4d8:	e7d8      	b.n	800b48c <__multiply+0x50>
 800b4da:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4de:	f1ba 0f00 	cmp.w	sl, #0
 800b4e2:	d024      	beq.n	800b52e <__multiply+0xf2>
 800b4e4:	f104 0e14 	add.w	lr, r4, #20
 800b4e8:	46a9      	mov	r9, r5
 800b4ea:	f04f 0c00 	mov.w	ip, #0
 800b4ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4f2:	f8d9 1000 	ldr.w	r1, [r9]
 800b4f6:	fa1f fb82 	uxth.w	fp, r2
 800b4fa:	b289      	uxth	r1, r1
 800b4fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b504:	f8d9 2000 	ldr.w	r2, [r9]
 800b508:	4461      	add	r1, ip
 800b50a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b50e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b516:	b289      	uxth	r1, r1
 800b518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b51c:	4577      	cmp	r7, lr
 800b51e:	f849 1b04 	str.w	r1, [r9], #4
 800b522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b526:	d8e2      	bhi.n	800b4ee <__multiply+0xb2>
 800b528:	9a01      	ldr	r2, [sp, #4]
 800b52a:	f845 c002 	str.w	ip, [r5, r2]
 800b52e:	9a03      	ldr	r2, [sp, #12]
 800b530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b534:	3304      	adds	r3, #4
 800b536:	f1b9 0f00 	cmp.w	r9, #0
 800b53a:	d021      	beq.n	800b580 <__multiply+0x144>
 800b53c:	6829      	ldr	r1, [r5, #0]
 800b53e:	f104 0c14 	add.w	ip, r4, #20
 800b542:	46ae      	mov	lr, r5
 800b544:	f04f 0a00 	mov.w	sl, #0
 800b548:	f8bc b000 	ldrh.w	fp, [ip]
 800b54c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b550:	fb09 220b 	mla	r2, r9, fp, r2
 800b554:	4452      	add	r2, sl
 800b556:	b289      	uxth	r1, r1
 800b558:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b55c:	f84e 1b04 	str.w	r1, [lr], #4
 800b560:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b564:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b568:	f8be 1000 	ldrh.w	r1, [lr]
 800b56c:	fb09 110a 	mla	r1, r9, sl, r1
 800b570:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b574:	4567      	cmp	r7, ip
 800b576:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b57a:	d8e5      	bhi.n	800b548 <__multiply+0x10c>
 800b57c:	9a01      	ldr	r2, [sp, #4]
 800b57e:	50a9      	str	r1, [r5, r2]
 800b580:	3504      	adds	r5, #4
 800b582:	e799      	b.n	800b4b8 <__multiply+0x7c>
 800b584:	3e01      	subs	r6, #1
 800b586:	e79b      	b.n	800b4c0 <__multiply+0x84>
 800b588:	0800c885 	.word	0x0800c885
 800b58c:	0800c896 	.word	0x0800c896

0800b590 <__pow5mult>:
 800b590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b594:	4615      	mov	r5, r2
 800b596:	f012 0203 	ands.w	r2, r2, #3
 800b59a:	4606      	mov	r6, r0
 800b59c:	460f      	mov	r7, r1
 800b59e:	d007      	beq.n	800b5b0 <__pow5mult+0x20>
 800b5a0:	4c25      	ldr	r4, [pc, #148]	; (800b638 <__pow5mult+0xa8>)
 800b5a2:	3a01      	subs	r2, #1
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5aa:	f7ff fe9d 	bl	800b2e8 <__multadd>
 800b5ae:	4607      	mov	r7, r0
 800b5b0:	10ad      	asrs	r5, r5, #2
 800b5b2:	d03d      	beq.n	800b630 <__pow5mult+0xa0>
 800b5b4:	69f4      	ldr	r4, [r6, #28]
 800b5b6:	b97c      	cbnz	r4, 800b5d8 <__pow5mult+0x48>
 800b5b8:	2010      	movs	r0, #16
 800b5ba:	f7ff fd7f 	bl	800b0bc <malloc>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	61f0      	str	r0, [r6, #28]
 800b5c2:	b928      	cbnz	r0, 800b5d0 <__pow5mult+0x40>
 800b5c4:	4b1d      	ldr	r3, [pc, #116]	; (800b63c <__pow5mult+0xac>)
 800b5c6:	481e      	ldr	r0, [pc, #120]	; (800b640 <__pow5mult+0xb0>)
 800b5c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b5cc:	f000 fd9e 	bl	800c10c <__assert_func>
 800b5d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5d4:	6004      	str	r4, [r0, #0]
 800b5d6:	60c4      	str	r4, [r0, #12]
 800b5d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b5dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5e0:	b94c      	cbnz	r4, 800b5f6 <__pow5mult+0x66>
 800b5e2:	f240 2171 	movw	r1, #625	; 0x271
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f7ff ff12 	bl	800b410 <__i2b>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	6003      	str	r3, [r0, #0]
 800b5f6:	f04f 0900 	mov.w	r9, #0
 800b5fa:	07eb      	lsls	r3, r5, #31
 800b5fc:	d50a      	bpl.n	800b614 <__pow5mult+0x84>
 800b5fe:	4639      	mov	r1, r7
 800b600:	4622      	mov	r2, r4
 800b602:	4630      	mov	r0, r6
 800b604:	f7ff ff1a 	bl	800b43c <__multiply>
 800b608:	4639      	mov	r1, r7
 800b60a:	4680      	mov	r8, r0
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff fe49 	bl	800b2a4 <_Bfree>
 800b612:	4647      	mov	r7, r8
 800b614:	106d      	asrs	r5, r5, #1
 800b616:	d00b      	beq.n	800b630 <__pow5mult+0xa0>
 800b618:	6820      	ldr	r0, [r4, #0]
 800b61a:	b938      	cbnz	r0, 800b62c <__pow5mult+0x9c>
 800b61c:	4622      	mov	r2, r4
 800b61e:	4621      	mov	r1, r4
 800b620:	4630      	mov	r0, r6
 800b622:	f7ff ff0b 	bl	800b43c <__multiply>
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	f8c0 9000 	str.w	r9, [r0]
 800b62c:	4604      	mov	r4, r0
 800b62e:	e7e4      	b.n	800b5fa <__pow5mult+0x6a>
 800b630:	4638      	mov	r0, r7
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	bf00      	nop
 800b638:	0800c9e0 	.word	0x0800c9e0
 800b63c:	0800c816 	.word	0x0800c816
 800b640:	0800c896 	.word	0x0800c896

0800b644 <__lshift>:
 800b644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b648:	460c      	mov	r4, r1
 800b64a:	6849      	ldr	r1, [r1, #4]
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	4607      	mov	r7, r0
 800b656:	4691      	mov	r9, r2
 800b658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b65c:	f108 0601 	add.w	r6, r8, #1
 800b660:	42b3      	cmp	r3, r6
 800b662:	db0b      	blt.n	800b67c <__lshift+0x38>
 800b664:	4638      	mov	r0, r7
 800b666:	f7ff fddd 	bl	800b224 <_Balloc>
 800b66a:	4605      	mov	r5, r0
 800b66c:	b948      	cbnz	r0, 800b682 <__lshift+0x3e>
 800b66e:	4602      	mov	r2, r0
 800b670:	4b28      	ldr	r3, [pc, #160]	; (800b714 <__lshift+0xd0>)
 800b672:	4829      	ldr	r0, [pc, #164]	; (800b718 <__lshift+0xd4>)
 800b674:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b678:	f000 fd48 	bl	800c10c <__assert_func>
 800b67c:	3101      	adds	r1, #1
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	e7ee      	b.n	800b660 <__lshift+0x1c>
 800b682:	2300      	movs	r3, #0
 800b684:	f100 0114 	add.w	r1, r0, #20
 800b688:	f100 0210 	add.w	r2, r0, #16
 800b68c:	4618      	mov	r0, r3
 800b68e:	4553      	cmp	r3, sl
 800b690:	db33      	blt.n	800b6fa <__lshift+0xb6>
 800b692:	6920      	ldr	r0, [r4, #16]
 800b694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b698:	f104 0314 	add.w	r3, r4, #20
 800b69c:	f019 091f 	ands.w	r9, r9, #31
 800b6a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6a8:	d02b      	beq.n	800b702 <__lshift+0xbe>
 800b6aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b6ae:	468a      	mov	sl, r1
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b6b8:	4310      	orrs	r0, r2
 800b6ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c2:	459c      	cmp	ip, r3
 800b6c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6c8:	d8f3      	bhi.n	800b6b2 <__lshift+0x6e>
 800b6ca:	ebac 0304 	sub.w	r3, ip, r4
 800b6ce:	3b15      	subs	r3, #21
 800b6d0:	f023 0303 	bic.w	r3, r3, #3
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	f104 0015 	add.w	r0, r4, #21
 800b6da:	4584      	cmp	ip, r0
 800b6dc:	bf38      	it	cc
 800b6de:	2304      	movcc	r3, #4
 800b6e0:	50ca      	str	r2, [r1, r3]
 800b6e2:	b10a      	cbz	r2, 800b6e8 <__lshift+0xa4>
 800b6e4:	f108 0602 	add.w	r6, r8, #2
 800b6e8:	3e01      	subs	r6, #1
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	612e      	str	r6, [r5, #16]
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	f7ff fdd8 	bl	800b2a4 <_Bfree>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6fe:	3301      	adds	r3, #1
 800b700:	e7c5      	b.n	800b68e <__lshift+0x4a>
 800b702:	3904      	subs	r1, #4
 800b704:	f853 2b04 	ldr.w	r2, [r3], #4
 800b708:	f841 2f04 	str.w	r2, [r1, #4]!
 800b70c:	459c      	cmp	ip, r3
 800b70e:	d8f9      	bhi.n	800b704 <__lshift+0xc0>
 800b710:	e7ea      	b.n	800b6e8 <__lshift+0xa4>
 800b712:	bf00      	nop
 800b714:	0800c885 	.word	0x0800c885
 800b718:	0800c896 	.word	0x0800c896

0800b71c <__mcmp>:
 800b71c:	b530      	push	{r4, r5, lr}
 800b71e:	6902      	ldr	r2, [r0, #16]
 800b720:	690c      	ldr	r4, [r1, #16]
 800b722:	1b12      	subs	r2, r2, r4
 800b724:	d10e      	bne.n	800b744 <__mcmp+0x28>
 800b726:	f100 0314 	add.w	r3, r0, #20
 800b72a:	3114      	adds	r1, #20
 800b72c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b730:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b734:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b738:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b73c:	42a5      	cmp	r5, r4
 800b73e:	d003      	beq.n	800b748 <__mcmp+0x2c>
 800b740:	d305      	bcc.n	800b74e <__mcmp+0x32>
 800b742:	2201      	movs	r2, #1
 800b744:	4610      	mov	r0, r2
 800b746:	bd30      	pop	{r4, r5, pc}
 800b748:	4283      	cmp	r3, r0
 800b74a:	d3f3      	bcc.n	800b734 <__mcmp+0x18>
 800b74c:	e7fa      	b.n	800b744 <__mcmp+0x28>
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	e7f7      	b.n	800b744 <__mcmp+0x28>

0800b754 <__mdiff>:
 800b754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	460c      	mov	r4, r1
 800b75a:	4606      	mov	r6, r0
 800b75c:	4611      	mov	r1, r2
 800b75e:	4620      	mov	r0, r4
 800b760:	4690      	mov	r8, r2
 800b762:	f7ff ffdb 	bl	800b71c <__mcmp>
 800b766:	1e05      	subs	r5, r0, #0
 800b768:	d110      	bne.n	800b78c <__mdiff+0x38>
 800b76a:	4629      	mov	r1, r5
 800b76c:	4630      	mov	r0, r6
 800b76e:	f7ff fd59 	bl	800b224 <_Balloc>
 800b772:	b930      	cbnz	r0, 800b782 <__mdiff+0x2e>
 800b774:	4b3a      	ldr	r3, [pc, #232]	; (800b860 <__mdiff+0x10c>)
 800b776:	4602      	mov	r2, r0
 800b778:	f240 2137 	movw	r1, #567	; 0x237
 800b77c:	4839      	ldr	r0, [pc, #228]	; (800b864 <__mdiff+0x110>)
 800b77e:	f000 fcc5 	bl	800c10c <__assert_func>
 800b782:	2301      	movs	r3, #1
 800b784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	bfa4      	itt	ge
 800b78e:	4643      	movge	r3, r8
 800b790:	46a0      	movge	r8, r4
 800b792:	4630      	mov	r0, r6
 800b794:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b798:	bfa6      	itte	ge
 800b79a:	461c      	movge	r4, r3
 800b79c:	2500      	movge	r5, #0
 800b79e:	2501      	movlt	r5, #1
 800b7a0:	f7ff fd40 	bl	800b224 <_Balloc>
 800b7a4:	b920      	cbnz	r0, 800b7b0 <__mdiff+0x5c>
 800b7a6:	4b2e      	ldr	r3, [pc, #184]	; (800b860 <__mdiff+0x10c>)
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	f240 2145 	movw	r1, #581	; 0x245
 800b7ae:	e7e5      	b.n	800b77c <__mdiff+0x28>
 800b7b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7b4:	6926      	ldr	r6, [r4, #16]
 800b7b6:	60c5      	str	r5, [r0, #12]
 800b7b8:	f104 0914 	add.w	r9, r4, #20
 800b7bc:	f108 0514 	add.w	r5, r8, #20
 800b7c0:	f100 0e14 	add.w	lr, r0, #20
 800b7c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7cc:	f108 0210 	add.w	r2, r8, #16
 800b7d0:	46f2      	mov	sl, lr
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7dc:	fa11 f88b 	uxtah	r8, r1, fp
 800b7e0:	b299      	uxth	r1, r3
 800b7e2:	0c1b      	lsrs	r3, r3, #16
 800b7e4:	eba8 0801 	sub.w	r8, r8, r1
 800b7e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7f0:	fa1f f888 	uxth.w	r8, r8
 800b7f4:	1419      	asrs	r1, r3, #16
 800b7f6:	454e      	cmp	r6, r9
 800b7f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7fc:	f84a 3b04 	str.w	r3, [sl], #4
 800b800:	d8e8      	bhi.n	800b7d4 <__mdiff+0x80>
 800b802:	1b33      	subs	r3, r6, r4
 800b804:	3b15      	subs	r3, #21
 800b806:	f023 0303 	bic.w	r3, r3, #3
 800b80a:	3304      	adds	r3, #4
 800b80c:	3415      	adds	r4, #21
 800b80e:	42a6      	cmp	r6, r4
 800b810:	bf38      	it	cc
 800b812:	2304      	movcc	r3, #4
 800b814:	441d      	add	r5, r3
 800b816:	4473      	add	r3, lr
 800b818:	469e      	mov	lr, r3
 800b81a:	462e      	mov	r6, r5
 800b81c:	4566      	cmp	r6, ip
 800b81e:	d30e      	bcc.n	800b83e <__mdiff+0xea>
 800b820:	f10c 0203 	add.w	r2, ip, #3
 800b824:	1b52      	subs	r2, r2, r5
 800b826:	f022 0203 	bic.w	r2, r2, #3
 800b82a:	3d03      	subs	r5, #3
 800b82c:	45ac      	cmp	ip, r5
 800b82e:	bf38      	it	cc
 800b830:	2200      	movcc	r2, #0
 800b832:	4413      	add	r3, r2
 800b834:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b838:	b17a      	cbz	r2, 800b85a <__mdiff+0x106>
 800b83a:	6107      	str	r7, [r0, #16]
 800b83c:	e7a4      	b.n	800b788 <__mdiff+0x34>
 800b83e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b842:	fa11 f288 	uxtah	r2, r1, r8
 800b846:	1414      	asrs	r4, r2, #16
 800b848:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b84c:	b292      	uxth	r2, r2
 800b84e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b852:	f84e 2b04 	str.w	r2, [lr], #4
 800b856:	1421      	asrs	r1, r4, #16
 800b858:	e7e0      	b.n	800b81c <__mdiff+0xc8>
 800b85a:	3f01      	subs	r7, #1
 800b85c:	e7ea      	b.n	800b834 <__mdiff+0xe0>
 800b85e:	bf00      	nop
 800b860:	0800c885 	.word	0x0800c885
 800b864:	0800c896 	.word	0x0800c896

0800b868 <__d2b>:
 800b868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b86c:	460f      	mov	r7, r1
 800b86e:	2101      	movs	r1, #1
 800b870:	ec59 8b10 	vmov	r8, r9, d0
 800b874:	4616      	mov	r6, r2
 800b876:	f7ff fcd5 	bl	800b224 <_Balloc>
 800b87a:	4604      	mov	r4, r0
 800b87c:	b930      	cbnz	r0, 800b88c <__d2b+0x24>
 800b87e:	4602      	mov	r2, r0
 800b880:	4b24      	ldr	r3, [pc, #144]	; (800b914 <__d2b+0xac>)
 800b882:	4825      	ldr	r0, [pc, #148]	; (800b918 <__d2b+0xb0>)
 800b884:	f240 310f 	movw	r1, #783	; 0x30f
 800b888:	f000 fc40 	bl	800c10c <__assert_func>
 800b88c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b894:	bb2d      	cbnz	r5, 800b8e2 <__d2b+0x7a>
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	f1b8 0300 	subs.w	r3, r8, #0
 800b89c:	d026      	beq.n	800b8ec <__d2b+0x84>
 800b89e:	4668      	mov	r0, sp
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	f7ff fd87 	bl	800b3b4 <__lo0bits>
 800b8a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8aa:	b1e8      	cbz	r0, 800b8e8 <__d2b+0x80>
 800b8ac:	f1c0 0320 	rsb	r3, r0, #32
 800b8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	40c2      	lsrs	r2, r0
 800b8b8:	6163      	str	r3, [r4, #20]
 800b8ba:	9201      	str	r2, [sp, #4]
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	61a3      	str	r3, [r4, #24]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	bf14      	ite	ne
 800b8c4:	2202      	movne	r2, #2
 800b8c6:	2201      	moveq	r2, #1
 800b8c8:	6122      	str	r2, [r4, #16]
 800b8ca:	b1bd      	cbz	r5, 800b8fc <__d2b+0x94>
 800b8cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8d0:	4405      	add	r5, r0
 800b8d2:	603d      	str	r5, [r7, #0]
 800b8d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8d8:	6030      	str	r0, [r6, #0]
 800b8da:	4620      	mov	r0, r4
 800b8dc:	b003      	add	sp, #12
 800b8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8e6:	e7d6      	b.n	800b896 <__d2b+0x2e>
 800b8e8:	6161      	str	r1, [r4, #20]
 800b8ea:	e7e7      	b.n	800b8bc <__d2b+0x54>
 800b8ec:	a801      	add	r0, sp, #4
 800b8ee:	f7ff fd61 	bl	800b3b4 <__lo0bits>
 800b8f2:	9b01      	ldr	r3, [sp, #4]
 800b8f4:	6163      	str	r3, [r4, #20]
 800b8f6:	3020      	adds	r0, #32
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	e7e5      	b.n	800b8c8 <__d2b+0x60>
 800b8fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b904:	6038      	str	r0, [r7, #0]
 800b906:	6918      	ldr	r0, [r3, #16]
 800b908:	f7ff fd34 	bl	800b374 <__hi0bits>
 800b90c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b910:	e7e2      	b.n	800b8d8 <__d2b+0x70>
 800b912:	bf00      	nop
 800b914:	0800c885 	.word	0x0800c885
 800b918:	0800c896 	.word	0x0800c896

0800b91c <__ssputs_r>:
 800b91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b920:	688e      	ldr	r6, [r1, #8]
 800b922:	461f      	mov	r7, r3
 800b924:	42be      	cmp	r6, r7
 800b926:	680b      	ldr	r3, [r1, #0]
 800b928:	4682      	mov	sl, r0
 800b92a:	460c      	mov	r4, r1
 800b92c:	4690      	mov	r8, r2
 800b92e:	d82c      	bhi.n	800b98a <__ssputs_r+0x6e>
 800b930:	898a      	ldrh	r2, [r1, #12]
 800b932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b936:	d026      	beq.n	800b986 <__ssputs_r+0x6a>
 800b938:	6965      	ldr	r5, [r4, #20]
 800b93a:	6909      	ldr	r1, [r1, #16]
 800b93c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b940:	eba3 0901 	sub.w	r9, r3, r1
 800b944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b948:	1c7b      	adds	r3, r7, #1
 800b94a:	444b      	add	r3, r9
 800b94c:	106d      	asrs	r5, r5, #1
 800b94e:	429d      	cmp	r5, r3
 800b950:	bf38      	it	cc
 800b952:	461d      	movcc	r5, r3
 800b954:	0553      	lsls	r3, r2, #21
 800b956:	d527      	bpl.n	800b9a8 <__ssputs_r+0x8c>
 800b958:	4629      	mov	r1, r5
 800b95a:	f7ff fbd7 	bl	800b10c <_malloc_r>
 800b95e:	4606      	mov	r6, r0
 800b960:	b360      	cbz	r0, 800b9bc <__ssputs_r+0xa0>
 800b962:	6921      	ldr	r1, [r4, #16]
 800b964:	464a      	mov	r2, r9
 800b966:	f7fe fcd2 	bl	800a30e <memcpy>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	6126      	str	r6, [r4, #16]
 800b978:	6165      	str	r5, [r4, #20]
 800b97a:	444e      	add	r6, r9
 800b97c:	eba5 0509 	sub.w	r5, r5, r9
 800b980:	6026      	str	r6, [r4, #0]
 800b982:	60a5      	str	r5, [r4, #8]
 800b984:	463e      	mov	r6, r7
 800b986:	42be      	cmp	r6, r7
 800b988:	d900      	bls.n	800b98c <__ssputs_r+0x70>
 800b98a:	463e      	mov	r6, r7
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	4632      	mov	r2, r6
 800b990:	4641      	mov	r1, r8
 800b992:	f000 fb6f 	bl	800c074 <memmove>
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	1b9b      	subs	r3, r3, r6
 800b99a:	60a3      	str	r3, [r4, #8]
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	4433      	add	r3, r6
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a8:	462a      	mov	r2, r5
 800b9aa:	f000 fbf5 	bl	800c198 <_realloc_r>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1e0      	bne.n	800b976 <__ssputs_r+0x5a>
 800b9b4:	6921      	ldr	r1, [r4, #16]
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	f7ff fb34 	bl	800b024 <_free_r>
 800b9bc:	230c      	movs	r3, #12
 800b9be:	f8ca 3000 	str.w	r3, [sl]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c8:	81a3      	strh	r3, [r4, #12]
 800b9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ce:	e7e9      	b.n	800b9a4 <__ssputs_r+0x88>

0800b9d0 <_svfiprintf_r>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	4698      	mov	r8, r3
 800b9d6:	898b      	ldrh	r3, [r1, #12]
 800b9d8:	061b      	lsls	r3, r3, #24
 800b9da:	b09d      	sub	sp, #116	; 0x74
 800b9dc:	4607      	mov	r7, r0
 800b9de:	460d      	mov	r5, r1
 800b9e0:	4614      	mov	r4, r2
 800b9e2:	d50e      	bpl.n	800ba02 <_svfiprintf_r+0x32>
 800b9e4:	690b      	ldr	r3, [r1, #16]
 800b9e6:	b963      	cbnz	r3, 800ba02 <_svfiprintf_r+0x32>
 800b9e8:	2140      	movs	r1, #64	; 0x40
 800b9ea:	f7ff fb8f 	bl	800b10c <_malloc_r>
 800b9ee:	6028      	str	r0, [r5, #0]
 800b9f0:	6128      	str	r0, [r5, #16]
 800b9f2:	b920      	cbnz	r0, 800b9fe <_svfiprintf_r+0x2e>
 800b9f4:	230c      	movs	r3, #12
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fc:	e0d0      	b.n	800bba0 <_svfiprintf_r+0x1d0>
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	616b      	str	r3, [r5, #20]
 800ba02:	2300      	movs	r3, #0
 800ba04:	9309      	str	r3, [sp, #36]	; 0x24
 800ba06:	2320      	movs	r3, #32
 800ba08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba10:	2330      	movs	r3, #48	; 0x30
 800ba12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbb8 <_svfiprintf_r+0x1e8>
 800ba16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba1a:	f04f 0901 	mov.w	r9, #1
 800ba1e:	4623      	mov	r3, r4
 800ba20:	469a      	mov	sl, r3
 800ba22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba26:	b10a      	cbz	r2, 800ba2c <_svfiprintf_r+0x5c>
 800ba28:	2a25      	cmp	r2, #37	; 0x25
 800ba2a:	d1f9      	bne.n	800ba20 <_svfiprintf_r+0x50>
 800ba2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba30:	d00b      	beq.n	800ba4a <_svfiprintf_r+0x7a>
 800ba32:	465b      	mov	r3, fp
 800ba34:	4622      	mov	r2, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	4638      	mov	r0, r7
 800ba3a:	f7ff ff6f 	bl	800b91c <__ssputs_r>
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f000 80a9 	beq.w	800bb96 <_svfiprintf_r+0x1c6>
 800ba44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba46:	445a      	add	r2, fp
 800ba48:	9209      	str	r2, [sp, #36]	; 0x24
 800ba4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f000 80a1 	beq.w	800bb96 <_svfiprintf_r+0x1c6>
 800ba54:	2300      	movs	r3, #0
 800ba56:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba5e:	f10a 0a01 	add.w	sl, sl, #1
 800ba62:	9304      	str	r3, [sp, #16]
 800ba64:	9307      	str	r3, [sp, #28]
 800ba66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba6c:	4654      	mov	r4, sl
 800ba6e:	2205      	movs	r2, #5
 800ba70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba74:	4850      	ldr	r0, [pc, #320]	; (800bbb8 <_svfiprintf_r+0x1e8>)
 800ba76:	f7f4 fbab 	bl	80001d0 <memchr>
 800ba7a:	9a04      	ldr	r2, [sp, #16]
 800ba7c:	b9d8      	cbnz	r0, 800bab6 <_svfiprintf_r+0xe6>
 800ba7e:	06d0      	lsls	r0, r2, #27
 800ba80:	bf44      	itt	mi
 800ba82:	2320      	movmi	r3, #32
 800ba84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba88:	0711      	lsls	r1, r2, #28
 800ba8a:	bf44      	itt	mi
 800ba8c:	232b      	movmi	r3, #43	; 0x2b
 800ba8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba92:	f89a 3000 	ldrb.w	r3, [sl]
 800ba96:	2b2a      	cmp	r3, #42	; 0x2a
 800ba98:	d015      	beq.n	800bac6 <_svfiprintf_r+0xf6>
 800ba9a:	9a07      	ldr	r2, [sp, #28]
 800ba9c:	4654      	mov	r4, sl
 800ba9e:	2000      	movs	r0, #0
 800baa0:	f04f 0c0a 	mov.w	ip, #10
 800baa4:	4621      	mov	r1, r4
 800baa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baaa:	3b30      	subs	r3, #48	; 0x30
 800baac:	2b09      	cmp	r3, #9
 800baae:	d94d      	bls.n	800bb4c <_svfiprintf_r+0x17c>
 800bab0:	b1b0      	cbz	r0, 800bae0 <_svfiprintf_r+0x110>
 800bab2:	9207      	str	r2, [sp, #28]
 800bab4:	e014      	b.n	800bae0 <_svfiprintf_r+0x110>
 800bab6:	eba0 0308 	sub.w	r3, r0, r8
 800baba:	fa09 f303 	lsl.w	r3, r9, r3
 800babe:	4313      	orrs	r3, r2
 800bac0:	9304      	str	r3, [sp, #16]
 800bac2:	46a2      	mov	sl, r4
 800bac4:	e7d2      	b.n	800ba6c <_svfiprintf_r+0x9c>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	1d19      	adds	r1, r3, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	9103      	str	r1, [sp, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfbb      	ittet	lt
 800bad2:	425b      	neglt	r3, r3
 800bad4:	f042 0202 	orrlt.w	r2, r2, #2
 800bad8:	9307      	strge	r3, [sp, #28]
 800bada:	9307      	strlt	r3, [sp, #28]
 800badc:	bfb8      	it	lt
 800bade:	9204      	strlt	r2, [sp, #16]
 800bae0:	7823      	ldrb	r3, [r4, #0]
 800bae2:	2b2e      	cmp	r3, #46	; 0x2e
 800bae4:	d10c      	bne.n	800bb00 <_svfiprintf_r+0x130>
 800bae6:	7863      	ldrb	r3, [r4, #1]
 800bae8:	2b2a      	cmp	r3, #42	; 0x2a
 800baea:	d134      	bne.n	800bb56 <_svfiprintf_r+0x186>
 800baec:	9b03      	ldr	r3, [sp, #12]
 800baee:	1d1a      	adds	r2, r3, #4
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	9203      	str	r2, [sp, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	bfb8      	it	lt
 800baf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bafc:	3402      	adds	r4, #2
 800bafe:	9305      	str	r3, [sp, #20]
 800bb00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bbc8 <_svfiprintf_r+0x1f8>
 800bb04:	7821      	ldrb	r1, [r4, #0]
 800bb06:	2203      	movs	r2, #3
 800bb08:	4650      	mov	r0, sl
 800bb0a:	f7f4 fb61 	bl	80001d0 <memchr>
 800bb0e:	b138      	cbz	r0, 800bb20 <_svfiprintf_r+0x150>
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	eba0 000a 	sub.w	r0, r0, sl
 800bb16:	2240      	movs	r2, #64	; 0x40
 800bb18:	4082      	lsls	r2, r0
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	3401      	adds	r4, #1
 800bb1e:	9304      	str	r3, [sp, #16]
 800bb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb24:	4825      	ldr	r0, [pc, #148]	; (800bbbc <_svfiprintf_r+0x1ec>)
 800bb26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb2a:	2206      	movs	r2, #6
 800bb2c:	f7f4 fb50 	bl	80001d0 <memchr>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d038      	beq.n	800bba6 <_svfiprintf_r+0x1d6>
 800bb34:	4b22      	ldr	r3, [pc, #136]	; (800bbc0 <_svfiprintf_r+0x1f0>)
 800bb36:	bb1b      	cbnz	r3, 800bb80 <_svfiprintf_r+0x1b0>
 800bb38:	9b03      	ldr	r3, [sp, #12]
 800bb3a:	3307      	adds	r3, #7
 800bb3c:	f023 0307 	bic.w	r3, r3, #7
 800bb40:	3308      	adds	r3, #8
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb46:	4433      	add	r3, r6
 800bb48:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4a:	e768      	b.n	800ba1e <_svfiprintf_r+0x4e>
 800bb4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb50:	460c      	mov	r4, r1
 800bb52:	2001      	movs	r0, #1
 800bb54:	e7a6      	b.n	800baa4 <_svfiprintf_r+0xd4>
 800bb56:	2300      	movs	r3, #0
 800bb58:	3401      	adds	r4, #1
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f04f 0c0a 	mov.w	ip, #10
 800bb62:	4620      	mov	r0, r4
 800bb64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb68:	3a30      	subs	r2, #48	; 0x30
 800bb6a:	2a09      	cmp	r2, #9
 800bb6c:	d903      	bls.n	800bb76 <_svfiprintf_r+0x1a6>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0c6      	beq.n	800bb00 <_svfiprintf_r+0x130>
 800bb72:	9105      	str	r1, [sp, #20]
 800bb74:	e7c4      	b.n	800bb00 <_svfiprintf_r+0x130>
 800bb76:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	e7f0      	b.n	800bb62 <_svfiprintf_r+0x192>
 800bb80:	ab03      	add	r3, sp, #12
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	462a      	mov	r2, r5
 800bb86:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <_svfiprintf_r+0x1f4>)
 800bb88:	a904      	add	r1, sp, #16
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	f7fd fd52 	bl	8009634 <_printf_float>
 800bb90:	1c42      	adds	r2, r0, #1
 800bb92:	4606      	mov	r6, r0
 800bb94:	d1d6      	bne.n	800bb44 <_svfiprintf_r+0x174>
 800bb96:	89ab      	ldrh	r3, [r5, #12]
 800bb98:	065b      	lsls	r3, r3, #25
 800bb9a:	f53f af2d 	bmi.w	800b9f8 <_svfiprintf_r+0x28>
 800bb9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bba0:	b01d      	add	sp, #116	; 0x74
 800bba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba6:	ab03      	add	r3, sp, #12
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	462a      	mov	r2, r5
 800bbac:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <_svfiprintf_r+0x1f4>)
 800bbae:	a904      	add	r1, sp, #16
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f7fd ffe3 	bl	8009b7c <_printf_i>
 800bbb6:	e7eb      	b.n	800bb90 <_svfiprintf_r+0x1c0>
 800bbb8:	0800c9ec 	.word	0x0800c9ec
 800bbbc:	0800c9f6 	.word	0x0800c9f6
 800bbc0:	08009635 	.word	0x08009635
 800bbc4:	0800b91d 	.word	0x0800b91d
 800bbc8:	0800c9f2 	.word	0x0800c9f2

0800bbcc <__sfputc_r>:
 800bbcc:	6893      	ldr	r3, [r2, #8]
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	b410      	push	{r4}
 800bbd4:	6093      	str	r3, [r2, #8]
 800bbd6:	da08      	bge.n	800bbea <__sfputc_r+0x1e>
 800bbd8:	6994      	ldr	r4, [r2, #24]
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	db01      	blt.n	800bbe2 <__sfputc_r+0x16>
 800bbde:	290a      	cmp	r1, #10
 800bbe0:	d103      	bne.n	800bbea <__sfputc_r+0x1e>
 800bbe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbe6:	f7fe ba7e 	b.w	800a0e6 <__swbuf_r>
 800bbea:	6813      	ldr	r3, [r2, #0]
 800bbec:	1c58      	adds	r0, r3, #1
 800bbee:	6010      	str	r0, [r2, #0]
 800bbf0:	7019      	strb	r1, [r3, #0]
 800bbf2:	4608      	mov	r0, r1
 800bbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <__sfputs_r>:
 800bbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	460f      	mov	r7, r1
 800bc00:	4614      	mov	r4, r2
 800bc02:	18d5      	adds	r5, r2, r3
 800bc04:	42ac      	cmp	r4, r5
 800bc06:	d101      	bne.n	800bc0c <__sfputs_r+0x12>
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e007      	b.n	800bc1c <__sfputs_r+0x22>
 800bc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc10:	463a      	mov	r2, r7
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ffda 	bl	800bbcc <__sfputc_r>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d1f3      	bne.n	800bc04 <__sfputs_r+0xa>
 800bc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc20 <_vfiprintf_r>:
 800bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	460d      	mov	r5, r1
 800bc26:	b09d      	sub	sp, #116	; 0x74
 800bc28:	4614      	mov	r4, r2
 800bc2a:	4698      	mov	r8, r3
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	b118      	cbz	r0, 800bc38 <_vfiprintf_r+0x18>
 800bc30:	6a03      	ldr	r3, [r0, #32]
 800bc32:	b90b      	cbnz	r3, 800bc38 <_vfiprintf_r+0x18>
 800bc34:	f7fe f950 	bl	8009ed8 <__sinit>
 800bc38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc3a:	07d9      	lsls	r1, r3, #31
 800bc3c:	d405      	bmi.n	800bc4a <_vfiprintf_r+0x2a>
 800bc3e:	89ab      	ldrh	r3, [r5, #12]
 800bc40:	059a      	lsls	r2, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_vfiprintf_r+0x2a>
 800bc44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc46:	f7fe fb60 	bl	800a30a <__retarget_lock_acquire_recursive>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	071b      	lsls	r3, r3, #28
 800bc4e:	d501      	bpl.n	800bc54 <_vfiprintf_r+0x34>
 800bc50:	692b      	ldr	r3, [r5, #16]
 800bc52:	b99b      	cbnz	r3, 800bc7c <_vfiprintf_r+0x5c>
 800bc54:	4629      	mov	r1, r5
 800bc56:	4630      	mov	r0, r6
 800bc58:	f7fe fa82 	bl	800a160 <__swsetup_r>
 800bc5c:	b170      	cbz	r0, 800bc7c <_vfiprintf_r+0x5c>
 800bc5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc60:	07dc      	lsls	r4, r3, #31
 800bc62:	d504      	bpl.n	800bc6e <_vfiprintf_r+0x4e>
 800bc64:	f04f 30ff 	mov.w	r0, #4294967295
 800bc68:	b01d      	add	sp, #116	; 0x74
 800bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	0598      	lsls	r0, r3, #22
 800bc72:	d4f7      	bmi.n	800bc64 <_vfiprintf_r+0x44>
 800bc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc76:	f7fe fb49 	bl	800a30c <__retarget_lock_release_recursive>
 800bc7a:	e7f3      	b.n	800bc64 <_vfiprintf_r+0x44>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc80:	2320      	movs	r3, #32
 800bc82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc86:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc8a:	2330      	movs	r3, #48	; 0x30
 800bc8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be40 <_vfiprintf_r+0x220>
 800bc90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc94:	f04f 0901 	mov.w	r9, #1
 800bc98:	4623      	mov	r3, r4
 800bc9a:	469a      	mov	sl, r3
 800bc9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bca0:	b10a      	cbz	r2, 800bca6 <_vfiprintf_r+0x86>
 800bca2:	2a25      	cmp	r2, #37	; 0x25
 800bca4:	d1f9      	bne.n	800bc9a <_vfiprintf_r+0x7a>
 800bca6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcaa:	d00b      	beq.n	800bcc4 <_vfiprintf_r+0xa4>
 800bcac:	465b      	mov	r3, fp
 800bcae:	4622      	mov	r2, r4
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	f7ff ffa1 	bl	800bbfa <__sfputs_r>
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f000 80a9 	beq.w	800be10 <_vfiprintf_r+0x1f0>
 800bcbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc0:	445a      	add	r2, fp
 800bcc2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcc4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	f000 80a1 	beq.w	800be10 <_vfiprintf_r+0x1f0>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcd8:	f10a 0a01 	add.w	sl, sl, #1
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	9307      	str	r3, [sp, #28]
 800bce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bce4:	931a      	str	r3, [sp, #104]	; 0x68
 800bce6:	4654      	mov	r4, sl
 800bce8:	2205      	movs	r2, #5
 800bcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcee:	4854      	ldr	r0, [pc, #336]	; (800be40 <_vfiprintf_r+0x220>)
 800bcf0:	f7f4 fa6e 	bl	80001d0 <memchr>
 800bcf4:	9a04      	ldr	r2, [sp, #16]
 800bcf6:	b9d8      	cbnz	r0, 800bd30 <_vfiprintf_r+0x110>
 800bcf8:	06d1      	lsls	r1, r2, #27
 800bcfa:	bf44      	itt	mi
 800bcfc:	2320      	movmi	r3, #32
 800bcfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd02:	0713      	lsls	r3, r2, #28
 800bd04:	bf44      	itt	mi
 800bd06:	232b      	movmi	r3, #43	; 0x2b
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd10:	2b2a      	cmp	r3, #42	; 0x2a
 800bd12:	d015      	beq.n	800bd40 <_vfiprintf_r+0x120>
 800bd14:	9a07      	ldr	r2, [sp, #28]
 800bd16:	4654      	mov	r4, sl
 800bd18:	2000      	movs	r0, #0
 800bd1a:	f04f 0c0a 	mov.w	ip, #10
 800bd1e:	4621      	mov	r1, r4
 800bd20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd24:	3b30      	subs	r3, #48	; 0x30
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	d94d      	bls.n	800bdc6 <_vfiprintf_r+0x1a6>
 800bd2a:	b1b0      	cbz	r0, 800bd5a <_vfiprintf_r+0x13a>
 800bd2c:	9207      	str	r2, [sp, #28]
 800bd2e:	e014      	b.n	800bd5a <_vfiprintf_r+0x13a>
 800bd30:	eba0 0308 	sub.w	r3, r0, r8
 800bd34:	fa09 f303 	lsl.w	r3, r9, r3
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	9304      	str	r3, [sp, #16]
 800bd3c:	46a2      	mov	sl, r4
 800bd3e:	e7d2      	b.n	800bce6 <_vfiprintf_r+0xc6>
 800bd40:	9b03      	ldr	r3, [sp, #12]
 800bd42:	1d19      	adds	r1, r3, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	9103      	str	r1, [sp, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	bfbb      	ittet	lt
 800bd4c:	425b      	neglt	r3, r3
 800bd4e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd52:	9307      	strge	r3, [sp, #28]
 800bd54:	9307      	strlt	r3, [sp, #28]
 800bd56:	bfb8      	it	lt
 800bd58:	9204      	strlt	r2, [sp, #16]
 800bd5a:	7823      	ldrb	r3, [r4, #0]
 800bd5c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd5e:	d10c      	bne.n	800bd7a <_vfiprintf_r+0x15a>
 800bd60:	7863      	ldrb	r3, [r4, #1]
 800bd62:	2b2a      	cmp	r3, #42	; 0x2a
 800bd64:	d134      	bne.n	800bdd0 <_vfiprintf_r+0x1b0>
 800bd66:	9b03      	ldr	r3, [sp, #12]
 800bd68:	1d1a      	adds	r2, r3, #4
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	9203      	str	r2, [sp, #12]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	bfb8      	it	lt
 800bd72:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd76:	3402      	adds	r4, #2
 800bd78:	9305      	str	r3, [sp, #20]
 800bd7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be50 <_vfiprintf_r+0x230>
 800bd7e:	7821      	ldrb	r1, [r4, #0]
 800bd80:	2203      	movs	r2, #3
 800bd82:	4650      	mov	r0, sl
 800bd84:	f7f4 fa24 	bl	80001d0 <memchr>
 800bd88:	b138      	cbz	r0, 800bd9a <_vfiprintf_r+0x17a>
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	eba0 000a 	sub.w	r0, r0, sl
 800bd90:	2240      	movs	r2, #64	; 0x40
 800bd92:	4082      	lsls	r2, r0
 800bd94:	4313      	orrs	r3, r2
 800bd96:	3401      	adds	r4, #1
 800bd98:	9304      	str	r3, [sp, #16]
 800bd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9e:	4829      	ldr	r0, [pc, #164]	; (800be44 <_vfiprintf_r+0x224>)
 800bda0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bda4:	2206      	movs	r2, #6
 800bda6:	f7f4 fa13 	bl	80001d0 <memchr>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d03f      	beq.n	800be2e <_vfiprintf_r+0x20e>
 800bdae:	4b26      	ldr	r3, [pc, #152]	; (800be48 <_vfiprintf_r+0x228>)
 800bdb0:	bb1b      	cbnz	r3, 800bdfa <_vfiprintf_r+0x1da>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	3307      	adds	r3, #7
 800bdb6:	f023 0307 	bic.w	r3, r3, #7
 800bdba:	3308      	adds	r3, #8
 800bdbc:	9303      	str	r3, [sp, #12]
 800bdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc0:	443b      	add	r3, r7
 800bdc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc4:	e768      	b.n	800bc98 <_vfiprintf_r+0x78>
 800bdc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdca:	460c      	mov	r4, r1
 800bdcc:	2001      	movs	r0, #1
 800bdce:	e7a6      	b.n	800bd1e <_vfiprintf_r+0xfe>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	3401      	adds	r4, #1
 800bdd4:	9305      	str	r3, [sp, #20]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f04f 0c0a 	mov.w	ip, #10
 800bddc:	4620      	mov	r0, r4
 800bdde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde2:	3a30      	subs	r2, #48	; 0x30
 800bde4:	2a09      	cmp	r2, #9
 800bde6:	d903      	bls.n	800bdf0 <_vfiprintf_r+0x1d0>
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d0c6      	beq.n	800bd7a <_vfiprintf_r+0x15a>
 800bdec:	9105      	str	r1, [sp, #20]
 800bdee:	e7c4      	b.n	800bd7a <_vfiprintf_r+0x15a>
 800bdf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e7f0      	b.n	800bddc <_vfiprintf_r+0x1bc>
 800bdfa:	ab03      	add	r3, sp, #12
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	462a      	mov	r2, r5
 800be00:	4b12      	ldr	r3, [pc, #72]	; (800be4c <_vfiprintf_r+0x22c>)
 800be02:	a904      	add	r1, sp, #16
 800be04:	4630      	mov	r0, r6
 800be06:	f7fd fc15 	bl	8009634 <_printf_float>
 800be0a:	4607      	mov	r7, r0
 800be0c:	1c78      	adds	r0, r7, #1
 800be0e:	d1d6      	bne.n	800bdbe <_vfiprintf_r+0x19e>
 800be10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be12:	07d9      	lsls	r1, r3, #31
 800be14:	d405      	bmi.n	800be22 <_vfiprintf_r+0x202>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	059a      	lsls	r2, r3, #22
 800be1a:	d402      	bmi.n	800be22 <_vfiprintf_r+0x202>
 800be1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be1e:	f7fe fa75 	bl	800a30c <__retarget_lock_release_recursive>
 800be22:	89ab      	ldrh	r3, [r5, #12]
 800be24:	065b      	lsls	r3, r3, #25
 800be26:	f53f af1d 	bmi.w	800bc64 <_vfiprintf_r+0x44>
 800be2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be2c:	e71c      	b.n	800bc68 <_vfiprintf_r+0x48>
 800be2e:	ab03      	add	r3, sp, #12
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	462a      	mov	r2, r5
 800be34:	4b05      	ldr	r3, [pc, #20]	; (800be4c <_vfiprintf_r+0x22c>)
 800be36:	a904      	add	r1, sp, #16
 800be38:	4630      	mov	r0, r6
 800be3a:	f7fd fe9f 	bl	8009b7c <_printf_i>
 800be3e:	e7e4      	b.n	800be0a <_vfiprintf_r+0x1ea>
 800be40:	0800c9ec 	.word	0x0800c9ec
 800be44:	0800c9f6 	.word	0x0800c9f6
 800be48:	08009635 	.word	0x08009635
 800be4c:	0800bbfb 	.word	0x0800bbfb
 800be50:	0800c9f2 	.word	0x0800c9f2

0800be54 <__sflush_r>:
 800be54:	898a      	ldrh	r2, [r1, #12]
 800be56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5a:	4605      	mov	r5, r0
 800be5c:	0710      	lsls	r0, r2, #28
 800be5e:	460c      	mov	r4, r1
 800be60:	d458      	bmi.n	800bf14 <__sflush_r+0xc0>
 800be62:	684b      	ldr	r3, [r1, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	dc05      	bgt.n	800be74 <__sflush_r+0x20>
 800be68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dc02      	bgt.n	800be74 <__sflush_r+0x20>
 800be6e:	2000      	movs	r0, #0
 800be70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be76:	2e00      	cmp	r6, #0
 800be78:	d0f9      	beq.n	800be6e <__sflush_r+0x1a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be80:	682f      	ldr	r7, [r5, #0]
 800be82:	6a21      	ldr	r1, [r4, #32]
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	d032      	beq.n	800beee <__sflush_r+0x9a>
 800be88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	075a      	lsls	r2, r3, #29
 800be8e:	d505      	bpl.n	800be9c <__sflush_r+0x48>
 800be90:	6863      	ldr	r3, [r4, #4]
 800be92:	1ac0      	subs	r0, r0, r3
 800be94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be96:	b10b      	cbz	r3, 800be9c <__sflush_r+0x48>
 800be98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be9a:	1ac0      	subs	r0, r0, r3
 800be9c:	2300      	movs	r3, #0
 800be9e:	4602      	mov	r2, r0
 800bea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea2:	6a21      	ldr	r1, [r4, #32]
 800bea4:	4628      	mov	r0, r5
 800bea6:	47b0      	blx	r6
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	89a3      	ldrh	r3, [r4, #12]
 800beac:	d106      	bne.n	800bebc <__sflush_r+0x68>
 800beae:	6829      	ldr	r1, [r5, #0]
 800beb0:	291d      	cmp	r1, #29
 800beb2:	d82b      	bhi.n	800bf0c <__sflush_r+0xb8>
 800beb4:	4a29      	ldr	r2, [pc, #164]	; (800bf5c <__sflush_r+0x108>)
 800beb6:	410a      	asrs	r2, r1
 800beb8:	07d6      	lsls	r6, r2, #31
 800beba:	d427      	bmi.n	800bf0c <__sflush_r+0xb8>
 800bebc:	2200      	movs	r2, #0
 800bebe:	6062      	str	r2, [r4, #4]
 800bec0:	04d9      	lsls	r1, r3, #19
 800bec2:	6922      	ldr	r2, [r4, #16]
 800bec4:	6022      	str	r2, [r4, #0]
 800bec6:	d504      	bpl.n	800bed2 <__sflush_r+0x7e>
 800bec8:	1c42      	adds	r2, r0, #1
 800beca:	d101      	bne.n	800bed0 <__sflush_r+0x7c>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b903      	cbnz	r3, 800bed2 <__sflush_r+0x7e>
 800bed0:	6560      	str	r0, [r4, #84]	; 0x54
 800bed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed4:	602f      	str	r7, [r5, #0]
 800bed6:	2900      	cmp	r1, #0
 800bed8:	d0c9      	beq.n	800be6e <__sflush_r+0x1a>
 800beda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bede:	4299      	cmp	r1, r3
 800bee0:	d002      	beq.n	800bee8 <__sflush_r+0x94>
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7ff f89e 	bl	800b024 <_free_r>
 800bee8:	2000      	movs	r0, #0
 800beea:	6360      	str	r0, [r4, #52]	; 0x34
 800beec:	e7c0      	b.n	800be70 <__sflush_r+0x1c>
 800beee:	2301      	movs	r3, #1
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b0      	blx	r6
 800bef4:	1c41      	adds	r1, r0, #1
 800bef6:	d1c8      	bne.n	800be8a <__sflush_r+0x36>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0c5      	beq.n	800be8a <__sflush_r+0x36>
 800befe:	2b1d      	cmp	r3, #29
 800bf00:	d001      	beq.n	800bf06 <__sflush_r+0xb2>
 800bf02:	2b16      	cmp	r3, #22
 800bf04:	d101      	bne.n	800bf0a <__sflush_r+0xb6>
 800bf06:	602f      	str	r7, [r5, #0]
 800bf08:	e7b1      	b.n	800be6e <__sflush_r+0x1a>
 800bf0a:	89a3      	ldrh	r3, [r4, #12]
 800bf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf10:	81a3      	strh	r3, [r4, #12]
 800bf12:	e7ad      	b.n	800be70 <__sflush_r+0x1c>
 800bf14:	690f      	ldr	r7, [r1, #16]
 800bf16:	2f00      	cmp	r7, #0
 800bf18:	d0a9      	beq.n	800be6e <__sflush_r+0x1a>
 800bf1a:	0793      	lsls	r3, r2, #30
 800bf1c:	680e      	ldr	r6, [r1, #0]
 800bf1e:	bf08      	it	eq
 800bf20:	694b      	ldreq	r3, [r1, #20]
 800bf22:	600f      	str	r7, [r1, #0]
 800bf24:	bf18      	it	ne
 800bf26:	2300      	movne	r3, #0
 800bf28:	eba6 0807 	sub.w	r8, r6, r7
 800bf2c:	608b      	str	r3, [r1, #8]
 800bf2e:	f1b8 0f00 	cmp.w	r8, #0
 800bf32:	dd9c      	ble.n	800be6e <__sflush_r+0x1a>
 800bf34:	6a21      	ldr	r1, [r4, #32]
 800bf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf38:	4643      	mov	r3, r8
 800bf3a:	463a      	mov	r2, r7
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	47b0      	blx	r6
 800bf40:	2800      	cmp	r0, #0
 800bf42:	dc06      	bgt.n	800bf52 <__sflush_r+0xfe>
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e78e      	b.n	800be70 <__sflush_r+0x1c>
 800bf52:	4407      	add	r7, r0
 800bf54:	eba8 0800 	sub.w	r8, r8, r0
 800bf58:	e7e9      	b.n	800bf2e <__sflush_r+0xda>
 800bf5a:	bf00      	nop
 800bf5c:	dfbffffe 	.word	0xdfbffffe

0800bf60 <_fflush_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	690b      	ldr	r3, [r1, #16]
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b913      	cbnz	r3, 800bf70 <_fflush_r+0x10>
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	b118      	cbz	r0, 800bf7a <_fflush_r+0x1a>
 800bf72:	6a03      	ldr	r3, [r0, #32]
 800bf74:	b90b      	cbnz	r3, 800bf7a <_fflush_r+0x1a>
 800bf76:	f7fd ffaf 	bl	8009ed8 <__sinit>
 800bf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0f3      	beq.n	800bf6a <_fflush_r+0xa>
 800bf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf84:	07d0      	lsls	r0, r2, #31
 800bf86:	d404      	bmi.n	800bf92 <_fflush_r+0x32>
 800bf88:	0599      	lsls	r1, r3, #22
 800bf8a:	d402      	bmi.n	800bf92 <_fflush_r+0x32>
 800bf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf8e:	f7fe f9bc 	bl	800a30a <__retarget_lock_acquire_recursive>
 800bf92:	4628      	mov	r0, r5
 800bf94:	4621      	mov	r1, r4
 800bf96:	f7ff ff5d 	bl	800be54 <__sflush_r>
 800bf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf9c:	07da      	lsls	r2, r3, #31
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	d4e4      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d4e1      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfaa:	f7fe f9af 	bl	800a30c <__retarget_lock_release_recursive>
 800bfae:	e7dd      	b.n	800bf6c <_fflush_r+0xc>

0800bfb0 <__swhatbuf_r>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb8:	2900      	cmp	r1, #0
 800bfba:	b096      	sub	sp, #88	; 0x58
 800bfbc:	4615      	mov	r5, r2
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	da0d      	bge.n	800bfde <__swhatbuf_r+0x2e>
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfc8:	f04f 0100 	mov.w	r1, #0
 800bfcc:	bf0c      	ite	eq
 800bfce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bfd2:	2340      	movne	r3, #64	; 0x40
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	6031      	str	r1, [r6, #0]
 800bfd8:	602b      	str	r3, [r5, #0]
 800bfda:	b016      	add	sp, #88	; 0x58
 800bfdc:	bd70      	pop	{r4, r5, r6, pc}
 800bfde:	466a      	mov	r2, sp
 800bfe0:	f000 f862 	bl	800c0a8 <_fstat_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	dbec      	blt.n	800bfc2 <__swhatbuf_r+0x12>
 800bfe8:	9901      	ldr	r1, [sp, #4]
 800bfea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bfee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bff2:	4259      	negs	r1, r3
 800bff4:	4159      	adcs	r1, r3
 800bff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bffa:	e7eb      	b.n	800bfd4 <__swhatbuf_r+0x24>

0800bffc <__smakebuf_r>:
 800bffc:	898b      	ldrh	r3, [r1, #12]
 800bffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c000:	079d      	lsls	r5, r3, #30
 800c002:	4606      	mov	r6, r0
 800c004:	460c      	mov	r4, r1
 800c006:	d507      	bpl.n	800c018 <__smakebuf_r+0x1c>
 800c008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	2301      	movs	r3, #1
 800c012:	6163      	str	r3, [r4, #20]
 800c014:	b002      	add	sp, #8
 800c016:	bd70      	pop	{r4, r5, r6, pc}
 800c018:	ab01      	add	r3, sp, #4
 800c01a:	466a      	mov	r2, sp
 800c01c:	f7ff ffc8 	bl	800bfb0 <__swhatbuf_r>
 800c020:	9900      	ldr	r1, [sp, #0]
 800c022:	4605      	mov	r5, r0
 800c024:	4630      	mov	r0, r6
 800c026:	f7ff f871 	bl	800b10c <_malloc_r>
 800c02a:	b948      	cbnz	r0, 800c040 <__smakebuf_r+0x44>
 800c02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c030:	059a      	lsls	r2, r3, #22
 800c032:	d4ef      	bmi.n	800c014 <__smakebuf_r+0x18>
 800c034:	f023 0303 	bic.w	r3, r3, #3
 800c038:	f043 0302 	orr.w	r3, r3, #2
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	e7e3      	b.n	800c008 <__smakebuf_r+0xc>
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	6020      	str	r0, [r4, #0]
 800c044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c048:	81a3      	strh	r3, [r4, #12]
 800c04a:	9b00      	ldr	r3, [sp, #0]
 800c04c:	6163      	str	r3, [r4, #20]
 800c04e:	9b01      	ldr	r3, [sp, #4]
 800c050:	6120      	str	r0, [r4, #16]
 800c052:	b15b      	cbz	r3, 800c06c <__smakebuf_r+0x70>
 800c054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c058:	4630      	mov	r0, r6
 800c05a:	f000 f837 	bl	800c0cc <_isatty_r>
 800c05e:	b128      	cbz	r0, 800c06c <__smakebuf_r+0x70>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f023 0303 	bic.w	r3, r3, #3
 800c066:	f043 0301 	orr.w	r3, r3, #1
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	431d      	orrs	r5, r3
 800c070:	81a5      	strh	r5, [r4, #12]
 800c072:	e7cf      	b.n	800c014 <__smakebuf_r+0x18>

0800c074 <memmove>:
 800c074:	4288      	cmp	r0, r1
 800c076:	b510      	push	{r4, lr}
 800c078:	eb01 0402 	add.w	r4, r1, r2
 800c07c:	d902      	bls.n	800c084 <memmove+0x10>
 800c07e:	4284      	cmp	r4, r0
 800c080:	4623      	mov	r3, r4
 800c082:	d807      	bhi.n	800c094 <memmove+0x20>
 800c084:	1e43      	subs	r3, r0, #1
 800c086:	42a1      	cmp	r1, r4
 800c088:	d008      	beq.n	800c09c <memmove+0x28>
 800c08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c092:	e7f8      	b.n	800c086 <memmove+0x12>
 800c094:	4402      	add	r2, r0
 800c096:	4601      	mov	r1, r0
 800c098:	428a      	cmp	r2, r1
 800c09a:	d100      	bne.n	800c09e <memmove+0x2a>
 800c09c:	bd10      	pop	{r4, pc}
 800c09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0a6:	e7f7      	b.n	800c098 <memmove+0x24>

0800c0a8 <_fstat_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	; (800c0c8 <_fstat_r+0x20>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f6 fede 	bl	8002e76 <_fstat>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_fstat_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_fstat_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20000650 	.word	0x20000650

0800c0cc <_isatty_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	4d06      	ldr	r5, [pc, #24]	; (800c0e8 <_isatty_r+0x1c>)
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	602b      	str	r3, [r5, #0]
 800c0d8:	f7f6 fedd 	bl	8002e96 <_isatty>
 800c0dc:	1c43      	adds	r3, r0, #1
 800c0de:	d102      	bne.n	800c0e6 <_isatty_r+0x1a>
 800c0e0:	682b      	ldr	r3, [r5, #0]
 800c0e2:	b103      	cbz	r3, 800c0e6 <_isatty_r+0x1a>
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	bd38      	pop	{r3, r4, r5, pc}
 800c0e8:	20000650 	.word	0x20000650

0800c0ec <_sbrk_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d06      	ldr	r5, [pc, #24]	; (800c108 <_sbrk_r+0x1c>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	f7f6 fee6 	bl	8002ec8 <_sbrk>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_sbrk_r+0x1a>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_sbrk_r+0x1a>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20000650 	.word	0x20000650

0800c10c <__assert_func>:
 800c10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c10e:	4614      	mov	r4, r2
 800c110:	461a      	mov	r2, r3
 800c112:	4b09      	ldr	r3, [pc, #36]	; (800c138 <__assert_func+0x2c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4605      	mov	r5, r0
 800c118:	68d8      	ldr	r0, [r3, #12]
 800c11a:	b14c      	cbz	r4, 800c130 <__assert_func+0x24>
 800c11c:	4b07      	ldr	r3, [pc, #28]	; (800c13c <__assert_func+0x30>)
 800c11e:	9100      	str	r1, [sp, #0]
 800c120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c124:	4906      	ldr	r1, [pc, #24]	; (800c140 <__assert_func+0x34>)
 800c126:	462b      	mov	r3, r5
 800c128:	f000 f872 	bl	800c210 <fiprintf>
 800c12c:	f000 f882 	bl	800c234 <abort>
 800c130:	4b04      	ldr	r3, [pc, #16]	; (800c144 <__assert_func+0x38>)
 800c132:	461c      	mov	r4, r3
 800c134:	e7f3      	b.n	800c11e <__assert_func+0x12>
 800c136:	bf00      	nop
 800c138:	20000080 	.word	0x20000080
 800c13c:	0800ca07 	.word	0x0800ca07
 800c140:	0800ca14 	.word	0x0800ca14
 800c144:	0800ca42 	.word	0x0800ca42

0800c148 <_calloc_r>:
 800c148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c14a:	fba1 2402 	umull	r2, r4, r1, r2
 800c14e:	b94c      	cbnz	r4, 800c164 <_calloc_r+0x1c>
 800c150:	4611      	mov	r1, r2
 800c152:	9201      	str	r2, [sp, #4]
 800c154:	f7fe ffda 	bl	800b10c <_malloc_r>
 800c158:	9a01      	ldr	r2, [sp, #4]
 800c15a:	4605      	mov	r5, r0
 800c15c:	b930      	cbnz	r0, 800c16c <_calloc_r+0x24>
 800c15e:	4628      	mov	r0, r5
 800c160:	b003      	add	sp, #12
 800c162:	bd30      	pop	{r4, r5, pc}
 800c164:	220c      	movs	r2, #12
 800c166:	6002      	str	r2, [r0, #0]
 800c168:	2500      	movs	r5, #0
 800c16a:	e7f8      	b.n	800c15e <_calloc_r+0x16>
 800c16c:	4621      	mov	r1, r4
 800c16e:	f7fe f84f 	bl	800a210 <memset>
 800c172:	e7f4      	b.n	800c15e <_calloc_r+0x16>

0800c174 <__ascii_mbtowc>:
 800c174:	b082      	sub	sp, #8
 800c176:	b901      	cbnz	r1, 800c17a <__ascii_mbtowc+0x6>
 800c178:	a901      	add	r1, sp, #4
 800c17a:	b142      	cbz	r2, 800c18e <__ascii_mbtowc+0x1a>
 800c17c:	b14b      	cbz	r3, 800c192 <__ascii_mbtowc+0x1e>
 800c17e:	7813      	ldrb	r3, [r2, #0]
 800c180:	600b      	str	r3, [r1, #0]
 800c182:	7812      	ldrb	r2, [r2, #0]
 800c184:	1e10      	subs	r0, r2, #0
 800c186:	bf18      	it	ne
 800c188:	2001      	movne	r0, #1
 800c18a:	b002      	add	sp, #8
 800c18c:	4770      	bx	lr
 800c18e:	4610      	mov	r0, r2
 800c190:	e7fb      	b.n	800c18a <__ascii_mbtowc+0x16>
 800c192:	f06f 0001 	mvn.w	r0, #1
 800c196:	e7f8      	b.n	800c18a <__ascii_mbtowc+0x16>

0800c198 <_realloc_r>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	4680      	mov	r8, r0
 800c19e:	4614      	mov	r4, r2
 800c1a0:	460e      	mov	r6, r1
 800c1a2:	b921      	cbnz	r1, 800c1ae <_realloc_r+0x16>
 800c1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	f7fe bfaf 	b.w	800b10c <_malloc_r>
 800c1ae:	b92a      	cbnz	r2, 800c1bc <_realloc_r+0x24>
 800c1b0:	f7fe ff38 	bl	800b024 <_free_r>
 800c1b4:	4625      	mov	r5, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	f000 f841 	bl	800c242 <_malloc_usable_size_r>
 800c1c0:	4284      	cmp	r4, r0
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	d802      	bhi.n	800c1cc <_realloc_r+0x34>
 800c1c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1ca:	d812      	bhi.n	800c1f2 <_realloc_r+0x5a>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	f7fe ff9c 	bl	800b10c <_malloc_r>
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d0ed      	beq.n	800c1b6 <_realloc_r+0x1e>
 800c1da:	42bc      	cmp	r4, r7
 800c1dc:	4622      	mov	r2, r4
 800c1de:	4631      	mov	r1, r6
 800c1e0:	bf28      	it	cs
 800c1e2:	463a      	movcs	r2, r7
 800c1e4:	f7fe f893 	bl	800a30e <memcpy>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	f7fe ff1a 	bl	800b024 <_free_r>
 800c1f0:	e7e1      	b.n	800c1b6 <_realloc_r+0x1e>
 800c1f2:	4635      	mov	r5, r6
 800c1f4:	e7df      	b.n	800c1b6 <_realloc_r+0x1e>

0800c1f6 <__ascii_wctomb>:
 800c1f6:	b149      	cbz	r1, 800c20c <__ascii_wctomb+0x16>
 800c1f8:	2aff      	cmp	r2, #255	; 0xff
 800c1fa:	bf85      	ittet	hi
 800c1fc:	238a      	movhi	r3, #138	; 0x8a
 800c1fe:	6003      	strhi	r3, [r0, #0]
 800c200:	700a      	strbls	r2, [r1, #0]
 800c202:	f04f 30ff 	movhi.w	r0, #4294967295
 800c206:	bf98      	it	ls
 800c208:	2001      	movls	r0, #1
 800c20a:	4770      	bx	lr
 800c20c:	4608      	mov	r0, r1
 800c20e:	4770      	bx	lr

0800c210 <fiprintf>:
 800c210:	b40e      	push	{r1, r2, r3}
 800c212:	b503      	push	{r0, r1, lr}
 800c214:	4601      	mov	r1, r0
 800c216:	ab03      	add	r3, sp, #12
 800c218:	4805      	ldr	r0, [pc, #20]	; (800c230 <fiprintf+0x20>)
 800c21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21e:	6800      	ldr	r0, [r0, #0]
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	f7ff fcfd 	bl	800bc20 <_vfiprintf_r>
 800c226:	b002      	add	sp, #8
 800c228:	f85d eb04 	ldr.w	lr, [sp], #4
 800c22c:	b003      	add	sp, #12
 800c22e:	4770      	bx	lr
 800c230:	20000080 	.word	0x20000080

0800c234 <abort>:
 800c234:	b508      	push	{r3, lr}
 800c236:	2006      	movs	r0, #6
 800c238:	f000 f834 	bl	800c2a4 <raise>
 800c23c:	2001      	movs	r0, #1
 800c23e:	f7f6 fdcb 	bl	8002dd8 <_exit>

0800c242 <_malloc_usable_size_r>:
 800c242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c246:	1f18      	subs	r0, r3, #4
 800c248:	2b00      	cmp	r3, #0
 800c24a:	bfbc      	itt	lt
 800c24c:	580b      	ldrlt	r3, [r1, r0]
 800c24e:	18c0      	addlt	r0, r0, r3
 800c250:	4770      	bx	lr

0800c252 <_raise_r>:
 800c252:	291f      	cmp	r1, #31
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4604      	mov	r4, r0
 800c258:	460d      	mov	r5, r1
 800c25a:	d904      	bls.n	800c266 <_raise_r+0x14>
 800c25c:	2316      	movs	r3, #22
 800c25e:	6003      	str	r3, [r0, #0]
 800c260:	f04f 30ff 	mov.w	r0, #4294967295
 800c264:	bd38      	pop	{r3, r4, r5, pc}
 800c266:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c268:	b112      	cbz	r2, 800c270 <_raise_r+0x1e>
 800c26a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c26e:	b94b      	cbnz	r3, 800c284 <_raise_r+0x32>
 800c270:	4620      	mov	r0, r4
 800c272:	f000 f831 	bl	800c2d8 <_getpid_r>
 800c276:	462a      	mov	r2, r5
 800c278:	4601      	mov	r1, r0
 800c27a:	4620      	mov	r0, r4
 800c27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c280:	f000 b818 	b.w	800c2b4 <_kill_r>
 800c284:	2b01      	cmp	r3, #1
 800c286:	d00a      	beq.n	800c29e <_raise_r+0x4c>
 800c288:	1c59      	adds	r1, r3, #1
 800c28a:	d103      	bne.n	800c294 <_raise_r+0x42>
 800c28c:	2316      	movs	r3, #22
 800c28e:	6003      	str	r3, [r0, #0]
 800c290:	2001      	movs	r0, #1
 800c292:	e7e7      	b.n	800c264 <_raise_r+0x12>
 800c294:	2400      	movs	r4, #0
 800c296:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c29a:	4628      	mov	r0, r5
 800c29c:	4798      	blx	r3
 800c29e:	2000      	movs	r0, #0
 800c2a0:	e7e0      	b.n	800c264 <_raise_r+0x12>
	...

0800c2a4 <raise>:
 800c2a4:	4b02      	ldr	r3, [pc, #8]	; (800c2b0 <raise+0xc>)
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	f7ff bfd2 	b.w	800c252 <_raise_r>
 800c2ae:	bf00      	nop
 800c2b0:	20000080 	.word	0x20000080

0800c2b4 <_kill_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4d07      	ldr	r5, [pc, #28]	; (800c2d4 <_kill_r+0x20>)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	4608      	mov	r0, r1
 800c2be:	4611      	mov	r1, r2
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	f7f6 fd79 	bl	8002db8 <_kill>
 800c2c6:	1c43      	adds	r3, r0, #1
 800c2c8:	d102      	bne.n	800c2d0 <_kill_r+0x1c>
 800c2ca:	682b      	ldr	r3, [r5, #0]
 800c2cc:	b103      	cbz	r3, 800c2d0 <_kill_r+0x1c>
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	bd38      	pop	{r3, r4, r5, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20000650 	.word	0x20000650

0800c2d8 <_getpid_r>:
 800c2d8:	f7f6 bd66 	b.w	8002da8 <_getpid>
 800c2dc:	0000      	movs	r0, r0
	...

0800c2e0 <floor>:
 800c2e0:	ec51 0b10 	vmov	r0, r1, d0
 800c2e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c2f0:	2e13      	cmp	r6, #19
 800c2f2:	ee10 5a10 	vmov	r5, s0
 800c2f6:	ee10 8a10 	vmov	r8, s0
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	dc31      	bgt.n	800c362 <floor+0x82>
 800c2fe:	2e00      	cmp	r6, #0
 800c300:	da14      	bge.n	800c32c <floor+0x4c>
 800c302:	a333      	add	r3, pc, #204	; (adr r3, 800c3d0 <floor+0xf0>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	f7f3 ffc0 	bl	800028c <__adddf3>
 800c30c:	2200      	movs	r2, #0
 800c30e:	2300      	movs	r3, #0
 800c310:	f7f4 fc02 	bl	8000b18 <__aeabi_dcmpgt>
 800c314:	b138      	cbz	r0, 800c326 <floor+0x46>
 800c316:	2c00      	cmp	r4, #0
 800c318:	da53      	bge.n	800c3c2 <floor+0xe2>
 800c31a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c31e:	4325      	orrs	r5, r4
 800c320:	d052      	beq.n	800c3c8 <floor+0xe8>
 800c322:	4c2d      	ldr	r4, [pc, #180]	; (800c3d8 <floor+0xf8>)
 800c324:	2500      	movs	r5, #0
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	e024      	b.n	800c376 <floor+0x96>
 800c32c:	4f2b      	ldr	r7, [pc, #172]	; (800c3dc <floor+0xfc>)
 800c32e:	4137      	asrs	r7, r6
 800c330:	ea01 0307 	and.w	r3, r1, r7
 800c334:	4303      	orrs	r3, r0
 800c336:	d01e      	beq.n	800c376 <floor+0x96>
 800c338:	a325      	add	r3, pc, #148	; (adr r3, 800c3d0 <floor+0xf0>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f7f3 ffa5 	bl	800028c <__adddf3>
 800c342:	2200      	movs	r2, #0
 800c344:	2300      	movs	r3, #0
 800c346:	f7f4 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d0eb      	beq.n	800c326 <floor+0x46>
 800c34e:	2c00      	cmp	r4, #0
 800c350:	bfbe      	ittt	lt
 800c352:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c356:	4133      	asrlt	r3, r6
 800c358:	18e4      	addlt	r4, r4, r3
 800c35a:	ea24 0407 	bic.w	r4, r4, r7
 800c35e:	2500      	movs	r5, #0
 800c360:	e7e1      	b.n	800c326 <floor+0x46>
 800c362:	2e33      	cmp	r6, #51	; 0x33
 800c364:	dd0b      	ble.n	800c37e <floor+0x9e>
 800c366:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c36a:	d104      	bne.n	800c376 <floor+0x96>
 800c36c:	ee10 2a10 	vmov	r2, s0
 800c370:	460b      	mov	r3, r1
 800c372:	f7f3 ff8b 	bl	800028c <__adddf3>
 800c376:	ec41 0b10 	vmov	d0, r0, r1
 800c37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c37e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c382:	f04f 37ff 	mov.w	r7, #4294967295
 800c386:	40df      	lsrs	r7, r3
 800c388:	4238      	tst	r0, r7
 800c38a:	d0f4      	beq.n	800c376 <floor+0x96>
 800c38c:	a310      	add	r3, pc, #64	; (adr r3, 800c3d0 <floor+0xf0>)
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f7f3 ff7b 	bl	800028c <__adddf3>
 800c396:	2200      	movs	r2, #0
 800c398:	2300      	movs	r3, #0
 800c39a:	f7f4 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d0c1      	beq.n	800c326 <floor+0x46>
 800c3a2:	2c00      	cmp	r4, #0
 800c3a4:	da0a      	bge.n	800c3bc <floor+0xdc>
 800c3a6:	2e14      	cmp	r6, #20
 800c3a8:	d101      	bne.n	800c3ae <floor+0xce>
 800c3aa:	3401      	adds	r4, #1
 800c3ac:	e006      	b.n	800c3bc <floor+0xdc>
 800c3ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	40b3      	lsls	r3, r6
 800c3b6:	441d      	add	r5, r3
 800c3b8:	45a8      	cmp	r8, r5
 800c3ba:	d8f6      	bhi.n	800c3aa <floor+0xca>
 800c3bc:	ea25 0507 	bic.w	r5, r5, r7
 800c3c0:	e7b1      	b.n	800c326 <floor+0x46>
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	462c      	mov	r4, r5
 800c3c6:	e7ae      	b.n	800c326 <floor+0x46>
 800c3c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c3cc:	e7ab      	b.n	800c326 <floor+0x46>
 800c3ce:	bf00      	nop
 800c3d0:	8800759c 	.word	0x8800759c
 800c3d4:	7e37e43c 	.word	0x7e37e43c
 800c3d8:	bff00000 	.word	0xbff00000
 800c3dc:	000fffff 	.word	0x000fffff

0800c3e0 <_init>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	bf00      	nop
 800c3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3e6:	bc08      	pop	{r3}
 800c3e8:	469e      	mov	lr, r3
 800c3ea:	4770      	bx	lr

0800c3ec <_fini>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	bf00      	nop
 800c3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3f2:	bc08      	pop	{r3}
 800c3f4:	469e      	mov	lr, r3
 800c3f6:	4770      	bx	lr
